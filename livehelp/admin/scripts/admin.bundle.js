/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _getIterator2 = __webpack_require__(1);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	var _iterator4 = __webpack_require__(54);

	var _iterator5 = _interopRequireDefault(_iterator4);

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var _ = __webpack_require__(63);

	//require('jquery.ui.widget');

	var buzz = __webpack_require__(64);
	var director = __webpack_require__(65);
	var moment = __webpack_require__(66);
	var uuid = __webpack_require__(68);

	//require('./jquery.zeroclipboard.js');

	__webpack_require__(92);
	__webpack_require__(93);
	__webpack_require__(94);
	__webpack_require__(95);
	__webpack_require__(96);
	__webpack_require__(98);
	__webpack_require__(99);
	__webpack_require__(100);
	__webpack_require__(101);
	__webpack_require__(102);
	__webpack_require__(103);
	__webpack_require__(104);
	__webpack_require__(105);
	__webpack_require__(107);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(110);
	__webpack_require__(111);
	__webpack_require__(112);
	__webpack_require__(113);
	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);

	// Plugins
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(149);

	// Components
	__webpack_require__(150);
	__webpack_require__(397);
	__webpack_require__(398);
	__webpack_require__(400);
	__webpack_require__(401);

	var api = __webpack_require__(120);
	var core = __webpack_require__(121);
	var chats = __webpack_require__(122);
	var visitors = __webpack_require__(402);

	// JSON Web Service Access Details
	var shortcuts = true;
	var autoSignIn = true;
	var saveExpanded = true;

	// jQuery object for-in iterator
	$.prototype[_iterator5.default] = Array.prototype[_iterator5.default];

	// Initialise Storage
	var storage = new _storage2.default();

	// Encryption
	var MD5 = __webpack_require__(146);

	// Electron App
	if (false) {
	  // eslint-disable-line no-undef
	  require('../electron.js');
	}

	$.preloadImages = function () {
	  for (var i = 0; i < arguments.length; i++) {
	    $('<img>').attr('src', arguments[i]);
	  }
	};

	var chatResponsesOpen = false;

	function updateTypingStatus(currentlyTyping) {
	  var chats = $('.chat-stack .chat.focussed');
	  var id = chats.data('id');
	  var operator = chats.data('operator');
	  var typing;

	  var chat = _.find(core.activechats, function (chat) {
	    return chat.id === id && chat.type == operator;
	  });

	  $(document).trigger('LiveHelp.UpdateTyping', { id: id, operator: operator, typing: currentlyTyping });

	  if (chat !== undefined) {
	    if (currentlyTyping) {
	      switch (chat.typing) {
	        case 0:
	          // None
	          typing = 2;
	          break;
	        case 1:
	          // Guest Only
	          typing = 3;
	          break;
	        case 2:
	          // Operator Only
	          typing = 2;
	          break;
	        case 3:
	          // Both
	          typing = 3;
	          break;
	      }
	    } else {
	      switch (chat.typing) {
	        case 0:
	          // None
	          typing = 0;
	          break;
	        case 1:
	          // Guest Only
	          typing = 1;
	          break;
	        case 2:
	          // Operator Only
	          typing = 0;
	          break;
	        case 3:
	          // Both
	          typing = 1;
	          break;
	      }
	    }

	    chat.typing = typing;
	    return false;
	  }
	}

	$(document).on('LiveHelp.UpdateTags', function (event, response) {
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = (0, _getIterator3.default)(response.Tags), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var tag = _step.value;

	      tag = tag.toLowerCase();
	      if ($.inArray(tag, core.tags) === -1) {
	        core.tags.push(tag);
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	});

	var initialiseRoute = function initialiseRoute() {
	  var route = window.location.hash.slice(2);
	  if (route.length > 0) {
	    storage.set('route', route);
	  } else {
	    storage.set('route', '');
	  }
	};

	// Document Ready
	$(document).ready(function () {

	  // Initialise
	  core.initialiseDocumentReady();

	  // Chat Sections
	  chats.sections = {
	    chatting: { element: $('.chatting.list'), height: 44 },
	    other: { element: $('.other-chatting.list'), height: 44 },
	    pending: { element: $('.pending.list'), height: 44 },
	    operators: { element: $('.operators.list'), height: 34 },
	    none: { height: 0, enabled: false }
	  };

	  // Progress
	  NProgress.configure({ showSpinner: false }); // eslint-disable-line no-undef

	  // jscs:disable validateQuoteMarks
	  // jscs:disable maximumLineLength

	  var animateLogo = false;
	  if ($('#swiffycontainer').length) {
	    var swiffyobject = { as: true, frameRate: 16, frameCount: 50, backgroundColor: -657931, frameSize: { ymin: 0, xmin: 0, ymax: 5000, xmax: 5000 }, fileSize: 1729, v: "7.4.1", internedStrings: ["::::::6Y:", "::::::4K:", "::::::8B:", "::::::1E:", "::::::M:", "::::::C:", "::::::2T:", "::::::5O:", "::::::9G:", "2836d::2836d92y19y", "2836d::2836d92y70x", "2836d::2836d92y82x", "880p::880p63x41s", "2551C::2551C55i33d", "2836d::2836d92y95x", "::::::::", "2551C::2551C56i33d", "2836d::2836d92y58x", "2836d::2836d92y07y", "2836d::2836d92y49x"], version: 17, tags: [{ frames: [], scenes: [{ offset: 0, name: "Scene 1" }], type: 23 }, { paths: [{ data: ["::86Nb16F:51J35db35D35d35D51jb:16f35d51jb35d35d51j35db50d:03h2Wb1m6H8x3Tb58c58C22d39Hbm3Jm2Ub:16F35D51Jb35D35D51J35Dc"], fill: 0 }], flat: true, bounds: "86N86N972b972b", fillstyles: [{ color: -16711681, type: 1 }], id: 1, type: 1 }, { depth: 1, id: 1, type: 3, matrix: "0731F::0731F675c994c", clip: 3 }, { paths: [{ data: ["::99Kb4X:67D4ib5U1i81C7yb6P6p7Y81cb4I3v4I67db:4x4i67db1i5u7y81cb6p6p81c7yb3v4i67d4ib4x:65d4IbpF3dFb7f:5t7ca3r8ebO3HW4QbO1Rt0Vb6n3P5v65Cb1h9T1h35Db:4X4I67Db2I5U7Y81Cb6P6P82C7Yb2V4I66D4Ic"], fill: 0 }], flat: true, bounds: "99K99K98w98w", fillstyles: [{ color: -10304328, type: 1 }], id: 2, type: 1 }, { depth: 2, id: 2, colortransform: "#0", type: 3, matrix: "0239F313f313F0239F720c816c" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "7017C::7017C518c469c" }, { depth: 2, replace: true, colortransform: "#1", type: 3, matrix: "998N933r933R998N342c833b" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "650Q52r52R650Q081c112c" }, { depth: 2, replace: true, colortransform: "#2", type: 3, matrix: "855o960c960C855o61z79x" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "24Z565C565c24Z773b930b" }, { depth: 2, replace: true, colortransform: "#15", type: 3, matrix: "996x745D745d996x57w38x" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "257h::257h83z95z" }, { depth: 2, replace: true, type: 3, matrix: "538v108C108c538v21x58x" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "723n::723n92y85y" }, { depth: 2, replace: true, type: 3, matrix: "515t11S11s515t69x80x" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "880p::880p53y44y" }, { depth: 2, replace: true, type: 3, matrix: "931r05K05k931r04y96x" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "2836d::2836d92y05t" }, { depth: 2, replace: true, type: 3, matrix: "793q94C94c793q32y08y" }, { type: 2 }, { depth: 2, replace: true, type: 3, matrix: "107q0C0c107q49y15y" }, { type: 2 }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y17y" }, { type: 2 }, { depth: 4, id: 1, type: 3, matrix: "0731F::0731F649c538c", clip: 7 }, { paths: [{ data: [":996b:b09F:66K6wb38E7v52I42fb15D14d42F52ib6W57e6W66kb:10f6w66kb7v38e42f53ib14d14d52i42fb57e5w66k5wb10f:63k4Wb9cQ0kQb7p:08e4ib2x7f58d4nb7C6T6E33Db9C53D0e52Eb63c05D60e10Ib3t22E3t88Jb:09F5W66Kb8V38E42F52Ib15D15D53I42Fb56E6W66K6Wc"], fill: 0 }], flat: true, bounds: "::992e992e", fillstyles: [{ color: -11167796, type: 1 }], id: 3, type: 1 }, { frameCount: 1, id: 4, type: 7, tags: [{ depth: 1, id: 3, type: 3, matrix: 0 }, { type: 2 }] }, { depth: 5, blendmode: 1, id: 4, colortransform: "#0", type: 3, matrix: "2888F156c156C2888F728c048c", ratio: 10 }, { type: 2 }, { depth: 4, replace: true, type: 3, matrix: "7017C::7017C450c979b" }, { depth: 5, replace: true, colortransform: "#1", type: 3, matrix: "4910D727g727G4910D704b43j" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "2836d::2836d92y25u" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y37z" }, { depth: 4, replace: true, type: 3, matrix: "650Q52r52R650Q030c809b" }, { depth: 5, replace: true, colortransform: "#2", type: 3, matrix: "2772C94o94O2772C72k50e" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "2836d::2836d92y27v" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y739b" }, { depth: 4, replace: true, type: 3, matrix: "24Z565C565c24Z723b81z" }, { depth: 5, replace: true, colortransform: "#15", type: 3, matrix: "9191B05S05s9191B59e93e" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "2836d::2836d92y10w" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y822b" }, { depth: 4, replace: true, type: 3, matrix: "257h::257h38z24y" }, { depth: 5, replace: true, type: 3, matrix: "0210C47L47l0210C02g16g" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "2836d::2836d92y75w" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y887b" }, { depth: 4, replace: true, type: 3, matrix: "723n::723n58y91x" }, { depth: 5, replace: true, type: 3, matrix: "1046C65G65g1046C11h19h" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "2836d::2836d92y21x" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y933b" }, { depth: 4, replace: true, type: 3, matrix: "880p::880p08y82x" }, { depth: 5, replace: true, type: 3, matrix: "1703C43D43d1703C94h98h" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#19" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y961b" }, { depth: 4, replace: true, type: 3, matrix: "#19" }, { depth: 5, replace: true, type: 3, matrix: "2174C7O7o2174C58i47i" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#17" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y970b" }, { depth: 4, replace: true, type: 3, matrix: "#17" }, { depth: 5, replace: true, type: 3, matrix: "2458CLl2458C94i71i" }, { type: 2 }, { depth: 5, blendmode: 0, replace: true, type: 3, matrix: "2551C::2551C04j77i" }, { type: 2 }, { depth: 8, id: 1, type: 3, matrix: "0731F::0731F584c481c", clip: 11 }, { paths: [{ data: [":996b:b10F:66K5wb38E8v53I42fb14D15d42F52ib5W57e5W66kb:10f5w66kb8v38e42f53ib15d14d53i42fb56e5w66k5wb08f:63k4Wb9cQ0kQb7p:07e4ib2x7f58d4nb7C6T6E33Db8C53D1e52Eb62c05D59e10Ib3t22E3t88Jb:09F5W66Kb8V37E42F52Ib15D14D52I42Fb57E5W66K5Wc"], fill: 0 }], flat: true, bounds: "::991e991e", fillstyles: [{ color: -437981450, type: 1 }], id: 5, type: 1 }, { frameCount: 1, id: 6, type: 7, tags: [{ depth: 1, id: 5, type: 3, matrix: 0 }, { type: 2 }] }, { depth: 9, blendmode: 1, id: 6, colortransform: "#0", type: 3, matrix: "2888F156c156C2888F659c995b", ratio: 20 }, { type: 2 }, { depth: 8, replace: true, type: 3, matrix: "7017C::7017C397c930b" }, { depth: 9, replace: true, colortransform: "::::::8L:", type: 3, matrix: "5200D618g618G5200D55z27j" }, { type: 2 }, { depth: 8, replace: true, type: 3, matrix: "650Q52r52R650Q966b29z" }, { depth: 9, replace: true, colortransform: "::::::2E:", type: 3, matrix: "3267C70o70O3267C53k21d" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#10" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y982b" }, { depth: 4, replace: true, type: 3, matrix: "#10" }, { depth: 5, replace: true, type: 3, matrix: "2551C::2551C04j89i" }, { depth: 8, replace: true, type: 3, matrix: "24Z565C565c24Z93z34x" }, { depth: 9, replace: true, colortransform: "::::::Z:", type: 3, matrix: "9751B75R75r9751B63e92c" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#11" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y994b" }, { depth: 4, replace: true, type: 3, matrix: "#11" }, { depth: 5, replace: true, type: 3, matrix: "2551C::2551C04j01j" }, { depth: 8, replace: true, type: 3, matrix: "257h::257h96y94u" }, { depth: 9, replace: true, type: 3, matrix: "0598C33L33l0598C89f31d" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#14" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y007c" }, { depth: 4, replace: true, type: 3, matrix: "#14" }, { depth: 5, replace: true, type: 3, matrix: "2551C::2551C04j14j" }, { depth: 8, replace: true, type: 3, matrix: "723n::723n05y98t" }, { depth: 9, replace: true, type: 3, matrix: "1295C59G59g1295C87g67d" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#18" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y019c" }, { depth: 4, replace: true, type: 3, matrix: "#18" }, { depth: 5, replace: true, type: 3, matrix: "2551C::2551C04j26j" }, { depth: 8, replace: true, type: 3, matrix: "880p::880p78x66t" }, { depth: 9, replace: true, type: 3, matrix: "1841C31C31c1841C68h96d" }, { type: 2 }, { depth: 1, replace: true, type: 3, matrix: "#9" }, { depth: 2, replace: true, type: 3, matrix: "880p::880p53y031c" }, { depth: 4, replace: true, type: 3, matrix: "#9" }, { depth: 5, replace: true, type: 3, matrix: "2551C::2551C04j38j" }, { depth: 8, replace: true, type: 3, matrix: "#9" }, { depth: 9, replace: true, type: 3, matrix: "2236C8O8o2236C16i30e" }, { type: 2 }, { depth: 9, replace: true, type: 3, matrix: "2473CLl2473C49i39e" }, { type: 2 }, { depth: 9, replace: true, type: 3, matrix: "2551C::2551C56i46e" }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { type: 2 }, { depth: 1, replace: true, colortransform: "#5", type: 3 }, { depth: 2, replace: true, colortransform: "#5", type: 3, matrix: "880p::880p52y020c" }, { depth: 4, replace: true, colortransform: "#5", type: 3 }, { depth: 5, replace: true, colortransform: "#5", type: 3, matrix: "2551C::2551C04j32j" }, { depth: 8, replace: true, colortransform: "#5", type: 3 }, { depth: 9, replace: true, colortransform: "::::::9B:", type: 3, matrix: "2551C::2551C56i45e" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#4", type: 3 }, { depth: 2, replace: true, colortransform: "#4", type: 3, matrix: "880p::880p49y983b" }, { depth: 4, replace: true, colortransform: "#4", type: 3 }, { depth: 5, replace: true, colortransform: "#4", type: 3, matrix: "2551C::2551C01j12j" }, { depth: 8, replace: true, colortransform: "#4", type: 3 }, { depth: 9, replace: true, colortransform: "::::::7C:", type: 3, matrix: "2551C::2551C56i41e" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#2", type: 3 }, { depth: 2, replace: true, colortransform: "#2", type: 3, matrix: "880p::880p43y913b" }, { depth: 4, replace: true, colortransform: "#2", type: 3 }, { depth: 5, replace: true, colortransform: "#2", type: 3, matrix: "2551C::2551C99i73i" }, { depth: 8, replace: true, colortransform: "#2", type: 3 }, { depth: 9, replace: true, colortransform: "::::::9D:", type: 3, matrix: "2551C::2551C56i33e" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#3", type: 3 }, { depth: 2, replace: true, colortransform: "#3", type: 3, matrix: "880p::880p34y798b" }, { depth: 4, replace: true, colortransform: "#3", type: 3 }, { depth: 5, replace: true, colortransform: "#3", type: 3, matrix: "2551C::2551C94i10i" }, { depth: 8, replace: true, colortransform: "#3", type: 3 }, { depth: 9, replace: true, colortransform: "::::::8F:", type: 3, matrix: "2551C::2551C56i22e" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#8", type: 3 }, { depth: 2, replace: true, colortransform: "#8", type: 3, matrix: "880p::880p19y26z" }, { depth: 4, replace: true, colortransform: "#8", type: 3 }, { depth: 5, replace: true, colortransform: "#8", type: 3, matrix: "2551C::2551C86i13h" }, { depth: 8, replace: true, colortransform: "#8", type: 3 }, { depth: 9, replace: true, colortransform: "::::::1I:", type: 3, matrix: "2551C::2551C56i05e" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#1", type: 3 }, { depth: 2, replace: true, colortransform: "#1", type: 3, matrix: "880p::880p00y92w" }, { depth: 4, replace: true, colortransform: "#1", type: 3 }, { depth: 5, replace: true, colortransform: "#1", type: 3, matrix: "2551C::2551C75i83f" }, { depth: 8, replace: true, colortransform: "#1", type: 3 }, { depth: 9, replace: true, colortransform: "::::::1L:", type: 3, matrix: "2551C::2551C56i79d" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#7", type: 3 }, { depth: 2, replace: true, colortransform: "#7", type: 3, matrix: "880p::880p80x47u" }, { depth: 4, replace: true, colortransform: "#7", type: 3 }, { depth: 5, replace: true, colortransform: "#7", type: 3, matrix: "2551C::2551C64i48e" }, { depth: 8, replace: true, colortransform: "#7", type: 3 }, { depth: 9, replace: true, colortransform: "::::::7O:", type: 3, matrix: "2551C::2551C56i54d" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#6", type: 3 }, { depth: 2, replace: true, colortransform: "#6", type: 3, matrix: "880p::880p66x87s" }, { depth: 4, replace: true, colortransform: "#6", type: 3 }, { depth: 5, replace: true, colortransform: "#6", type: 3, matrix: "2551C::2551C57i60d" }, { depth: 8, replace: true, colortransform: "#6", type: 3 }, { depth: 9, replace: true, colortransform: "::::::3T:", type: 3, matrix: "2551C::2551C56i38d" }, { type: 2 }, { depth: 1, replace: true, colortransform: "#0", type: 3 }, { depth: 2, replace: true, colortransform: "#0", type: 3, matrix: "#12" }, { depth: 4, replace: true, colortransform: "#0", type: 3 }, { depth: 5, replace: true, colortransform: "#0", type: 3, matrix: "#13" }, { depth: 8, replace: true, colortransform: "#0", type: 3 }, { depth: 9, replace: true, colortransform: "#0", type: 3, matrix: "#16" }, { type: 2 }, { depth: 1, type: 4 }, { depth: 2, type: 4 }, { depth: 4, type: 4 }, { depth: 5, type: 4 }, { depth: 8, type: 4 }, { depth: 9, type: 4 }, { depth: 1, id: 2, colortransform: "#0", type: 3, matrix: "#12" }, { depth: 2, id: 4, colortransform: "#0", type: 3, matrix: "#13", ratio: 49 }, { depth: 4, blendmode: 1, id: 6, colortransform: "#0", type: 3, matrix: "#16", ratio: 49 }, { type: 2 }] }; // eslint-disable-line quotes
	    var stage = new swiffy.Stage(document.getElementById('swiffycontainer'), swiffyobject, {}); // eslint-disable-line no-undef
	    stage.setBackground(null);

	    animateLogo = true;
	  }

	  var homeIcon = $('.sidebar-icons .home .icon');

	  $(document).ajaxStart(function () {
	    NProgress.set(0.3); // eslint-disable-line no-undef
	    NProgress.start(); // eslint-disable-line no-undef

	    if (animateLogo) {
	      homeIcon.addClass('animating');
	      stage.start();
	    }
	  });

	  $(document).ajaxStop(function () {
	    setTimeout(function () {
	      NProgress.done(); // eslint-disable-line no-undef

	      if (animateLogo) {
	        if (animateLogo) {
	          stage.pause();
	          homeIcon.removeClass('animating');
	        }
	      }
	    }, 2000);
	  });

	  var routes = {
	    '/home': function home() {
	      core.switchMenu('home');
	    },

	    '/accounts': function accounts() {
	      core.switchMenu('accounts');
	    },

	    '/settings': function settings() {
	      $(document).trigger('LiveHelp.OpenSettings');
	    },

	    '/settings/:menu': function settingsMenu(section) {
	      $(document).trigger('LiveHelp.OpenSettings', section);
	    },

	    '/tour': function tour() {
	      if (core.tour !== false) {
	        core.tour.setCurrentStep(0);
	        core.tour.start(true);
	      }
	    },

	    '/chat/:chat': function chatChat(id) {
	      var chats = __webpack_require__(122);
	      chats.openChat(id);
	    }
	  };
	  core.router = director.Router(routes);

	  // Initialise Route
	  initialiseRoute();

	  // Web Sockets
	  $(document).bind('LiveHelp.WebSocketStateChanged', function (event, data) {
	    core.websockets = data;
	    if (core.websockets !== false) {
	      window.clearTimeout(core.usersTimer);
	      $(document).trigger('LiveHelp.ClearVisitorsTimer');
	    }
	  });

	  // Reset Chatting List Height Data
	  var lists = $('.chat-list .list');
	  $.each(lists, function (key, value) {
	    var section = $(value);
	    if (section.find('.visitor').length === 0) {
	      if (chats.sections.none.enabled) {
	        section.data('height', chats.sections.none.height);
	      } else {
	        section.find('no-visitor').hide();
	        section.data('height', 0);
	      }
	    } else {
	      var height = chats.sectionHeight(section);
	      section.data('height', height);
	    }
	  });

	  $('.chat-list').on({
	    mouseenter: function mouseenter() {
	      $(this).find('.image, .close, .dropdown-toggle.options').addClass('hover');
	    },
	    mouseleave: function mouseleave() {
	      $(this).find('.image, .close, .dropdown-toggle.options').removeClass('hover');
	    }
	  }, '.visitor');

	  $('.chat-list').on({
	    mouseenter: function mouseenter() {
	      $('.chat-list').find('.visitor.selected, .channel.selected').addClass('previous');
	      $('.chat-list').find('.visitor, .channel').removeClass('selected');
	    },
	    mouseleave: function mouseleave() {
	      $('.chat-list .previous').removeClass('previous').addClass('selected');
	    }
	  }, '.visitor, .channel');

	  $('.VisitorsTotal, #visitortotal').click(function () {
	    core.switchMenu('home');
	  });

	  // Sidebar Menu
	  $('.sidebar-icons .menu').click(function (e) {
	    var type = $(this).data('type');

	    // Menu
	    core.switchMenu(type);

	    if (e.preventDefault) {
	      e.preventDefault();
	    }

	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	  });

	  // Notification Events
	  $('.notification .close').click(function () {
	    chats.closeNotification();
	    return false;
	  });

	  if (core.dropdown) {
	    $('.dropdown-toggle').dropdown();
	  }

	  var chatstack = $('.chat-stack');
	  chatstack.find('.dialog .btn.unblock').click(function () {
	    var chats = chatstack.find('.chat');
	    var dialog = chatstack.find('.dialog');
	    var chat = false;

	    $.each(chats, function (key, value) {
	      if ($(value).position().left === 0) {
	        chat = $(value);
	        return false;
	      }
	    });

	    if (chat !== undefined && chat.length > 0) {
	      chat = chat.data('id');
	      core.unblockChat(chat, dialog);
	    }
	  });

	  // Chats Stack
	  chatstack.on('click', '.chat', function () {
	    var obj = $(this);
	    var id = obj.data('id');
	    var pos = { top: parseInt(obj.css('top'), 10), left: parseInt(obj.css('left'), 10), bottom: parseInt(obj.css('bottom'), 10) };
	    var focussed = obj.is('.focussed');
	    var scroll = obj.find('.scroll');
	    var total = obj.find('.message-alert').data('total');

	    if (!focussed) {

	      // Save Scroll Position
	      $('.chat-stack .chat').each(function (index, value) {
	        var chat = $(value);
	        var left = parseInt(chat.position().left, 10);

	        if (left === 0) {
	          $(chat).data('scroll', chat.find('.scroll').scrollTop());
	        }
	      });

	      // Animate Front Position
	      obj.animate({ 'z-index': 80, 'left': 0, 'bottom': 0, 'top': 0, 'backgroundColor': '#fffff' }, 150, 'easeInOutBack', function () {
	        obj.find('.inputs, input').fadeIn();
	        obj.find('.inputs input').focus();

	        var scroll = obj.data('scroll');

	        if (total > 0) {
	          scroll = obj.find('.scroll .end');
	        }

	        // Check Blocked Chat
	        core.checkBlocked(id);

	        if (scroll !== undefined) {
	          obj.find('.scroll').scrollTo(scroll);
	        }
	      });

	      // Close Smilies
	      $('.chat-stack .smilies.button').close();

	      // Hide Name / Alert
	      obj.find('.name').hide();
	      chats.resetMessageAlert(obj);

	      // Stack Chats
	      $('.chat-stack .chat').each(function (index, value) {
	        var chat = $(value);
	        var left = parseInt(chat.css('left'), 10);
	        var zindex = parseInt(chat.css('z-index'), 10);
	        var top = 0;
	        var bottom = 2;
	        var color = '#fafafa';

	        if (left < pos.left) {
	          if (left > 0) {
	            top = 0;
	            bottom = 4;
	            color = '#f6f6f6';
	          }

	          chat.animate({
	            'z-index': zindex - 10,
	            'top': top,
	            'left': left + 35,
	            'bottom': bottom,
	            'backgroundColor': color
	          }, 150, 'easeInOutBack');

	          chat.find('.inputs, input').fadeOut();
	          chat.find('.name').fadeIn();
	        }
	      });

	      scroll.scrollTo(scroll.find('.end'));
	    }
	  });

	  chatstack.on('click', '.chat .scrollalert a, .chat .scrollalert .scrollmessage, .chat .scrollalert .arrow', function () {
	    var chat = $('.chat-stack .chat.focussed');
	    var id = chat.data('id');
	    var visitor = $('.chat-list .visitor[data-id="' + id + '"]');
	    var operator = $('.chat.focussed').data('operator');
	    var alert = visitor.find('.message-alert');
	    var total = alert.data('total');

	    if (total > 0) {
	      var last = chat.find('.messages .flex.left:nth-last-child(' + total + ')');
	      var typing = chat.find('.messages .flex.typing:visible');

	      if (typing.length > 0) {
	        last = typing;
	      }

	      chat.find('.scroll').scrollTo(last);
	    } else {
	      chats.scrollToBottom(id, operator, true);
	    }

	    chats.resetMessageAlert(visitor);
	    $('.chat-stack .chat[data-id="' + id + '"] .scrollalert').hide();
	  });

	  // Keyboard Shortcuts
	  var keyselector = 'body, input, textarea, .chat-stack #message';
	  $(keyselector).on('keydown', 'esc', function () {
	    if (shortcuts) {
	      processEscKeyDown();
	    }
	  });

	  $(keyselector).on('keydown', 'ctrl+shift+s', function () {
	    if (shortcuts) {
	      $(document).trigger('LiveHelp.OpenSettings');
	    }
	  });

	  $(keyselector).on('keydown', 'ctrl+shift+a', function () {
	    if (shortcuts) {
	      $(document).trigger('LiveHelp.OpenAccounts');
	    }
	  });

	  $(keyselector).on('keydown', 'ctrl+shift+r', function () {
	    if (shortcuts) {
	      $(document).trigger('LiveHelp.OpenResponses');
	    }
	  });

	  $(document).on('keydown', keyselector, 'ctrl+space', function () {
	    if (shortcuts) {
	      var popover = $('.popover.responses');
	      var button = $('.chat-stack .search.button');
	      var visible = 'show';

	      if (popover.length) {
	        visible = 'hide';
	        button.removeClass('active').popover('hide');
	      } else {
	        button.addClass('active').popover('show');
	        $(document).trigger('LiveHelp.UpdateResponsesPopover');
	        $('.popover.responses #search').focus();
	      }
	    }
	  });

	  $('.chat-stack .smilies.button').on({
	    mouseenter: function mouseenter() {
	      $(this).removeClass('Smilies').addClass('SmiliesHover');
	    },
	    mouseleave: function mouseleave() {
	      $(this).removeClass('SmiliesHover').addClass('Smilies');
	    },
	    click: function click() {
	      $(this).bubbletip($('#SmiliesTooltip'), { calculateOnShow: true }).open();
	    }
	  });

	  var responsesSearch = $('.chat-stack .search.button');
	  $('.chat-stack').on({
	    focus: function focus() {
	      $('.chat-stack .smilies.button').close();
	      responsesSearch.addClass('focus');
	    },
	    blur: function blur() {
	      responsesSearch.removeClass('focus');
	    }
	  }, '#message');

	  $('#SmiliesTooltip span').click(function () {
	    var smilie = $(this).attr('class').replace(/sprite | Small/g, '');
	    var text = '';
	    var textarea = $('.chat-stack #message');
	    var val = textarea.val();

	    switch (smilie) {
	      case 'Laugh':
	        text = ':D';
	        break;
	      case 'Smile':
	        text = ':)';
	        break;
	      case 'Sad':
	        text = ':(';
	        break;
	      case 'Money':
	        text = '$)';
	        break;
	      case 'Impish':
	        text = ':P';
	        break;
	      case 'Sweat':
	        text = ':\\';
	        break;
	      case 'Cool':
	        text = '8)';
	        break;
	      case 'Frown':
	        text = '>:L';
	        break;
	      case 'Wink':
	        text = ';)';
	        break;
	      case 'Surprise':
	        text = ':O';
	        break;
	      case 'Woo':
	        text = '8-)';
	        break;
	      case 'Tired':
	        text = 'X-(';
	        break;
	      case 'Shock':
	        text = '8-O';
	        break;
	      case 'Hysterical':
	        text = 'xD';
	        break;
	      case 'Kissed':
	        text = ':-*';
	        break;
	      case 'Dizzy':
	        text = ':S';
	        break;
	      case 'Celebrate':
	        text = '+O)';
	        break;
	      case 'Angry':
	        text = '>:O';
	        break;
	      case 'Adore':
	        text = '<3';
	        break;
	      case 'Sleep':
	        text = 'zzZ';
	        break;
	      case 'Stop':
	        text = ':X';
	        break;
	    }
	    textarea.val(val + text).keyup();
	  });

	  // Close Chat
	  var confirmclose = $('.chat-stack .confirm-close.dialog');
	  confirmclose.find('.cancel-button').on('click', function () {
	    confirmclose.show().animate({ bottom: -90 }, 250, 'easeInOutBack', function () {
	      confirmclose.hide();
	    });
	  });

	  confirmclose.find('.accept-button').on('click', function () {
	    chats.closeChat();
	  });

	  // Operator Status Dropdown
	  $('.operator .name, .operator .photo').on('click', function (e) {
	    $('.operator .dropdown-toggle').click();
	    e.stopPropagation();
	  });

	  // Send Button
	  $('.chat-stack .send').on({
	    click: function click() {
	      // Send Message
	      sendMessage();

	      // Close Pre-typed Responses
	      var menu = $('.responses-menu');
	      if (menu.css('display') != 'none') {
	        menu.height(0).hide();
	      }

	      return false;
	    },
	    mouseenter: function mouseenter() {
	      $(this).css({ 'opacity': 1.0 }).removeClass('sprite SendButton').addClass('sprite SendButtonHover');
	    },
	    mouseleave: function mouseleave() {
	      $(this).css({ 'opacity': 0.4 }).removeClass('sprite SendButtonHover').addClass('sprite SendButton');
	    }
	  });

	  var textarea = $('.chat-stack #message');
	  textarea.bind('keydown', 'return', function () {
	    sendMessage();
	    return false;
	  }).bind('keyup', 'return', function () {
	    updateTypingStatus(false);
	  }).bind('focusout', function () {
	    updateTypingStatus(false);
	  }).bind('keydown', 'ctrl+return', function () {
	    var input = $(this);
	    var value = input.val();
	    var start = input.caret().start;
	    var end = input.caret().end;

	    input.val(value.substr(0, start) + '\n' + value.substr(end)).caret(start + 1, start + 1);
	    return false;
	  }).bind('keydown', function () {
	    updateTypingStatus(true);
	  });

	  $('.chat-list-heading').on('click', function () {
	    var menu = $(this).next();
	    var height = menu.height();
	    var expanded = false;

	    if (height === 0) {
	      height = menu.data('height');
	      expanded = true;
	    } else {
	      menu.data('height', height);
	      height = 0;
	    }

	    $(this).attr('aria-expanded', expanded);
	    toggleChatMenu(menu, height, true);
	  });

	  $('.chat-list-heading').on({
	    mouseenter: function mouseenter() {
	      $(this).find('.expander').css('opacity', 1.0);
	    },

	    mouseleave: function mouseleave() {
	      $(this).find('.expander').css('opacity', 0);
	    }
	  });

	  $('.reset.password').on('click', function () {
	    $('.login .signin.form, .btn-toolbar.signin, .login .error').hide();
	    $('.login .reset.form, .btn-toolbar.reset').show();
	    $('.login .reset.form #username').focus();
	  });

	  var twofactor = $('.twofactor.form');
	  twofactor.find('a.disable.twofactor').on('click', function () {
	    twofactor.find('div.twofactor.signin').hide();
	    twofactor.find('div.twofactor.disable').show();
	  });

	  function hideResetPassword() {
	    $('.login .reset.form, .btn-toolbar.reset, .login .error').hide();
	    $('.login .signin.form, .btn-toolbar.signin').show();
	    $('.login .signin.form #username').focus();
	  }

	  var resettoolbar = $('.btn-toolbar.reset');
	  resettoolbar.find('.btn.back').on('click', function () {
	    hideResetPassword();
	  });

	  resettoolbar.find('.btn.reset').on('click', function () {
	    var reset = $('.reset.form');
	    var username = reset.find('#username').val();
	    var email = reset.find('#email').val();
	    var post = { 'Username': username, 'Email': email };

	    api.apiRequest({
	      url: api.apiEndpoint.resetpassword,
	      data: post,
	      success: function success() {
	        // Reset Password JSON
	        hideResetPassword();
	      },

	      error: function error() {
	        var login = $('.login, .inputs');
	        $('.login .signin.form .error .text').text('Incorrect Username or Email');

	        login.find('.error').fadeIn();
	        login.effect('shake', { times: 3, distance: 10 }, 150);
	      }
	    });
	  });

	  // Initalise Administration
	  $(document).on('LiveHelp.LocalSettingsLoaded', function () {

	    (function initSettings() {

	      // Remove jStorage
	      if (typeof migrateLocalStorage === 'undefined' && localStorage !== undefined && localStorage.jStorage !== undefined) {
	        localStorage.removeItem('jStorage');
	      }

	      if (!storage.isSet('session')) {
	        storage.set('session', '');
	      }
	      if (!storage.isSet('server')) {
	        storage.set('server', '');
	      }
	      if (!storage.isSet('protocol')) {
	        storage.set('protocol', 'http://');
	      }
	      if (!storage.isSet('locale')) {
	        storage.set('locale', {});
	      }
	      if (!storage.isSet('html5-notifications')) {
	        storage.set('html5-notifications', false);
	      }
	      if (!storage.isSet('accounts')) {
	        storage.set('accounts', []);
	      }
	      if (!storage.isSet('account')) {
	        storage.set('account', null);
	      }
	      if (!storage.isSet('route')) {
	        storage.set('route', 'home');
	      }
	      if (!storage.isSet('history-date')) {
	        storage.set('history-date', '');
	      }
	      if (!storage.isSet('viewed')) {
	        storage.set('viewed', chats.viewed);
	      }

	      var size = { width: 900, height: 650 };
	      if (!storage.isSet('size')) {
	        storage.set('size', size);
	      } else {
	        size = storage.get('size');
	      }
	      if (!storage.isSet('position')) {
	        storage.set('position', {
	          top: (window.screen.height - size.height) / 2,
	          left: (window.screen.width - size.width) / 2
	        });
	      }

	      if (!storage.isSet('visitorsColumns')) {
	        storage.set('visitorsColumns', core.visitorsColumns);
	      }

	      var language = storage.get('locale');
	      if (!$.isEmptyObject(language)) {
	        core.locale = language;

	        $(document).trigger('LiveHelp.LocaleUpdated');
	      }
	    })();

	    // Operator
	    core.config.operator = storage.get('operator');

	    if (core.dropdown) {
	      $('.operators.list').on('click', '.visitor .status', function () {

	        var menu = '<ul class="dropdown-menu statusmode"> \
	      <li><a href="#" class="Online" data-lang-key="online">Online</a></li> \
	      <li><a href="#" class="Offline" data-lang-key="offline">Offline</a></li> \
	      <li><a href="#" class="BRB" data-lang-key="brb">Be Right Back</a></li> \
	      <li><a href="#" class="Away" data-lang-key="away">Away</a></li>';

	        var element = $(this);
	        var visitor = element.closest('.visitor');
	        var account = element.is('.parent') ? element : visitor.find('.status.parent');
	        var id = visitor.data('id');

	        if (id === core.config.operator.id) {
	          menu += '	<li class="divider"></li> \
	      <li><a href="#" class="Signout" data-lang-key="signout">Sign Out</a></li>';
	        }

	        menu += '</ul>';

	        if (!visitor.find('.dropdown-menu').length) {
	          $(menu).insertAfter(account);
	        }
	        account.dropdown();
	      });
	    }

	    // Status Mode Menu
	    $('.operators.list').on('click', '.dropdown-menu.statusmode li a', function () {
	      var element = $(this);
	      var status = element.attr('class');
	      var visitor = element.closest('.visitor');
	      var id = visitor.data('id');

	      if (id === core.config.operator.id) {
	        id = undefined;
	      }

	      if (status !== 'Signout') {
	        core.changeStatus(status, $(this).text(), id);
	      } else {
	        core.signOut();
	      }

	      if (core.dropdown) {
	        visitor.find('.status.parent').dropdown();
	      }
	    });

	    // Administration
	    initAdmin();
	  });

	  $(document).trigger('LiveHelp.Initialised');
	});

	var showLogin = function showLogin() {
	  // Hide Loading
	  $('.loading').fadeOut(250, function () {
	    $('.loading').hide();
	  });

	  // Show Login
	  $('.login').show().fadeIn();
	};

	function initAdmin() {

	  // Sign In / Saved Session
	  var autoLogin = storage.get('session');
	  if (autoLogin !== undefined && autoLogin.length > 0) {
	    // Update Session
	    core.config.session = autoLogin;
	    if (autoSignIn) {
	      signIn();
	      $(document).trigger('LiveHelp.AutoSignIn', true);
	    } else {
	      $(document).trigger('LiveHelp.AutoSignIn', false);
	    }
	  } else {

	    // Show Login
	    showLogin();

	    $(document).trigger('LiveHelp.AutoSignIn', false);
	  }

	  // Metro Pivot
	  $('div.metro-pivot').metroPivot({ selectedItemChanged: function selectedItemChanged() {
	      // Update Charts
	      $(document).trigger('LiveHelp.UpdateCharts');
	    }, controlInitialized: function controlInitialized() {
	      // Initialise amCharts
	      //loadStatisticsChartData();
	    }
	  });

	  // Images
	  $.preloadImages('images/bubbletip/bubbletip.png');

	  // Two Factor Authentication
	  $('.twofactor .factor').hover(function () {
	    $(this).find('span, img').animate({ opacity: 1 }, 250);
	  }, function () {
	    if (!$(this).data('selected')) {
	      $(this).find('span').animate({ opacity: 0 }, 250);
	      $(this).find('img').animate({ opacity: 0.5 }, 250);
	    }
	  }).click(function () {
	    var twofactor = $('.twofactorcode');
	    factor = $(this).data('factor');
	    $(this).parent().find('.factor').each(function (key, value) {
	      var element = $(value);
	      if (element.data('factor') !== factor) {
	        element.data('selected', false).find('img').animate({ opacity: 0.5 }, 250);
	        element.find('span').animate({ opacity: 0 }, 250);
	      }
	    });

	    $(this).data('selected', true).find('span, img').animate({ opacity: 1 }, 250);
	    twofactor.fadeIn();

	    if (factor === 'push') {
	      twofactor.find('.code').fadeOut(function () {
	        twofactor.find('.status span').text('Authenticate to send Duo PUSH request');
	        twofactor.find('.status, .status img').fadeIn();
	      });
	    } else if (factor === 'sms' || factor === 'token') {
	      if (factor === 'sms') {
	        twofactor.find('.code label').text('SMS Code');
	        twofactor.find('.hint-token').hide();
	        twofactor.find('.hint-sms').show();
	      } else {
	        twofactor.find('.code label').text('Token Code');
	        twofactor.find('.hint-sms').hide();
	        twofactor.find('.hint-token').text('Enter your hardware token code or Duo Mobile code').show();
	      }

	      twofactor.find('.status').fadeOut(function () {
	        twofactor.find('.code').fadeIn(function () {
	          $('#twofactor').focus();
	        });
	      });
	    }
	    $('#twofactor').focus();
	  });

	  $('.login input').keypress(function (e) {
	    if (e.which === 13) {
	      signIn();
	      e.preventDefault();
	    }
	  });

	  // Sign In
	  $('.login .signin.btn').click(function () {
	    signIn();
	  });

	  $('.login #server').blur(function () {
	    var input = $(this);
	    var server = input.val();
	    var ssl = $('.login #ssl');

	    if (server.indexOf('https://') > -1) {
	      server = server.replace('https://', '');
	      ssl.prop('checked', 'checked');
	      core.protocol = 'https://';
	      storage.set('protocol', core.protocol);
	    } else if (server.indexOf('http://') > -1) {
	      server = server.replace('http://', '');
	      ssl.prop('checked', '');
	      core.protocol = 'http://';
	      storage.set('protocol', core.protocol);
	    }

	    var endings = ['/', '/livehelp', '/livehelp/admin', '/livehelp/admin/index.php'];
	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	      for (var _iterator2 = (0, _getIterator3.default)(endings), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	        var value = _step2.value;

	        var pos = server.indexOf(value, server.length - value.length);
	        if (pos > -1) {
	          server = server.substring(0, pos);
	        }
	      }
	    } catch (err) {
	      _didIteratorError2 = true;
	      _iteratorError2 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	          _iterator2.return();
	        }
	      } finally {
	        if (_didIteratorError2) {
	          throw _iteratorError2;
	        }
	      }
	    }

	    input.val(server);
	  });

	  // Clear
	  $('.login .clear').click(function () {
	    var inputs = $('.login .inputs');
	    inputs.find('.server input, .username input, .password input').val('');
	    inputs.find('.server input').focus();
	  });

	  function closeDropdown() {
	    if (core.dropdown) {
	      $('.operator .dropdown-toggle').dropdown('toggle');
	    }
	  }

	  // Status Mode Menu
	  $('.operator').on('click', '.dropdown-menu.statusmode li a', function () {
	    var status = $(this).attr('class');
	    if (status === 'Accounts') {
	      core.switchMenu('accounts');
	    } else if (status === 'History') {
	      core.switchMenu('history');
	    } else if (status === 'Responses') {
	      core.switchMenu('responses');
	    } else if (status === 'Settings') {
	      core.switchMenu('settings');
	      return false;
	    } else if (status === 'Integrations') {
	      closeDropdown();
	      core.switchMenu('integrations');
	      return false;
	    } else if (status === 'Billing') {
	      $(document).trigger('LiveHelp.OpenBilling');
	      closeDropdown();
	      return false;
	    } else if (status === 'Signout') {
	      core.signOut();
	    } else {
	      core.changeStatus(status, $(this).text());
	    }
	  });

	  // Accept Pending Chat
	  $('#pending').on('click', '.visitor', $(this), function (e) {
	    var chat = $(e.target).is('.visitor') ? $(e.target) : $(e.target).parent();
	    var id = chat.data('id');

	    chats.acceptChat(id);
	    chats.closeNotification();
	  });

	  // Pending / Chatting Click Events
	  $(document).on('click', '.chatting .visitor, .other-chatting .visitor, .operators .visitor', chats.chattingVisitorClickCallback);

	  // Chat Close Event
	  $('.chat-stack').on('click', '.chat .inputs > .close', function () {
	    // Close Chat
	    chats.closeChats();

	    // Close Chat Responses
	    if (chatResponsesOpen) {
	      $(document).trigger('LiveHelp.CloseResponses');
	      chatResponsesOpen = false;
	    }
	  });
	}

	// Intercom.js
	if (core.intercom !== false) {

	  core.intercom.on('message-alert', function (data) {
	    if (data.id > 0 && data.count !== undefined) {
	      if (data.count === 0) {
	        var element = $('.chat-list .visitor[data-id=' + data.id + '][data-operator=' + data.operator + ']');
	        chats.resetMessageAlert(element, false);
	      } else {
	        var viewedchat = _.find(chats.viewed, function (chat) {
	          return chat.id === data.id && chat.operator == data.operator;
	        });
	        if (viewedchat !== undefined) {
	          viewedchat.count = data.count;
	          chats.updateMessageAlert(data.id, data.operator, data.count - viewedchat.count, data.viewed);
	        }
	      }
	    }
	  });
	}

	$.fn.chatScrollHandler = function () {
	  $(this).on('scroll', _.debounce(function () {
	    var chat = $(this).closest('.chat');
	    var scrollalert = chat.find('.scrollalert');
	    var visitor = $('.chat-list .visitor[data-id="' + chat.data('id') + '"][data-operator=' + chat.data('operator') + ']');

	    if (scrollalert.is(':visible')) {
	      var scroll = chat.find('.scroll');
	      var bottom = scroll[0].scrollTop + scroll.height();
	      var last = chat.find('.messages .message:not(.typing):last:parent');
	      var element = scroll[0].scrollTop + last.position().top;

	      if (bottom > element) {
	        if (chat.is('.focussed')) {
	          chats.resetMessageAlert(visitor);
	        }
	        scrollalert.hide();
	      }
	    } else {
	      if (chat.is('.focussed')) {
	        chats.resetMessageAlert(visitor);
	      }
	    }
	  }, 250));
	};

	$.fn.getCursorPosition = function () {
	  var el = $(this).get(0);
	  var pos = 0;
	  if ('selectionStart' in el) {
	    pos = el.selectionStart;
	  } else if ('selection' in document) {
	    el.focus();
	    var Sel = document.selection.createRange();
	    var SelLength = document.selection.createRange().text.length;
	    Sel.moveStart('character', -el.value.length);
	    pos = Sel.text.length - SelLength;
	  }
	  return pos;
	};

	$.fn.selectRange = function (start, end) {
	  if (!end) {
	    end = start;
	  }
	  return this.each(function () {
	    if (this.setSelectionRange) {
	      this.focus();
	      this.setSelectionRange(start, end);
	    } else if (this.createTextRange) {
	      var range = this.createTextRange();
	      range.collapse(true);
	      range.moveEnd('character', end);
	      range.moveStart('character', start);
	      range.select();
	    }
	  });
	};

	function sendMessage(message, id) {
	  var stack = $('.chat-stack');
	  var textarea = stack.find('#message');
	  var chat = stack.find('.chat.focussed');
	  var everyone = stack.find('.channel.everyone');
	  var text = message !== undefined ? message : textarea.val();
	  var internal = $('.chat-stack .messages.input').is('.internal');

	  if (textarea.is('.disconnected') || !textarea.val().length) {
	    return false;
	  }

	  core.messagesAjax = false;

	  if (id !== undefined || chat.length > 0) {
	    var staff = 0;
	    var post = { 'Message': text };

	    if (chat.length > 0 && !id) {
	      id = chat.data('id');
	      staff = chat.data('operator') !== false ? 1 : 0;
	    }

	    if (typeof id === 'number' && id > 0 || typeof id === 'string' && id.length === 36) {
	      $(document).trigger('LiveHelp.SendMessage', { from: core.config.operator.id, to: id, message: text });

	      var account = false;
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = (0, _getIterator3.default)(core.accounts), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var value = _step3.value;

	          if (parseInt(value.ID, 10) === core.config.operator.id) {
	            account = value;
	            break;
	          }
	        }

	        // Display Message
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }

	      var status = !internal ? 1 : 8;
	      var unique = uuid.v4();
	      var last = chat.find('.message').last().data('id');

	      message = chats.messageHTML(unique, status, text, new moment(), core.config.operator.id, core.config.operator.username, account.Firstname, core.config.operator.email, id, true, 0);

	      if (core.settings.Version.Server > 4.1) {
	        chats.displayMessages(id, chat.data('operator'), chat, message.html, status, 0, last, true, false, message.tweets);
	      }

	      var sentSuccess = function sentSuccess(chat, uuid) {
	        return function (data) {

	          var id = typeof data.ID === 'number' ? data.ID : parseInt(data.ID, 10);
	          var message = chat.find('.message[data-id="' + uuid + '"]');
	          var visitor = $('.chat-list .visitor[data-id=' + chat.data('id') + '][data-operator=false]');

	          if (message.length > 0) {
	            message.data('id', id).attr('data-id', id).removeClass('sending');
	          }

	          // Update Last Message
	          var previous = parseInt(visitor.data('messages'), 10);
	          if (id > 0 && visitor.length > 0 && id > previous) {
	            visitor.data('messages', id);
	          }

	          core.messagesAjax = true;
	        };
	      };

	      if (status > 1) {
	        $.extend(post, { Status: status });
	      }
	      $.extend(post, { ID: id, UUID: unique, Staff: staff });

	      api.apiRequest({
	        url: api.apiEndpoint.send,
	        data: post,
	        success: sentSuccess(chat, unique)
	      });
	    } else if (typeof id === 'number' && id < 0) {
	      $(document).trigger('LiveHelp.SendMessage', { from: core.config.operator.id, id: id, message: text });
	    }
	  } else if (everyone.length > 0) {
	    $(document).trigger('LiveHelp.SendMessage', { from: core.config.operator.id, channel: 'everyone', message: text });
	  }

	  textarea.val('');
	  textarea.keyup();

	  return false;
	}

	function processEscKeyDown() {
	  var sliders = $('.slider.right');
	  var account = $('#account-details');
	  var settings = $('#settings');
	  var accountgrid = $('.accounts-grid');
	  var zindex = 0;
	  var top = null;

	  // Close Settings
	  if (settings.height() > 0 && settings.width() > 0) {
	    $(document).trigger('LiveHelp.CloseSettings');
	    return;
	  }

	  // Close Right Sliders
	  $.each(sliders, function (key, value) {
	    var element = $(value);
	    var i = parseInt(element.css('z-index'), 10);

	    if (element.width() > 0 && i > zindex) {
	      top = element;
	      zindex = i;
	    }
	  });

	  // Close Slider
	  if (top !== null) {
	    var id = top.attr('id');
	    var menu = '';

	    switch (id) {
	      case 'responses':
	        $(document).trigger('LiveHelp.CloseResponses');
	        menu = id;
	        break;
	      case 'visitor-details':
	        $(document).trigger('LiveHelp.CloseVisitor');
	        break;
	      case 'account-details':
	        if (accountgrid.is(':visible') === false) {
	          $(document).trigger('LiveHelp.ShowAccounts');
	        }
	        if (account.is(':visible') && account.width() > 0) {
	          $(document).trigger('LiveHelp.CloseAccount');
	        }
	        menu = 'accounts';
	        break;
	      case 'history-chat':
	        $(document).trigger('LiveHelp.CloseHistory');
	        menu = 'history';
	        break;
	    }

	    $(document).trigger('LiveHelp.CloseSlider', { menu: menu, previousMenu: core.previousMenu });

	    return;
	  }

	  // Close Chats
	  if (parseInt($('.chat-stack').css('top'), 10) === 0) {
	    chats.closeChats();
	    return;
	  }
	}

	function toggleChatMenu(menu, height, manual) {
	  var css = 'expander sprite sort-desc';
	  var id = menu.attr('id');

	  if (height > 0) {
	    css = 'expander sprite sort-asc';
	  }
	  storage.set(id + '.height', height);

	  if (height > 0 && saveExpanded || manual) {
	    menu.animate({ height: height }, 250, 'easeOutBack', function () {
	      var expanded = false;
	      if (height > 0) {
	        menu.show();
	        expanded = true;
	      } else {
	        menu.hide();
	      }
	      $(this).prev().attr('aria-expanded', expanded);
	      $(this).prev().find('.expander').removeAttr('class').addClass(css);
	    });
	  } else {
	    menu.prev().attr('aria-expanded', true);
	    menu.prev().find('.expander').removeAttr('class').addClass(css);
	  }
	}

	// Settings
	function loadLocalSettings() {

	  // Viewed Chats
	  chats.viewed = storage.get('viewed');

	  // Popout
	  var route = storage.get('route');
	  if (route.length > 0) {
	    switch (route) {
	      case 'responses':
	        $(document).trigger('LiveHelp.OpenResponses');
	        break;
	      case 'accounts':
	        $(document).trigger('LiveHelp.OpenAccounts');
	        break;
	      case 'settings':
	        $(document).trigger('LiveHelp.OpenSettings');
	        break;
	      case 'history':
	        $(document).trigger('LiveHelp.OpenHistory');
	        break;
	    }

	    if (route.indexOf('history/') > -1) {
	      var chat = parseInt(route.replace('history/', ''), 10);
	      $(document).trigger('LiveHelp.OpenHistoryRoute', chat);
	    }

	    if (route.indexOf('settings/') > -1) {
	      var section = route.replace('settings/', '');
	      $(document).trigger('LiveHelp.OpenSettings', section);
	    }

	    core.router.setRoute(route);
	    $(document).trigger('LiveHelp.RouteChanged');
	  }
	}

	var factor = '';

	function signInComplete() {

	  $('.content').filter(':not(.loading)').show().animate({ opacity: 1.0 }, 250);

	  // Notification
	  $(document).trigger('LiveHelp.SignInCompleted');

	  // Setup Sounds
	  if (!core.messageSound) {
	    core.messageSound = new buzz.sound(core.address + '/sounds/New Message', {
	      formats: ['ogg', 'mp3', 'wav'],
	      volume: 100
	    });
	  }
	  if (!core.pendingSound) {
	    core.pendingSound = new buzz.sound(core.address + '/sounds/Pending Chat', {
	      formats: ['ogg', 'mp3', 'wav'],
	      volume: 100
	    });
	  }

	  // Update Operator Details
	  var operator = storage.get('operator');

	  if (operator !== undefined) {
	    $(document).trigger('LiveHelp.UpdateOperatorImage');
	    $('.operator .name').text(operator.name);
	  }

	  // Operator Access
	  if (operator.access > 3) {
	    $('.menu a[data-type=statistics]').parent().hide();
	    $('.menu a[data-type=history]').parent().hide();
	    $('.menu a[data-type=accounts]').parent().hide();
	  }

	  $(document).trigger('LiveHelp.SignInComplete', { account: operator, server: core.server });

	  // Local Settings
	  loadLocalSettings();

	  // Settings AJAX
	  api.apiRequest({
	    url: api.apiEndpoint.settings,
	    timeout: 15000,
	    success: function success(data) {
	      // Settings JSON
	      if (data.Settings !== undefined) {

	        // Settings
	        core.settings = data;
	        storage.set('settings', core.settings);

	        // Update Users
	        core.updateUsers(undefined, undefined, function () {

	          // Update Messages
	          chats.updateMessages(function () {
	            // Complete Login
	            var login = $('.login');
	            $('.login, .loading').fadeOut(250, function () {
	              login.hide();
	            });

	            // Clear Login
	            login.find('input[type!=reset][type!=submit], select').val('');
	            login.find('.ball-clip-rotate').hide();
	            login.find('.signin.btn').show();
	          }, function (xhr, textStatus, thrownError) {
	            core.signInError(xhr, textStatus, thrownError);
	          });
	        }, function (xhr, textStatus, thrownError) {
	          core.signInError(xhr, textStatus, thrownError);
	        });

	        $(document).trigger('LiveHelp.SettingsInitialised', data.Settings);
	      }
	    },
	    error: function error(xhr, textStatus, thrownError) {
	      core.signInError(xhr, textStatus, thrownError);
	    }
	  });

	  // World Map / Locations
	  try {
	    visitors.initWorldMap();
	  } catch (e) {
	    console.log(e);
	  }
	}

	var signInCallback = function signInCallback() {
	  return true;
	};

	var signInTwoFactorCallback = function signInTwoFactorCallback() {
	  // Show Two Factor Security Code
	  if ($('.login #username').val().length > 0 && $('.login #password').val().length > 0) {
	    $('.login .signin.form, .login .error, .loading').hide();
	    $('.login, .login .twofactor.form').show().find('#security').focus();
	  } else {
	    $('.login, .login .signin.form').show();
	  }
	};

	function signIn() {

	  var result = signInCallback();
	  if (result) {

	    var login = $('.login');
	    var path = window.location.pathname;
	    var serverfield = login.find('#server');
	    var serverinput = serverfield.length ? serverfield.val() : '';

	    core.protocol = login.find('#ssl').is(':checked') ? 'https://' : 'http://';
	    login.find('.logo').addClass('loading');

	    if (storage.get('server').length > 0) {
	      core.server = storage.get('server');
	      core.protocol = storage.get('protocol');
	    }

	    if (document.location.protocol == 'https:') {
	      core.protocol = 'https://';
	      storage.set('protocol', core.protocol);
	    }

	    core.server = core.server !== undefined && core.server.length > 0 ? core.server : document.location.host;
	    if (serverinput.length > 0) {
	      core.server = serverinput;
	    }

	    var modulefolder = document.location.pathname.indexOf('/modules/livehelp/admin');
	    var subfolder = document.location.pathname.indexOf('/livehelp/admin');

	    if (modulefolder > -1) {
	      path = document.location.pathname.substring(0, modulefolder);
	      core.address = core.protocol + core.server + path + '/modules' + core.directoryPathName;
	    } else if (subfolder > -1) {
	      path = document.location.pathname.substring(0, subfolder);
	      core.address = core.protocol + core.server + path + core.directoryPathName;
	    } else {
	      core.address = core.protocol + core.server + core.directoryPathName;
	    }

	    // Router
	    core.router.init();

	    $(document).trigger('LiveHelp.SignIn');

	    var user = login.find('#username').length ? login.find('#username').val() : '';
	    var pass = login.find('#password').length ? login.find('#password').val() : '';
	    var status = login.find('#status').length ? login.find('#status').val() : '';
	    var security = login.find('#security');
	    var backupcode = login.find('#backupcode');
	    var post = {};

	    if (security.is(':visible')) {
	      if (security.val().length == 6) {
	        post = $.extend(post, { 'Data': $.toJSON({ 'code': security.val() }) });
	        $('.login .twofactor.form .error').hide();
	      } else {
	        $('.login .twofactor.form .error').fadeIn();
	        $('.login .inputs, .login .logo').effect('shake', { times: 3, distance: 10 }, 150);
	        return;
	      }
	    } else if (backupcode.is(':visible')) {
	      user = login.find('.twofactor.form #username').val();
	      pass = login.find('.twofactor.form #password').val();
	      if (backupcode.val().length == 24) {
	        $.extend(post, { 'Data': $.toJSON({ 'backupcode': backupcode.val() }) });
	        $('.login .twofactor.form .error').hide();
	      } else {
	        $('.login .twofactor.form .backup.error').fadeIn();
	        $('.login .inputs, .login .logo').effect('shake', { times: 3, distance: 10 }, 150);
	        return;
	      }
	    }

	    if (user.length > 0 && pass.length > 0) {
	      $.extend(post, { 'Username': user, 'Password': pass, 'Action': status, 'Version': '5.0' });
	    } else {
	      core.server = storage.get('server');
	      core.protocol = storage.get('protocol');
	    }

	    if (core.server.length) {
	      var pathDirectory = core.directoryPathName.replace(/[\/]/g, '');
	      var regEx = new RegExp('/(\/)??' + pathDirectory + '(\/)??$/g');

	      core.server = core.server.replace(regEx, '');
	    } else {
	      var pathname = document.location.pathname;
	      path = pathname.indexOf(core.directoryPath) > 0 ? pathname.substring(0, pathname.indexOf(core.directoryPath)) : '';
	      core.server = document.location.host + path;
	    }

	    if (core.cache) {
	      $.extend(post, { 'cache': '' });
	    }

	    login.find('.signin.btn').hide();
	    login.find('.ball-clip-rotate').show();

	    api.apiRequest({
	      url: api.apiEndpoint.login,
	      data: post,
	      timeout: 15000,
	      success: function success(data) {
	        // Hide Loading
	        $('.login .logo').removeClass('loading');

	        // Login JSON
	        if (data.Login !== undefined) {

	          // Operator Session
	          if (data.Login.Session !== undefined) {
	            // Operator Session
	            core.config.session = data.Login.Session;

	            if (core.config.session !== false && core.config.session.length > 0) {

	              // Image
	              var image = core.operatorGravatar(data.Login.Image, data.Login.Email);

	              // Username / Password
	              core.config.operator = {
	                id: data.Login.ID,
	                username: user,
	                name: data.Login.Name,
	                email: data.Login.Email,
	                image: image,
	                access: parseInt(data.Login.Access, 10),
	                status: data.Login.Status
	              };

	              if (data.Login.Datetime !== undefined) {
	                core.config.operator.datetime = data.Login.Datetime;
	              }

	              if (data.Login.Customer !== undefined) {
	                core.config.operator.customer = {
	                  company: data.Login.Customer.Company,
	                  plan: data.Login.Customer.Plan,
	                  datetime: data.Login.Customer.Datetime
	                };
	              }

	              if (data.Login.Users !== undefined) {
	                core.config.operator.users = data.Login.Users;
	              }
	              if (data.Login.Messages !== undefined) {
	                core.config.operator.messages = data.Login.Messages;
	              }
	              if (data.Login.TeamMessages !== undefined) {
	                core.config.operator.teammessages = data.Login.TeamMessages;
	              }
	              if (data.Login.Chats !== undefined) {
	                core.config.operator.chats = data.Login.Chats;
	              }
	              if (data.Login.Devices !== undefined) {
	                core.config.operator.devices = data.Login.Devices;
	              }
	              if (data.Login.Hash !== undefined) {
	                core.config.operator.hash = data.Login.Hash;
	              }

	              // Account
	              if (data.Login.Account !== undefined) {
	                core.config.operator.account = data.Login.Account;
	              }

	              $(document).trigger('LiveHelp.LoginComplete', [core.config.session, core.config.operator]);

	              // Electron App
	              if (false) {
	                // eslint-disable-line no-undef
	                Chatstack.introduction = 'Hey, how are you going? Do you require help or have any feeback for us?'; // eslint-disable-line no-undef
	                Chatstack.name = core.config.operator.name; // eslint-disable-line no-undef
	                Chatstack.email = core.config.operator.email; // eslint-disable-line no-undef
	                Chatstack.custom = 'Chatstack'; // eslint-disable-line no-undef
	                Chatstack.useragent = 'Chatstack App/' + packagejson.version + ' (' + platform + ' ' + os.release() + '; electron.js ' + process.versions.electron + ') Chrome/' + process.versions.chrome; // eslint-disable-line no-undef
	                Chatstack.url = core.protocol + core.server; // eslint-disable-line no-undef
	                Chatstack.referrer = 'Direct Visit / Bookmark'; // eslint-disable-line no-undef

	                (function (d) {
	                  // JavaScript
	                  Chatstack.e = [];Chatstack.ready = function (c) {
	                    Chatstack.e.push(c);
	                  }; // eslint-disable-line no-undef
	                  var b = d.createElement('script');b.type = 'text/javascript';b.async = true;
	                  b.src = 'https://' + Chatstack.server + '/livehelp/scripts/js.js'; // eslint-disable-line no-undef
	                  var s = d.getElementsByTagName('script')[0];
	                  s.parentNode.insertBefore(b, s);
	                })(document);
	              }

	              // Sign In / Saved Session
	              storage.set('protocol', core.protocol);
	              storage.set('server', core.server);
	              storage.set('session', core.config.session);
	              storage.set('operator', core.config.operator);

	              // Complete Sign In
	              signInComplete();

	              // Update Status Mode
	              var status = 'Offline';
	              switch (data.Login.Status) {
	                case 1:
	                  status = 'Online';
	                  break;
	                case 2:
	                  status = 'BRB';
	                  break;
	                case 3:
	                  status = 'Away';
	                  break;
	              }

	              status = status === 'BRB' ? 'Be Right Back' : status;
	              $('.operator .dropdown-toggle .status').text(status);

	              if (status === 'Be Right Back') {
	                status = 'BRB';
	              } else if (status === 'Offline') {
	                status = 'Offline';
	              }
	              $('.operator .mode').removeClass('online offline hidden brb away').addClass(status.toLowerCase());
	            } else if (data.Login.OTP !== false) {

	              // Two Factor Callback
	              signInTwoFactorCallback();

	              $(document).trigger('LiveHelp.LoginTwoFactor');
	            } else if (data.Login.OTP === false) {
	              var element = $('.login .signin .backup.error .text');
	              core.signInError(false, false, false, element);
	            } else {
	              core.signInError();
	            }
	          }
	        }
	      },
	      error: function error(xhr, textStatus, thrownError) {
	        core.signInError(xhr, textStatus, thrownError);
	      }
	    });
	  }
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2), __esModule: true };

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(49);
	module.exports = __webpack_require__(51);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	var global        = __webpack_require__(15)
	  , hide          = __webpack_require__(19)
	  , Iterators     = __webpack_require__(7)
	  , TO_STRING_TAG = __webpack_require__(46)('toStringTag');

	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(5)
	  , step             = __webpack_require__(6)
	  , Iterators        = __webpack_require__(7)
	  , toIObject        = __webpack_require__(8);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(12)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(9)
	  , defined = __webpack_require__(11);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(10);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 11 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(13)
	  , $export        = __webpack_require__(14)
	  , redefine       = __webpack_require__(29)
	  , hide           = __webpack_require__(19)
	  , has            = __webpack_require__(30)
	  , Iterators      = __webpack_require__(7)
	  , $iterCreate    = __webpack_require__(31)
	  , setToStringTag = __webpack_require__(45)
	  , getPrototypeOf = __webpack_require__(47)
	  , ITERATOR       = __webpack_require__(46)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(15)
	  , core      = __webpack_require__(16)
	  , ctx       = __webpack_require__(17)
	  , hide      = __webpack_require__(19)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 15 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 16 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.2.2'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(18);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(20)
	  , createDesc = __webpack_require__(28);
	module.exports = __webpack_require__(24) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(21)
	  , IE8_DOM_DEFINE = __webpack_require__(23)
	  , toPrimitive    = __webpack_require__(27)
	  , dP             = Object.defineProperty;

	exports.f = __webpack_require__(24) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(22);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(24) && !__webpack_require__(25)(function(){
	  return Object.defineProperty(__webpack_require__(26)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(25)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(22)
	  , document = __webpack_require__(15).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(22);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(19);

/***/ },
/* 30 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(32)
	  , descriptor     = __webpack_require__(28)
	  , setToStringTag = __webpack_require__(45)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(19)(IteratorPrototype, __webpack_require__(46)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(21)
	  , dPs         = __webpack_require__(33)
	  , enumBugKeys = __webpack_require__(43)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(26)('iframe')
	    , i      = enumBugKeys.length
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(44).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(20)
	  , anObject = __webpack_require__(21)
	  , getKeys  = __webpack_require__(34);

	module.exports = __webpack_require__(24) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(35)
	  , enumBugKeys = __webpack_require__(43);

	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(30)
	  , toIObject    = __webpack_require__(8)
	  , arrayIndexOf = __webpack_require__(36)(false)
	  , IE_PROTO     = __webpack_require__(40)('IE_PROTO');

	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(8)
	  , toLength  = __webpack_require__(37)
	  , toIndex   = __webpack_require__(39);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(38)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(41)('keys')
	  , uid    = __webpack_require__(42);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(15)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(15).document && document.documentElement;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(20).f
	  , has = __webpack_require__(30)
	  , TAG = __webpack_require__(46)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(41)('wks')
	  , uid        = __webpack_require__(42)
	  , Symbol     = __webpack_require__(15).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(30)
	  , toObject    = __webpack_require__(48)
	  , IE_PROTO    = __webpack_require__(40)('IE_PROTO')
	  , ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(11);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(50)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(12)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(38)
	  , defined   = __webpack_require__(11);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(21)
	  , get      = __webpack_require__(52);
	module.exports = __webpack_require__(16).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(53)
	  , ITERATOR  = __webpack_require__(46)('iterator')
	  , Iterators = __webpack_require__(7);
	module.exports = __webpack_require__(16).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(10)
	  , TAG = __webpack_require__(46)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(55), __esModule: true };

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(49);
	__webpack_require__(3);
	module.exports = __webpack_require__(46)('iterator');

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(57);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(58);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Third Party Libraries
	var $ = __webpack_require__(62);

	var that = false;
	var initialised = false;
	var timer = false;

	var Storage = function () {
	  function Storage() {
	    (0, _classCallCheck3.default)(this, Storage);

	    this.store = $.initNamespaceStorage('LiveHelp').localStorage;

	    if (!that) {
	      that = this;

	      timer = window.setInterval(function () {
	        if (initialised) {
	          $(document).trigger('LiveHelp.LocalSettingsLoaded');
	          window.clearInterval(timer);
	        }
	      }, 10);
	    }

	    return that;
	  }

	  (0, _createClass3.default)(Storage, [{
	    key: 'get',
	    value: function get(key) {
	      return this.store.get(key);
	    }
	  }, {
	    key: 'set',
	    value: function set(key, value) {
	      return this.store.set(key, value);
	    }
	  }, {
	    key: 'isSet',
	    value: function isSet(key) {
	      return this.store.isSet(key);
	    }
	  }]);
	  return Storage;
	}();

	$(document).on('LiveHelp.Initialised', function () {
	  initialised = true;
	});

	exports.default = Storage;

/***/ },
/* 57 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _defineProperty = __webpack_require__(59);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(60), __esModule: true };

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(61);
	var $Object = __webpack_require__(16).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(14);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(24), 'Object', {defineProperty: __webpack_require__(20).f});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.11.2
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-12-17T15:27Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper window is present,
			// execute the factory and get jQuery
			// For environments that do not inherently posses a window with a document
			// (such as Node.js), expose a jQuery-making factory as module.exports
			// This accentuates the need for the creation of a real window
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Can't do this because several apps including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	// Support: Firefox 18+
	//

	var deletedIds = [];

	var slice = deletedIds.slice;

	var concat = deletedIds.concat;

	var push = deletedIds.push;

	var indexOf = deletedIds.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "1.11.2",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray || function( obj ) {
			return jQuery.type(obj) === "array";
		},

		isWindow: function( obj ) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},

		isNumeric: function( obj ) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		isPlainObject: function( obj ) {
			var key;

			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			try {
				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call(obj, "constructor") &&
					!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
					return false;
				}
			} catch ( e ) {
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}

			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if ( support.ownLast ) {
				for ( key in obj ) {
					return hasOwn.call( obj, key );
				}
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call(obj) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && jQuery.trim( data ) ) {
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data );
				} )( data );
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function( obj, callback, args ) {
			var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike( obj );

			if ( args ) {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				}

			// A special, fast, case for the most common use of each
			} else {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1, IE<9
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArraylike( Object(arr) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			var len;

			if ( arr ) {
				if ( indexOf ) {
					return indexOf.call( arr, elem, i );
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

				for ( ; i < len; i++ ) {
					// Skip accessing in sparse arrays
					if ( i in arr && arr[ i ] === elem ) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			while ( j < len ) {
				first[ i++ ] = second[ j++ ];
			}

			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if ( len !== len ) {
				while ( second[j] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value,
				i = 0,
				length = elems.length,
				isArray = isArraylike( elems ),
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var args, proxy, tmp;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: function() {
			return +( new Date() );
		},

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});

	function isArraylike( obj ) {
		var length = obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.nodeType === 1 && length ) {
			return true;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.0-pre
	 * http://sizzlejs.com/
	 *
	 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-12-16
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}

		context = context || document;
		results = results || [];
		nodeType = context.nodeType;

		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		if ( !seed && documentIsHTML ) {

			// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document (jQuery #6963)
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}

				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && support.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// QSA path
			if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				nid = old = expando;
				newContext = context;
				newSelector = nodeType !== 1 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + toSelector( groups[i] );
					}
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = attrs.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// If no document and documentElement is available, return
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Set our document
		document = doc;
		docElem = doc.documentElement;
		parent = doc.defaultView;

		// Support: IE>8
		// If iframe document is assigned to "document" variable and if iframe has been reloaded,
		// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
		// IE6-8 do not support the defaultView property so parent will be undefined
		if ( parent && parent !== parent.top ) {
			// IE11 does not have attachEvent, so all must suffer
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Support tests
		---------------------------------------------------------------------- */
		documentIsHTML = !isXML( doc );

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( doc.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\f]' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = doc.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully does not implement inclusive descendent
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === doc ? -1 :
					b === doc ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return doc;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, outerCache, node, diff, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[ expando ] || (parent[ expando ] = {});
								cache = outerCache[ type ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							// Use previously-cached element index if available
							} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
								diff = cache[1];

							// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
										// Cache the index of each encountered element
										if ( useCache ) {
											(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
							if ( (oldCache = outerCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is no seed and only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			});

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			});

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
		});
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	};

	jQuery.fn.extend({
		find: function( selector ) {
			var i,
				ret = [],
				self = this,
				len = self.length;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter(function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				}) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector || [], false) );
		},
		not: function( selector ) {
			return this.pushStack( winnow(this, selector || [], true) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	});


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && (match[1] || !context) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;

						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[2] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[2] ) {
								return rootjQuery.find( selector );
							}

							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof rootjQuery.ready !== "undefined" ?
					rootjQuery.ready( selector ) :
					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.extend({
		dir: function( elem, dir, until ) {
			var matched = [],
				cur = elem[ dir ];

			while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
				if ( cur.nodeType === 1 ) {
					matched.push( cur );
				}
				cur = cur[dir];
			}
			return matched;
		},

		sibling: function( n, elem ) {
			var r = [];

			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					r.push( n );
				}
			}

			return r;
		}
	});

	jQuery.fn.extend({
		has: function( target ) {
			var i,
				targets = jQuery( target, this ),
				len = targets.length;

			return this.filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
					// Always skip document fragments
					if ( cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors)) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
			}

			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[0], jQuery( elem ) );
			}

			// Locate the position of the desired element
			return jQuery.inArray(
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem, this );
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.unique(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});

	function sibling( cur, dir ) {
		do {
			cur = cur[ dir ];
		} while ( cur && cur.nodeType !== 1 );

		return cur;
	}

	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}

			if ( this.length > 1 ) {
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					ret = jQuery.unique( ret );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					ret = ret.reverse();
				}
			}

			return this.pushStack( ret );
		};
	});
	var rnotwhite = (/\S+/g);



	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions( options ) {
		var object = optionsCache[ options ] = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			( optionsCache[ options ] || createOptions( options ) ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,
			// Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			// Fire callbacks
			fire = function( data ) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( stack ) {
						if ( stack.length ) {
							fire( stack.shift() );
						}
					} else if ( memory ) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						// First, we save the current length
						var start = list.length;
						(function add( args ) {
							jQuery.each( args, function( _, arg ) {
								var type = jQuery.type( arg );
								if ( type === "function" ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && type !== "string" ) {
									// Inspect recursively
									add( arg );
								}
							});
						})( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
						} else if ( memory ) {
							firingStart = start;
							fire( memory );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );
								// Handle firing indexes
								if ( firing ) {
									if ( index <= firingLength ) {
										firingLength--;
									}
									if ( index <= firingIndex ) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( list && ( !fired || stack ) ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						if ( firing ) {
							stack.push( args );
						} else {
							fire( args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend({

		Deferred: function( func ) {
			var tuples = [
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks("memory") ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[1] ](function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[1] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(function() {
						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[0] ] = function() {
					deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[0] + "With" ] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );

						} else if ( !(--remaining) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject )
							.progress( updateFunc( i, progressContexts, progressValues ) );
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	});


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	});

	/**
	 * Clean-up method for dom ready events
	 */
	function detach() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	}

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// we once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout( jQuery.ready );

			// Standards-based browsers support DOMContentLoaded
			} else if ( document.addEventListener ) {
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed, false );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed, false );

			// If IE event model is used
			} else {
				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", completed );

				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", completed );

				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch(e) {}

				if ( top && top.doScroll ) {
					(function doScrollCheck() {
						if ( !jQuery.isReady ) {

							try {
								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll("left");
							} catch(e) {
								return setTimeout( doScrollCheck, 50 );
							}

							// detach all dom ready events
							detach();

							// and execute any waiting functions
							jQuery.ready();
						}
					})();
				}
			}
		}
		return readyList.promise( obj );
	};


	var strundefined = typeof undefined;



	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;

	// Execute ASAP in case we need to set body.style.zoom
	jQuery(function() {
		// Minified: var a,b,c,d
		var val, div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Return for frameset docs that don't have a body
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		if ( typeof div.style.zoom !== strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if ( val ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );
	});




	(function() {
		var div = document.createElement( "div" );

		// Execute the test only if not already executed in another module.
		if (support.deleteExpando == null) {
			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch( e ) {
				support.deleteExpando = false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	})();


	/**
	 * Determines whether an object can have data
	 */
	jQuery.acceptData = function( elem ) {
		var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
			nodeType = +elem.nodeType || 1;

		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ?
			false :

			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute("classid") === noData;
	};


	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {

			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}

				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );

			} else {
				data = undefined;
			}
		}

		return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		var name;
		for ( name in obj ) {

			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}

		return true;
	}

	function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var ret, thisCache,
			internalKey = jQuery.expando,

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( typeof name === "string" ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	}

	function internalRemoveData( elem, name, pvt ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i,
			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split(" ");
						}
					}
				} else {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat( jQuery.map( name, jQuery.camelCase ) );
				}

				i = name.length;
				while ( i-- ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		/* jshint eqeqeq: false */
		} else if ( support.deleteExpando || cache != cache.window ) {
			/* jshint eqeqeq: true */
			delete cache[ id ];

		// When all else fails, null
		} else {
			cache[ id ] = null;
		}
	}

	jQuery.extend({
		cache: {},

		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,
			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},

		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},

		data: function( elem, name, data ) {
			return internalData( elem, name, data );
		},

		removeData: function( elem, name ) {
			return internalRemoveData( elem, name );
		},

		// For internal use only.
		_data: function( elem, name, data ) {
			return internalData( elem, name, data, true );
		},

		_removeData: function( elem, name ) {
			return internalRemoveData( elem, name, true );
		}
	});

	jQuery.fn.extend({
		data: function( key, value ) {
			var i, name, data,
				elem = this[0],
				attrs = elem && elem.attributes;

			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );

					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice(5) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					jQuery.data( this, key );
				});
			}

			return arguments.length > 1 ?

				// Sets one value
				this.each(function() {
					jQuery.data( this, key, value );
				}) :

				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
		},

		removeData: function( key ) {
			return this.each(function() {
				jQuery.removeData( this, key );
			});
		}
	});


	jQuery.extend({
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = jQuery._data( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray(data) ) {
						queue = jQuery._data( elem, type, jQuery.makeArray(data) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object, or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return jQuery._data( elem, key ) || jQuery._data( elem, key, {
				empty: jQuery.Callbacks("once memory").add(function() {
					jQuery._removeData( elem, type + "queue" );
					jQuery._removeData( elem, key );
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}

			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );

					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = jQuery._data( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
		};



	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	};
	var rcheckableType = (/^(?:checkbox|radio)$/i);



	(function() {
		// Minified: var a,b,c
		var input = document.createElement( "input" ),
			div = document.createElement( "div" ),
			fragment = document.createDocumentFragment();

		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName( "tbody" ).length;

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone =
			document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild( input );
		support.appendChecked = input.checked;

		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild( div );
		div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<9
		// Opera does not clone events (and typeof div.attachEvent === undefined).
		// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
		support.noCloneEvent = true;
		if ( div.attachEvent ) {
			div.attachEvent( "onclick", function() {
				support.noCloneEvent = false;
			});

			div.cloneNode( true ).click();
		}

		// Execute the test only if not already executed in another module.
		if (support.deleteExpando == null) {
			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch( e ) {
				support.deleteExpando = false;
			}
		}
	})();


	(function() {
		var i, eventName,
			div = document.createElement( "div" );

		// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
		for ( i in { submit: true, change: true, focusin: true }) {
			eventName = "on" + i;

			if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute( eventName, "t" );
				support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	})();


	var rformElems = /^(?:input|select|textarea)$/i,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {
			var tmp, events, t, handleObjIn,
				special, eventHandle, handleObj,
				handlers, type, namespaces, origType,
				elemData = jQuery._data( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !(events = elemData.events) ) {
				events = elemData.events = {};
			}
			if ( !(eventHandle = elemData.handle) ) {
				eventHandle = elemData.handle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};
				// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
				eventHandle.elem = elem;
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !(handlers = events[ type ]) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );

						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
			var j, handleObj, tmp,
				origCount, t, events,
				special, handlers, type,
				namespaces, origType,
				elemData = jQuery.hasData( elem ) && jQuery._data( elem );

			if ( !elemData || !(events = elemData.events) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;

				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {
			var handle, ontype, cur,
				bubbleType, special, tmp, i,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf(".") >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === (elem.ownerDocument || document) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
					jQuery.acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[ type ]();
						} catch ( e ) {
							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, ret, handleObj, matched, j,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( (event.result = ret) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var sel, handleObj, matches, i,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

				/* jshint eqeqeq: false */
				for ( ; cur != this; cur = cur.parentNode || this ) {
					/* jshint eqeqeq: true */

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) >= 0 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
			}

			return handlerQueue;
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: IE<9
			// Fix target property (#1925)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}

			// Support: Chrome 23+, Safari?
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var body, eventDoc, doc,
					button = original.button,
					fromElement = original.fromElement;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						try {
							this.focus();
							return false;
						} catch ( e ) {
							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle, false );
			}
		} :
		function( elem, type, handle ) {
			var name = "on" + type;

			if ( elem.detachEvent ) {

				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event, to properly expose it to GC
				if ( typeof elem[ name ] === strundefined ) {
					elem[ name ] = null;
				}

				elem.detachEvent( name, handle );
			}
		};

	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
					// Support: IE < 9, Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;
			if ( !e ) {
				return;
			}

			// If preventDefault exists, run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();

			// Support: IE
			// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;
			if ( !e ) {
				return;
			}
			// If stopPropagation exists, run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}

			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// IE submit delegation
	if ( !support.submitBubbles ) {

		jQuery.event.special.submit = {
			setup: function() {
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
					if ( form && !jQuery._data( form, "submitBubbles" ) ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submit_bubble = true;
						});
						jQuery._data( form, "submitBubbles", true );
					}
				});
				// return undefined since we don't need an event listener
			},

			postDispatch: function( event ) {
				// If form was submitted by the user, bubble the event up the tree
				if ( event._submit_bubble ) {
					delete event._submit_bubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event, true );
					}
				}
			},

			teardown: function() {
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}

	// IE change delegation and checkbox/radio fix
	if ( !support.changeBubbles ) {

		jQuery.event.special.change = {

			setup: function() {

				if ( rformElems.test( this.nodeName ) ) {
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._just_changed = true;
							}
						});
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._just_changed && !event.isTrigger ) {
								this._just_changed = false;
							}
							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate( "change", this, event, true );
						});
					}
					return false;
				}
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;

					if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event, true );
							}
						});
						jQuery._data( elem, "changeBubbles", true );
					}
				});
			},

			handle: function( event ) {
				var elem = event.target;

				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
					return event.handleObj.handler.apply( this, arguments );
				}
			},

			teardown: function() {
				jQuery.event.remove( this, "._change" );

				return !rformElems.test( this.nodeName );
			}
		};
	}

	// Create "bubbling" focus and blur events
	if ( !support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						jQuery._removeData( doc, fix );
					} else {
						jQuery._data( doc, fix, attaches );
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var type, origFn;

			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}

			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}

			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},

		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			var elem = this[0];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	});


	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
			safeFrag = document.createDocumentFragment();

		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
			"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
		rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
		rleadingWhitespace = /^\s+/,
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rtbody = /<tbody/i,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /^$|\/(?:java|ecma)script/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {
			option: [ 1, "<select multiple='multiple'>", "</select>" ],
			legend: [ 1, "<fieldset>", "</fieldset>" ],
			area: [ 1, "<map>", "</map>" ],
			param: [ 1, "<object>", "</object>" ],
			thead: [ 1, "<table>", "</table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

			// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
			// unless wrapped in a div with non-breaking characters in front of it.
			_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
		},
		safeFragment = createSafeFragment( document ),
		fragmentDiv = safeFragment.appendChild( document.createElement("div") );

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll( context, tag ) {
		var elems, elem,
			i = 0,
			found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
				undefined;

		if ( !found ) {
			for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
				if ( !tag || jQuery.nodeName( elem, tag ) ) {
					found.push( elem );
				} else {
					jQuery.merge( found, getAll( elem, tag ) );
				}
			}
		}

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], found ) :
			found;
	}

	// Used in buildFragment, fixes the defaultChecked property
	function fixDefaultChecked( elem ) {
		if ( rcheckableType.test( elem.type ) ) {
			elem.defaultChecked = elem.checked;
		}
	}

	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
		if ( match ) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}
		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var elem,
			i = 0;
		for ( ; (elem = elems[i]) != null; i++ ) {
			jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
		}
	}

	function cloneCopyEvent( src, dest ) {

		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}

		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;

		if ( events ) {
			delete curData.handle;
			curData.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}

		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}

	function fixCloneNodeIssues( src, dest ) {
		var nodeName, e, data;

		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}

		nodeName = dest.nodeName.toLowerCase();

		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
			data = jQuery._data( dest );

			for ( e in data.events ) {
				jQuery.removeEvent( dest, e, data.handle );
			}

			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute( jQuery.expando );
		}

		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if ( nodeName === "script" && dest.text !== src.text ) {
			disableScript( dest ).text = src.text;
			restoreScript( dest );

		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if ( nodeName === "object" ) {
			if ( dest.parentNode ) {
				dest.outerHTML = src.outerHTML;
			}

			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
				dest.innerHTML = src.innerHTML;
			}

		} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set

			dest.defaultChecked = dest.checked = src.checked;

			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}

		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.defaultSelected = dest.selected = src.defaultSelected;

		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var destElements, node, clone, i, srcElements,
				inPage = jQuery.contains( elem.ownerDocument, elem );

			if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
				clone = elem.cloneNode( true );

			// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
			}

			if ( (!support.noCloneEvent || !support.noCloneChecked) &&
					(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				// Fix all IE cloning issues
				for ( i = 0; (node = srcElements[i]) != null; ++i ) {
					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[i] ) {
						fixCloneNodeIssues( node, destElements[i] );
					}
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0; (node = srcElements[i]) != null; i++ ) {
						cloneCopyEvent( node, destElements[i] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			destElements = srcElements = node = null;

			// Return the cloned set
			return clone;
		},

		buildFragment: function( elems, context, scripts, selection ) {
			var j, elem, contains,
				tmp, tag, tbody, wrap,
				l = elems.length,

				// Ensure a safe fragment
				safe = createSafeFragment( context ),

				nodes = [],
				i = 0;

			for ( ; i < l; i++ ) {
				elem = elems[ i ];

				if ( elem || elem === 0 ) {

					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

					// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );

					// Convert html into DOM nodes
					} else {
						tmp = tmp || safe.appendChild( context.createElement("div") );

						// Deserialize a standard representation
						tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;

						tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}

						// Manually add leading whitespace removed by IE
						if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
							nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
						}

						// Remove IE's autoinserted <tbody> from table fragments
						if ( !support.tbody ) {

							// String was a <table>, *may* have spurious <tbody>
							elem = tag === "table" && !rtbody.test( elem ) ?
								tmp.firstChild :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !rtbody.test( elem ) ?
									tmp :
									0;

							j = elem && elem.childNodes.length;
							while ( j-- ) {
								if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
									elem.removeChild( tbody );
								}
							}
						}

						jQuery.merge( nodes, tmp.childNodes );

						// Fix #12392 for WebKit and IE > 9
						tmp.textContent = "";

						// Fix #12392 for oldIE
						while ( tmp.firstChild ) {
							tmp.removeChild( tmp.firstChild );
						}

						// Remember the top-level container for proper cleanup
						tmp = safe.lastChild;
					}
				}
			}

			// Fix #11356: Clear elements from fragment
			if ( tmp ) {
				safe.removeChild( tmp );
			}

			// Reset defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			if ( !support.appendChecked ) {
				jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
			}

			i = 0;
			while ( (elem = nodes[ i++ ]) ) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
					continue;
				}

				contains = jQuery.contains( elem.ownerDocument, elem );

				// Append to fragment
				tmp = getAll( safe.appendChild( elem ), "script" );

				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}

				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( (elem = tmp[ j++ ]) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}

			tmp = null;

			return safe;
		},

		cleanData: function( elems, /* internal */ acceptData ) {
			var elem, type, id, data,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				deleteExpando = support.deleteExpando,
				special = jQuery.event.special;

			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( acceptData || jQuery.acceptData( elem ) ) {

					id = elem[ internalKey ];
					data = id && cache[ id ];

					if ( data ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Remove cache only if it was not already removed by jQuery.event.remove
						if ( cache[ id ] ) {

							delete cache[ id ];

							// IE does not allow us to delete expando properties from nodes,
							// nor does it have a removeAttribute function on Document nodes;
							// we must handle all of these cases
							if ( deleteExpando ) {
								delete elem[ internalKey ];

							} else if ( typeof elem.removeAttribute !== strundefined ) {
								elem.removeAttribute( internalKey );

							} else {
								elem[ internalKey ] = null;
							}

							deletedIds.push( id );
						}
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
			}, null, value, arguments.length );
		},

		append: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			});
		},

		prepend: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			});
		},

		before: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			});
		},

		after: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			});
		},

		remove: function( selector, keepData /* Internal Use Only */ ) {
			var elem,
				elems = selector ? jQuery.filter( selector, this ) : this,
				i = 0;

			for ( ; (elem = elems[i]) != null; i++ ) {

				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}

			return this;
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; (elem = this[i]) != null; i++ ) {
				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem, false ) );
				}

				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}

				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
					elem.options.length = 0;
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						undefined;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
					( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

					value = value.replace( rxhtmlTag, "<$1></$2>" );

					try {
						for (; i < l; i++ ) {
							// Remove element nodes and prevent memory leaks
							elem = this[i] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch(e) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var arg = arguments[ 0 ];

			// Make the changes, replacing each context element with the new content
			this.domManip( arguments, function( elem ) {
				arg = this.parentNode;

				jQuery.cleanData( getAll( this ) );

				if ( arg ) {
					arg.replaceChild( elem, this );
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function( selector ) {
			return this.remove( selector, true );
		},

		domManip: function( args, callback ) {

			// Flatten any nested arrays
			args = concat.apply( [], args );

			var first, node, hasScripts,
				scripts, doc, fragment,
				i = 0,
				l = this.length,
				set = this,
				iNoClone = l - 1,
				value = args[0],
				isFunction = jQuery.isFunction( value );

			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
					( l > 1 && typeof value === "string" &&
						!support.checkClone && rchecked.test( value ) ) ) {
				return this.each(function( index ) {
					var self = set.eq( index );
					if ( isFunction ) {
						args[0] = value.call( this, index, self.html() );
					}
					self.domManip( args, callback );
				});
			}

			if ( l ) {
				fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
				first = fragment.firstChild;

				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}

				if ( first ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;

						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );

							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}

						callback.call( this[i], node, i );
					}

					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;

						// Reenable scripts
						jQuery.map( scripts, restoreScript );

						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
								!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

								if ( node.src ) {
									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
								}
							}
						}
					}

					// Fix #11809: Avoid leaking memory
					fragment = first = null;
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				i = 0,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone(true);
				jQuery( insert[i] )[ original ]( elems );

				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	});


	var iframe,
		elemdisplay = {};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var style,
			elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

				// Use of this method is a temporary fix (more like optmization) until something better comes along,
				// since it was removed from specification and supported only in FF
				style.display : jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}


	(function() {
		var shrinkWrapBlocksVal;

		support.shrinkWrapBlocks = function() {
			if ( shrinkWrapBlocksVal != null ) {
				return shrinkWrapBlocksVal;
			}

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			// Minified: var b,c,d
			var div, body, container;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if ( typeof div.style.zoom !== strundefined ) {
				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;" +
					"padding:1px;width:1px;zoom:1";
				div.appendChild( document.createElement( "div" ) ).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild( container );

			return shrinkWrapBlocksVal;
		};

	})();
	var rmargin = (/^margin/);

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



	var getStyles, curCSS,
		rposition = /^(top|right|bottom|left)$/;

	if ( window.getComputedStyle ) {
		getStyles = function( elem ) {
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			if ( elem.ownerDocument.defaultView.opener ) {
				return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
			}

			return window.getComputedStyle( elem, null );
		};

		curCSS = function( elem, name, computed ) {
			var width, minWidth, maxWidth, ret,
				style = elem.style;

			computed = computed || getStyles( elem );

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

			if ( computed ) {

				if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
					ret = jQuery.style( elem, name );
				}

				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
				// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
				if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "";
		};
	} else if ( document.documentElement.currentStyle ) {
		getStyles = function( elem ) {
			return elem.currentStyle;
		};

		curCSS = function( elem, name, computed ) {
			var left, rs, rsLeft, ret,
				style = elem.style;

			computed = computed || getStyles( elem );
			ret = computed ? computed[ name ] : undefined;

			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && style[ name ] ) {
				ret = style[ name ];
			}

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are proportional to the parent element instead
			// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
			if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;

				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					rs.left = rsLeft;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "" || "auto";
		};
	}




	function addGetHookIf( conditionFn, hookFn ) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				var condition = conditionFn();

				if ( condition == null ) {
					// The test was not ready at this point; screw the hook this time
					// but check again when needed next time.
					return;
				}

				if ( condition ) {
					// Hook not needed (or it's not possible to use it due to missing dependency),
					// remove it.
					// Since there are no other hooks for marginRight, remove the whole object.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.

				return (this.get = hookFn).apply( this, arguments );
			}
		};
	}


	(function() {
		// Minified: var b,c,d,e,f,g, h,i
		var div, style, a, pixelPositionVal, boxSizingReliableVal,
			reliableHiddenOffsetsVal, reliableMarginRightVal;

		// Setup
		div = document.createElement( "div" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName( "a" )[ 0 ];
		style = a && a.style;

		// Finish early in limited (non-browser) environments
		if ( !style ) {
			return;
		}

		style.cssText = "float:left;opacity:.5";

		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = style.opacity === "0.5";

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!style.cssFloat;

		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
			style.WebkitBoxSizing === "";

		jQuery.extend(support, {
			reliableHiddenOffsets: function() {
				if ( reliableHiddenOffsetsVal == null ) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},

			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},

			pixelPosition: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},

			// Support: Android 2.3
			reliableMarginRight: function() {
				if ( reliableMarginRightVal == null ) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			}
		});

		function computeStyleTests() {
			// Minified: var b,c,d,j
			var div, body, container, contents;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
				"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
				"border:1px;padding:1px;width:4px;position:absolute";

			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = false;
			reliableMarginRightVal = true;

			// Check for getComputedStyle so that this code is not run in IE<9.
			if ( window.getComputedStyle ) {
				pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
				boxSizingReliableVal =
					( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

				// Support: Android 2.3
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

				div.removeChild( contents );
			}

			// Support: IE8
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}

			body.removeChild( container );
		}

	})();


	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var
			ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity\s*=\s*([^)]*)/,

		// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
		rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( style, name ) {

		// shortcut for names that are not vendor prefixed
		if ( name in style ) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name.charAt(0).toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in style ) {
				return name;
			}
		}

		return origName;
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = jQuery._data( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {
			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test(val) ) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// convert relative number strings (+= or -=) to relative numbers. #7345
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}

				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[ name ] = value;
					} catch(e) {}
				}

			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var num, val, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
						jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						}) :
						getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	});

	if ( !support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {
				// IE uses filters for opacity
				return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
			},

			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ( ( value >= 1 || value === "" ) &&
						jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
						style.removeAttribute ) {

					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );

					// if there is no filter style applied in a css rule or unset inline opacity, we are done
					if ( value === "" || currentStyle && !currentStyle.filter ) {
						return;
					}
				}

				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}

	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each(function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			});
		}
	});


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				if ( tween.elem[ tween.prop ] != null &&
					(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
					return tween.elem[ tween.prop ];
				}

				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
		rrun = /queueHooks$/,
		animationPrefilters = [ defaultPrefilter ],
		tweeners = {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value ),
					target = tween.cur(),
					parts = rfxnum.exec( value ),
					unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

					// Starting value computation is required for potential unit mismatches
					start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
						rfxnum.exec( jQuery.css( tween.elem, prop ) ),
					scale = 1,
					maxIterations = 20;

				if ( start && start[ 3 ] !== unit ) {
					// Trust units reported by jQuery.css
					unit = unit || start[ 3 ];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				// Update tween properties
				if ( parts ) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[ 1 ] ?
						start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
						+parts[ 2 ];
				}

				return tween;
			} ]
		};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function() {
			fxNow = undefined;
		});
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			attrs = { height: type },
			i = 0;

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( (tween = collection[ index ].call( animation, prop, value )) ) {

				// we're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = jQuery._data( elem, "fxshow" );

		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function() {
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always(function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				});
			});
		}

		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			if ( !support.shrinkWrapBlocks() ) {
				anim.always(function() {
					style.overflow = opts.overflow[ 0 ];
					style.overflowX = opts.overflow[ 1 ];
					style.overflowY = opts.overflow[ 2 ];
				});
			}
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data( elem, "fxshow", {} );
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done(function() {
					jQuery( elem ).hide();
				});
			}
			anim.done(function() {
				var prop;
				jQuery._removeData( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			});
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always( function() {
				// don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
					// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ]);

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, { specialEasing: {} }, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			}),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.split(" ");
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				tweeners[ prop ] = tweeners[ prop ] || [];
				tweeners[ prop ].unshift( callback );
			}
		},

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				animationPrefilters.unshift( callback );
			} else {
				animationPrefilters.push( callback );
			}
		}
	});

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function( speed, to, easing, callback ) {

			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || jQuery._data( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each(function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			});
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each(function() {
				var index,
					data = jQuery._data( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// enable finishing flag on private data
				data.finish = true;

				// empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	};


	(function() {
		// Minified: var a,b,c,d,e
		var input, div, select, a, opt;

		// Setup
		div = document.createElement( "div" );
		div.setAttribute( "className", "t" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName("a")[ 0 ];

		// First batch of tests.
		select = document.createElement("select");
		opt = select.appendChild( document.createElement("option") );
		input = div.getElementsByTagName("input")[ 0 ];

		a.style.cssText = "top:1px";

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test( a.getAttribute("style") );

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute("href") === "/a";

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;

		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement("form").enctype;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement( "input" );
		input.setAttribute( "value", "" );
		support.input = input.getAttribute( "value" ) === "";

		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute( "type", "radio" );
		support.radioValue = input.value === "t";
	})();


	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
						// handle most common string cases
						ret.replace(rreturn, "") :
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each(function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// oldIE doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
								( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;

							} catch ( _ ) {

								// Will be executed only in IE6
								option.scrollHeight;
							}

						} else {
							option.selected = false;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}

					return options;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				// Support: Webkit
				// "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});




	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle,
		ruseDefault = /^(?:checked|selected)$/i,
		getSetAttribute = support.getSetAttribute,
		getSetInput = support.input;

	jQuery.fn.extend({
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		}
	});

	jQuery.extend({
		attr: function( elem, name, value ) {
			var hooks, ret,
				nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === strundefined ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {

				if ( value === null ) {
					jQuery.removeAttr( elem, name );

				} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;

				} else {
					elem.setAttribute( name, value + "" );
					return value;
				}

			} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				ret = jQuery.find.attr( elem, name );

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ?
					undefined :
					ret;
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( (name = attrNames[i++]) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
						// Set corresponding property to false
						if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
							elem[ propName ] = false;
						// Support: IE<9
						// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[ jQuery.camelCase( "default-" + name ) ] =
								elem[ propName ] = false;
						}

					// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr( elem, name, "" );
					}

					elem.removeAttribute( getSetAttribute ? name : propName );
				}
			}
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hook for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
				// IE<8 needs the *property* name
				elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

			// Use defaultChecked and defaultSelected for oldIE
			} else {
				elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
			}

			return name;
		}
	};

	// Retrieve booleans specially
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
			function( elem, name, isXML ) {
				var ret, handle;
				if ( !isXML ) {
					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[ name ];
					attrHandle[ name ] = ret;
					ret = getter( elem, name, isXML ) != null ?
						name.toLowerCase() :
						null;
					attrHandle[ name ] = handle;
				}
				return ret;
			} :
			function( elem, name, isXML ) {
				if ( !isXML ) {
					return elem[ jQuery.camelCase( "default-" + name ) ] ?
						name.toLowerCase() :
						null;
				}
			};
	});

	// fix oldIE attroperties
	if ( !getSetInput || !getSetAttribute ) {
		jQuery.attrHooks.value = {
			set: function( elem, value, name ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {
					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set( elem, value, name );
				}
			}
		};
	}

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {

		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function( elem, value, name ) {
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					elem.setAttributeNode(
						(ret = elem.ownerDocument.createAttribute( name ))
					);
				}

				ret.value = value += "";

				// Break association with cloned elements by also using setAttribute (#9646)
				if ( name === "value" || value === elem.getAttribute( name ) ) {
					return value;
				}
			}
		};

		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords =
			function( elem, name, isXML ) {
				var ret;
				if ( !isXML ) {
					return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
						ret.value :
						null;
				}
			};

		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret = elem.getAttributeNode( name );
				if ( ret && ret.specified ) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};

		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function( elem, value, name ) {
				nodeHook.set( elem, value === "" ? false : value, name );
			}
		};

		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each([ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			};
		});
	}

	if ( !support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {
				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case senstitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = value + "" );
			}
		};
	}




	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each(function() {
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch( e ) {}
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;

			// don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
					ret :
					( elem[ name ] = value );

			} else {
				return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
					ret :
					elem[ name ];
			}
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {
					// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
				}
			}
		}
	});

	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !support.hrefNormalized ) {
		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each([ "href", "src" ], function( i, name ) {
			jQuery.propHooks[ name ] = {
				get: function( elem ) {
					return elem.getAttribute( name, 4 );
				}
			};
		});
	}

	// Support: Safari, IE9+
	// mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;

				if ( parent ) {
					parent.selectedIndex;

					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}

	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	});

	// IE6/7 call enctype encoding
	if ( !support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}




	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				i = 0,
				len = this.length,
				proceed = typeof value === "string" && value;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call( this, j, this.className ) );
				});
			}

			if ( proceed ) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						" "
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				i = 0,
				len = this.length,
				proceed = arguments.length === 0 || typeof value === "string" && value;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call( this, j, this.className ) );
				});
			}
			if ( proceed ) {
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						""
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim( cur ) : "";
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}

			return this.each(function() {
				if ( type === "string" ) {
					// toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						classNames = value.match( rnotwhite ) || [];

					while ( (className = classNames[ i++ ]) ) {
						// check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( type === strundefined || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						jQuery._data( this, "__className__", this.className );
					}

					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
				}
			});
		},

		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
					return true;
				}
			}

			return false;
		}
	});




	// Return jQuery for attributes-only inclusion


	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	});

	jQuery.fn.extend({
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		},

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
		}
	});


	var nonce = jQuery.now();

	var rquery = (/\?/);



	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON = function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse( data + "" );
		}

		var requireNonComma,
			depth = null,
			str = jQuery.trim( data + "" );

		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

			// Force termination if we see a misplaced comma
			if ( requireNonComma && comma ) {
				depth = 0;
			}

			// Perform no more replacements after returning to outermost depth
			if ( depth === 0 ) {
				return token;
			}

			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;

			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;

			// Remove this token
			return "";
		}) ) ?
			( Function( "return " + str ) )() :
			jQuery.error( "Invalid JSON: " + data );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data, "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		// Document location
		ajaxLocParts,
		ajaxLocation,

		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*");

	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch( e ) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement( "a" );
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {
				// For each dataType in the dataTypeExpression
				while ( (dataType = dataTypes[i++]) ) {
					// Prepend if requested
					if ( dataType.charAt( 0 ) === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

					// Otherwise append
					} else {
						(structure[ dataType ] = structure[ dataType ] || []).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			});
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var deep, key,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
		var firstDataType, ct, finalDataType, type,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var // Cross-domain detection vars
				parts,
				// Loop variable
				i,
				// URL without anti-cache param
				cacheURL,
				// Response headers as string
				responseHeadersString,
				// timeout handle
				timeoutTimer,

				// To know if global events are to be dispatched
				fireGlobals,

				transport,
				// Response headers
				responseHeaders,
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// The jqXHR state
				state = 0,
				// Default abort message
				strAbort = "canceled",
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( (match = rheaders.exec( responseHeadersString )) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout(function() {
						jqXHR.abort("timeout");
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	});

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};


	jQuery.fn.extend({
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function(i) {
					jQuery(this).wrapAll( html.call(this, i) );
				});
			}

			if ( this[0] ) {
				// The elements to wrap the target around
				var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

				if ( this[0].parentNode ) {
					wrap.insertBefore( this[0] );
				}

				wrap.map(function() {
					var elem = this;

					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}

					return elem;
				}).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function(i) {
					jQuery(this).wrapInner( html.call(this, i) );
				});
			}

			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			});
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each(function(i) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},

		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		}
	});


	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!support.reliableHiddenOffsets() &&
				((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );

				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend({
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map(function() {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			})
			.filter(function() {
				var type = this.type;
				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			})
			.map(function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});


	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
		// Support: IE6+
		function() {

			// XHR cannot access local files, always use ActiveX for that case
			return !this.isLocal &&

				// Support: IE7-8
				// oldIE XHR does not support non-RFC2616 methods (#13240)
				// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
				// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
				// Although this check for six methods instead of eight
				// since IE also does not support "trace" and "connect"
				/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

				createStandardXHR() || createActiveXHR();
		} :
		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( undefined, true );
			}
		});
	}

	// Determine support properties
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	xhrSupported = support.ajax = !!xhrSupported;

	// Create transport if the browser can provide an xhr
	if ( xhrSupported ) {

		jQuery.ajaxTransport(function( options ) {
			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !options.crossDomain || support.cors ) {

				var callback;

				return {
					send: function( headers, complete ) {
						var i,
							xhr = options.xhr(),
							id = ++xhrId;

						// Open the socket
						xhr.open( options.type, options.url, options.async, options.username, options.password );

						// Apply custom fields if provided
						if ( options.xhrFields ) {
							for ( i in options.xhrFields ) {
								xhr[ i ] = options.xhrFields[ i ];
							}
						}

						// Override mime type if needed
						if ( options.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( options.mimeType );
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !options.crossDomain && !headers["X-Requested-With"] ) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for ( i in headers ) {
							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if ( headers[ i ] !== undefined ) {
								xhr.setRequestHeader( i, headers[ i ] + "" );
							}
						}

						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( options.hasContent && options.data ) || null );

						// Listener
						callback = function( _, isAbort ) {
							var status, statusText, responses;

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
								// Clean up
								delete xhrCallbacks[ id ];
								callback = undefined;
								xhr.onreadystatechange = jQuery.noop;

								// Abort manually if needed
								if ( isAbort ) {
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;

									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && options.isLocal && !options.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}

							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, xhr.getAllResponseHeaders() );
							}
						};

						if ( !options.async ) {
							// if we're in sync mode we fire the callback
							callback();
						} else if ( xhr.readyState === 4 ) {
							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							setTimeout( callback );
						} else {
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
						}
					},

					abort: function() {
						if ( callback ) {
							callback( undefined, true );
						}
					}
				};
			}
		});
	}

	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch( e ) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch( e ) {}
	}




	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});

	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function(s) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {

			var script,
				head = document.head || jQuery("head")[0] || document.documentElement;

			return {

				send: function( _, callback ) {

					script = document.createElement("script");

					script.async = true;

					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {

						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;

							// Remove the script
							if ( script.parentNode ) {
								script.parentNode.removeChild( script );
							}

							// Dereference the script
							script = null;

							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};

					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore( script, head.firstChild );
				},

				abort: function() {
					if ( script ) {
						script.onload( undefined, true );
					}
				}
			};
		}
	});




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function() {
				// Restore preexisting value
				window[ callbackName ] = overwritten;

				// Save back as free
				if ( s[ callbackName ] ) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, response, type,
			self = this,
			off = url.indexOf(" ");

		if ( off >= 0 ) {
			selector = jQuery.trim( url.slice( off, url.length ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			}).complete( callback && function( jqXHR, status ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			});
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	});




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};





	var docElem = window.document.documentElement;

	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

			// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend({
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each(function( i ) {
						jQuery.offset.setOffset( this, options, i );
					});
			}

			var docElem, win,
				box = { top: 0, left: 0 },
				elem = this[ 0 ],
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== strundefined ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
				left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				parentOffset = { top: 0, left: 0 },
				elem = this[ 0 ];

			// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
			};
		},

		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || docElem;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = /Y/.test( prop );

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? (prop in win) ? win[ prop ] :
						win.document.documentElement[ method ] :
						elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						top ? val : jQuery( win ).scrollTop()
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});

	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		});
	});


	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === strundefined ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;

	}));


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// ----------------------------------------------------------------------------
	// Buzz, a Javascript HTML5 Audio library
	// v1.1.10 - Built 2015-04-20 13:05
	// Licensed under the MIT license.
	// http://buzz.jaysalvat.com/
	// ----------------------------------------------------------------------------
	// Copyright (C) 2010-2015 Jay Salvat
	// http://jaysalvat.com/
	// ----------------------------------------------------------------------------

	(function(context, factory) {
	   "use strict";
	   if (typeof module !== "undefined" && module.exports) {
	       module.exports = factory();
	   } else if (true) {
	       !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	   } else {
	       context.buzz = factory();
	   }
	})(this, function() {
	   "use strict";
	   var AudioContext = window.AudioContext || window.webkitAudioContext;
	   var buzz = {
	       defaults: {
	           autoplay: false,
	           duration: 5e3,
	           formats: [],
	           loop: false,
	           placeholder: "--",
	           preload: "metadata",
	           volume: 80,
	           webAudioApi: false,
	           document: window.document
	       },
	       types: {
	           mp3: "audio/mpeg",
	           ogg: "audio/ogg",
	           wav: "audio/wav",
	           aac: "audio/aac",
	           m4a: "audio/x-m4a"
	       },
	       sounds: [],
	       el: document.createElement("audio"),
	       getAudioContext: function() {
	           if (this.audioCtx === undefined) {
	               try {
	                   this.audioCtx = AudioContext ? new AudioContext() : null;
	               } catch (e) {
	                   this.audioCtx = null;
	               }
	           }
	           return this.audioCtx;
	       },
	       sound: function(src, options) {
	           options = options || {};
	           var doc = options.document || buzz.defaults.document;
	           var pid = 0, events = [], eventsOnce = {}, supported = buzz.isSupported();
	           this.load = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.load();
	               return this;
	           };
	           this.play = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.play();
	               return this;
	           };
	           this.togglePlay = function() {
	               if (!supported) {
	                   return this;
	               }
	               if (this.sound.paused) {
	                   this.sound.play();
	               } else {
	                   this.sound.pause();
	               }
	               return this;
	           };
	           this.pause = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.pause();
	               return this;
	           };
	           this.isPaused = function() {
	               if (!supported) {
	                   return null;
	               }
	               return this.sound.paused;
	           };
	           this.stop = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.setTime(0);
	               this.sound.pause();
	               return this;
	           };
	           this.isEnded = function() {
	               if (!supported) {
	                   return null;
	               }
	               return this.sound.ended;
	           };
	           this.loop = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.loop = "loop";
	               this.bind("ended.buzzloop", function() {
	                   this.currentTime = 0;
	                   this.play();
	               });
	               return this;
	           };
	           this.unloop = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.removeAttribute("loop");
	               this.unbind("ended.buzzloop");
	               return this;
	           };
	           this.mute = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.muted = true;
	               return this;
	           };
	           this.unmute = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.muted = false;
	               return this;
	           };
	           this.toggleMute = function() {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.muted = !this.sound.muted;
	               return this;
	           };
	           this.isMuted = function() {
	               if (!supported) {
	                   return null;
	               }
	               return this.sound.muted;
	           };
	           this.setVolume = function(volume) {
	               if (!supported) {
	                   return this;
	               }
	               if (volume < 0) {
	                   volume = 0;
	               }
	               if (volume > 100) {
	                   volume = 100;
	               }
	               this.volume = volume;
	               this.sound.volume = volume / 100;
	               return this;
	           };
	           this.getVolume = function() {
	               if (!supported) {
	                   return this;
	               }
	               return this.volume;
	           };
	           this.increaseVolume = function(value) {
	               return this.setVolume(this.volume + (value || 1));
	           };
	           this.decreaseVolume = function(value) {
	               return this.setVolume(this.volume - (value || 1));
	           };
	           this.setTime = function(time) {
	               if (!supported) {
	                   return this;
	               }
	               var set = true;
	               this.whenReady(function() {
	                   if (set === true) {
	                       set = false;
	                       this.sound.currentTime = time;
	                   }
	               });
	               return this;
	           };
	           this.getTime = function() {
	               if (!supported) {
	                   return null;
	               }
	               var time = Math.round(this.sound.currentTime * 100) / 100;
	               return isNaN(time) ? buzz.defaults.placeholder : time;
	           };
	           this.setPercent = function(percent) {
	               if (!supported) {
	                   return this;
	               }
	               return this.setTime(buzz.fromPercent(percent, this.sound.duration));
	           };
	           this.getPercent = function() {
	               if (!supported) {
	                   return null;
	               }
	               var percent = Math.round(buzz.toPercent(this.sound.currentTime, this.sound.duration));
	               return isNaN(percent) ? buzz.defaults.placeholder : percent;
	           };
	           this.setSpeed = function(duration) {
	               if (!supported) {
	                   return this;
	               }
	               this.sound.playbackRate = duration;
	               return this;
	           };
	           this.getSpeed = function() {
	               if (!supported) {
	                   return null;
	               }
	               return this.sound.playbackRate;
	           };
	           this.getDuration = function() {
	               if (!supported) {
	                   return null;
	               }
	               var duration = Math.round(this.sound.duration * 100) / 100;
	               return isNaN(duration) ? buzz.defaults.placeholder : duration;
	           };
	           this.getPlayed = function() {
	               if (!supported) {
	                   return null;
	               }
	               return timerangeToArray(this.sound.played);
	           };
	           this.getBuffered = function() {
	               if (!supported) {
	                   return null;
	               }
	               return timerangeToArray(this.sound.buffered);
	           };
	           this.getSeekable = function() {
	               if (!supported) {
	                   return null;
	               }
	               return timerangeToArray(this.sound.seekable);
	           };
	           this.getErrorCode = function() {
	               if (supported && this.sound.error) {
	                   return this.sound.error.code;
	               }
	               return 0;
	           };
	           this.getErrorMessage = function() {
	               if (!supported) {
	                   return null;
	               }
	               switch (this.getErrorCode()) {
	                 case 1:
	                   return "MEDIA_ERR_ABORTED";

	                 case 2:
	                   return "MEDIA_ERR_NETWORK";

	                 case 3:
	                   return "MEDIA_ERR_DECODE";

	                 case 4:
	                   return "MEDIA_ERR_SRC_NOT_SUPPORTED";

	                 default:
	                   return null;
	               }
	           };
	           this.getStateCode = function() {
	               if (!supported) {
	                   return null;
	               }
	               return this.sound.readyState;
	           };
	           this.getStateMessage = function() {
	               if (!supported) {
	                   return null;
	               }
	               switch (this.getStateCode()) {
	                 case 0:
	                   return "HAVE_NOTHING";

	                 case 1:
	                   return "HAVE_METADATA";

	                 case 2:
	                   return "HAVE_CURRENT_DATA";

	                 case 3:
	                   return "HAVE_FUTURE_DATA";

	                 case 4:
	                   return "HAVE_ENOUGH_DATA";

	                 default:
	                   return null;
	               }
	           };
	           this.getNetworkStateCode = function() {
	               if (!supported) {
	                   return null;
	               }
	               return this.sound.networkState;
	           };
	           this.getNetworkStateMessage = function() {
	               if (!supported) {
	                   return null;
	               }
	               switch (this.getNetworkStateCode()) {
	                 case 0:
	                   return "NETWORK_EMPTY";

	                 case 1:
	                   return "NETWORK_IDLE";

	                 case 2:
	                   return "NETWORK_LOADING";

	                 case 3:
	                   return "NETWORK_NO_SOURCE";

	                 default:
	                   return null;
	               }
	           };
	           this.set = function(key, value) {
	               if (!supported) {
	                   return this;
	               }
	               this.sound[key] = value;
	               return this;
	           };
	           this.get = function(key) {
	               if (!supported) {
	                   return null;
	               }
	               return key ? this.sound[key] : this.sound;
	           };
	           this.bind = function(types, func) {
	               if (!supported) {
	                   return this;
	               }
	               types = types.split(" ");
	               var self = this, efunc = function(e) {
	                   func.call(self, e);
	               };
	               for (var t = 0; t < types.length; t++) {
	                   var type = types[t], idx = type;
	                   type = idx.split(".")[0];
	                   events.push({
	                       idx: idx,
	                       func: efunc
	                   });
	                   this.sound.addEventListener(type, efunc, true);
	               }
	               return this;
	           };
	           this.unbind = function(types) {
	               if (!supported) {
	                   return this;
	               }
	               types = types.split(" ");
	               for (var t = 0; t < types.length; t++) {
	                   var idx = types[t], type = idx.split(".")[0];
	                   for (var i = 0; i < events.length; i++) {
	                       var namespace = events[i].idx.split(".");
	                       if (events[i].idx === idx || namespace[1] && namespace[1] === idx.replace(".", "")) {
	                           this.sound.removeEventListener(type, events[i].func, true);
	                           events.splice(i, 1);
	                       }
	                   }
	               }
	               return this;
	           };
	           this.bindOnce = function(type, func) {
	               if (!supported) {
	                   return this;
	               }
	               var self = this;
	               eventsOnce[pid++] = false;
	               this.bind(type + "." + pid, function() {
	                   if (!eventsOnce[pid]) {
	                       eventsOnce[pid] = true;
	                       func.call(self);
	                   }
	                   self.unbind(type + "." + pid);
	               });
	               return this;
	           };
	           this.trigger = function(types, detail) {
	               if (!supported) {
	                   return this;
	               }
	               types = types.split(" ");
	               for (var t = 0; t < types.length; t++) {
	                   var idx = types[t];
	                   for (var i = 0; i < events.length; i++) {
	                       var eventType = events[i].idx.split(".");
	                       if (events[i].idx === idx || eventType[0] && eventType[0] === idx.replace(".", "")) {
	                           var evt = doc.createEvent("HTMLEvents");
	                           evt.initEvent(eventType[0], false, true);
	                           evt.originalEvent = detail;
	                           this.sound.dispatchEvent(evt);
	                       }
	                   }
	               }
	               return this;
	           };
	           this.fadeTo = function(to, duration, callback) {
	               if (!supported) {
	                   return this;
	               }
	               if (duration instanceof Function) {
	                   callback = duration;
	                   duration = buzz.defaults.duration;
	               } else {
	                   duration = duration || buzz.defaults.duration;
	               }
	               var from = this.volume, delay = duration / Math.abs(from - to), self = this;
	               this.play();
	               function doFade() {
	                   setTimeout(function() {
	                       if (from < to && self.volume < to) {
	                           self.setVolume(self.volume += 1);
	                           doFade();
	                       } else if (from > to && self.volume > to) {
	                           self.setVolume(self.volume -= 1);
	                           doFade();
	                       } else if (callback instanceof Function) {
	                           callback.apply(self);
	                       }
	                   }, delay);
	               }
	               this.whenReady(function() {
	                   doFade();
	               });
	               return this;
	           };
	           this.fadeIn = function(duration, callback) {
	               if (!supported) {
	                   return this;
	               }
	               return this.setVolume(0).fadeTo(100, duration, callback);
	           };
	           this.fadeOut = function(duration, callback) {
	               if (!supported) {
	                   return this;
	               }
	               return this.fadeTo(0, duration, callback);
	           };
	           this.fadeWith = function(sound, duration) {
	               if (!supported) {
	                   return this;
	               }
	               this.fadeOut(duration, function() {
	                   this.stop();
	               });
	               sound.play().fadeIn(duration);
	               return this;
	           };
	           this.whenReady = function(func) {
	               if (!supported) {
	                   return null;
	               }
	               var self = this;
	               if (this.sound.readyState === 0) {
	                   this.bind("canplay.buzzwhenready", function() {
	                       func.call(self);
	                   });
	               } else {
	                   func.call(self);
	               }
	           };
	           this.addSource = function(src) {
	               var self = this, source = doc.createElement("source");
	               source.src = src;
	               if (buzz.types[getExt(src)]) {
	                   source.type = buzz.types[getExt(src)];
	               }
	               this.sound.appendChild(source);
	               source.addEventListener("error", function(e) {
	                   self.trigger("sourceerror", e);
	               });
	               return source;
	           };
	           function timerangeToArray(timeRange) {
	               var array = [], length = timeRange.length - 1;
	               for (var i = 0; i <= length; i++) {
	                   array.push({
	                       start: timeRange.start(i),
	                       end: timeRange.end(i)
	                   });
	               }
	               return array;
	           }
	           function getExt(filename) {
	               return filename.split(".").pop();
	           }
	           if (supported && src) {
	               for (var i in buzz.defaults) {
	                   if (buzz.defaults.hasOwnProperty(i)) {
	                       if (options[i] === undefined) {
	                           options[i] = buzz.defaults[i];
	                       }
	                   }
	               }
	               this.sound = doc.createElement("audio");
	               if (options.webAudioApi) {
	                   var audioCtx = buzz.getAudioContext();
	                   if (audioCtx) {
	                       this.source = audioCtx.createMediaElementSource(this.sound);
	                       this.source.connect(audioCtx.destination);
	                   }
	               }
	               if (src instanceof Array) {
	                   for (var j in src) {
	                       if (src.hasOwnProperty(j)) {
	                           this.addSource(src[j]);
	                       }
	                   }
	               } else if (options.formats.length) {
	                   for (var k in options.formats) {
	                       if (options.formats.hasOwnProperty(k)) {
	                           this.addSource(src + "." + options.formats[k]);
	                       }
	                   }
	               } else {
	                   this.addSource(src);
	               }
	               if (options.loop) {
	                   this.loop();
	               }
	               if (options.autoplay) {
	                   this.sound.autoplay = "autoplay";
	               }
	               if (options.preload === true) {
	                   this.sound.preload = "auto";
	               } else if (options.preload === false) {
	                   this.sound.preload = "none";
	               } else {
	                   this.sound.preload = options.preload;
	               }
	               this.setVolume(options.volume);
	               buzz.sounds.push(this);
	           }
	       },
	       group: function(sounds) {
	           sounds = argsToArray(sounds, arguments);
	           this.getSounds = function() {
	               return sounds;
	           };
	           this.add = function(soundArray) {
	               soundArray = argsToArray(soundArray, arguments);
	               for (var a = 0; a < soundArray.length; a++) {
	                   sounds.push(soundArray[a]);
	               }
	           };
	           this.remove = function(soundArray) {
	               soundArray = argsToArray(soundArray, arguments);
	               for (var a = 0; a < soundArray.length; a++) {
	                   for (var i = 0; i < sounds.length; i++) {
	                       if (sounds[i] === soundArray[a]) {
	                           sounds.splice(i, 1);
	                           break;
	                       }
	                   }
	               }
	           };
	           this.load = function() {
	               fn("load");
	               return this;
	           };
	           this.play = function() {
	               fn("play");
	               return this;
	           };
	           this.togglePlay = function() {
	               fn("togglePlay");
	               return this;
	           };
	           this.pause = function(time) {
	               fn("pause", time);
	               return this;
	           };
	           this.stop = function() {
	               fn("stop");
	               return this;
	           };
	           this.mute = function() {
	               fn("mute");
	               return this;
	           };
	           this.unmute = function() {
	               fn("unmute");
	               return this;
	           };
	           this.toggleMute = function() {
	               fn("toggleMute");
	               return this;
	           };
	           this.setVolume = function(volume) {
	               fn("setVolume", volume);
	               return this;
	           };
	           this.increaseVolume = function(value) {
	               fn("increaseVolume", value);
	               return this;
	           };
	           this.decreaseVolume = function(value) {
	               fn("decreaseVolume", value);
	               return this;
	           };
	           this.loop = function() {
	               fn("loop");
	               return this;
	           };
	           this.unloop = function() {
	               fn("unloop");
	               return this;
	           };
	           this.setSpeed = function(speed) {
	               fn("setSpeed", speed);
	               return this;
	           };
	           this.setTime = function(time) {
	               fn("setTime", time);
	               return this;
	           };
	           this.set = function(key, value) {
	               fn("set", key, value);
	               return this;
	           };
	           this.bind = function(type, func) {
	               fn("bind", type, func);
	               return this;
	           };
	           this.unbind = function(type) {
	               fn("unbind", type);
	               return this;
	           };
	           this.bindOnce = function(type, func) {
	               fn("bindOnce", type, func);
	               return this;
	           };
	           this.trigger = function(type) {
	               fn("trigger", type);
	               return this;
	           };
	           this.fade = function(from, to, duration, callback) {
	               fn("fade", from, to, duration, callback);
	               return this;
	           };
	           this.fadeIn = function(duration, callback) {
	               fn("fadeIn", duration, callback);
	               return this;
	           };
	           this.fadeOut = function(duration, callback) {
	               fn("fadeOut", duration, callback);
	               return this;
	           };
	           function fn() {
	               var args = argsToArray(null, arguments), func = args.shift();
	               for (var i = 0; i < sounds.length; i++) {
	                   sounds[i][func].apply(sounds[i], args);
	               }
	           }
	           function argsToArray(array, args) {
	               return array instanceof Array ? array : Array.prototype.slice.call(args);
	           }
	       },
	       all: function() {
	           return new buzz.group(buzz.sounds);
	       },
	       isSupported: function() {
	           return !!buzz.el.canPlayType;
	       },
	       isOGGSupported: function() {
	           return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/ogg; codecs="vorbis"');
	       },
	       isWAVSupported: function() {
	           return !!buzz.el.canPlayType && buzz.el.canPlayType('audio/wav; codecs="1"');
	       },
	       isMP3Supported: function() {
	           return !!buzz.el.canPlayType && buzz.el.canPlayType("audio/mpeg;");
	       },
	       isAACSupported: function() {
	           return !!buzz.el.canPlayType && (buzz.el.canPlayType("audio/x-m4a;") || buzz.el.canPlayType("audio/aac;"));
	       },
	       toTimer: function(time, withHours) {
	           var h, m, s;
	           h = Math.floor(time / 3600);
	           h = isNaN(h) ? "--" : h >= 10 ? h : "0" + h;
	           m = withHours ? Math.floor(time / 60 % 60) : Math.floor(time / 60);
	           m = isNaN(m) ? "--" : m >= 10 ? m : "0" + m;
	           s = Math.floor(time % 60);
	           s = isNaN(s) ? "--" : s >= 10 ? s : "0" + s;
	           return withHours ? h + ":" + m + ":" + s : m + ":" + s;
	       },
	       fromTimer: function(time) {
	           var splits = time.toString().split(":");
	           if (splits && splits.length === 3) {
	               time = parseInt(splits[0], 10) * 3600 + parseInt(splits[1], 10) * 60 + parseInt(splits[2], 10);
	           }
	           if (splits && splits.length === 2) {
	               time = parseInt(splits[0], 10) * 60 + parseInt(splits[1], 10);
	           }
	           return time;
	       },
	       toPercent: function(value, total, decimal) {
	           var r = Math.pow(10, decimal || 0);
	           return Math.round(value * 100 / total * r) / r;
	       },
	       fromPercent: function(percent, total, decimal) {
	           var r = Math.pow(10, decimal || 0);
	           return Math.round(total / 100 * percent * r) / r;
	       }
	   };
	   return buzz;
	});


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	

	//
	// Generated on Wed Jun 25 2014 00:16:13 GMT-0700 (PDT) by Nodejitsu, Inc (Using Codesurgeon).
	// Version 1.2.4
	//

	(function (exports) {

	/*
	 * browser.js: Browser specific functionality for director.
	 *
	 * (C) 2011, Nodejitsu Inc.
	 * MIT LICENSE
	 *
	 */

	var dloc = document.location;

	function dlocHashEmpty() {
	  // Non-IE browsers return '' when the address bar shows '#'; Director's logic
	  // assumes both mean empty.
	  return dloc.hash === '' || dloc.hash === '#';
	}

	var listener = {
	  mode: 'modern',
	  hash: dloc.hash,
	  history: false,

	  check: function () {
	    var h = dloc.hash;
	    if (h != this.hash) {
	      this.hash = h;
	      this.onHashChanged();
	    }
	  },

	  fire: function () {
	    if (this.mode === 'modern') {
	      this.history === true ? window.onpopstate() : window.onhashchange();
	    }
	    else {
	      this.onHashChanged();
	    }
	  },

	  init: function (fn, history) {
	    var self = this;
	    this.history = history;

	    if (!Router.listeners) {
	      Router.listeners = [];
	    }

	    function onchange(onChangeEvent) {
	      for (var i = 0, l = Router.listeners.length; i < l; i++) {
	        Router.listeners[i](onChangeEvent);
	      }
	    }

	    //note IE8 is being counted as 'modern' because it has the hashchange event
	    if ('onhashchange' in window && (document.documentMode === undefined
	      || document.documentMode > 7)) {
	      // At least for now HTML5 history is available for 'modern' browsers only
	      if (this.history === true) {
	        // There is an old bug in Chrome that causes onpopstate to fire even
	        // upon initial page load. Since the handler is run manually in init(),
	        // this would cause Chrome to run it twise. Currently the only
	        // workaround seems to be to set the handler after the initial page load
	        // http://code.google.com/p/chromium/issues/detail?id=63040
	        setTimeout(function() {
	          window.onpopstate = onchange;
	        }, 500);
	      }
	      else {
	        window.onhashchange = onchange;
	      }
	      this.mode = 'modern';
	    }
	    else {
	      //
	      // IE support, based on a concept by Erik Arvidson ...
	      //
	      var frame = document.createElement('iframe');
	      frame.id = 'state-frame';
	      frame.style.display = 'none';
	      document.body.appendChild(frame);
	      this.writeFrame('');

	      if ('onpropertychange' in document && 'attachEvent' in document) {
	        document.attachEvent('onpropertychange', function () {
	          if (event.propertyName === 'location') {
	            self.check();
	          }
	        });
	      }

	      window.setInterval(function () { self.check(); }, 50);

	      this.onHashChanged = onchange;
	      this.mode = 'legacy';
	    }

	    Router.listeners.push(fn);

	    return this.mode;
	  },

	  destroy: function (fn) {
	    if (!Router || !Router.listeners) {
	      return;
	    }

	    var listeners = Router.listeners;

	    for (var i = listeners.length - 1; i >= 0; i--) {
	      if (listeners[i] === fn) {
	        listeners.splice(i, 1);
	      }
	    }
	  },

	  setHash: function (s) {
	    // Mozilla always adds an entry to the history
	    if (this.mode === 'legacy') {
	      this.writeFrame(s);
	    }

	    if (this.history === true) {
	      window.history.pushState({}, document.title, s);
	      // Fire an onpopstate event manually since pushing does not obviously
	      // trigger the pop event.
	      this.fire();
	    } else {
	      dloc.hash = (s[0] === '/') ? s : '/' + s;
	    }
	    return this;
	  },

	  writeFrame: function (s) {
	    // IE support...
	    var f = document.getElementById('state-frame');
	    var d = f.contentDocument || f.contentWindow.document;
	    d.open();
	    d.write("<script>_hash = '" + s + "'; onload = parent.listener.syncHash;<script>");
	    d.close();
	  },

	  syncHash: function () {
	    // IE support...
	    var s = this._hash;
	    if (s != dloc.hash) {
	      dloc.hash = s;
	    }
	    return this;
	  },

	  onHashChanged: function () {}
	};

	var Router = exports.Router = function (routes) {
	  if (!(this instanceof Router)) return new Router(routes);

	  this.params   = {};
	  this.routes   = {};
	  this.methods  = ['on', 'once', 'after', 'before'];
	  this.scope    = [];
	  this._methods = {};

	  this._insert = this.insert;
	  this.insert = this.insertEx;

	  this.historySupport = (window.history != null ? window.history.pushState : null) != null

	  this.configure();
	  this.mount(routes || {});
	};

	Router.prototype.init = function (r) {
	  var self = this;
	  this.handler = function(onChangeEvent) {
	    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;
	    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '');
	    self.dispatch('on', url.charAt(0) === '/' ? url : '/' + url);
	  };

	  listener.init(this.handler, this.history);

	  if (this.history === false) {
	    if (dlocHashEmpty() && r) {
	      dloc.hash = r;
	    } else if (!dlocHashEmpty()) {
	      self.dispatch('on', '/' + dloc.hash.replace(/^(#\/|#|\/)/, ''));
	    }
	  }
	  else {
	    var routeTo = dlocHashEmpty() && r ? r : !dlocHashEmpty() ? dloc.hash.replace(/^#/, '') : null;
	    if (routeTo) {
	      window.history.replaceState({}, document.title, routeTo);
	    }

	    // Router has been initialized, but due to the chrome bug it will not
	    // yet actually route HTML5 history state changes. Thus, decide if should route.
	    if (routeTo || this.run_in_init === true) {
	      this.handler();
	    }
	  }

	  return this;
	};

	Router.prototype.explode = function () {
	  var v = this.history === true ? this.getPath() : dloc.hash;
	  if (v.charAt(1) === '/') { v=v.slice(1) }
	  return v.slice(1, v.length).split("/");
	};

	Router.prototype.setRoute = function (i, v, val) {
	  var url = this.explode();

	  if (typeof i === 'number' && typeof v === 'string') {
	    url[i] = v;
	  }
	  else if (typeof val === 'string') {
	    url.splice(i, v, s);
	  }
	  else {
	    url = [i];
	  }

	  listener.setHash(url.join('/'));
	  return url;
	};

	//
	// ### function insertEx(method, path, route, parent)
	// #### @method {string} Method to insert the specific `route`.
	// #### @path {Array} Parsed path to insert the `route` at.
	// #### @route {Array|function} Route handlers to insert.
	// #### @parent {Object} **Optional** Parent "routes" to insert into.
	// insert a callback that will only occur once per the matched route.
	//
	Router.prototype.insertEx = function(method, path, route, parent) {
	  if (method === "once") {
	    method = "on";
	    route = function(route) {
	      var once = false;
	      return function() {
	        if (once) return;
	        once = true;
	        return route.apply(this, arguments);
	      };
	    }(route);
	  }
	  return this._insert(method, path, route, parent);
	};

	Router.prototype.getRoute = function (v) {
	  var ret = v;

	  if (typeof v === "number") {
	    ret = this.explode()[v];
	  }
	  else if (typeof v === "string"){
	    var h = this.explode();
	    ret = h.indexOf(v);
	  }
	  else {
	    ret = this.explode();
	  }

	  return ret;
	};

	Router.prototype.destroy = function () {
	  listener.destroy(this.handler);
	  return this;
	};

	Router.prototype.getPath = function () {
	  var path = window.location.pathname;
	  if (path.substr(0, 1) !== '/') {
	    path = '/' + path;
	  }
	  return path;
	};
	function _every(arr, iterator) {
	  for (var i = 0; i < arr.length; i += 1) {
	    if (iterator(arr[i], i, arr) === false) {
	      return;
	    }
	  }
	}

	function _flatten(arr) {
	  var flat = [];
	  for (var i = 0, n = arr.length; i < n; i++) {
	    flat = flat.concat(arr[i]);
	  }
	  return flat;
	}

	function _asyncEverySeries(arr, iterator, callback) {
	  if (!arr.length) {
	    return callback();
	  }
	  var completed = 0;
	  (function iterate() {
	    iterator(arr[completed], function(err) {
	      if (err || err === false) {
	        callback(err);
	        callback = function() {};
	      } else {
	        completed += 1;
	        if (completed === arr.length) {
	          callback();
	        } else {
	          iterate();
	        }
	      }
	    });
	  })();
	}

	function paramifyString(str, params, mod) {
	  mod = str;
	  for (var param in params) {
	    if (params.hasOwnProperty(param)) {
	      mod = params[param](str);
	      if (mod !== str) {
	        break;
	      }
	    }
	  }
	  return mod === str ? "([._a-zA-Z0-9-]+)" : mod;
	}

	function regifyString(str, params) {
	  var matches, last = 0, out = "";
	  while (matches = str.substr(last).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/)) {
	    last = matches.index + matches[0].length;
	    matches[0] = matches[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)");
	    out += str.substr(0, matches.index) + matches[0];
	  }
	  str = out += str.substr(last);
	  var captures = str.match(/:([^\/]+)/ig), capture, length;
	  if (captures) {
	    length = captures.length;
	    for (var i = 0; i < length; i++) {
	      capture = captures[i];
	      if (capture.slice(0, 2) === "::") {
	        str = capture.slice(1);
	      } else {
	        str = str.replace(capture, paramifyString(capture, params));
	      }
	    }
	  }
	  return str;
	}

	function terminator(routes, delimiter, start, stop) {
	  var last = 0, left = 0, right = 0, start = (start || "(").toString(), stop = (stop || ")").toString(), i;
	  for (i = 0; i < routes.length; i++) {
	    var chunk = routes[i];
	    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {
	      left = chunk.indexOf(start, last);
	      right = chunk.indexOf(stop, last);
	      if (~left && !~right || !~left && ~right) {
	        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);
	        routes = [ tmp ].concat(routes.slice((i || 1) + 1));
	      }
	      last = (right > left ? right : left) + 1;
	      i = 0;
	    } else {
	      last = 0;
	    }
	  }
	  return routes;
	}

	Router.prototype.configure = function(options) {
	  options = options || {};
	  for (var i = 0; i < this.methods.length; i++) {
	    this._methods[this.methods[i]] = true;
	  }
	  this.recurse = options.recurse || this.recurse || false;
	  this.async = options.async || false;
	  this.delimiter = options.delimiter || "/";
	  this.strict = typeof options.strict === "undefined" ? true : options.strict;
	  this.notfound = options.notfound;
	  this.resource = options.resource;
	  this.history = options.html5history && this.historySupport || false;
	  this.run_in_init = this.history === true && options.run_handler_in_init !== false;
	  this.every = {
	    after: options.after || null,
	    before: options.before || null,
	    on: options.on || null
	  };
	  return this;
	};

	Router.prototype.param = function(token, matcher) {
	  if (token[0] !== ":") {
	    token = ":" + token;
	  }
	  var compiled = new RegExp(token, "g");
	  this.params[token] = function(str) {
	    return str.replace(compiled, matcher.source || matcher);
	  };
	  return this;
	};

	Router.prototype.on = Router.prototype.route = function(method, path, route) {
	  var self = this;
	  if (!route && typeof path == "function") {
	    route = path;
	    path = method;
	    method = "on";
	  }
	  if (Array.isArray(path)) {
	    return path.forEach(function(p) {
	      self.on(method, p, route);
	    });
	  }
	  if (path.source) {
	    path = path.source.replace(/\\\//ig, "/");
	  }
	  if (Array.isArray(method)) {
	    return method.forEach(function(m) {
	      self.on(m.toLowerCase(), path, route);
	    });
	  }
	  path = path.split(new RegExp(this.delimiter));
	  path = terminator(path, this.delimiter);
	  this.insert(method, this.scope.concat(path), route);
	};

	Router.prototype.path = function(path, routesFn) {
	  var self = this, length = this.scope.length;
	  if (path.source) {
	    path = path.source.replace(/\\\//ig, "/");
	  }
	  path = path.split(new RegExp(this.delimiter));
	  path = terminator(path, this.delimiter);
	  this.scope = this.scope.concat(path);
	  routesFn.call(this, this);
	  this.scope.splice(length, path.length);
	};

	Router.prototype.dispatch = function(method, path, callback) {
	  var self = this, fns = this.traverse(method, path, this.routes, ""), invoked = this._invoked, after;
	  this._invoked = true;
	  if (!fns || fns.length === 0) {
	    this.last = [];
	    if (typeof this.notfound === "function") {
	      this.invoke([ this.notfound ], {
	        method: method,
	        path: path
	      }, callback);
	    }
	    return false;
	  }
	  if (this.recurse === "forward") {
	    fns = fns.reverse();
	  }
	  function updateAndInvoke() {
	    self.last = fns.after;
	    self.invoke(self.runlist(fns), self, callback);
	  }
	  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];
	  if (after && after.length > 0 && invoked) {
	    if (this.async) {
	      this.invoke(after, this, updateAndInvoke);
	    } else {
	      this.invoke(after, this);
	      updateAndInvoke();
	    }
	    return true;
	  }
	  updateAndInvoke();
	  return true;
	};

	Router.prototype.invoke = function(fns, thisArg, callback) {
	  var self = this;
	  var apply;
	  if (this.async) {
	    apply = function(fn, next) {
	      if (Array.isArray(fn)) {
	        return _asyncEverySeries(fn, apply, next);
	      } else if (typeof fn == "function") {
	        fn.apply(thisArg, (fns.captures || []).concat(next));
	      }
	    };
	    _asyncEverySeries(fns, apply, function() {
	      if (callback) {
	        callback.apply(thisArg, arguments);
	      }
	    });
	  } else {
	    apply = function(fn) {
	      if (Array.isArray(fn)) {
	        return _every(fn, apply);
	      } else if (typeof fn === "function") {
	        return fn.apply(thisArg, fns.captures || []);
	      } else if (typeof fn === "string" && self.resource) {
	        self.resource[fn].apply(thisArg, fns.captures || []);
	      }
	    };
	    _every(fns, apply);
	  }
	};

	Router.prototype.traverse = function(method, path, routes, regexp, filter) {
	  var fns = [], current, exact, match, next, that;
	  function filterRoutes(routes) {
	    if (!filter) {
	      return routes;
	    }
	    function deepCopy(source) {
	      var result = [];
	      for (var i = 0; i < source.length; i++) {
	        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];
	      }
	      return result;
	    }
	    function applyFilter(fns) {
	      for (var i = fns.length - 1; i >= 0; i--) {
	        if (Array.isArray(fns[i])) {
	          applyFilter(fns[i]);
	          if (fns[i].length === 0) {
	            fns.splice(i, 1);
	          }
	        } else {
	          if (!filter(fns[i])) {
	            fns.splice(i, 1);
	          }
	        }
	      }
	    }
	    var newRoutes = deepCopy(routes);
	    newRoutes.matched = routes.matched;
	    newRoutes.captures = routes.captures;
	    newRoutes.after = routes.after.filter(filter);
	    applyFilter(newRoutes);
	    return newRoutes;
	  }
	  if (path === this.delimiter && routes[method]) {
	    next = [ [ routes.before, routes[method] ].filter(Boolean) ];
	    next.after = [ routes.after ].filter(Boolean);
	    next.matched = true;
	    next.captures = [];
	    return filterRoutes(next);
	  }
	  for (var r in routes) {
	    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === "object" && !Array.isArray(routes[r]))) {
	      current = exact = regexp + this.delimiter + r;
	      if (!this.strict) {
	        exact += "[" + this.delimiter + "]?";
	      }
	      match = path.match(new RegExp("^" + exact));
	      if (!match) {
	        continue;
	      }
	      if (match[0] && match[0] == path && routes[r][method]) {
	        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];
	        next.after = [ routes[r].after ].filter(Boolean);
	        next.matched = true;
	        next.captures = match.slice(1);
	        if (this.recurse && routes === this.routes) {
	          next.push([ routes.before, routes.on ].filter(Boolean));
	          next.after = next.after.concat([ routes.after ].filter(Boolean));
	        }
	        return filterRoutes(next);
	      }
	      next = this.traverse(method, path, routes[r], current);
	      if (next.matched) {
	        if (next.length > 0) {
	          fns = fns.concat(next);
	        }
	        if (this.recurse) {
	          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));
	          next.after = next.after.concat([ routes[r].after ].filter(Boolean));
	          if (routes === this.routes) {
	            fns.push([ routes["before"], routes["on"] ].filter(Boolean));
	            next.after = next.after.concat([ routes["after"] ].filter(Boolean));
	          }
	        }
	        fns.matched = true;
	        fns.captures = next.captures;
	        fns.after = next.after;
	        return filterRoutes(fns);
	      }
	    }
	  }
	  return false;
	};

	Router.prototype.insert = function(method, path, route, parent) {
	  var methodType, parentType, isArray, nested, part;
	  path = path.filter(function(p) {
	    return p && p.length > 0;
	  });
	  parent = parent || this.routes;
	  part = path.shift();
	  if (/\:|\*/.test(part) && !/\\d|\\w/.test(part)) {
	    part = regifyString(part, this.params);
	  }
	  if (path.length > 0) {
	    parent[part] = parent[part] || {};
	    return this.insert(method, path, route, parent[part]);
	  }
	  if (!part && !path.length && parent === this.routes) {
	    methodType = typeof parent[method];
	    switch (methodType) {
	     case "function":
	      parent[method] = [ parent[method], route ];
	      return;
	     case "object":
	      parent[method].push(route);
	      return;
	     case "undefined":
	      parent[method] = route;
	      return;
	    }
	    return;
	  }
	  parentType = typeof parent[part];
	  isArray = Array.isArray(parent[part]);
	  if (parent[part] && !isArray && parentType == "object") {
	    methodType = typeof parent[part][method];
	    switch (methodType) {
	     case "function":
	      parent[part][method] = [ parent[part][method], route ];
	      return;
	     case "object":
	      parent[part][method].push(route);
	      return;
	     case "undefined":
	      parent[part][method] = route;
	      return;
	    }
	  } else if (parentType == "undefined") {
	    nested = {};
	    nested[method] = route;
	    parent[part] = nested;
	    return;
	  }
	  throw new Error("Invalid route context: " + parentType);
	};



	Router.prototype.extend = function(methods) {
	  var self = this, len = methods.length, i;
	  function extend(method) {
	    self._methods[method] = true;
	    self[method] = function() {
	      var extra = arguments.length === 1 ? [ method, "" ] : [ method ];
	      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));
	    };
	  }
	  for (i = 0; i < len; i++) {
	    extend(methods[i]);
	  }
	};

	Router.prototype.runlist = function(fns) {
	  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);
	  if (this.every && this.every.on) {
	    runlist.push(this.every.on);
	  }
	  runlist.captures = fns.captures;
	  runlist.source = fns.source;
	  return runlist;
	};

	Router.prototype.mount = function(routes, path) {
	  if (!routes || typeof routes !== "object" || Array.isArray(routes)) {
	    return;
	  }
	  var self = this;
	  path = path || [];
	  if (!Array.isArray(path)) {
	    path = path.split(self.delimiter);
	  }
	  function insertOrMount(route, local) {
	    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === "" || !self._methods[parts[0]], event = isRoute ? "on" : rename;
	    if (isRoute) {
	      rename = rename.slice((rename.match(new RegExp("^" + self.delimiter)) || [ "" ])[0].length);
	      parts.shift();
	    }
	    if (isRoute && routeType === "object" && !Array.isArray(routes[route])) {
	      local = local.concat(parts);
	      self.mount(routes[route], local);
	      return;
	    }
	    if (isRoute) {
	      local = local.concat(rename.split(self.delimiter));
	      local = terminator(local, self.delimiter);
	    }
	    self.insert(event, local, routes[route]);
	  }
	  for (var route in routes) {
	    if (routes.hasOwnProperty(route)) {
	      insertOrMount(route, path.slice(0));
	    }
	  }
	};



	}( true ? exports : window));

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.5.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	(function (undefined) {

	    /************************************
	        Constants
	    ************************************/

	    var moment,
	        VERSION = "2.5.1",
	        global = this,
	        round = Math.round,
	        i,

	        YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,

	        // internal storage for language config files
	        languages = {},

	        // moment internal properties
	        momentProperties = {
	            _isAMomentObject: null,
	            _i : null,
	            _f : null,
	            _l : null,
	            _strict : null,
	            _isUTC : null,
	            _offset : null,  // optional. Combine with _isUTC
	            _pf : null,
	            _lang : null  // optional
	        },

	        // check for nodeJS
	        hasModule = (typeof module !== 'undefined' && module.exports && "function" !== 'undefined'),

	        // ASP.NET json date format regex
	        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
	        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

	        // format tokens
	        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

	        // parsing token regexes
	        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
	        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
	        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
	        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
	        parseTokenDigits = /\d+/, // nonzero number of digits
	        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
	        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        parseTokenT = /T/i, // T (ISO separator)
	        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

	        //strict parsing regexes
	        parseTokenOneDigit = /\d/, // 0 - 9
	        parseTokenTwoDigits = /\d\d/, // 00 - 99
	        parseTokenThreeDigits = /\d{3}/, // 000 - 999
	        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
	        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
	        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

	        // iso 8601 regex
	        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

	        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
	            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
	            ['YYYY-DDD', /\d{4}-\d{3}/]
	        ],

	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d{1,3}/],
	            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
	            ['HH:mm', /(T| )\d\d:\d\d/],
	            ['HH', /(T| )\d\d/]
	        ],

	        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
	        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

	        // getter and setter names
	        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
	        unitMillisecondFactors = {
	            'Milliseconds' : 1,
	            'Seconds' : 1e3,
	            'Minutes' : 6e4,
	            'Hours' : 36e5,
	            'Days' : 864e5,
	            'Months' : 2592e6,
	            'Years' : 31536e6
	        },

	        unitAliases = {
	            ms : 'millisecond',
	            s : 'second',
	            m : 'minute',
	            h : 'hour',
	            d : 'day',
	            D : 'date',
	            w : 'week',
	            W : 'isoWeek',
	            M : 'month',
	            y : 'year',
	            DDD : 'dayOfYear',
	            e : 'weekday',
	            E : 'isoWeekday',
	            gg: 'weekYear',
	            GG: 'isoWeekYear'
	        },

	        camelFunctions = {
	            dayofyear : 'dayOfYear',
	            isoweekday : 'isoWeekday',
	            isoweek : 'isoWeek',
	            weekyear : 'weekYear',
	            isoweekyear : 'isoWeekYear'
	        },

	        // format function strings
	        formatFunctions = {},

	        // tokens to ordinalize and pad
	        ordinalizeTokens = 'DDD w W M D d'.split(' '),
	        paddedTokens = 'M D H h m s w W'.split(' '),

	        formatTokenFunctions = {
	            M    : function () {
	                return this.month() + 1;
	            },
	            MMM  : function (format) {
	                return this.lang().monthsShort(this, format);
	            },
	            MMMM : function (format) {
	                return this.lang().months(this, format);
	            },
	            D    : function () {
	                return this.date();
	            },
	            DDD  : function () {
	                return this.dayOfYear();
	            },
	            d    : function () {
	                return this.day();
	            },
	            dd   : function (format) {
	                return this.lang().weekdaysMin(this, format);
	            },
	            ddd  : function (format) {
	                return this.lang().weekdaysShort(this, format);
	            },
	            dddd : function (format) {
	                return this.lang().weekdays(this, format);
	            },
	            w    : function () {
	                return this.week();
	            },
	            W    : function () {
	                return this.isoWeek();
	            },
	            YY   : function () {
	                return leftZeroFill(this.year() % 100, 2);
	            },
	            YYYY : function () {
	                return leftZeroFill(this.year(), 4);
	            },
	            YYYYY : function () {
	                return leftZeroFill(this.year(), 5);
	            },
	            YYYYYY : function () {
	                var y = this.year(), sign = y >= 0 ? '+' : '-';
	                return sign + leftZeroFill(Math.abs(y), 6);
	            },
	            gg   : function () {
	                return leftZeroFill(this.weekYear() % 100, 2);
	            },
	            gggg : function () {
	                return leftZeroFill(this.weekYear(), 4);
	            },
	            ggggg : function () {
	                return leftZeroFill(this.weekYear(), 5);
	            },
	            GG   : function () {
	                return leftZeroFill(this.isoWeekYear() % 100, 2);
	            },
	            GGGG : function () {
	                return leftZeroFill(this.isoWeekYear(), 4);
	            },
	            GGGGG : function () {
	                return leftZeroFill(this.isoWeekYear(), 5);
	            },
	            e : function () {
	                return this.weekday();
	            },
	            E : function () {
	                return this.isoWeekday();
	            },
	            a    : function () {
	                return this.lang().meridiem(this.hours(), this.minutes(), true);
	            },
	            A    : function () {
	                return this.lang().meridiem(this.hours(), this.minutes(), false);
	            },
	            H    : function () {
	                return this.hours();
	            },
	            h    : function () {
	                return this.hours() % 12 || 12;
	            },
	            m    : function () {
	                return this.minutes();
	            },
	            s    : function () {
	                return this.seconds();
	            },
	            S    : function () {
	                return toInt(this.milliseconds() / 100);
	            },
	            SS   : function () {
	                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
	            },
	            SSS  : function () {
	                return leftZeroFill(this.milliseconds(), 3);
	            },
	            SSSS : function () {
	                return leftZeroFill(this.milliseconds(), 3);
	            },
	            Z    : function () {
	                var a = -this.zone(),
	                    b = "+";
	                if (a < 0) {
	                    a = -a;
	                    b = "-";
	                }
	                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
	            },
	            ZZ   : function () {
	                var a = -this.zone(),
	                    b = "+";
	                if (a < 0) {
	                    a = -a;
	                    b = "-";
	                }
	                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
	            },
	            z : function () {
	                return this.zoneAbbr();
	            },
	            zz : function () {
	                return this.zoneName();
	            },
	            X    : function () {
	                return this.unix();
	            },
	            Q : function () {
	                return this.quarter();
	            }
	        },

	        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

	    function defaultParsingFlags() {
	        // We need to deep clone this object, and es5 standard is not very
	        // helpful.
	        return {
	            empty : false,
	            unusedTokens : [],
	            unusedInput : [],
	            overflow : -2,
	            charsLeftOver : 0,
	            nullInput : false,
	            invalidMonth : null,
	            invalidFormat : false,
	            userInvalidated : false,
	            iso: false
	        };
	    }

	    function padToken(func, count) {
	        return function (a) {
	            return leftZeroFill(func.call(this, a), count);
	        };
	    }
	    function ordinalizeToken(func, period) {
	        return function (a) {
	            return this.lang().ordinal(func.call(this, a), period);
	        };
	    }

	    while (ordinalizeTokens.length) {
	        i = ordinalizeTokens.pop();
	        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
	    }
	    while (paddedTokens.length) {
	        i = paddedTokens.pop();
	        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
	    }
	    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


	    /************************************
	        Constructors
	    ************************************/

	    function Language() {

	    }

	    // Moment prototype object
	    function Moment(config) {
	        checkOverflow(config);
	        extend(this, config);
	    }

	    // Duration Constructor
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            years * 12;

	        this._data = {};

	        this._bubble();
	    }

	    /************************************
	        Helpers
	    ************************************/


	    function extend(a, b) {
	        for (var i in b) {
	            if (b.hasOwnProperty(i)) {
	                a[i] = b[i];
	            }
	        }

	        if (b.hasOwnProperty("toString")) {
	            a.toString = b.toString;
	        }

	        if (b.hasOwnProperty("valueOf")) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function cloneMoment(m) {
	        var result = {}, i;
	        for (i in m) {
	            if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
	                result[i] = m[i];
	            }
	        }

	        return result;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    // left zero fill a number
	    // see http://jsperf.com/left-zero-filling for performance comparison
	    function leftZeroFill(number, targetLength, forceSign) {
	        var output = '' + Math.abs(number),
	            sign = number >= 0;

	        while (output.length < targetLength) {
	            output = '0' + output;
	        }
	        return (sign ? (forceSign ? '+' : '') : '-') + output;
	    }

	    // helper function for _.addTime and _.subtractTime
	    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months,
	            minutes,
	            hours;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        // store the minutes and hours so we can restore them
	        if (days || months) {
	            minutes = mom.minute();
	            hours = mom.hour();
	        }
	        if (days) {
	            mom.date(mom.date() + days * isAdding);
	        }
	        if (months) {
	            mom.month(mom.month() + months * isAdding);
	        }
	        if (milliseconds && !ignoreUpdateOffset) {
	            moment.updateOffset(mom);
	        }
	        // restore the minutes and hours after possibly changing dst
	        if (days || months) {
	            mom.minute(minutes);
	            mom.hour(hours);
	        }
	    }

	    // check if is an array
	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return  Object.prototype.toString.call(input) === '[object Date]' ||
	                input instanceof Date;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function normalizeUnits(units) {
	        if (units) {
	            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
	            units = unitAliases[units] || camelFunctions[lowered] || lowered;
	        }
	        return units;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (inputObject.hasOwnProperty(prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeList(field) {
	        var count, setter;

	        if (field.indexOf('week') === 0) {
	            count = 7;
	            setter = 'day';
	        }
	        else if (field.indexOf('month') === 0) {
	            count = 12;
	            setter = 'month';
	        }
	        else {
	            return;
	        }

	        moment[field] = function (format, index) {
	            var i, getter,
	                method = moment.fn._lang[field],
	                results = [];

	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            getter = function (i) {
	                var m = moment().utc().set(setter, i);
	                return method.call(moment.fn._lang, m, format || '');
	            };

	            if (index != null) {
	                return getter(index);
	            }
	            else {
	                for (i = 0; i < count; i++) {
	                    results.push(getter(i));
	                }
	                return results;
	            }
	        };
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            if (coercedNumber >= 0) {
	                value = Math.floor(coercedNumber);
	            } else {
	                value = Math.ceil(coercedNumber);
	            }
	        }

	        return value;
	    }

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function checkOverflow(m) {
	        var overflow;
	        if (m._a && m._pf.overflow === -2) {
	            overflow =
	                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
	                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
	                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
	                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
	                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
	                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            m._pf.overflow = overflow;
	        }
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            m._isValid = !isNaN(m._d.getTime()) &&
	                m._pf.overflow < 0 &&
	                !m._pf.empty &&
	                !m._pf.invalidMonth &&
	                !m._pf.nullInput &&
	                !m._pf.invalidFormat &&
	                !m._pf.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    m._pf.charsLeftOver === 0 &&
	                    m._pf.unusedTokens.length === 0;
	            }
	        }
	        return m._isValid;
	    }

	    function normalizeLanguage(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function makeAs(input, model) {
	        return model._isUTC ? moment(input).zone(model._offset || 0) :
	            moment(input).local();
	    }

	    /************************************
	        Languages
	    ************************************/


	    extend(Language.prototype, {

	        set : function (config) {
	            var prop, i;
	            for (i in config) {
	                prop = config[i];
	                if (typeof prop === 'function') {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        },

	        _months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
	        months : function (m) {
	            return this._months[m.month()];
	        },

	        _monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
	        monthsShort : function (m) {
	            return this._monthsShort[m.month()];
	        },

	        monthsParse : function (monthName) {
	            var i, mom, regex;

	            if (!this._monthsParse) {
	                this._monthsParse = [];
	            }

	            for (i = 0; i < 12; i++) {
	                // make the regex if we don't have it already
	                if (!this._monthsParse[i]) {
	                    mom = moment.utc([2000, i]);
	                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	                }
	                // test the regex
	                if (this._monthsParse[i].test(monthName)) {
	                    return i;
	                }
	            }
	        },

	        _weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
	        weekdays : function (m) {
	            return this._weekdays[m.day()];
	        },

	        _weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
	        weekdaysShort : function (m) {
	            return this._weekdaysShort[m.day()];
	        },

	        _weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
	        weekdaysMin : function (m) {
	            return this._weekdaysMin[m.day()];
	        },

	        weekdaysParse : function (weekdayName) {
	            var i, mom, regex;

	            if (!this._weekdaysParse) {
	                this._weekdaysParse = [];
	            }

	            for (i = 0; i < 7; i++) {
	                // make the regex if we don't have it already
	                if (!this._weekdaysParse[i]) {
	                    mom = moment([2000, 1]).day(i);
	                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	                }
	                // test the regex
	                if (this._weekdaysParse[i].test(weekdayName)) {
	                    return i;
	                }
	            }
	        },

	        _longDateFormat : {
	            LT : "h:mm A",
	            L : "MM/DD/YYYY",
	            LL : "MMMM D YYYY",
	            LLL : "MMMM D YYYY LT",
	            LLLL : "dddd, MMMM D YYYY LT"
	        },
	        longDateFormat : function (key) {
	            var output = this._longDateFormat[key];
	            if (!output && this._longDateFormat[key.toUpperCase()]) {
	                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
	                    return val.slice(1);
	                });
	                this._longDateFormat[key] = output;
	            }
	            return output;
	        },

	        isPM : function (input) {
	            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	            // Using charAt should be more compatible.
	            return ((input + '').toLowerCase().charAt(0) === 'p');
	        },

	        _meridiemParse : /[ap]\.?m?\.?/i,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'pm' : 'PM';
	            } else {
	                return isLower ? 'am' : 'AM';
	            }
	        },

	        _calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendar[key];
	            return typeof output === 'function' ? output.apply(mom) : output;
	        },

	        _relativeTime : {
	            future : "in %s",
	            past : "%s ago",
	            s : "a few seconds",
	            m : "a minute",
	            mm : "%d minutes",
	            h : "an hour",
	            hh : "%d hours",
	            d : "a day",
	            dd : "%d days",
	            M : "a month",
	            MM : "%d months",
	            y : "a year",
	            yy : "%d years"
	        },
	        relativeTime : function (number, withoutSuffix, string, isFuture) {
	            var output = this._relativeTime[string];
	            return (typeof output === 'function') ?
	                output(number, withoutSuffix, string, isFuture) :
	                output.replace(/%d/i, number);
	        },
	        pastFuture : function (diff, output) {
	            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	        },

	        ordinal : function (number) {
	            return this._ordinal.replace("%d", number);
	        },
	        _ordinal : "%d",

	        preparse : function (string) {
	            return string;
	        },

	        postformat : function (string) {
	            return string;
	        },

	        week : function (mom) {
	            return weekOfYear(mom, this._week.dow, this._week.doy).week;
	        },

	        _week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        },

	        _invalidDate: 'Invalid date',
	        invalidDate: function () {
	            return this._invalidDate;
	        }
	    });

	    // Loads a language definition into the `languages` cache.  The function
	    // takes a key and optionally values.  If not in the browser and no values
	    // are provided, it will load the language file module.  As a convenience,
	    // this function also returns the language values.
	    function loadLang(key, values) {
	        values.abbr = key;
	        if (!languages[key]) {
	            languages[key] = new Language();
	        }
	        languages[key].set(values);
	        return languages[key];
	    }

	    // Remove a language from the `languages` cache. Mostly useful in tests.
	    function unloadLang(key) {
	        delete languages[key];
	    }

	    // Determines which language definition to use and returns it.
	    //
	    // With no parameters, it will return the global language.  If you
	    // pass in a language key, such as 'en', it will return the
	    // definition for 'en', so long as 'en' has already been loaded using
	    // moment.lang.
	    function getLangDefinition(key) {
	        var i = 0, j, lang, next, split,
	            get = function (k) {
	                if (!languages[k] && hasModule) {
	                    try {
	                        !(function webpackMissingModule() { var e = new Error("Cannot find module \"./lang\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	                    } catch (e) { }
	                }
	                return languages[k];
	            };

	        if (!key) {
	            return moment.fn._lang;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            lang = get(key);
	            if (lang) {
	                return lang;
	            }
	            key = [key];
	        }

	        //pick the language from the array
	        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	        while (i < key.length) {
	            split = normalizeLanguage(key[i]).split('-');
	            j = split.length;
	            next = normalizeLanguage(key[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                lang = get(split.slice(0, j).join('-'));
	                if (lang) {
	                    return lang;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return moment.fn._lang;
	    }

	    /************************************
	        Formatting
	    ************************************/


	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, "");
	        }
	        return input.replace(/\\/g, "");
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = "";
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {

	        if (!m.isValid()) {
	            return m.lang().invalidDate();
	        }

	        format = expandFormat(format, m.lang());

	        if (!formatFunctions[format]) {
	            formatFunctions[format] = makeFormatFunction(format);
	        }

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, lang) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return lang.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }


	    /************************************
	        Parsing
	    ************************************/


	    // get the regex to find the next token
	    function getParseRegexForToken(token, config) {
	        var a, strict = config._strict;
	        switch (token) {
	        case 'DDDD':
	            return parseTokenThreeDigits;
	        case 'YYYY':
	        case 'GGGG':
	        case 'gggg':
	            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
	        case 'Y':
	        case 'G':
	        case 'g':
	            return parseTokenSignedNumber;
	        case 'YYYYYY':
	        case 'YYYYY':
	        case 'GGGGG':
	        case 'ggggg':
	            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
	        case 'S':
	            if (strict) { return parseTokenOneDigit; }
	            /* falls through */
	        case 'SS':
	            if (strict) { return parseTokenTwoDigits; }
	            /* falls through */
	        case 'SSS':
	            if (strict) { return parseTokenThreeDigits; }
	            /* falls through */
	        case 'DDD':
	            return parseTokenOneToThreeDigits;
	        case 'MMM':
	        case 'MMMM':
	        case 'dd':
	        case 'ddd':
	        case 'dddd':
	            return parseTokenWord;
	        case 'a':
	        case 'A':
	            return getLangDefinition(config._l)._meridiemParse;
	        case 'X':
	            return parseTokenTimestampMs;
	        case 'Z':
	        case 'ZZ':
	            return parseTokenTimezone;
	        case 'T':
	            return parseTokenT;
	        case 'SSSS':
	            return parseTokenDigits;
	        case 'MM':
	        case 'DD':
	        case 'YY':
	        case 'GG':
	        case 'gg':
	        case 'HH':
	        case 'hh':
	        case 'mm':
	        case 'ss':
	        case 'ww':
	        case 'WW':
	            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
	        case 'M':
	        case 'D':
	        case 'd':
	        case 'H':
	        case 'h':
	        case 'm':
	        case 's':
	        case 'w':
	        case 'W':
	        case 'e':
	        case 'E':
	            return parseTokenOneOrTwoDigits;
	        default :
	            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), "i"));
	            return a;
	        }
	    }

	    function timezoneMinutesFromString(string) {
	        string = string || "";
	        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
	            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
	            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
	            minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? -minutes : minutes;
	    }

	    // function to convert string input to date
	    function addTimeToArrayFromToken(token, input, config) {
	        var a, datePartArray = config._a;

	        switch (token) {
	        // MONTH
	        case 'M' : // fall through to MM
	        case 'MM' :
	            if (input != null) {
	                datePartArray[MONTH] = toInt(input) - 1;
	            }
	            break;
	        case 'MMM' : // fall through to MMMM
	        case 'MMMM' :
	            a = getLangDefinition(config._l).monthsParse(input);
	            // if we didn't find a month name, mark the date as invalid.
	            if (a != null) {
	                datePartArray[MONTH] = a;
	            } else {
	                config._pf.invalidMonth = input;
	            }
	            break;
	        // DAY OF MONTH
	        case 'D' : // fall through to DD
	        case 'DD' :
	            if (input != null) {
	                datePartArray[DATE] = toInt(input);
	            }
	            break;
	        // DAY OF YEAR
	        case 'DDD' : // fall through to DDDD
	        case 'DDDD' :
	            if (input != null) {
	                config._dayOfYear = toInt(input);
	            }

	            break;
	        // YEAR
	        case 'YY' :
	            datePartArray[YEAR] = toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	            break;
	        case 'YYYY' :
	        case 'YYYYY' :
	        case 'YYYYYY' :
	            datePartArray[YEAR] = toInt(input);
	            break;
	        // AM / PM
	        case 'a' : // fall through to A
	        case 'A' :
	            config._isPm = getLangDefinition(config._l).isPM(input);
	            break;
	        // 24 HOUR
	        case 'H' : // fall through to hh
	        case 'HH' : // fall through to hh
	        case 'h' : // fall through to hh
	        case 'hh' :
	            datePartArray[HOUR] = toInt(input);
	            break;
	        // MINUTE
	        case 'm' : // fall through to mm
	        case 'mm' :
	            datePartArray[MINUTE] = toInt(input);
	            break;
	        // SECOND
	        case 's' : // fall through to ss
	        case 'ss' :
	            datePartArray[SECOND] = toInt(input);
	            break;
	        // MILLISECOND
	        case 'S' :
	        case 'SS' :
	        case 'SSS' :
	        case 'SSSS' :
	            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
	            break;
	        // UNIX TIMESTAMP WITH MS
	        case 'X':
	            config._d = new Date(parseFloat(input) * 1000);
	            break;
	        // TIMEZONE
	        case 'Z' : // fall through to ZZ
	        case 'ZZ' :
	            config._useUTC = true;
	            config._tzm = timezoneMinutesFromString(input);
	            break;
	        case 'w':
	        case 'ww':
	        case 'W':
	        case 'WW':
	        case 'd':
	        case 'dd':
	        case 'ddd':
	        case 'dddd':
	        case 'e':
	        case 'E':
	            token = token.substr(0, 1);
	            /* falls through */
	        case 'gg':
	        case 'gggg':
	        case 'GG':
	        case 'GGGG':
	        case 'GGGGG':
	            token = token.substr(0, 2);
	            if (input) {
	                config._w = config._w || {};
	                config._w[token] = input;
	            }
	            break;
	        }
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function dateFromConfig(config) {
	        var i, date, input = [], currentDate,
	            yearToUse, fixYear, w, temp, lang, weekday, week;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            fixYear = function (val) {
	                var int_val = parseInt(val, 10);
	                return val ?
	                  (val.length < 3 ? (int_val > 68 ? 1900 + int_val : 2000 + int_val) : int_val) :
	                  (config._a[YEAR] == null ? moment().weekYear() : config._a[YEAR]);
	            };

	            w = config._w;
	            if (w.GG != null || w.W != null || w.E != null) {
	                temp = dayOfYearFromWeeks(fixYear(w.GG), w.W || 1, w.E, 4, 1);
	            }
	            else {
	                lang = getLangDefinition(config._l);
	                weekday = w.d != null ?  parseWeekday(w.d, lang) :
	                  (w.e != null ?  parseInt(w.e, 10) + lang._week.dow : 0);

	                week = parseInt(w.w, 10) || 1;

	                //if we're parsing 'd', then the low day numbers may be next week
	                if (w.d != null && weekday < lang._week.dow) {
	                    week++;
	                }

	                temp = dayOfYearFromWeeks(fixYear(w.gg), week, weekday, lang._week.doy, lang._week.dow);
	            }

	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = config._a[YEAR] == null ? currentDate[YEAR] : config._a[YEAR];

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                config._pf._overflowDayOfYear = true;
	            }

	            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid
	        input[HOUR] += toInt((config._tzm || 0) / 60);
	        input[MINUTE] += toInt((config._tzm || 0) % 60);

	        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
	    }

	    function dateFromObject(config) {
	        var normalizedInput;

	        if (config._d) {
	            return;
	        }

	        normalizedInput = normalizeObjectUnits(config._i);
	        config._a = [
	            normalizedInput.year,
	            normalizedInput.month,
	            normalizedInput.day,
	            normalizedInput.hour,
	            normalizedInput.minute,
	            normalizedInput.second,
	            normalizedInput.millisecond
	        ];

	        dateFromConfig(config);
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [
	                now.getUTCFullYear(),
	                now.getUTCMonth(),
	                now.getUTCDate()
	            ];
	        } else {
	            return [now.getFullYear(), now.getMonth(), now.getDate()];
	        }
	    }

	    // date from string and format string
	    function makeDateFromStringAndFormat(config) {

	        config._a = [];
	        config._pf.empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var lang = getLangDefinition(config._l),
	            string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    config._pf.unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    config._pf.empty = false;
	                }
	                else {
	                    config._pf.unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                config._pf.unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            config._pf.unusedInput.push(string);
	        }

	        // handle am pm
	        if (config._isPm && config._a[HOUR] < 12) {
	            config._a[HOUR] += 12;
	        }
	        // if is 12 am, change hours to 0
	        if (config._isPm === false && config._a[HOUR] === 12) {
	            config._a[HOUR] = 0;
	        }

	        dateFromConfig(config);
	        checkOverflow(config);
	    }

	    function unescapeFormat(s) {
	        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        });
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function regexpEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    // date from string and array of format strings
	    function makeDateFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            config._pf.invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = extend({}, config);
	            tempConfig._pf = defaultParsingFlags();
	            tempConfig._f = config._f[i];
	            makeDateFromStringAndFormat(tempConfig);

	            if (!isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += tempConfig._pf.charsLeftOver;

	            //or tokens
	            currentScore += tempConfig._pf.unusedTokens.length * 10;

	            tempConfig._pf.score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    // date from iso format
	    function makeDateFromString(config) {
	        var i, l,
	            string = config._i,
	            match = isoRegex.exec(string);

	        if (match) {
	            config._pf.iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    // match[5] should be "T" or undefined
	                    config._f = isoDates[i][0] + (match[6] || " ");
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    config._f += isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(parseTokenTimezone)) {
	                config._f += "Z";
	            }
	            makeDateFromStringAndFormat(config);
	        }
	        else {
	            config._d = new Date(string);
	        }
	    }

	    function makeDateFromInput(config) {
	        var input = config._i,
	            matched = aspNetJsonRegex.exec(input);

	        if (input === undefined) {
	            config._d = new Date();
	        } else if (matched) {
	            config._d = new Date(+matched[1]);
	        } else if (typeof input === 'string') {
	            makeDateFromString(config);
	        } else if (isArray(input)) {
	            config._a = input.slice(0);
	            dateFromConfig(config);
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof(input) === 'object') {
	            dateFromObject(config);
	        } else {
	            config._d = new Date(input);
	        }
	    }

	    function makeDate(y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function makeUTCDate(y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    function parseWeekday(input, language) {
	        if (typeof input === 'string') {
	            if (!isNaN(input)) {
	                input = parseInt(input, 10);
	            }
	            else {
	                input = language.weekdaysParse(input);
	                if (typeof input !== 'number') {
	                    return null;
	                }
	            }
	        }
	        return input;
	    }

	    /************************************
	        Relative Time
	    ************************************/


	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
	        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime(milliseconds, withoutSuffix, lang) {
	        var seconds = round(Math.abs(milliseconds) / 1000),
	            minutes = round(seconds / 60),
	            hours = round(minutes / 60),
	            days = round(hours / 24),
	            years = round(days / 365),
	            args = seconds < 45 && ['s', seconds] ||
	                minutes === 1 && ['m'] ||
	                minutes < 45 && ['mm', minutes] ||
	                hours === 1 && ['h'] ||
	                hours < 22 && ['hh', hours] ||
	                days === 1 && ['d'] ||
	                days <= 25 && ['dd', days] ||
	                days <= 45 && ['M'] ||
	                days < 345 && ['MM', round(days / 30)] ||
	                years === 1 && ['y'] || ['yy', years];
	        args[2] = withoutSuffix;
	        args[3] = milliseconds > 0;
	        args[4] = lang;
	        return substituteTimeAgo.apply({}, args);
	    }


	    /************************************
	        Week of Year
	    ************************************/


	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;


	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

	        weekday = weekday != null ? weekday : firstDayOfWeek;
	        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
	        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    /************************************
	        Top Level Functions
	    ************************************/

	    function makeMoment(config) {
	        var input = config._i,
	            format = config._f;

	        if (input === null) {
	            return moment.invalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = getLangDefinition().preparse(input);
	        }

	        if (moment.isMoment(input)) {
	            config = cloneMoment(input);

	            config._d = new Date(+input._d);
	        } else if (format) {
	            if (isArray(format)) {
	                makeDateFromStringAndArray(config);
	            } else {
	                makeDateFromStringAndFormat(config);
	            }
	        } else {
	            makeDateFromInput(config);
	        }

	        return new Moment(config);
	    }

	    moment = function (input, format, lang, strict) {
	        var c;

	        if (typeof(lang) === "boolean") {
	            strict = lang;
	            lang = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c = {};
	        c._isAMomentObject = true;
	        c._i = input;
	        c._f = format;
	        c._l = lang;
	        c._strict = strict;
	        c._isUTC = false;
	        c._pf = defaultParsingFlags();

	        return makeMoment(c);
	    };

	    // creating with utc
	    moment.utc = function (input, format, lang, strict) {
	        var c;

	        if (typeof(lang) === "boolean") {
	            strict = lang;
	            lang = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c = {};
	        c._isAMomentObject = true;
	        c._useUTC = true;
	        c._isUTC = true;
	        c._l = lang;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	        c._pf = defaultParsingFlags();

	        return makeMoment(c).utc();
	    };

	    // creating with unix timestamp (in seconds)
	    moment.unix = function (input) {
	        return moment(input * 1000);
	    };

	    // duration
	    moment.duration = function (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            parseIso;

	        if (moment.isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
	            sign = (match[1] === "-") ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = isoDurationRegex.exec(input))) {
	            sign = (match[1] === "-") ? -1 : 1;
	            parseIso = function (inp) {
	                // We'd normally use ~~inp for this, but unfortunately it also
	                // converts floats to ints.
	                // inp may be undefined, so careful calling replace on it.
	                var res = inp && parseFloat(inp.replace(',', '.'));
	                // apply sign while we're at it
	                return (isNaN(res) ? 0 : res) * sign;
	            };
	            duration = {
	                y: parseIso(match[2]),
	                M: parseIso(match[3]),
	                d: parseIso(match[4]),
	                h: parseIso(match[5]),
	                m: parseIso(match[6]),
	                s: parseIso(match[7]),
	                w: parseIso(match[8])
	            };
	        }

	        ret = new Duration(duration);

	        if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
	            ret._lang = input._lang;
	        }

	        return ret;
	    };

	    // version number
	    moment.version = VERSION;

	    // default format
	    moment.defaultFormat = isoFormat;

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    moment.updateOffset = function () {};

	    // This function will load languages and then set the global language.  If
	    // no arguments are passed in, it will simply return the current global
	    // language key.
	    moment.lang = function (key, values) {
	        var r;
	        if (!key) {
	            return moment.fn._lang._abbr;
	        }
	        if (values) {
	            loadLang(normalizeLanguage(key), values);
	        } else if (values === null) {
	            unloadLang(key);
	            key = 'en';
	        } else if (!languages[key]) {
	            getLangDefinition(key);
	        }
	        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
	        return r._abbr;
	    };

	    // returns language data
	    moment.langData = function (key) {
	        if (key && key._lang && key._lang._abbr) {
	            key = key._lang._abbr;
	        }
	        return getLangDefinition(key);
	    };

	    // compare moment object
	    moment.isMoment = function (obj) {
	        return obj instanceof Moment ||
	            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
	    };

	    // for typechecking Duration objects
	    moment.isDuration = function (obj) {
	        return obj instanceof Duration;
	    };

	    for (i = lists.length - 1; i >= 0; --i) {
	        makeList(lists[i]);
	    }

	    moment.normalizeUnits = function (units) {
	        return normalizeUnits(units);
	    };

	    moment.invalid = function (flags) {
	        var m = moment.utc(NaN);
	        if (flags != null) {
	            extend(m._pf, flags);
	        }
	        else {
	            m._pf.userInvalidated = true;
	        }

	        return m;
	    };

	    moment.parseZone = function (input) {
	        return moment(input).parseZone();
	    };

	    /************************************
	        Moment Prototype
	    ************************************/


	    extend(moment.fn = Moment.prototype, {

	        clone : function () {
	            return moment(this);
	        },

	        valueOf : function () {
	            return +this._d + ((this._offset || 0) * 60000);
	        },

	        unix : function () {
	            return Math.floor(+this / 1000);
	        },

	        toString : function () {
	            return this.clone().lang('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
	        },

	        toDate : function () {
	            return this._offset ? new Date(+this) : this._d;
	        },

	        toISOString : function () {
	            var m = moment(this).utc();
	            if (0 < m.year() && m.year() <= 9999) {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            } else {
	                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        },

	        toArray : function () {
	            var m = this;
	            return [
	                m.year(),
	                m.month(),
	                m.date(),
	                m.hours(),
	                m.minutes(),
	                m.seconds(),
	                m.milliseconds()
	            ];
	        },

	        isValid : function () {
	            return isValid(this);
	        },

	        isDSTShifted : function () {

	            if (this._a) {
	                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
	            }

	            return false;
	        },

	        parsingFlags : function () {
	            return extend({}, this._pf);
	        },

	        invalidAt: function () {
	            return this._pf.overflow;
	        },

	        utc : function () {
	            return this.zone(0);
	        },

	        local : function () {
	            this.zone(0);
	            this._isUTC = false;
	            return this;
	        },

	        format : function (inputString) {
	            var output = formatMoment(this, inputString || moment.defaultFormat);
	            return this.lang().postformat(output);
	        },

	        add : function (input, val) {
	            var dur;
	            // switch args to support add('s', 1) and add(1, 's')
	            if (typeof input === 'string') {
	                dur = moment.duration(+val, input);
	            } else {
	                dur = moment.duration(input, val);
	            }
	            addOrSubtractDurationFromMoment(this, dur, 1);
	            return this;
	        },

	        subtract : function (input, val) {
	            var dur;
	            // switch args to support subtract('s', 1) and subtract(1, 's')
	            if (typeof input === 'string') {
	                dur = moment.duration(+val, input);
	            } else {
	                dur = moment.duration(input, val);
	            }
	            addOrSubtractDurationFromMoment(this, dur, -1);
	            return this;
	        },

	        diff : function (input, units, asFloat) {
	            var that = makeAs(input, this),
	                zoneDiff = (this.zone() - that.zone()) * 6e4,
	                diff, output;

	            units = normalizeUnits(units);

	            if (units === 'year' || units === 'month') {
	                // average number of days in the months in the given dates
	                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
	                // difference in months
	                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
	                // adjust by taking difference in days, average number of days
	                // and dst in the given months.
	                output += ((this - moment(this).startOf('month')) -
	                        (that - moment(that).startOf('month'))) / diff;
	                // same as above but with zones, to negate all dst
	                output -= ((this.zone() - moment(this).startOf('month').zone()) -
	                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
	                if (units === 'year') {
	                    output = output / 12;
	                }
	            } else {
	                diff = (this - that);
	                output = units === 'second' ? diff / 1e3 : // 1000
	                    units === 'minute' ? diff / 6e4 : // 1000 * 60
	                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
	                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                    diff;
	            }
	            return asFloat ? output : absRound(output);
	        },

	        from : function (time, withoutSuffix) {
	            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
	        },

	        fromNow : function (withoutSuffix) {
	            return this.from(moment(), withoutSuffix);
	        },

	        calendar : function () {
	            // We want to compare the start of today, vs this.
	            // Getting start-of-today depends on whether we're zone'd or not.
	            var sod = makeAs(moment(), this).startOf('day'),
	                diff = this.diff(sod, 'days', true),
	                format = diff < -6 ? 'sameElse' :
	                    diff < -1 ? 'lastWeek' :
	                    diff < 0 ? 'lastDay' :
	                    diff < 1 ? 'sameDay' :
	                    diff < 2 ? 'nextDay' :
	                    diff < 7 ? 'nextWeek' : 'sameElse';
	            return this.format(this.lang().calendar(format, this));
	        },

	        isLeapYear : function () {
	            return isLeapYear(this.year());
	        },

	        isDST : function () {
	            return (this.zone() < this.clone().month(0).zone() ||
	                this.zone() < this.clone().month(5).zone());
	        },

	        day : function (input) {
	            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	            if (input != null) {
	                input = parseWeekday(input, this.lang());
	                return this.add({ d : input - day });
	            } else {
	                return day;
	            }
	        },

	        month : function (input) {
	            var utc = this._isUTC ? 'UTC' : '',
	                dayOfMonth;

	            if (input != null) {
	                if (typeof input === 'string') {
	                    input = this.lang().monthsParse(input);
	                    if (typeof input !== 'number') {
	                        return this;
	                    }
	                }

	                dayOfMonth = this.date();
	                this.date(1);
	                this._d['set' + utc + 'Month'](input);
	                this.date(Math.min(dayOfMonth, this.daysInMonth()));

	                moment.updateOffset(this);
	                return this;
	            } else {
	                return this._d['get' + utc + 'Month']();
	            }
	        },

	        startOf: function (units) {
	            units = normalizeUnits(units);
	            // the following switch intentionally omits break keywords
	            // to utilize falling through the cases.
	            switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	                /* falls through */
	            }

	            // weeks are a special case
	            if (units === 'week') {
	                this.weekday(0);
	            } else if (units === 'isoWeek') {
	                this.isoWeekday(1);
	            }

	            return this;
	        },

	        endOf: function (units) {
	            units = normalizeUnits(units);
	            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);
	        },

	        isAfter: function (input, units) {
	            units = typeof units !== 'undefined' ? units : 'millisecond';
	            return +this.clone().startOf(units) > +moment(input).startOf(units);
	        },

	        isBefore: function (input, units) {
	            units = typeof units !== 'undefined' ? units : 'millisecond';
	            return +this.clone().startOf(units) < +moment(input).startOf(units);
	        },

	        isSame: function (input, units) {
	            units = units || 'ms';
	            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
	        },

	        min: function (other) {
	            other = moment.apply(null, arguments);
	            return other < this ? this : other;
	        },

	        max: function (other) {
	            other = moment.apply(null, arguments);
	            return other > this ? this : other;
	        },

	        zone : function (input) {
	            var offset = this._offset || 0;
	            if (input != null) {
	                if (typeof input === "string") {
	                    input = timezoneMinutesFromString(input);
	                }
	                if (Math.abs(input) < 16) {
	                    input = input * 60;
	                }
	                this._offset = input;
	                this._isUTC = true;
	                if (offset !== input) {
	                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);
	                }
	            } else {
	                return this._isUTC ? offset : this._d.getTimezoneOffset();
	            }
	            return this;
	        },

	        zoneAbbr : function () {
	            return this._isUTC ? "UTC" : "";
	        },

	        zoneName : function () {
	            return this._isUTC ? "Coordinated Universal Time" : "";
	        },

	        parseZone : function () {
	            if (this._tzm) {
	                this.zone(this._tzm);
	            } else if (typeof this._i === 'string') {
	                this.zone(this._i);
	            }
	            return this;
	        },

	        hasAlignedHourOffset : function (input) {
	            if (!input) {
	                input = 0;
	            }
	            else {
	                input = moment(input).zone();
	            }

	            return (this.zone() - input) % 60 === 0;
	        },

	        daysInMonth : function () {
	            return daysInMonth(this.year(), this.month());
	        },

	        dayOfYear : function (input) {
	            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
	            return input == null ? dayOfYear : this.add("d", (input - dayOfYear));
	        },

	        quarter : function () {
	            return Math.ceil((this.month() + 1.0) / 3.0);
	        },

	        weekYear : function (input) {
	            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
	            return input == null ? year : this.add("y", (input - year));
	        },

	        isoWeekYear : function (input) {
	            var year = weekOfYear(this, 1, 4).year;
	            return input == null ? year : this.add("y", (input - year));
	        },

	        week : function (input) {
	            var week = this.lang().week(this);
	            return input == null ? week : this.add("d", (input - week) * 7);
	        },

	        isoWeek : function (input) {
	            var week = weekOfYear(this, 1, 4).week;
	            return input == null ? week : this.add("d", (input - week) * 7);
	        },

	        weekday : function (input) {
	            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
	            return input == null ? weekday : this.add("d", input - weekday);
	        },

	        isoWeekday : function (input) {
	            // behaves the same as moment#day except
	            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	            // as a setter, sunday should belong to the previous week.
	            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	        },

	        get : function (units) {
	            units = normalizeUnits(units);
	            return this[units]();
	        },

	        set : function (units, value) {
	            units = normalizeUnits(units);
	            if (typeof this[units] === 'function') {
	                this[units](value);
	            }
	            return this;
	        },

	        // If passed a language key, it will set the language for this
	        // instance.  Otherwise, it will return the language configuration
	        // variables for this instance.
	        lang : function (key) {
	            if (key === undefined) {
	                return this._lang;
	            } else {
	                this._lang = getLangDefinition(key);
	                return this;
	            }
	        }
	    });

	    // helper for adding shortcuts
	    function makeGetterAndSetter(name, key) {
	        moment.fn[name] = moment.fn[name + 's'] = function (input) {
	            var utc = this._isUTC ? 'UTC' : '';
	            if (input != null) {
	                this._d['set' + utc + key](input);
	                moment.updateOffset(this);
	                return this;
	            } else {
	                return this._d['get' + utc + key]();
	            }
	        };
	    }

	    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)
	    for (i = 0; i < proxyGettersAndSetters.length; i ++) {
	        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);
	    }

	    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')
	    makeGetterAndSetter('year', 'FullYear');

	    // add plural methods
	    moment.fn.days = moment.fn.day;
	    moment.fn.months = moment.fn.month;
	    moment.fn.weeks = moment.fn.week;
	    moment.fn.isoWeeks = moment.fn.isoWeek;

	    // add aliased format methods
	    moment.fn.toJSON = moment.fn.toISOString;

	    /************************************
	        Duration Prototype
	    ************************************/


	    extend(moment.duration.fn = Duration.prototype, {

	        _bubble : function () {
	            var milliseconds = this._milliseconds,
	                days = this._days,
	                months = this._months,
	                data = this._data,
	                seconds, minutes, hours, years;

	            // The following code bubbles up values, see the tests for
	            // examples of what that means.
	            data.milliseconds = milliseconds % 1000;

	            seconds = absRound(milliseconds / 1000);
	            data.seconds = seconds % 60;

	            minutes = absRound(seconds / 60);
	            data.minutes = minutes % 60;

	            hours = absRound(minutes / 60);
	            data.hours = hours % 24;

	            days += absRound(hours / 24);
	            data.days = days % 30;

	            months += absRound(days / 30);
	            data.months = months % 12;

	            years = absRound(months / 12);
	            data.years = years;
	        },

	        weeks : function () {
	            return absRound(this.days() / 7);
	        },

	        valueOf : function () {
	            return this._milliseconds +
	              this._days * 864e5 +
	              (this._months % 12) * 2592e6 +
	              toInt(this._months / 12) * 31536e6;
	        },

	        humanize : function (withSuffix) {
	            var difference = +this,
	                output = relativeTime(difference, !withSuffix, this.lang());

	            if (withSuffix) {
	                output = this.lang().pastFuture(difference, output);
	            }

	            return this.lang().postformat(output);
	        },

	        add : function (input, val) {
	            // supports only 2.0-style add(1, 's') or add(moment)
	            var dur = moment.duration(input, val);

	            this._milliseconds += dur._milliseconds;
	            this._days += dur._days;
	            this._months += dur._months;

	            this._bubble();

	            return this;
	        },

	        subtract : function (input, val) {
	            var dur = moment.duration(input, val);

	            this._milliseconds -= dur._milliseconds;
	            this._days -= dur._days;
	            this._months -= dur._months;

	            this._bubble();

	            return this;
	        },

	        get : function (units) {
	            units = normalizeUnits(units);
	            return this[units.toLowerCase() + 's']();
	        },

	        as : function (units) {
	            units = normalizeUnits(units);
	            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
	        },

	        lang : moment.fn.lang,

	        toIsoString : function () {
	            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	            var years = Math.abs(this.years()),
	                months = Math.abs(this.months()),
	                days = Math.abs(this.days()),
	                hours = Math.abs(this.hours()),
	                minutes = Math.abs(this.minutes()),
	                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

	            if (!this.asSeconds()) {
	                // this is the same as C#'s (Noda) and python (isodate)...
	                // but not other JS (goog.date)
	                return 'P0D';
	            }

	            return (this.asSeconds() < 0 ? '-' : '') +
	                'P' +
	                (years ? years + 'Y' : '') +
	                (months ? months + 'M' : '') +
	                (days ? days + 'D' : '') +
	                ((hours || minutes || seconds) ? 'T' : '') +
	                (hours ? hours + 'H' : '') +
	                (minutes ? minutes + 'M' : '') +
	                (seconds ? seconds + 'S' : '');
	        }
	    });

	    function makeDurationGetter(name) {
	        moment.duration.fn[name] = function () {
	            return this._data[name];
	        };
	    }

	    function makeDurationAsGetter(name, factor) {
	        moment.duration.fn['as' + name] = function () {
	            return +this / factor;
	        };
	    }

	    for (i in unitMillisecondFactors) {
	        if (unitMillisecondFactors.hasOwnProperty(i)) {
	            makeDurationAsGetter(i, unitMillisecondFactors[i]);
	            makeDurationGetter(i.toLowerCase());
	        }
	    }

	    makeDurationAsGetter('Weeks', 6048e5);
	    moment.duration.fn.asMonths = function () {
	        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;
	    };


	    /************************************
	        Default Lang
	    ************************************/


	    // Set default language, other languages will inherit from English.
	    moment.lang('en', {
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    /* EMBED_LANGUAGES */

	    /************************************
	        Exposing Moment
	    ************************************/

	    function makeGlobal(deprecate) {
	        var warned = false, local_moment = moment;
	        /*global ender:false */
	        if (typeof ender !== 'undefined') {
	            return;
	        }
	        // here, `this` means `window` in the browser, or `global` on the server
	        // add `moment` as a global object via a string identifier,
	        // for Closure Compiler "advanced" mode
	        if (deprecate) {
	            global.moment = function () {
	                if (!warned && console && console.warn) {
	                    warned = true;
	                    console.warn(
	                            "Accessing Moment through the global scope is " +
	                            "deprecated, and will be removed in an upcoming " +
	                            "release.");
	                }
	                return local_moment.apply(null, arguments);
	            };
	            extend(global.moment, local_moment);
	        } else {
	            global['moment'] = moment;
	        }
	    }

	    // CommonJS module is defined
	    if (hasModule) {
	        module.exports = moment;
	        makeGlobal(true);
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	            if (module.config && module.config() && module.config().noGlobal !== true) {
	                // If user provided noGlobal, he is aware of global
	                makeGlobal(module.config().noGlobal === undefined);
	            }

	            return moment;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        makeGlobal();
	    }
	}).call(this);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)(module)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer) {//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	(function() {
	  var _global = this;

	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng;

	  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	  //
	  // Moderately fast, high quality
	  if (true) {
	    try {
	      var _rb = __webpack_require__(73).randomBytes;
	      _rng = _rb && function() {return _rb(16);};
	    } catch(e) {}
	  }

	  if (!_rng && _global.crypto && crypto.getRandomValues) {
	    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	    //
	    // Moderately fast, high quality
	    var _rnds8 = new Uint8Array(16);
	    _rng = function whatwgRNG() {
	      crypto.getRandomValues(_rnds8);
	      return _rnds8;
	    };
	  }

	  if (!_rng) {
	    // Math.random()-based (RNG)
	    //
	    // If all else fails, use Math.random().  It's fast, but is of unspecified
	    // quality.
	    var  _rnds = new Array(16);
	    _rng = function() {
	      for (var i = 0, r; i < 16; i++) {
	        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	      }

	      return _rnds;
	    };
	  }

	  // Buffer class to use
	  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;

	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }

	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;

	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });

	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }

	    return buf;
	  }

	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }

	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html

	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();

	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];

	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;

	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];

	    options = options || {};

	    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;

	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = options.msecs != null ? options.msecs : new Date().getTime();

	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;

	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }

	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }

	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }

	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;

	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;

	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;

	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;

	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;

	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;

	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;

	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }

	    return buf ? buf : unparse(b);
	  }

	  // **`v4()` - Generate random UUID**

	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;

	    if (typeof(options) == 'string') {
	      buf = options == 'binary' ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};

	    var rnds = options.random || (options.rng || _rng)();

	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;

	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }

	    return buf || unparse(rnds);
	  }

	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;

	  if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {return uuid;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof(module) != 'undefined' && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else {
	    // Publish as global (in browsers)
	    var _previousRoot = _global.uuid;

	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _global.uuid = _previousRoot;
	      return uuid;
	    };

	    _global.uuid = uuid;
	  }

	  // Publish as global (in browsers)
	  var _previousRoot = _global.uuid;

	  // **`noConflict()` - (browser only) to reset global 'uuid' var**
	  uuid.noConflict = function() {
	    _global.uuid = _previousRoot;
	    return uuid;
	  };

	  _global.uuid = uuid;

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(70)
	var ieee754 = __webpack_require__(71)
	var isArray = __webpack_require__(72)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer, (function() { return this; }())))

/***/ },
/* 70 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 71 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 72 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(74)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(76)

	exports.createHmac = __webpack_require__(89)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(90)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(75)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(69).Buffer))

/***/ },
/* 75 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(77)

	var md5 = toConstructor(__webpack_require__(86))
	var rmd160 = toConstructor(__webpack_require__(88))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(69).Buffer
	var Hash   = __webpack_require__(78)(Buffer)

	exports.sha1 = __webpack_require__(79)(Buffer, Hash)
	exports.sha256 = __webpack_require__(84)(Buffer, Hash)
	exports.sha512 = __webpack_require__(85)(Buffer, Hash)


/***/ },
/* 78 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(80).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(82);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(83);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(81)))

/***/ },
/* 81 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 82 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 83 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(80).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(80).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(87);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(76)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(91)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69).Buffer))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {// AjaxQ jQuery Plugin
	// Copyright (c) 2012 Foliotek Inc.
	// MIT License
	// https://github.com/Foliotek/ajaxq

	(function($) {

	    var queues = {};
	    var activeReqs = {};

	    // Register an $.ajaxq function, which follows the $.ajax interface, but allows a queue name which will force only one request per queue to fire.
	    $.ajaxq = function(qname, opts) {

	        if (typeof opts === "undefined") {
	            throw ("AjaxQ: queue name is not provided");
	        }

	        // Will return a Deferred promise object extended with success/error/callback, so that this function matches the interface of $.ajax
	        var deferred = $.Deferred(),
	            promise = deferred.promise();

	        promise.success = promise.done;
	        promise.error = promise.fail;
	        promise.complete = promise.always;

	        // Create a deep copy of the arguments, and enqueue this request.
	        var clonedOptions = $.extend(true, {}, opts);
	        enqueue(function() {
	            // Send off the ajax request now that the item has been removed from the queue
	            var jqXHR = $.ajax.apply(window, [clonedOptions]);

	            // Notify the returned deferred object with the correct context when the jqXHR is done or fails
	            // Note that 'always' will automatically be fired once one of these are called: http://api.jquery.com/category/deferred-object/.
	            jqXHR.done(function() {
	                deferred.resolve.apply(this, arguments);
	            });
	            jqXHR.fail(function() {
	                deferred.reject.apply(this, arguments);
	            });

	            jqXHR.always(dequeue); // make sure to dequeue the next request AFTER the done and fail callbacks are fired
	            return jqXHR;
	        });

	        return promise;


	        // If there is no queue, create an empty one and instantly process this item.
	        // Otherwise, just add this item onto it for later processing.
	        function enqueue(cb) {
	            if (!queues[qname]) {
	                queues[qname] = [];
	                var xhr = cb();
	                activeReqs[qname] = xhr;
	            }
	            else {
	                queues[qname].push(cb);
	            }
	        }

	        // Remove the next callback from the queue and fire it off.
	        // If the queue was empty (this was the last item), delete it from memory so the next one can be instantly processed.
	        function dequeue() {
	            if (!queues[qname]) {
	                return;
	            }
	            var nextCallback = queues[qname].shift();
	            if (nextCallback) {
	                var xhr = nextCallback();
	                activeReqs[qname] = xhr;
	            }
	            else {
	                delete queues[qname];
	                delete activeReqs[qname];
	            }
	        }
	    };

	    // Register a $.postq and $.getq method to provide shortcuts for $.get and $.post
	    // Copied from jQuery source to make sure the functions share the same defaults as $.get and $.post.
	    $.each( [ "getq", "postq" ], function( i, method ) {
	        $[ method ] = function( qname, url, data, callback, type ) {

	            if ( $.isFunction( data ) ) {
	                type = type || callback;
	                callback = data;
	                data = undefined;
	            }

	            return $.ajaxq(qname, {
	                type: method === "postq" ? "post" : "get",
	                url: url,
	                data: data,
	                success: callback,
	                dataType: type
	            });
	        };
	    });

	    var isQueueRunning = function(qname) {
	        return queues.hasOwnProperty(qname);
	    };

	    var isAnyQueueRunning = function() {
	        for (var i in queues) {
	            if (isQueueRunning(i)) return true;
	        }
	        return false;
	    };

	    $.ajaxq.isRunning = function(qname) {
	        if (qname) return isQueueRunning(qname);
	        else return isAnyQueueRunning();
	    };

	    $.ajaxq.getActiveRequest = function(qname) {
	        if (!qname) throw ("AjaxQ: queue name is required");

	        return activeReqs[qname];
	    };

	    $.ajaxq.abort = function(qname) {
	        if (!qname) throw ("AjaxQ: queue name is required");

	        var current = $.ajaxq.getActiveRequest(qname);
	        delete queues[qname];
	        delete activeReqs[qname];
	        if (current) current.abort();
	    };

	    $.ajaxq.clear = function(qname) {
	        if (!qname) {
	            for (var i in queues) {
	                if (queues.hasOwnProperty(i)) {
	                    queues[i] = [];
	                }
	            }
	        }
	        else {
	            if (queues[qname]) {
	                queues[qname] = [];
	            }
	        }
	    };

	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	* jQuery Calendar (iCal)
	*
	* @author Maarten Hus
	* @source https://github.com/MrHus/jquery-monthly-ical
	*/
	(function($){
	    var eventdates = {};

	    $.fn.ical = function(options){
	        $.fn.ical.defaults = {
	           daynames: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'], //default short names for the days of the week
	           monthnames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	           startdate: new Date(), // The date the calender should take as start point
	           eventdates: {},
	           startOnSunday: false,
	           beforeDay: function (insdate) {},
	           beforeMonth: function(insdate) {},
	           beforeYear: function(insdate) {}
	        };

	        var options = $.extend({}, $.fn.ical.defaults, options);

	        return this.each(function(){
	            var obj = $(this); //get the object
	            eventdates = options.eventdates;

	            var insdate = options.startdate; //The date that gets used for calculating the month

	            createCalendar(obj, insdate);
	        });

	        /**
	        * Create the calendar
	        */
	        function createCalendar(obj, insdate){
	            obj.html('');
	            createNavigation(obj, insdate);
	            createTable(obj); //create table
	            addDatesToTable(obj, insdate);
	            codabubble();
	        };

	        /**
	        * Create the navigation and handle its clicks
	        */
	        function createNavigation(obj, insdate){

	            obj.prepend("<div id='nav-calendar'><div id='year'><span id='year-left-arrow' class='year-buttons'></span><span id='currentyear'>"+ insdate.getFullYear() +"</span><span id='year-right-arrow' class='year-buttons'></span></div>" + "<div id='month'><span id='month-left-arrow' class='month-buttons'></span><span id='currentmonth'>"+ options.monthnames[insdate.getMonth()] +"</span><span id='month-right-arrow' class='month-buttons'></span></div></div>");

	            $("#year-right-arrow", obj).click(function()
	            {

	                var month = insdate.getMonth() + 12;

	                var presentMonth = insdate.getMonth();

	                if (month > 11)
	                {
	                    month = presentMonth;
	                    var year = insdate.getFullYear() + 1;
	                    options.beforeYear(formatDate(year, month, 1));
	                }
	                else
	                {
	                    var year = insdate.getFullYear();
	                }

	                options.beforeMonth(formatDate(year, month, 1));

	                date = new Date(year, month, 1);
	                createCalendar(obj, date);
	            });

	            $("#year-left-arrow", obj).click(function()
	            {

	                var month = insdate.getMonth() - 12;

	                var presentMonth = insdate.getMonth();

	                if (month < 0)
	                {
	                    month = presentMonth;
	                    var year = insdate.getFullYear() - 1;
	                    options.beforeYear(formatDate(year, month, 1));
	                }
	                else
	                {
	                    var year = insdate.getFullYear();
	                }

	                options.beforeMonth(formatDate(year, month, 1));

	                date = new Date(year, month, 1);
	                createCalendar(obj, date);
	            });

	            $("#month-right-arrow", obj).click(function()
	            {
	                var month = insdate.getMonth() + 1;

	                if (month > 11)
	                {
	                    month = 0;
	                    var year = insdate.getFullYear() + 1;
	                    options.beforeYear(formatDate(year, month, 1));
	                }
	                else
	                {
	                    var year = insdate.getFullYear();
	                }

	                options.beforeMonth(formatDate(year, month, 1));

	                date = new Date(year, month, 1);
	                createCalendar(obj, date);
	            });

	            $("#month-left-arrow", obj).click(function()
	            {
	                var month = insdate.getMonth() - 1;

	                if (month < 0)
	                {
	                    month = 11;
	                    var year = insdate.getFullYear() - 1;
	                    options.beforeYear(formatDate(year, month, 1));
	                }
	                else
	                {
	                    var year = insdate.getFullYear();
	                }

	                options.beforeMonth(formatDate(year, month, 1));

	                date = new Date(year, month, 1);
	                createCalendar(obj, date);
	            });
	        };

	        /**
	        * Create the table for the calendar
	        */
	        function createTable(obj){
	            obj.append("<table class='icaltable'><thead><tr id='week-days'></tr></thead></table>"); //add a table

	            for (var i = 0; i < options.daynames.length; i++)
	            {
	               $(".icaltable tr", obj).append("<th>"+ options.daynames[i] +"</th>"); //add the day header
	            }

	            $(".icaltable", obj).append("<tr><td colspan='7' id='separator'></td></tr>");
	            $(".icaltable", obj).append("<tr><td colspan='7' id='clear-separator'></td></tr>");

	        };

	        function addDatesToTable(obj, insdate){
	            var month = insdate.getMonth();
	            var year  = insdate.getFullYear();

	            var days = getDaysInMonth(year, month);
	            var first = getFirstDayOfMonth(year, month); // 0 - 6
	            var last = getLastDayOfMonth(year, month, days);// 0 - 6

	            var afterpadding = 6 - last; // week minus the last day of the month = afterpadding

	            var firstrow = true;

	            var startOnSunday = 0;

	            if (options.startOnSunday){
	                if (first == 6)
	                {
	                    startOnSunday = -6;
	                }
	                else
	                {
	                    startOnSunday = 1;
	                }
	            }

	            for (var i = 1; i <= days; i++) //each day in month
	            {
	                if ((first + i - 1 + startOnSunday) % 7 === 0 || firstrow === true ) //add new tr for each new monday our if i is zero
	                {
	                    $(".icaltable", obj).append("<tr></tr>");
	                }

	                for(var j = 0; j < first + startOnSunday && firstrow; j++) //add pre padding
	                {
	                    $(".icaltable tr:last", obj).append("<td class = 'padding'></td>");
	                }

	                firstrow = false; //no more pre padding

	                var month = getMonthNumber($("#currentmonth", obj).text());
	                var year = $("#currentyear", obj).text();

	                var formatdate = formatDate(year, month, i);

	                var jsondates  = getEventDates(formatdate)

	                if (jsondates.length === 0)
	                {
	                    options.beforeDay(formatdate);
	                    $(".icaltable tr:last", obj).append("<td id = '"+formatdate+"'>"+i+"</td>"); //add day
	                }
	                else
	                {
	                    var firstEvent = true;
	                    for (var k = 0; k < jsondates.length; k++)
	                    {
	                        var datejson = jsondates[k];
	                        options.beforeDay(formatdate);

	                        //alert(datejson.title);

	                        var str = "<li><span class='title'>"+ datejson.title +"</span><span class='desc'>"+ datejson.desc +"</span></li>"

	                        if (firstEvent)
	                        {
	                            $(".icaltable tr:last", obj).append("<td class='date_has_event " + datejson.className + "' id = '"+ formatdate +"'>"+i+"<div class='events'><ul id ='ul-"+ formatdate +"'>"+ str +"</ul></div></td>"); //add day
	                            firstEvent = false;
	                        }
	                        else
	                        {
	                            $("#ul-" + formatdate, obj).append(str);
	                        }
	                    }
	                }
	            };

	            if (options.startOnSunday){
	                startOnSunday = 1;
	            }

	            for (var i = 0; i < afterpadding - startOnSunday; i++) //add after padding
	            {
	                $(".icaltable tr:last", obj).append("<td class = 'padding'></td>");
	            }

	            highlightToday(obj);
	        };

	        function getMonthNumber(month){
	            for (var i = 0; i < options.monthnames.length; i++)
	            {
	                if (options.monthnames[i] === month)
	                {
	                    return i;
	                }
	            }
	        };

	        function getDaysInMonth(year, month){
	            return 32 - new Date(year, month, 32).getDate();
	        };

	        function highlightToday(obj){
	            var today = new Date();
	            today = formatDate(today.getFullYear(), today.getMonth(), today.getDate());
	            $("#"+today, obj).addClass("today");
	        };

	        function getEventDates(date){

	            var results = [];

	            for (var i = 0;  i < eventdates.length; i++)
	            {
	                var evaldate = evaluateEventDate(eventdates[i]["date"], date);
	                if (date === evaldate)
	                {
	                    results.push(eventdates[i]);
	                }
	            }

	            return results;
	        };

	        function evaluateEventDate(eventdate, date){
	            var eventdate = eventdate.split('-');
	            var date = date.split('-');

	            if (eventdate[0] === 'yyyy')
	            {
	                eventdate[0] = date[0];
	            }

	            if (eventdate[1] === 'mm')
	            {
	                eventdate[1] = date[1];
	            }

	            if (eventdate[2] === 'dd')
	            {
	                eventdate[2] = date[2];
	            }

	            return eventdate[0]+'-'+eventdate[1]+'-'+eventdate[2];
	        };

	        function getLastDayOfMonth(year, month, days){
	            var date = new Date(year, month, days);
	            if (date.getDay() == 0)//we start on monday!
	            {
	                return 6;
	            }
	            else
	            {
	                return date.getDay() -1;
	            }
	        };

	        function getFirstDayOfMonth(year, month){
	            var date = new Date(year, month, 1);
	            if (date.getDay() == 0) //we start on monday!
	            {
	                return 6;
	            }
	            else
	            {
	                return date.getDay() -1;
	            }
	        };

	        function formatDate (year, month, day){
	            return year+'-'+formatMonth(month)+'-'+formatDay(day);
	        };

	        function formatMonth(month){
	            month = month + 1;

	            if (month < 10)
	            {
	                month = '0'+month;
	            }

	            return month;
	        };

	        function formatDay(day){
	            if (day < 10)
	            {
	                day = '0'+day;
	            }

	            return day;
	        };

	        function codabubble(){ //Stefano Verna
	            $('.date_has_event').each(function () {
	                // options
	                var distance = 10;
	                var time = 250;
	                var hideDelay = 175;

	                var hideDelayTimer = null;

	                // tracker
	                var beingShown = false;
	                var shown = false;

	                var trigger = $(this);
	                var popup = $('.events ul', this).css('opacity', 0);

	                // set the mouseover and mouseout on both element
	                $([trigger.get(0), popup.get(0)]).mouseover(function () {
	                    // stops the hide event if we move from the trigger to the popup element
	                    if (hideDelayTimer) clearTimeout(hideDelayTimer);

	                    // don't trigger the animation again if we're being shown, or already visible
	                    if (beingShown || shown) {
	                        return;
	                    } else {
	                        beingShown = true;

	                        // reset position of popup box
	                        popup.css({
	                            bottom: 5,
	                            left: -105,
	                            display: 'block' // brings the popup back in to view
	                        })

	                        // (we're using chaining on the popup) now animate it's opacity and position
	                        .animate({
	                            bottom: '+=' + distance + 'px',
	                            opacity: 1
	                        }, time, 'swing', function() {
	                            // once the animation is complete, set the tracker variables
	                            beingShown = false;
	                            shown = true;
	                        });
	                    }
	                }).mouseout(function () {
	                    // reset the timer if we get fired again - avoids double animations
	                    if (hideDelayTimer) clearTimeout(hideDelayTimer);

	                    // store the timer so that it can be cleared in the mouseover if required
	                    hideDelayTimer = setTimeout(function () {
	                        hideDelayTimer = null;
	                        popup.animate({
	                            bottom: '-=' + distance + 'px',
	                            opacity: 0
	                        }, time, 'swing', function () {
	                            // once the animate is complete, set the tracker variables
	                            shown = false;
	                            // hide the popup entirely after the effect (opacity alone doesn't do the job)
	                            popup.css('display', 'none');
	                        });
	                    }, hideDelay);
	                });
	            });
	        };
	    };

	    $.fn.ical.changeEventDates = function(array){
	       eventdates = array;
	    };

	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 *
	 * Copyright (c) 2010 C. F., Wong (<a href="http://cloudgen.w0ng.hk">Cloudgen Examplet Store</a>)
	 * Licensed under the MIT License:
	 * http://www.opensource.org/licenses/mit-license.php
	 *
	 */
	﻿(function($,len,createRange,duplicate){
		$.fn.caret=function(options,opt2){
			var start,end,t=this[0],browser=$.browser.msie;
			if(typeof options==="object" && typeof options.start==="number" && typeof options.end==="number") {
				start=options.start;
				end=options.end;
			} else if(typeof options==="number" && typeof opt2==="number"){
				start=options;
				end=opt2;
			} else if(typeof options==="string"){
				if((start=t.value.indexOf(options))>-1) end=start+options[len];
				else start=null;
			} else if(Object.prototype.toString.call(options)==="[object RegExp]"){
				var re=options.exec(t.value);
				if(re != null) {
					start=re.index;
					end=start+re[0][len];
				}
			}
			if(typeof start!="undefined"){
				if(browser){
					var selRange = this[0].createTextRange();
					selRange.collapse(true);
					selRange.moveStart('character', start);
					selRange.moveEnd('character', end-start);
					selRange.select();
				} else {
					this[0].selectionStart=start;
					this[0].selectionEnd=end;
				}
				this[0].focus();
				return this
			} else {
				// Modification as suggested by Андрей Юткин
	           if(browser){
					var selection=document.selection;
	                if (this[0].tagName.toLowerCase() != "textarea") {
	                    var val = this.val(),
	                    range = selection[createRange]()[duplicate]();
	                    range.moveEnd("character", val[len]);
	                    var s = (range.text == "" ? val[len]:val.lastIndexOf(range.text));
	                    range = selection[createRange]()[duplicate]();
	                    range.moveStart("character", -val[len]);
	                    var e = range.text[len];
	                } else {
	                    var range = selection[createRange](),
	                    stored_range = range[duplicate]();
	                    stored_range.moveToElementText(this[0]);
	                    stored_range.setEndPoint('EndToEnd', range);
	                    var s = stored_range.text[len] - range.text[len],
	                    e = s + range.text[len]
	                }
				// End of Modification
	            } else {
					var s=t.selectionStart,
						e=t.selectionEnd;
				}
				var te=t.value.substring(s,e);
				return {start:s,end:e,text:te,replace:function(st){
					return t.value.substring(0,s)+st+t.value.substring(e,t.value[len])
				}}
			}
		}
	})(jQuery,"length","createRange","duplicate");
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*! 
	 * jquery.event.drag - v 2.2
	 * Copyright (c) 2010 Three Dub Media - http://threedubmedia.com
	 * Open Source MIT License - http://threedubmedia.com/code/license
	 */
	// Created: 2008-06-04 
	// Updated: 2012-05-21
	// REQUIRES: jquery 1.7.x

	;(function( $ ){

	// add the jquery instance method
	$.fn.drag = function( str, arg, opts ){
		// figure out the event type
		var type = typeof str == "string" ? str : "",
		// figure out the event handler...
		fn = $.isFunction( str ) ? str : $.isFunction( arg ) ? arg : null;
		// fix the event type
		if ( type.indexOf("drag") !== 0 ) 
			type = "drag"+ type;
		// were options passed
		opts = ( str == fn ? arg : opts ) || {};
		// trigger or bind event handler
		return fn ? this.bind( type, opts, fn ) : this.trigger( type );
	};

	// local refs (increase compression)
	var $event = $.event, 
	$special = $event.special,
	// configure the drag special event 
	drag = $special.drag = {
		
		// these are the default settings
		defaults: {
			which: 1, // mouse button pressed to start drag sequence
			distance: 0, // distance dragged before dragstart
			not: ':input', // selector to suppress dragging on target elements
			handle: null, // selector to match handle target elements
			relative: false, // true to use "position", false to use "offset"
			drop: true, // false to suppress drop events, true or selector to allow
			click: false // false to suppress click events after dragend (no proxy)
		},
		
		// the key name for stored drag data
		datakey: "dragdata",
		
		// prevent bubbling for better performance
		noBubble: true,
		
		// count bound related events
		add: function( obj ){ 
			// read the interaction data
			var data = $.data( this, drag.datakey ),
			// read any passed options 
			opts = obj.data || {};
			// count another realted event
			data.related += 1;
			// extend data options bound with this event
			// don't iterate "opts" in case it is a node 
			$.each( drag.defaults, function( key, def ){
				if ( opts[ key ] !== undefined )
					data[ key ] = opts[ key ];
			});
		},
		
		// forget unbound related events
		remove: function(){
			$.data( this, drag.datakey ).related -= 1;
		},
		
		// configure interaction, capture settings
		setup: function(){
			// check for related events
			if ( $.data( this, drag.datakey ) ) 
				return;
			// initialize the drag data with copied defaults
			var data = $.extend({ related:0 }, drag.defaults );
			// store the interaction data
			$.data( this, drag.datakey, data );
			// bind the mousedown event, which starts drag interactions
			$event.add( this, "touchstart mousedown", drag.init, data );
			// prevent image dragging in IE...
			if ( this.attachEvent ) 
				this.attachEvent("ondragstart", drag.dontstart ); 
		},
		
		// destroy configured interaction
		teardown: function(){
			var data = $.data( this, drag.datakey ) || {};
			// check for related events
			if ( data.related ) 
				return;
			// remove the stored data
			$.removeData( this, drag.datakey );
			// remove the mousedown event
			$event.remove( this, "touchstart mousedown", drag.init );
			// enable text selection
			drag.textselect( true ); 
			// un-prevent image dragging in IE...
			if ( this.detachEvent ) 
				this.detachEvent("ondragstart", drag.dontstart ); 
		},
			
		// initialize the interaction
		init: function( event ){ 
			// sorry, only one touch at a time
			if ( drag.touched ) 
				return;
			// the drag/drop interaction data
			var dd = event.data, results;
			// check the which directive
			if ( event.which != 0 && dd.which > 0 && event.which != dd.which ) 
				return; 
			// check for suppressed selector
			if ( $( event.target ).is( dd.not ) ) 
				return;
			// check for handle selector
			if ( dd.handle && !$( event.target ).closest( dd.handle, event.currentTarget ).length ) 
				return;

			drag.touched = event.type == 'touchstart' ? this : null;
			dd.propagates = 1;
			dd.mousedown = this;
			dd.interactions = [ drag.interaction( this, dd ) ];
			dd.target = event.target;
			dd.pageX = event.pageX;
			dd.pageY = event.pageY;
			dd.dragging = null;
			// handle draginit event... 
			results = drag.hijack( event, "draginit", dd );
			// early cancel
			if ( !dd.propagates )
				return;
			// flatten the result set
			results = drag.flatten( results );
			// insert new interaction elements
			if ( results && results.length ){
				dd.interactions = [];
				$.each( results, function(){
					dd.interactions.push( drag.interaction( this, dd ) );
				});
			}
			// remember how many interactions are propagating
			dd.propagates = dd.interactions.length;
			// locate and init the drop targets
			if ( dd.drop !== false && $special.drop ) 
				$special.drop.handler( event, dd );
			// disable text selection
			drag.textselect( false ); 
			// bind additional events...
			if ( drag.touched )
				$event.add( drag.touched, "touchmove touchend", drag.handler, dd );
			else 
				$event.add( document, "mousemove mouseup", drag.handler, dd );
			// helps prevent text selection or scrolling
			if ( !drag.touched || dd.live )
				return false;
		},	
		
		// returns an interaction object
		interaction: function( elem, dd ){
			var offset = $( elem )[ dd.relative ? "position" : "offset" ]() || { top:0, left:0 };
			return {
				drag: elem, 
				callback: new drag.callback(), 
				droppable: [],
				offset: offset
			};
		},
		
		// handle drag-releatd DOM events
		handler: function( event ){ 
			// read the data before hijacking anything
			var dd = event.data;	
			// handle various events
			switch ( event.type ){
				// mousemove, check distance, start dragging
				case !dd.dragging && 'touchmove': 
					event.preventDefault();
				case !dd.dragging && 'mousemove':
					//  drag tolerance, x� + y� = distance�
					if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow(  event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) ) 
						break; // distance tolerance not reached
					event.target = dd.target; // force target from "mousedown" event (fix distance issue)
					drag.hijack( event, "dragstart", dd ); // trigger "dragstart"
					if ( dd.propagates ) // "dragstart" not rejected
						dd.dragging = true; // activate interaction
				// mousemove, dragging
				case 'touchmove':
					event.preventDefault();
				case 'mousemove':
					if ( dd.dragging ){
						// trigger "drag"		
						drag.hijack( event, "drag", dd );
						if ( dd.propagates ){
							// manage drop events
							if ( dd.drop !== false && $special.drop )
								$special.drop.handler( event, dd ); // "dropstart", "dropend"							
							break; // "drag" not rejected, stop		
						}
						event.type = "mouseup"; // helps "drop" handler behave
					}
				// mouseup, stop dragging
				case 'touchend': 
				case 'mouseup': 
				default:
					if ( drag.touched )
						$event.remove( drag.touched, "touchmove touchend", drag.handler ); // remove touch events
					else 
						$event.remove( document, "mousemove mouseup", drag.handler ); // remove page events	
					if ( dd.dragging ){
						if ( dd.drop !== false && $special.drop )
							$special.drop.handler( event, dd ); // "drop"
						drag.hijack( event, "dragend", dd ); // trigger "dragend"	
					}
					drag.textselect( true ); // enable text selection
					// if suppressing click events...
					if ( dd.click === false && dd.dragging )
						$.data( dd.mousedown, "suppress.click", new Date().getTime() + 5 );
					dd.dragging = drag.touched = false; // deactivate element	
					break;
			}
		},
			
		// re-use event object for custom events
		hijack: function( event, type, dd, x, elem ){
			// not configured
			if ( !dd ) 
				return;
			// remember the original event and type
			var orig = { event:event.originalEvent, type:event.type },
			// is the event drag related or drog related?
			mode = type.indexOf("drop") ? "drag" : "drop",
			// iteration vars
			result, i = x || 0, ia, $elems, callback,
			len = !isNaN( x ) ? x : dd.interactions.length;
			// modify the event type
			event.type = type;
			// remove the original event
			event.originalEvent = null;
			// initialize the results
			dd.results = [];
			// handle each interacted element
			do if ( ia = dd.interactions[ i ] ){
				// validate the interaction
				if ( type !== "dragend" && ia.cancelled )
					continue;
				// set the dragdrop properties on the event object
				callback = drag.properties( event, dd, ia );
				// prepare for more results
				ia.results = [];
				// handle each element
				$( elem || ia[ mode ] || dd.droppable ).each(function( p, subject ){
					// identify drag or drop targets individually
					callback.target = subject;
					// force propagtion of the custom event
					event.isPropagationStopped = function(){ return false; };
					// handle the event	
					result = subject ? $event.dispatch.call( subject, event, callback ) : null;
					// stop the drag interaction for this element
					if ( result === false ){
						if ( mode == "drag" ){
							ia.cancelled = true;
							dd.propagates -= 1;
						}
						if ( type == "drop" ){
							ia[ mode ][p] = null;
						}
					}
					// assign any dropinit elements
					else if ( type == "dropinit" )
						ia.droppable.push( drag.element( result ) || subject );
					// accept a returned proxy element 
					if ( type == "dragstart" )
						ia.proxy = $( drag.element( result ) || ia.drag )[0];
					// remember this result	
					ia.results.push( result );
					// forget the event result, for recycling
					delete event.result;
					// break on cancelled handler
					if ( type !== "dropinit" )
						return result;
				});	
				// flatten the results	
				dd.results[ i ] = drag.flatten( ia.results );	
				// accept a set of valid drop targets
				if ( type == "dropinit" )
					ia.droppable = drag.flatten( ia.droppable );
				// locate drop targets
				if ( type == "dragstart" && !ia.cancelled )
					callback.update(); 
			}
			while ( ++i < len )
			// restore the original event & type
			event.type = orig.type;
			event.originalEvent = orig.event;
			// return all handler results
			return drag.flatten( dd.results );
		},
			
		// extend the callback object with drag/drop properties...
		properties: function( event, dd, ia ){		
			var obj = ia.callback;
			// elements
			obj.drag = ia.drag;
			obj.proxy = ia.proxy || ia.drag;
			// starting mouse position
			obj.startX = dd.pageX;
			obj.startY = dd.pageY;
			// current distance dragged
			obj.deltaX = event.pageX - dd.pageX;
			obj.deltaY = event.pageY - dd.pageY;
			// original element position
			obj.originalX = ia.offset.left;
			obj.originalY = ia.offset.top;
			// adjusted element position
			obj.offsetX = obj.originalX + obj.deltaX; 
			obj.offsetY = obj.originalY + obj.deltaY;
			// assign the drop targets information
			obj.drop = drag.flatten( ( ia.drop || [] ).slice() );
			obj.available = drag.flatten( ( ia.droppable || [] ).slice() );
			return obj;	
		},
		
		// determine is the argument is an element or jquery instance
		element: function( arg ){
			if ( arg && ( arg.jquery || arg.nodeType == 1 ) )
				return arg;
		},
		
		// flatten nested jquery objects and arrays into a single dimension array
		flatten: function( arr ){
			return $.map( arr, function( member ){
				return member && member.jquery ? $.makeArray( member ) : 
					member && member.length ? drag.flatten( member ) : member;
			});
		},
		
		// toggles text selection attributes ON (true) or OFF (false)
		textselect: function( bool ){ 
			$( document )[ bool ? "unbind" : "bind" ]("selectstart", drag.dontstart )
				.css("MozUserSelect", bool ? "" : "none" );
			// .attr("unselectable", bool ? "off" : "on" )
			document.unselectable = bool ? "off" : "on"; 
		},
		
		// suppress "selectstart" and "ondragstart" events
		dontstart: function(){ 
			return false; 
		},
		
		// a callback instance contructor
		callback: function(){}
		
	};

	// callback methods
	drag.callback.prototype = {
		update: function(){
			if ( $special.drop && this.available.length )
				$.each( this.available, function( i ){
					$special.drop.locate( this, i );
				});
		}
	};

	// patch $.event.$dispatch to allow suppressing clicks
	var $dispatch = $event.dispatch;
	$event.dispatch = function( event ){
		if ( $.data( this, "suppress."+ event.type ) - new Date().getTime() > 0 ){
			$.removeData( this, "suppress."+ event.type );
			return;
		}
		return $dispatch.apply( this, arguments );
	};

	// event fix hooks for touch events...
	var touchHooks = 
	$event.fixHooks.touchstart = 
	$event.fixHooks.touchmove = 
	$event.fixHooks.touchend =
	$event.fixHooks.touchcancel = {
		props: "clientX clientY pageX pageY screenX screenY".split( " " ),
		filter: function( event, orig ) {
			if ( orig ){
				var touched = ( orig.touches && orig.touches[0] )
					|| ( orig.changedTouches && orig.changedTouches[0] )
					|| null; 
				// iOS webkit: touchstart, touchmove, touchend
				if ( touched ) 
					$.each( touchHooks.props, function( i, prop ){
						event[ prop ] = touched[ prop ];
					});
			}
			return event;
		}
	};

	// share the same special event configuration with related events...
	$special.draginit = $special.dragstart = $special.dragend = drag;

	})( jQuery );
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * jQuery File Upload Plugin 5.13
	 * https://github.com/blueimp/jQuery-File-Upload
	 *
	 * Copyright 2010, Sebastian Tschan
	 * https://blueimp.net
	 *
	 * Licensed under the MIT license:
	 * http://www.opensource.org/licenses/MIT
	 */

	/*jslint nomen: true, unparam: true, regexp: true */
	/*global define, window, document, Blob, FormData, location */

	(function (factory) {
	    'use strict';
	    if (true) {
	        // Register as an anonymous AMD module:
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	            __webpack_require__(62),
	            __webpack_require__(97)
	        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        // Browser globals:
	        factory(window.jQuery);
	    }
	}(function ($) {
	    'use strict';

	    // The FileReader API is not actually used, but works as feature detection,
	    // as e.g. Safari supports XHR file uploads via the FormData API,
	    // but not non-multipart XHR file uploads:
	    $.support.xhrFileUpload = !!(window.XMLHttpRequestUpload && window.FileReader);
	    $.support.xhrFormDataFileUpload = !!window.FormData;

	    // The fileupload widget listens for change events on file input fields defined
	    // via fileInput setting and paste or drop events of the given dropZone.
	    // In addition to the default jQuery Widget methods, the fileupload widget
	    // exposes the "add" and "send" methods, to add or directly send files using
	    // the fileupload API.
	    // By default, files added via file input selection, paste, drag & drop or
	    // "add" method are uploaded immediately, but it is possible to override
	    // the "add" callback option to queue file uploads.
	    $.widget('blueimp.fileupload', {

	        options: {
	            // The namespace used for event handler binding on the dropZone and
	            // fileInput collections.
	            // If not set, the name of the widget ("fileupload") is used.
	            namespace: undefined,
	            // The drop target collection, by the default the complete document.
	            // Set to null or an empty collection to disable drag & drop support:
	            dropZone: $(document),
	            // The file input field collection, that is listened for change events.
	            // If undefined, it is set to the file input fields inside
	            // of the widget element on plugin initialization.
	            // Set to null or an empty collection to disable the change listener.
	            fileInput: undefined,
	            // By default, the file input field is replaced with a clone after
	            // each input field change event. This is required for iframe transport
	            // queues and allows change events to be fired for the same file
	            // selection, but can be disabled by setting the following option to false:
	            replaceFileInput: true,
	            // The parameter name for the file form data (the request argument name).
	            // If undefined or empty, the name property of the file input field is
	            // used, or "files[]" if the file input name property is also empty,
	            // can be a string or an array of strings:
	            paramName: undefined,
	            // By default, each file of a selection is uploaded using an individual
	            // request for XHR type uploads. Set to false to upload file
	            // selections in one request each:
	            singleFileUploads: true,
	            // To limit the number of files uploaded with one XHR request,
	            // set the following option to an integer greater than 0:
	            limitMultiFileUploads: undefined,
	            // Set the following option to true to issue all file upload requests
	            // in a sequential order:
	            sequentialUploads: false,
	            // To limit the number of concurrent uploads,
	            // set the following option to an integer greater than 0:
	            limitConcurrentUploads: undefined,
	            // Set the following option to true to force iframe transport uploads:
	            forceIframeTransport: false,
	            // Set the following option to the location of a redirect url on the
	            // origin server, for cross-domain iframe transport uploads:
	            redirect: undefined,
	            // The parameter name for the redirect url, sent as part of the form
	            // data and set to 'redirect' if this option is empty:
	            redirectParamName: undefined,
	            // Set the following option to the location of a postMessage window,
	            // to enable postMessage transport uploads:
	            postMessage: undefined,
	            // By default, XHR file uploads are sent as multipart/form-data.
	            // The iframe transport is always using multipart/form-data.
	            // Set to false to enable non-multipart XHR uploads:
	            multipart: true,
	            // To upload large files in smaller chunks, set the following option
	            // to a preferred maximum chunk size. If set to 0, null or undefined,
	            // or the browser does not support the required Blob API, files will
	            // be uploaded as a whole.
	            maxChunkSize: undefined,
	            // When a non-multipart upload or a chunked multipart upload has been
	            // aborted, this option can be used to resume the upload by setting
	            // it to the size of the already uploaded bytes. This option is most
	            // useful when modifying the options object inside of the "add" or
	            // "send" callbacks, as the options are cloned for each file upload.
	            uploadedBytes: undefined,
	            // By default, failed (abort or error) file uploads are removed from the
	            // global progress calculation. Set the following option to false to
	            // prevent recalculating the global progress data:
	            recalculateProgress: true,
	            // Interval in milliseconds to calculate and trigger progress events:
	            progressInterval: 100,
	            // Interval in milliseconds to calculate progress bitrate:
	            bitrateInterval: 500,

	            // Additional form data to be sent along with the file uploads can be set
	            // using this option, which accepts an array of objects with name and
	            // value properties, a function returning such an array, a FormData
	            // object (for XHR file uploads), or a simple object.
	            // The form of the first fileInput is given as parameter to the function:
	            formData: function (form) {
	                return form.serializeArray();
	            },

	            // The add callback is invoked as soon as files are added to the fileupload
	            // widget (via file input selection, drag & drop, paste or add API call).
	            // If the singleFileUploads option is enabled, this callback will be
	            // called once for each file in the selection for XHR file uplaods, else
	            // once for each file selection.
	            // The upload starts when the submit method is invoked on the data parameter.
	            // The data object contains a files property holding the added files
	            // and allows to override plugin options as well as define ajax settings.
	            // Listeners for this callback can also be bound the following way:
	            // .bind('fileuploadadd', func);
	            // data.submit() returns a Promise object and allows to attach additional
	            // handlers using jQuery's Deferred callbacks:
	            // data.submit().done(func).fail(func).always(func);
	            add: function (e, data) {
	                data.submit();
	            },

	            // Other callbacks:
	            // Callback for the submit event of each file upload:
	            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);
	            // Callback for the start of each file upload request:
	            // send: function (e, data) {}, // .bind('fileuploadsend', func);
	            // Callback for successful uploads:
	            // done: function (e, data) {}, // .bind('fileuploaddone', func);
	            // Callback for failed (abort or error) uploads:
	            // fail: function (e, data) {}, // .bind('fileuploadfail', func);
	            // Callback for completed (success, abort or error) requests:
	            // always: function (e, data) {}, // .bind('fileuploadalways', func);
	            // Callback for upload progress events:
	            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);
	            // Callback for global upload progress events:
	            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);
	            // Callback for uploads start, equivalent to the global ajaxStart event:
	            // start: function (e) {}, // .bind('fileuploadstart', func);
	            // Callback for uploads stop, equivalent to the global ajaxStop event:
	            // stop: function (e) {}, // .bind('fileuploadstop', func);
	            // Callback for change events of the fileInput collection:
	            // change: function (e, data) {}, // .bind('fileuploadchange', func);
	            // Callback for paste events to the dropZone collection:
	            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);
	            // Callback for drop events of the dropZone collection:
	            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);
	            // Callback for dragover events of the dropZone collection:
	            // dragover: function (e) {}, // .bind('fileuploaddragover', func);

	            // The plugin options are used as settings object for the ajax calls.
	            // The following are jQuery ajax settings required for the file uploads:
	            processData: false,
	            contentType: false,
	            cache: false
	        },

	        // A list of options that require a refresh after assigning a new value:
	        _refreshOptionsList: [
	            'namespace',
	            'dropZone',
	            'fileInput',
	            'multipart',
	            'forceIframeTransport'
	        ],

	        _BitrateTimer: function () {
	            this.timestamp = +(new Date());
	            this.loaded = 0;
	            this.bitrate = 0;
	            this.getBitrate = function (now, loaded, interval) {
	                var timeDiff = now - this.timestamp;
	                if (!this.bitrate || !interval || timeDiff > interval) {
	                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
	                    this.loaded = loaded;
	                    this.timestamp = now;
	                }
	                return this.bitrate;
	            };
	        },

	        _isXHRUpload: function (options) {
	            return !options.forceIframeTransport &&
	                ((!options.multipart && $.support.xhrFileUpload) ||
	                $.support.xhrFormDataFileUpload);
	        },

	        _getFormData: function (options) {
	            var formData;
	            if (typeof options.formData === 'function') {
	                return options.formData(options.form);
	            }
				if ($.isArray(options.formData)) {
	                return options.formData;
	            }
				if (options.formData) {
	                formData = [];
	                $.each(options.formData, function (name, value) {
	                    formData.push({name: name, value: value});
	                });
	                return formData;
	            }
	            return [];
	        },

	        _getTotal: function (files) {
	            var total = 0;
	            $.each(files, function (index, file) {
	                total += file.size || 1;
	            });
	            return total;
	        },

	        _onProgress: function (e, data) {
	            if (e.lengthComputable) {
	                var now = +(new Date()),
	                    total,
	                    loaded;
	                if (data._time && data.progressInterval &&
	                        (now - data._time < data.progressInterval) &&
	                        e.loaded !== e.total) {
	                    return;
	                }
	                data._time = now;
	                total = data.total || this._getTotal(data.files);
	                loaded = parseInt(
	                    e.loaded / e.total * (data.chunkSize || total),
	                    10
	                ) + (data.uploadedBytes || 0);
	                this._loaded += loaded - (data.loaded || data.uploadedBytes || 0);
	                data.lengthComputable = true;
	                data.loaded = loaded;
	                data.total = total;
	                data.bitrate = data._bitrateTimer.getBitrate(
	                    now,
	                    loaded,
	                    data.bitrateInterval
	                );
	                // Trigger a custom progress event with a total data property set
	                // to the file size(s) of the current upload and a loaded data
	                // property calculated accordingly:
	                this._trigger('progress', e, data);
	                // Trigger a global progress event for all current file uploads,
	                // including ajax calls queued for sequential file uploads:
	                this._trigger('progressall', e, {
	                    lengthComputable: true,
	                    loaded: this._loaded,
	                    total: this._total,
	                    bitrate: this._bitrateTimer.getBitrate(
	                        now,
	                        this._loaded,
	                        data.bitrateInterval
	                    )
	                });
	            }
	        },

	        _initProgressListener: function (options) {
	            var that = this,
	                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
	            // Accesss to the native XHR object is required to add event listeners
	            // for the upload progress event:
	            if (xhr.upload) {
	                $(xhr.upload).bind('progress', function (e) {
	                    var oe = e.originalEvent;
	                    // Make sure the progress event properties get copied over:
	                    e.lengthComputable = oe.lengthComputable;
	                    e.loaded = oe.loaded;
	                    e.total = oe.total;
	                    that._onProgress(e, options);
	                });
	                options.xhr = function () {
	                    return xhr;
	                };
	            }
	        },

	        _initXHRData: function (options) {
	            var formData,
	                file = options.files[0],
	                // Ignore non-multipart setting if not supported:
	                multipart = options.multipart || !$.support.xhrFileUpload,
	                paramName = options.paramName[0];
	            if (!multipart || options.blob) {
	                // For non-multipart uploads and chunked uploads,
	                // file meta data is not part of the request body,
	                // so we transmit this data as part of the HTTP headers.
	                // For cross domain requests, these headers must be allowed
	                // via Access-Control-Allow-Headers or removed using
	                // the beforeSend callback:
	                options.headers = $.extend(options.headers, {
	                    'X-File-Name': file.name,
	                    'X-File-Type': file.type,
	                    'X-File-Size': file.size
	                });
	                if (!options.blob) {
	                    // Non-chunked non-multipart upload:
	                    options.contentType = file.type;
	                    options.data = file;
	                } else if (!multipart) {
	                    // Chunked non-multipart upload:
	                    options.contentType = 'application/octet-stream';
	                    options.data = options.blob;
	                }
	            }
	            if (multipart && $.support.xhrFormDataFileUpload) {
	                if (options.postMessage) {
	                    // window.postMessage does not allow sending FormData
	                    // objects, so we just add the File/Blob objects to
	                    // the formData array and let the postMessage window
	                    // create the FormData object out of this array:
	                    formData = this._getFormData(options);
	                    if (options.blob) {
	                        formData.push({
	                            name: paramName,
	                            value: options.blob
	                        });
	                    } else {
	                        $.each(options.files, function (index, file) {
	                            formData.push({
	                                name: options.paramName[index] || paramName,
	                                value: file
	                            });
	                        });
	                    }
	                } else {
	                    if (options.formData instanceof FormData) {
	                        formData = options.formData;
	                    } else {
	                        formData = new FormData();
	                        $.each(this._getFormData(options), function (index, field) {
	                            formData.append(field.name, field.value);
	                        });
	                    }
	                    if (options.blob) {
	                        formData.append(paramName, options.blob, file.name);
	                    } else {
	                        $.each(options.files, function (index, file) {
	                            // File objects are also Blob instances.
	                            // This check allows the tests to run with
	                            // dummy objects:
	                            if (file instanceof Blob) {
	                                formData.append(
	                                    options.paramName[index] || paramName,
	                                    file,
	                                    file.name
	                                );
	                            }
	                        });
	                    }
	                }
	                options.data = formData;
	            }
	            // Blob reference is not needed anymore, free memory:
	            options.blob = null;
	        },

	        _initIframeSettings: function (options) {
	            // Setting the dataType to iframe enables the iframe transport:
	            options.dataType = 'iframe ' + (options.dataType || '');
	            // The iframe transport accepts a serialized array as form data:
	            options.formData = this._getFormData(options);
	            // Add redirect url to form data on cross-domain uploads:
	            if (options.redirect && $('<a></a>').prop('href', options.url)
	                    .prop('host') !== location.host) {
	                options.formData.push({
	                    name: options.redirectParamName || 'redirect',
	                    value: options.redirect
	                });
	            }
	        },

	        _initDataSettings: function (options) {
	            if (this._isXHRUpload(options)) {
	                if (!this._chunkedUpload(options, true)) {
	                    if (!options.data) {
	                        this._initXHRData(options);
	                    }
	                    this._initProgressListener(options);
	                }
	                if (options.postMessage) {
	                    // Setting the dataType to postmessage enables the
	                    // postMessage transport:
	                    options.dataType = 'postmessage ' + (options.dataType || '');
	                }
	            } else {
	                this._initIframeSettings(options, 'iframe');
	            }
	        },

	        _getParamName: function (options) {
	            var fileInput = $(options.fileInput),
	                paramName = options.paramName;
	            if (!paramName) {
	                paramName = [];
	                fileInput.each(function () {
	                    var input = $(this),
	                        name = input.prop('name') || 'files[]',
	                        i = (input.prop('files') || [1]).length;
	                    while (i) {
	                        paramName.push(name);
	                        i -= 1;
	                    }
	                });
	                if (!paramName.length) {
	                    paramName = [fileInput.prop('name') || 'files[]'];
	                }
	            } else if (!$.isArray(paramName)) {
	                paramName = [paramName];
	            }
	            return paramName;
	        },

	        _initFormSettings: function (options) {
	            // Retrieve missing options from the input field and the
	            // associated form, if available:
	            if (!options.form || !options.form.length) {
	                options.form = $(options.fileInput.prop('form'));
	            }
	            options.paramName = this._getParamName(options);
	            if (!options.url) {
	                options.url = options.form.prop('action') || location.href;
	            }
	            // The HTTP request method must be "POST" or "PUT":
	            options.type = (options.type || options.form.prop('method') || '')
	                .toUpperCase();
	            if (options.type !== 'POST' && options.type !== 'PUT') {
	                options.type = 'POST';
	            }
	        },

	        _getAJAXSettings: function (data) {
	            var options = $.extend({}, this.options, data);
	            this._initFormSettings(options);
	            this._initDataSettings(options);
	            return options;
	        },

	        // Maps jqXHR callbacks to the equivalent
	        // methods of the given Promise object:
	        _enhancePromise: function (promise) {
	            promise.success = promise.done;
	            promise.error = promise.fail;
	            promise.complete = promise.always;
	            return promise;
	        },

	        // Creates and returns a Promise object enhanced with
	        // the jqXHR methods abort, success, error and complete:
	        _getXHRPromise: function (resolveOrReject, context, args) {
	            var dfd = $.Deferred(),
	                promise = dfd.promise();
	            context = context || this.options.context || promise;
	            if (resolveOrReject === true) {
	                dfd.resolveWith(context, args);
	            } else if (resolveOrReject === false) {
	                dfd.rejectWith(context, args);
	            }
	            promise.abort = dfd.promise;
	            return this._enhancePromise(promise);
	        },

	        // Uploads a file in multiple, sequential requests
	        // by splitting the file up in multiple blob chunks.
	        // If the second parameter is true, only tests if the file
	        // should be uploaded in chunks, but does not invoke any
	        // upload requests:
	        _chunkedUpload: function (options, testOnly) {
	            var that = this,
	                file = options.files[0],
	                fs = file.size,
	                ub = options.uploadedBytes = options.uploadedBytes || 0,
	                mcs = options.maxChunkSize || fs,
	                // Use the Blob methods with the slice implementation
	                // according to the W3C Blob API specification:
	                slice = file.webkitSlice || file.mozSlice || file.slice,
	                upload,
	                n,
	                jqXHR,
	                pipe;
	            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||
	                    options.data) {
	                return false;
	            }
	            if (testOnly) {
	                return true;
	            }
	            if (ub >= fs) {
	                file.error = 'uploadedBytes';
	                return this._getXHRPromise(
	                    false,
	                    options.context,
	                    [null, 'error', file.error]
	                );
	            }
	            // n is the number of blobs to upload,
	            // calculated via filesize, uploaded bytes and max chunk size:
	            n = Math.ceil((fs - ub) / mcs);
	            // The chunk upload method accepting the chunk number as parameter:
	            upload = function (i) {
	                if (!i) {
	                    return that._getXHRPromise(true, options.context);
	                }
	                // Upload the blobs in sequential order:
	                return upload(i -= 1).pipe(function () {
	                    // Clone the options object for each chunk upload:
	                    var o = $.extend({}, options);
	                    o.blob = slice.call(
	                        file,
	                        ub + i * mcs,
	                        ub + (i + 1) * mcs
	                    );
	                    // Expose the chunk index:
	                    o.chunkIndex = i;
	                    // Expose the number of chunks:
	                    o.chunksNumber = n;
	                    // Store the current chunk size, as the blob itself
	                    // will be dereferenced after data processing:
	                    o.chunkSize = o.blob.size;
	                    // Process the upload data (the blob and potential form data):
	                    that._initXHRData(o);
	                    // Add progress listeners for this chunk upload:
	                    that._initProgressListener(o);
	                    jqXHR = ($.ajax(o) || that._getXHRPromise(false, o.context))
	                        .done(function () {
	                            // Create a progress event if upload is done and
	                            // no progress event has been invoked for this chunk:
	                            if (!o.loaded) {
	                                that._onProgress($.Event('progress', {
	                                    lengthComputable: true,
	                                    loaded: o.chunkSize,
	                                    total: o.chunkSize
	                                }), o);
	                            }
	                            options.uploadedBytes = o.uploadedBytes +=
	                                o.chunkSize;
	                        });
	                    return jqXHR;
	                });
	            };
	            // Return the piped Promise object, enhanced with an abort method,
	            // which is delegated to the jqXHR object of the current upload,
	            // and jqXHR callbacks mapped to the equivalent Promise methods:
	            pipe = upload(n);
	            pipe.abort = function () {
	                return jqXHR.abort();
	            };
	            return this._enhancePromise(pipe);
	        },

	        _beforeSend: function (e, data) {
	            if (this._active === 0) {
	                // the start callback is triggered when an upload starts
	                // and no other uploads are currently running,
	                // equivalent to the global ajaxStart event:
	                this._trigger('start');
	                // Set timer for global bitrate progress calculation:
	                this._bitrateTimer = new this._BitrateTimer();
	            }
	            this._active += 1;
	            // Initialize the global progress values:
	            this._loaded += data.uploadedBytes || 0;
	            this._total += this._getTotal(data.files);
	        },

	        _onDone: function (result, textStatus, jqXHR, options) {
	            if (!this._isXHRUpload(options)) {
	                // Create a progress event for each iframe load:
	                this._onProgress($.Event('progress', {
	                    lengthComputable: true,
	                    loaded: 1,
	                    total: 1
	                }), options);
	            }
	            options.result = result;
	            options.textStatus = textStatus;
	            options.jqXHR = jqXHR;
	            this._trigger('done', null, options);
	        },

	        _onFail: function (jqXHR, textStatus, errorThrown, options) {
	            options.jqXHR = jqXHR;
	            options.textStatus = textStatus;
	            options.errorThrown = errorThrown;
	            this._trigger('fail', null, options);
	            if (options.recalculateProgress) {
	                // Remove the failed (error or abort) file upload from
	                // the global progress calculation:
	                this._loaded -= options.loaded || options.uploadedBytes || 0;
	                this._total -= options.total || this._getTotal(options.files);
	            }
	        },

	        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {
	            this._active -= 1;
	            options.textStatus = textStatus;
	            if (jqXHRorError && jqXHRorError.always) {
	                options.jqXHR = jqXHRorError;
	                options.result = jqXHRorResult;
	            } else {
	                options.jqXHR = jqXHRorResult;
	                options.errorThrown = jqXHRorError;
	            }
	            this._trigger('always', null, options);
	            if (this._active === 0) {
	                // The stop callback is triggered when all uploads have
	                // been completed, equivalent to the global ajaxStop event:
	                this._trigger('stop');
	                // Reset the global progress values:
	                this._loaded = this._total = 0;
	                this._bitrateTimer = null;
	            }
	        },

	        _onSend: function (e, data) {
	            var that = this,
	                jqXHR,
	                slot,
	                pipe,
	                options = that._getAJAXSettings(data),
	                send = function (resolve, args) {
	                    that._sending += 1;
	                    // Set timer for bitrate progress calculation:
	                    options._bitrateTimer = new that._BitrateTimer();
	                    jqXHR = jqXHR || (
	                        (resolve !== false &&
	                        that._trigger('send', e, options) !== false &&
	                        (that._chunkedUpload(options) || $.ajax(options))) ||
	                        that._getXHRPromise(false, options.context, args)
	                    ).done(function (result, textStatus, jqXHR) {
	                        that._onDone(result, textStatus, jqXHR, options);
	                    }).fail(function (jqXHR, textStatus, errorThrown) {
	                        that._onFail(jqXHR, textStatus, errorThrown, options);
	                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {
	                        that._sending -= 1;
	                        that._onAlways(
	                            jqXHRorResult,
	                            textStatus,
	                            jqXHRorError,
	                            options
	                        );
	                        if (options.limitConcurrentUploads &&
	                                options.limitConcurrentUploads > that._sending) {
	                            // Start the next queued upload,
	                            // that has not been aborted:
	                            var nextSlot = that._slots.shift();
	                            while (nextSlot) {
	                                if (!nextSlot.isRejected()) {
	                                    nextSlot.resolve();
	                                    break;
	                                }
	                                nextSlot = that._slots.shift();
	                            }
	                        }
	                    });
	                    return jqXHR;
	                };
	            this._beforeSend(e, options);
	            if (this.options.sequentialUploads ||
	                    (this.options.limitConcurrentUploads &&
	                    this.options.limitConcurrentUploads <= this._sending)) {
	                if (this.options.limitConcurrentUploads > 1) {
	                    slot = $.Deferred();
	                    this._slots.push(slot);
	                    pipe = slot.pipe(send);
	                } else {
	                    pipe = (this._sequence = this._sequence.pipe(send, send));
	                }
	                // Return the piped Promise object, enhanced with an abort method,
	                // which is delegated to the jqXHR object of the current upload,
	                // and jqXHR callbacks mapped to the equivalent Promise methods:
	                pipe.abort = function () {
	                    var args = [undefined, 'abort', 'abort'];
	                    if (!jqXHR) {
	                        if (slot) {
	                            slot.rejectWith(args);
	                        }
	                        return send(false, args);
	                    }
	                    return jqXHR.abort();
	                };
	                return this._enhancePromise(pipe);
	            }
	            return send();
	        },

	        _onAdd: function (e, data) {
	            var that = this,
	                result = true,
	                options = $.extend({}, this.options, data),
	                limit = options.limitMultiFileUploads,
	                paramName = this._getParamName(options),
	                paramNameSet,
	                paramNameSlice,
	                fileSet,
	                i;
	            if (!(options.singleFileUploads || limit) ||
	                    !this._isXHRUpload(options)) {
	                fileSet = [data.files];
	                paramNameSet = [paramName];
	            } else if (!options.singleFileUploads && limit) {
	                fileSet = [];
	                paramNameSet = [];
	                for (i = 0; i < data.files.length; i += limit) {
	                    fileSet.push(data.files.slice(i, i + limit));
	                    paramNameSlice = paramName.slice(i, i + limit);
	                    if (!paramNameSlice.length) {
	                        paramNameSlice = paramName;
	                    }
	                    paramNameSet.push(paramNameSlice);
	                }
	            } else {
	                paramNameSet = paramName;
	            }
	            data.originalFiles = data.files;
	            $.each(fileSet || data.files, function (index, element) {
	                var newData = $.extend({}, data);
	                newData.files = fileSet ? element : [element];
	                newData.paramName = paramNameSet[index];
	                newData.submit = function () {
	                    newData.jqXHR = this.jqXHR =
	                        (that._trigger('submit', e, this) !== false) &&
	                        that._onSend(e, this);
	                    return this.jqXHR;
	                };
	                return (result = that._trigger('add', e, newData));
	            });
	            return result;
	        },

	        // File Normalization for Gecko 1.9.1 (Firefox 3.5) support:
	        _normalizeFile: function (index, file) {
	            if (file.name === undefined && file.size === undefined) {
	                file.name = file.fileName;
	                file.size = file.fileSize;
	            }
	        },

	        _replaceFileInput: function (input) {
	            var inputClone = input.clone(true);
	            $('<form></form>').append(inputClone)[0].reset();
	            // Detaching allows to insert the fileInput on another form
	            // without loosing the file input value:
	            input.after(inputClone).detach();
	            // Avoid memory leaks with the detached file input:
	            $.cleanData(input.unbind('remove'));
	            // Replace the original file input element in the fileInput
	            // collection with the clone, which has been copied including
	            // event handlers:
	            this.options.fileInput = this.options.fileInput.map(function (i, el) {
	                if (el === input[0]) {
	                    return inputClone[0];
	                }
	                return el;
	            });
	            // If the widget has been initialized on the file input itself,
	            // override this.element with the file input clone:
	            if (input[0] === this.element[0]) {
	                this.element = inputClone;
	            }
	        },

	        _getFileInputFiles: function (fileInput) {
	            fileInput = $(fileInput);
	            var files = $.each($.makeArray(fileInput.prop('files')), this._normalizeFile),
	                value;
	            if (!files.length) {
	                value = fileInput.prop('value');
	                if (!value) {
	                    return [];
	                }
	                // If the files property is not available, the browser does not
	                // support the File API and we add a pseudo File object with
	                // the input value as name with path information removed:
	                files = [{name: value.replace(/^.*\\/, '')}];
	            }
	            return files;
	        },

	        _onChange: function (e) {
	            var that = e.data.fileupload,
	                data = {
	                    fileInput: $(e.target),
	                    form: $(e.target.form)
	                };
	            data.files = that._getFileInputFiles(data.fileInput);
	            if (that.options.replaceFileInput) {
	                that._replaceFileInput(data.fileInput);
	            }
	            if (that._trigger('change', e, data) === false ||
	                    that._onAdd(e, data) === false) {
	                return false;
	            }
	        },

	        _onPaste: function (e) {
	            var that = e.data.fileupload,
	                cbd = e.originalEvent.clipboardData,
	                items = (cbd && cbd.items) || [],
	                data = {files: []};
	            $.each(items, function (index, item) {
	                var file = item.getAsFile && item.getAsFile();
	                if (file) {
	                    data.files.push(file);
	                }
	            });
	            if (that._trigger('paste', e, data) === false ||
	                    that._onAdd(e, data) === false) {
	                return false;
	            }
	        },

	        _onDrop: function (e) {
	            var that = e.data.fileupload,
	                dataTransfer = e.dataTransfer = e.originalEvent.dataTransfer,
	                data = {
	                    files: $.each(
	                        $.makeArray(dataTransfer && dataTransfer.files),
	                        that._normalizeFile
	                    )
	                };
	            if (that._trigger('drop', e, data) === false ||
	                    that._onAdd(e, data) === false) {
	                return false;
	            }
	            e.preventDefault();
	        },

	        _onDragOver: function (e) {
	            var that = e.data.fileupload,
	                dataTransfer = e.dataTransfer = e.originalEvent.dataTransfer;
	            if (that._trigger('dragover', e) === false) {
	                return false;
	            }
	            if (dataTransfer) {
	                dataTransfer.dropEffect = 'copy';
	            }
	            e.preventDefault();
	        },

	        _initEventHandlers: function () {
	            var ns = this.options.namespace;
	            if (this._isXHRUpload(this.options)) {
	                this.options.dropZone
	                    .bind('dragover.' + ns, {fileupload: this}, this._onDragOver)
	                    .bind('drop.' + ns, {fileupload: this}, this._onDrop)
	                    .bind('paste.' + ns, {fileupload: this}, this._onPaste);
	            }
	            this.options.fileInput
	                .bind('change.' + ns, {fileupload: this}, this._onChange);
	        },

	        _destroyEventHandlers: function () {
	            var ns = this.options.namespace;
	            this.options.dropZone
	                .unbind('dragover.' + ns, this._onDragOver)
	                .unbind('drop.' + ns, this._onDrop)
	                .unbind('paste.' + ns, this._onPaste);
	            this.options.fileInput
	                .unbind('change.' + ns, this._onChange);
	        },

	        _setOption: function (key, value) {
	            var refresh = $.inArray(key, this._refreshOptionsList) !== -1;
	            if (refresh) {
	                this._destroyEventHandlers();
	            }
	            $.Widget.prototype._setOption.call(this, key, value);
	            if (refresh) {
	                this._initSpecialOptions();
	                this._initEventHandlers();
	            }
	        },

	        _initSpecialOptions: function () {
	            var options = this.options;
	            if (options.fileInput === undefined) {
	                options.fileInput = this.element.is('input:file') ?
	                        this.element : this.element.find('input:file');
	            } else if (!(options.fileInput instanceof $)) {
	                options.fileInput = $(options.fileInput);
	            }
	            if (!(options.dropZone instanceof $)) {
	                options.dropZone = $(options.dropZone);
	            }
	        },

	        _create: function () {
	            var options = this.options;
	            // Initialize options set via HTML5 data-attributes:
	            $.extend(options, $(this.element[0].cloneNode(false)).data());
	            options.namespace = options.namespace || this.widgetName;
	            this._initSpecialOptions();
	            this._slots = [];
	            this._sequence = this._getXHRPromise(true);
	            this._sending = this._active = this._loaded = this._total = 0;
	            this._initEventHandlers();
	        },

	        destroy: function () {
	            this._destroyEventHandlers();
	            $.Widget.prototype.destroy.call(this);
	        },

	        enable: function () {
	            $.Widget.prototype.enable.call(this);
	            this._initEventHandlers();
	        },

	        disable: function () {
	            this._destroyEventHandlers();
	            $.Widget.prototype.disable.call(this);
	        },

	        // This method is exposed to the widget API and allows adding files
	        // using the fileupload API. The data parameter accepts an object which
	        // must have a files property and can contain additional options:
	        // .fileupload('add', {files: filesList});
	        add: function (data) {
	            if (!data || this.options.disabled) {
	                return;
	            }
	            if (data.fileInput && !data.files) {
	                data.files = this._getFileInputFiles(data.fileInput);
	            } else {
	                data.files = $.each($.makeArray(data.files), this._normalizeFile);
	            }
	            this._onAdd(null, data);
	        },

	        // This method is exposed to the widget API and allows sending files
	        // using the fileupload API. The data parameter accepts an object which
	        // must have a files property and can contain additional options:
	        // .fileupload('send', {files: filesList});
	        // The method returns a Promise object for the file upload call.
	        send: function (data) {
	            if (data && !this.options.disabled) {
	                if (data.fileInput && !data.files) {
	                    data.files = this._getFileInputFiles(data.fileInput);
	                } else {
	                    data.files = $.each($.makeArray(data.files), this._normalizeFile);
	                }
	                if (data.files.length) {
	                    return this._onSend(null, data);
	                }
	            }
	            return this._getXHRPromise(false, data && data.context);
	        }

	    });

	}));


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*! jQuery UI - v1.10.0 - 2013-01-17
	* http://jqueryui.com
	* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
	* Copyright (c) 2013 jQuery Foundation and other contributors Licensed MIT */

	(function( $, undefined ) {

	var uuid = 0,
		runiqueId = /^ui-id-\d+$/;

	// prevent duplicate loading
	// this is only a problem because we proxy existing functions
	// and we don't want to double proxy them
	$.ui = $.ui || {};
	if ( $.ui.version ) {
		return;
	}

	$.extend( $.ui, {
		version: "1.10.0",

		keyCode: {
			BACKSPACE: 8,
			COMMA: 188,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			LEFT: 37,
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SPACE: 32,
			TAB: 9,
			UP: 38
		}
	});

	// plugins
	$.fn.extend({
		_focus: $.fn.focus,
		focus: function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				this._focus.apply( this, arguments );
		},

		scrollParent: function() {
			var scrollParent;
			if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
				scrollParent = this.parents().filter(function() {
					return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			} else {
				scrollParent = this.parents().filter(function() {
					return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			}

			return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
		},

		zIndex: function( zIndex ) {
			if ( zIndex !== undefined ) {
				return this.css( "zIndex", zIndex );
			}

			if ( this.length ) {
				var elem = $( this[ 0 ] ), position, value;
				while ( elem.length && elem[ 0 ] !== document ) {
					// Ignore z-index if position is set to a value where z-index is ignored by the browser
					// This makes behavior of this function consistent across browsers
					// WebKit always returns auto if the element is positioned
					position = elem.css( "position" );
					if ( position === "absolute" || position === "relative" || position === "fixed" ) {
						// IE returns 0 when zIndex is not specified
						// other browsers return a string
						// we ignore the case of nested elements with an explicit value of 0
						// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
						value = parseInt( elem.css( "zIndex" ), 10 );
						if ( !isNaN( value ) && value !== 0 ) {
							return value;
						}
					}
					elem = elem.parent();
				}
			}

			return 0;
		},

		uniqueId: function() {
			return this.each(function() {
				if ( !this.id ) {
					this.id = "ui-id-" + (++uuid);
				}
			});
		},

		removeUniqueId: function() {
			return this.each(function() {
				if ( runiqueId.test( this.id ) ) {
					$( this ).removeAttr( "id" );
				}
			});
		}
	});

	// selectors
	function focusable( element, isTabIndexNotNaN ) {
		var map, mapName, img,
			nodeName = element.nodeName.toLowerCase();
		if ( "area" === nodeName ) {
			map = element.parentNode;
			mapName = map.name;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = $( "img[usemap=#" + mapName + "]" )[0];
			return !!img && visible( img );
		}
		return ( /input|select|textarea|button|object/.test( nodeName ) ?
			!element.disabled :
			"a" === nodeName ?
				element.href || isTabIndexNotNaN :
				isTabIndexNotNaN) &&
			// the element and all of its ancestors must be visible
			visible( element );
	}

	function visible( element ) {
		return $.expr.filters.visible( element ) &&
			!$( element ).parents().addBack().filter(function() {
				return $.css( this, "visibility" ) === "hidden";
			}).length;
	}

	$.extend( $.expr[ ":" ], {
		data: $.expr.createPseudo ?
			$.expr.createPseudo(function( dataName ) {
				return function( elem ) {
					return !!$.data( elem, dataName );
				};
			}) :
			// support: jQuery <1.8
			function( elem, i, match ) {
				return !!$.data( elem, match[ 3 ] );
			},

		focusable: function( element ) {
			return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
		},

		tabbable: function( element ) {
			var tabIndex = $.attr( element, "tabindex" ),
				isTabIndexNaN = isNaN( tabIndex );
			return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
		}
	});

	// support: jQuery <1.8
	if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
		$.each( [ "Width", "Height" ], function( i, name ) {
			var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
				type = name.toLowerCase(),
				orig = {
					innerWidth: $.fn.innerWidth,
					innerHeight: $.fn.innerHeight,
					outerWidth: $.fn.outerWidth,
					outerHeight: $.fn.outerHeight
				};

			function reduce( elem, size, border, margin ) {
				$.each( side, function() {
					size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
					if ( border ) {
						size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
					}
					if ( margin ) {
						size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
					}
				});
				return size;
			}

			$.fn[ "inner" + name ] = function( size ) {
				if ( size === undefined ) {
					return orig[ "inner" + name ].call( this );
				}

				return this.each(function() {
					$( this ).css( type, reduce( this, size ) + "px" );
				});
			};

			$.fn[ "outer" + name] = function( size, margin ) {
				if ( typeof size !== "number" ) {
					return orig[ "outer" + name ].call( this, size );
				}

				return this.each(function() {
					$( this).css( type, reduce( this, size, true, margin ) + "px" );
				});
			};
		});
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
	if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
		$.fn.removeData = (function( removeData ) {
			return function( key ) {
				if ( arguments.length ) {
					return removeData.call( this, $.camelCase( key ) );
				} else {
					return removeData.call( this );
				}
			};
		})( $.fn.removeData );
	}





	// deprecated
	$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

	$.support.selectstart = "onselectstart" in document.createElement( "div" );
	$.fn.extend({
		disableSelection: function() {
			return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
				".ui-disableSelection", function( event ) {
					event.preventDefault();
				});
		},

		enableSelection: function() {
			return this.unbind( ".ui-disableSelection" );
		}
	});

	$.extend( $.ui, {
		// $.ui.plugin is deprecated.  Use the proxy pattern instead.
		plugin: {
			add: function( module, option, set ) {
				var i,
					proto = $.ui[ module ].prototype;
				for ( i in set ) {
					proto.plugins[ i ] = proto.plugins[ i ] || [];
					proto.plugins[ i ].push( [ option, set[ i ] ] );
				}
			},
			call: function( instance, name, args ) {
				var i,
					set = instance.plugins[ name ];
				if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
					return;
				}

				for ( i = 0; i < set.length; i++ ) {
					if ( instance.options[ set[ i ][ 0 ] ] ) {
						set[ i ][ 1 ].apply( instance.element, args );
					}
				}
			}
		},

		// only used by resizable
		hasScroll: function( el, a ) {

			//If overflow is hidden, the element might have extra content, but the user wants to hide it
			if ( $( el ).css( "overflow" ) === "hidden") {
				return false;
			}

			var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
				has = false;

			if ( el[ scroll ] > 0 ) {
				return true;
			}

			// TODO: determine which cases actually cause this to happen
			// if the element doesn't have the scroll set, see if it's possible to
			// set the scroll
			el[ scroll ] = 1;
			has = ( el[ scroll ] > 0 );
			el[ scroll ] = 0;
			return has;
		}
	});

	})( jQuery );
	(function( $, undefined ) {

	var uuid = 0,
		slice = Array.prototype.slice,
		_cleanData = $.cleanData;
	$.cleanData = function( elems ) {
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			try {
				$( elem ).triggerHandler( "remove" );
			// http://bugs.jquery.com/ticket/8235
			} catch( e ) {}
		}
		_cleanData( elems );
	};

	$.widget = function( name, base, prototype ) {
		var fullName, existingConstructor, constructor, basePrototype,
			// proxiedPrototype allows the provided prototype to remain unmodified
			// so that it can be used as a mixin for multiple widgets (#8876)
			proxiedPrototype = {},
			namespace = name.split( "." )[ 0 ];

		name = name.split( "." )[ 1 ];
		fullName = namespace + "-" + name;

		if ( !prototype ) {
			prototype = base;
			base = $.Widget;
		}

		// create selector for plugin
		$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
			return !!$.data( elem, fullName );
		};

		$[ namespace ] = $[ namespace ] || {};
		existingConstructor = $[ namespace ][ name ];
		constructor = $[ namespace ][ name ] = function( options, element ) {
			// allow instantiation without "new" keyword
			if ( !this._createWidget ) {
				return new constructor( options, element );
			}

			// allow instantiation without initializing for simple inheritance
			// must use "new" keyword (the code above always passes args)
			if ( arguments.length ) {
				this._createWidget( options, element );
			}
		};
		// extend with the existing constructor to carry over any static properties
		$.extend( constructor, existingConstructor, {
			version: prototype.version,
			// copy the object used to create the prototype in case we need to
			// redefine the widget later
			_proto: $.extend( {}, prototype ),
			// track widgets that inherit from this widget in case this widget is
			// redefined after a widget inherits from it
			_childConstructors: []
		});

		basePrototype = new base();
		// we need to make the options hash a property directly on the new instance
		// otherwise we'll modify the options hash on the prototype that we're
		// inheriting from
		basePrototype.options = $.widget.extend( {}, basePrototype.options );
		$.each( prototype, function( prop, value ) {
			if ( !$.isFunction( value ) ) {
				proxiedPrototype[ prop ] = value;
				return;
			}
			proxiedPrototype[ prop ] = (function() {
				var _super = function() {
						return base.prototype[ prop ].apply( this, arguments );
					},
					_superApply = function( args ) {
						return base.prototype[ prop ].apply( this, args );
					};
				return function() {
					var __super = this._super,
						__superApply = this._superApply,
						returnValue;

					this._super = _super;
					this._superApply = _superApply;

					returnValue = value.apply( this, arguments );

					this._super = __super;
					this._superApply = __superApply;

					return returnValue;
				};
			})();
		});
		constructor.prototype = $.widget.extend( basePrototype, {
			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
		}, proxiedPrototype, {
			constructor: constructor,
			namespace: namespace,
			widgetName: name,
			widgetFullName: fullName
		});

		// If this widget is being redefined then we need to find all widgets that
		// are inheriting from it and redefine all of them so that they inherit from
		// the new version of this widget. We're essentially trying to replace one
		// level in the prototype chain.
		if ( existingConstructor ) {
			$.each( existingConstructor._childConstructors, function( i, child ) {
				var childPrototype = child.prototype;

				// redefine the child widget using the same prototype that was
				// originally used, but inherit from the new version of the base
				$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
			});
			// remove the list of existing child constructors from the old constructor
			// so the old child constructors can be garbage collected
			delete existingConstructor._childConstructors;
		} else {
			base._childConstructors.push( constructor );
		}

		$.widget.bridge( name, constructor );
	};

	$.widget.extend = function( target ) {
		var input = slice.call( arguments, 1 ),
			inputIndex = 0,
			inputLength = input.length,
			key,
			value;
		for ( ; inputIndex < inputLength; inputIndex++ ) {
			for ( key in input[ inputIndex ] ) {
				value = input[ inputIndex ][ key ];
				if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
					// Clone objects
					if ( $.isPlainObject( value ) ) {
						target[ key ] = $.isPlainObject( target[ key ] ) ?
							$.widget.extend( {}, target[ key ], value ) :
							// Don't extend strings, arrays, etc. with objects
							$.widget.extend( {}, value );
					// Copy everything else by reference
					} else {
						target[ key ] = value;
					}
				}
			}
		}
		return target;
	};

	$.widget.bridge = function( name, object ) {
		var fullName = object.prototype.widgetFullName || name;
		$.fn[ name ] = function( options ) {
			var isMethodCall = typeof options === "string",
				args = slice.call( arguments, 1 ),
				returnValue = this;

			// allow multiple hashes to be passed on init
			options = !isMethodCall && args.length ?
				$.widget.extend.apply( null, [ options ].concat(args) ) :
				options;

			if ( isMethodCall ) {
				this.each(function() {
					var methodValue,
						instance = $.data( this, fullName );
					if ( !instance ) {
						return $.error( "cannot call methods on " + name + " prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}
					if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name + " widget instance" );
					}
					methodValue = instance[ options ].apply( instance, args );
					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				});
			} else {
				this.each(function() {
					var instance = $.data( this, fullName );
					if ( instance ) {
						instance.option( options || {} )._init();
					} else {
						$.data( this, fullName, new object( options, this ) );
					}
				});
			}

			return returnValue;
		};
	};

	$.Widget = function( /* options, element */ ) {};
	$.Widget._childConstructors = [];

	$.Widget.prototype = {
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",
		options: {
			disabled: false,

			// callbacks
			create: null
		},
		_createWidget: function( options, element ) {
			element = $( element || this.defaultElement || this )[ 0 ];
			this.element = $( element );
			this.uuid = uuid++;
			this.eventNamespace = "." + this.widgetName + this.uuid;
			this.options = $.widget.extend( {},
				this.options,
				this._getCreateOptions(),
				options );

			this.bindings = $();
			this.hoverable = $();
			this.focusable = $();

			if ( element !== this ) {
				$.data( element, this.widgetFullName, this );
				this._on( true, this.element, {
					remove: function( event ) {
						if ( event.target === element ) {
							this.destroy();
						}
					}
				});
				this.document = $( element.style ?
					// element within the document
					element.ownerDocument :
					// element is window or document
					element.document || element );
				this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
			}

			this._create();
			this._trigger( "create", null, this._getCreateEventData() );
			this._init();
		},
		_getCreateOptions: $.noop,
		_getCreateEventData: $.noop,
		_create: $.noop,
		_init: $.noop,

		destroy: function() {
			this._destroy();
			// we can probably remove the unbind calls in 2.0
			// all event bindings should go through this._on()
			this.element
				.unbind( this.eventNamespace )
				// 1.9 BC for #7810
				// TODO remove dual storage
				.removeData( this.widgetName )
				.removeData( this.widgetFullName )
				// support: jquery <1.6.3
				// http://bugs.jquery.com/ticket/9413
				.removeData( $.camelCase( this.widgetFullName ) );
			this.widget()
				.unbind( this.eventNamespace )
				.removeAttr( "aria-disabled" )
				.removeClass(
					this.widgetFullName + "-disabled " +
					"ui-state-disabled" );

			// clean up events and states
			this.bindings.unbind( this.eventNamespace );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		},
		_destroy: $.noop,

		widget: function() {
			return this.element;
		},

		option: function( key, value ) {
			var options = key,
				parts,
				curOption,
				i;

			if ( arguments.length === 0 ) {
				// don't return a reference to the internal hash
				return $.widget.extend( {}, this.options );
			}

			if ( typeof key === "string" ) {
				// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
				options = {};
				parts = key.split( "." );
				key = parts.shift();
				if ( parts.length ) {
					curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
					for ( i = 0; i < parts.length - 1; i++ ) {
						curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
						curOption = curOption[ parts[ i ] ];
					}
					key = parts.pop();
					if ( value === undefined ) {
						return curOption[ key ] === undefined ? null : curOption[ key ];
					}
					curOption[ key ] = value;
				} else {
					if ( value === undefined ) {
						return this.options[ key ] === undefined ? null : this.options[ key ];
					}
					options[ key ] = value;
				}
			}

			this._setOptions( options );

			return this;
		},
		_setOptions: function( options ) {
			var key;

			for ( key in options ) {
				this._setOption( key, options[ key ] );
			}

			return this;
		},
		_setOption: function( key, value ) {
			this.options[ key ] = value;

			if ( key === "disabled" ) {
				this.widget()
					.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
					.attr( "aria-disabled", value );
				this.hoverable.removeClass( "ui-state-hover" );
				this.focusable.removeClass( "ui-state-focus" );
			}

			return this;
		},

		enable: function() {
			return this._setOption( "disabled", false );
		},
		disable: function() {
			return this._setOption( "disabled", true );
		},

		_on: function( suppressDisabledCheck, element, handlers ) {
			var delegateElement,
				instance = this;

			// no suppressDisabledCheck flag, shuffle arguments
			if ( typeof suppressDisabledCheck !== "boolean" ) {
				handlers = element;
				element = suppressDisabledCheck;
				suppressDisabledCheck = false;
			}

			// no element argument, shuffle and use this.element
			if ( !handlers ) {
				handlers = element;
				element = this.element;
				delegateElement = this.widget();
			} else {
				// accept selectors, DOM elements
				element = delegateElement = $( element );
				this.bindings = this.bindings.add( element );
			}

			$.each( handlers, function( event, handler ) {
				function handlerProxy() {
					// allow widgets to customize the disabled handling
					// - disabled as an array instead of boolean
					// - disabled class as method for disabling individual parts
					if ( !suppressDisabledCheck &&
							( instance.options.disabled === true ||
								$( this ).hasClass( "ui-state-disabled" ) ) ) {
						return;
					}
					return ( typeof handler === "string" ? instance[ handler ] : handler )
						.apply( instance, arguments );
				}

				// copy the guid so direct unbinding works
				if ( typeof handler !== "string" ) {
					handlerProxy.guid = handler.guid =
						handler.guid || handlerProxy.guid || $.guid++;
				}

				var match = event.match( /^(\w+)\s*(.*)$/ ),
					eventName = match[1] + instance.eventNamespace,
					selector = match[2];
				if ( selector ) {
					delegateElement.delegate( selector, eventName, handlerProxy );
				} else {
					element.bind( eventName, handlerProxy );
				}
			});
		},

		_off: function( element, eventName ) {
			eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
			element.unbind( eventName ).undelegate( eventName );
		},

		_delay: function( handler, delay ) {
			function handlerProxy() {
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}
			var instance = this;
			return setTimeout( handlerProxy, delay || 0 );
		},

		_hoverable: function( element ) {
			this.hoverable = this.hoverable.add( element );
			this._on( element, {
				mouseenter: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-hover" );
				},
				mouseleave: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-hover" );
				}
			});
		},

		_focusable: function( element ) {
			this.focusable = this.focusable.add( element );
			this._on( element, {
				focusin: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-focus" );
				},
				focusout: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-focus" );
				}
			});
		},

		_trigger: function( type, event, data ) {
			var prop, orig,
				callback = this.options[ type ];

			data = data || {};
			event = $.Event( event );
			event.type = ( type === this.widgetEventPrefix ?
				type :
				this.widgetEventPrefix + type ).toLowerCase();
			// the original event may come from any element
			// so we need to reset the target on the new event
			event.target = this.element[ 0 ];

			// copy original event properties over to the new event
			orig = event.originalEvent;
			if ( orig ) {
				for ( prop in orig ) {
					if ( !( prop in event ) ) {
						event[ prop ] = orig[ prop ];
					}
				}
			}

			this.element.trigger( event, data );
			return !( $.isFunction( callback ) &&
				callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
				event.isDefaultPrevented() );
		}
	};

	$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
		$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
			if ( typeof options === "string" ) {
				options = { effect: options };
			}
			var hasOptions,
				effectName = !options ?
					method :
					options === true || typeof options === "number" ?
						defaultEffect :
						options.effect || defaultEffect;
			options = options || {};
			if ( typeof options === "number" ) {
				options = { duration: options };
			}
			hasOptions = !$.isEmptyObject( options );
			options.complete = callback;
			if ( options.delay ) {
				element.delay( options.delay );
			}
			if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
				element[ method ]( options );
			} else if ( effectName !== method && element[ effectName ] ) {
				element[ effectName ]( options.duration, options.easing, callback );
			} else {
				element.queue(function( next ) {
					$( this )[ method ]();
					if ( callback ) {
						callback.call( element[ 0 ] );
					}
					next();
				});
			}
		};
	});

	})( jQuery );
	(function( $, undefined ) {

	var mouseHandled = false;
	$( document ).mouseup( function() {
		mouseHandled = false;
	});

	$.widget("ui.mouse", {
		version: "1.10.0",
		options: {
			cancel: "input,textarea,button,select,option",
			distance: 1,
			delay: 0
		},
		_mouseInit: function() {
			var that = this;

			this.element
				.bind("mousedown."+this.widgetName, function(event) {
					return that._mouseDown(event);
				})
				.bind("click."+this.widgetName, function(event) {
					if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
						$.removeData(event.target, that.widgetName + ".preventClickEvent");
						event.stopImmediatePropagation();
						return false;
					}
				});

			this.started = false;
		},

		// TODO: make sure destroying one instance of mouse doesn't mess with
		// other instances of mouse
		_mouseDestroy: function() {
			this.element.unbind("."+this.widgetName);
			if ( this._mouseMoveDelegate ) {
				$(document)
					.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
					.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
			}
		},

		_mouseDown: function(event) {
			// don't let more than one widget handle mouseStart
			if( mouseHandled ) { return; }

			// we may have missed mouseup (out of window)
			(this._mouseStarted && this._mouseUp(event));

			this._mouseDownEvent = event;

			var that = this,
				btnIsLeft = (event.which === 1),
				// event.target.nodeName works around a bug in IE 8 with
				// disabled inputs (#7620)
				elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
			if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
				return true;
			}

			this.mouseDelayMet = !this.options.delay;
			if (!this.mouseDelayMet) {
				this._mouseDelayTimer = setTimeout(function() {
					that.mouseDelayMet = true;
				}, this.options.delay);
			}

			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted = (this._mouseStart(event) !== false);
				if (!this._mouseStarted) {
					event.preventDefault();
					return true;
				}
			}

			// Click event may never have fired (Gecko & Opera)
			if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
				$.removeData(event.target, this.widgetName + ".preventClickEvent");
			}

			// these delegates are required to keep context
			this._mouseMoveDelegate = function(event) {
				return that._mouseMove(event);
			};
			this._mouseUpDelegate = function(event) {
				return that._mouseUp(event);
			};
			$(document)
				.bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.bind("mouseup."+this.widgetName, this._mouseUpDelegate);

			event.preventDefault();

			mouseHandled = true;
			return true;
		},

		_mouseMove: function(event) {
			// IE mouseup check - mouseup happened when mouse was out of window
			if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
				return this._mouseUp(event);
			}

			if (this._mouseStarted) {
				this._mouseDrag(event);
				return event.preventDefault();
			}

			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted =
					(this._mouseStart(this._mouseDownEvent, event) !== false);
				(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
			}

			return !this._mouseStarted;
		},

		_mouseUp: function(event) {
			$(document)
				.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

			if (this._mouseStarted) {
				this._mouseStarted = false;

				if (event.target === this._mouseDownEvent.target) {
					$.data(event.target, this.widgetName + ".preventClickEvent", true);
				}

				this._mouseStop(event);
			}

			return false;
		},

		_mouseDistanceMet: function(event) {
			return (Math.max(
					Math.abs(this._mouseDownEvent.pageX - event.pageX),
					Math.abs(this._mouseDownEvent.pageY - event.pageY)
				) >= this.options.distance
			);
		},

		_mouseDelayMet: function(/* event */) {
			return this.mouseDelayMet;
		},

		// These are placeholder methods, to be overriden by extending plugin
		_mouseStart: function(/* event */) {},
		_mouseDrag: function(/* event */) {},
		_mouseStop: function(/* event */) {},
		_mouseCapture: function(/* event */) { return true; }
	});

	})(jQuery);
	(function( $, undefined ) {

	$.ui = $.ui || {};

	var cachedScrollbarWidth,
		max = Math.max,
		abs = Math.abs,
		round = Math.round,
		rhorizontal = /left|center|right/,
		rvertical = /top|center|bottom/,
		roffset = /[\+\-]\d+%?/,
		rposition = /^\w+/,
		rpercent = /%$/,
		_position = $.fn.position;

	function getOffsets( offsets, width, height ) {
		return [
			parseInt( offsets[ 0 ], 10 ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
			parseInt( offsets[ 1 ], 10 ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
		];
	}

	function parseCss( element, property ) {
		return parseInt( $.css( element, property ), 10 ) || 0;
	}

	function getDimensions( elem ) {
		var raw = elem[0];
		if ( raw.nodeType === 9 ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: 0, left: 0 }
			};
		}
		if ( $.isWindow( raw ) ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
			};
		}
		if ( raw.preventDefault ) {
			return {
				width: 0,
				height: 0,
				offset: { top: raw.pageY, left: raw.pageX }
			};
		}
		return {
			width: elem.outerWidth(),
			height: elem.outerHeight(),
			offset: elem.offset()
		};
	}

	$.position = {
		scrollbarWidth: function() {
			if ( cachedScrollbarWidth !== undefined ) {
				return cachedScrollbarWidth;
			}
			var w1, w2,
				div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
				innerDiv = div.children()[0];

			$( "body" ).append( div );
			w1 = innerDiv.offsetWidth;
			div.css( "overflow", "scroll" );

			w2 = innerDiv.offsetWidth;

			if ( w1 === w2 ) {
				w2 = div[0].clientWidth;
			}

			div.remove();

			return (cachedScrollbarWidth = w1 - w2);
		},
		getScrollInfo: function( within ) {
			var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
				overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
				hasOverflowX = overflowX === "scroll" ||
					( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
				hasOverflowY = overflowY === "scroll" ||
					( overflowY === "auto" && within.height < within.element[0].scrollHeight );
			return {
				width: hasOverflowX ? $.position.scrollbarWidth() : 0,
				height: hasOverflowY ? $.position.scrollbarWidth() : 0
			};
		},
		getWithinInfo: function( element ) {
			var withinElement = $( element || window ),
				isWindow = $.isWindow( withinElement[0] );
			return {
				element: withinElement,
				isWindow: isWindow,
				offset: withinElement.offset() || { left: 0, top: 0 },
				scrollLeft: withinElement.scrollLeft(),
				scrollTop: withinElement.scrollTop(),
				width: isWindow ? withinElement.width() : withinElement.outerWidth(),
				height: isWindow ? withinElement.height() : withinElement.outerHeight()
			};
		}
	};

	$.fn.position = function( options ) {
		if ( !options || !options.of ) {
			return _position.apply( this, arguments );
		}

		// make a copy, we don't want to modify arguments
		options = $.extend( {}, options );

		var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
			target = $( options.of ),
			within = $.position.getWithinInfo( options.within ),
			scrollInfo = $.position.getScrollInfo( within ),
			collision = ( options.collision || "flip" ).split( " " ),
			offsets = {};

		dimensions = getDimensions( target );
		if ( target[0].preventDefault ) {
			// force left top to allow flipping
			options.at = "left top";
		}
		targetWidth = dimensions.width;
		targetHeight = dimensions.height;
		targetOffset = dimensions.offset;
		// clone to reuse original targetOffset later
		basePosition = $.extend( {}, targetOffset );

		// force my and at to have valid horizontal and vertical positions
		// if a value is missing or invalid, it will be converted to center
		$.each( [ "my", "at" ], function() {
			var pos = ( options[ this ] || "" ).split( " " ),
				horizontalOffset,
				verticalOffset;

			if ( pos.length === 1) {
				pos = rhorizontal.test( pos[ 0 ] ) ?
					pos.concat( [ "center" ] ) :
					rvertical.test( pos[ 0 ] ) ?
						[ "center" ].concat( pos ) :
						[ "center", "center" ];
			}
			pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
			pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

			// calculate offsets
			horizontalOffset = roffset.exec( pos[ 0 ] );
			verticalOffset = roffset.exec( pos[ 1 ] );
			offsets[ this ] = [
				horizontalOffset ? horizontalOffset[ 0 ] : 0,
				verticalOffset ? verticalOffset[ 0 ] : 0
			];

			// reduce to just the positions without the offsets
			options[ this ] = [
				rposition.exec( pos[ 0 ] )[ 0 ],
				rposition.exec( pos[ 1 ] )[ 0 ]
			];
		});

		// normalize collision option
		if ( collision.length === 1 ) {
			collision[ 1 ] = collision[ 0 ];
		}

		if ( options.at[ 0 ] === "right" ) {
			basePosition.left += targetWidth;
		} else if ( options.at[ 0 ] === "center" ) {
			basePosition.left += targetWidth / 2;
		}

		if ( options.at[ 1 ] === "bottom" ) {
			basePosition.top += targetHeight;
		} else if ( options.at[ 1 ] === "center" ) {
			basePosition.top += targetHeight / 2;
		}

		atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
		basePosition.left += atOffset[ 0 ];
		basePosition.top += atOffset[ 1 ];

		return this.each(function() {
			var collisionPosition, using,
				elem = $( this ),
				elemWidth = elem.outerWidth(),
				elemHeight = elem.outerHeight(),
				marginLeft = parseCss( this, "marginLeft" ),
				marginTop = parseCss( this, "marginTop" ),
				collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
				collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
				position = $.extend( {}, basePosition ),
				myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

			if ( options.my[ 0 ] === "right" ) {
				position.left -= elemWidth;
			} else if ( options.my[ 0 ] === "center" ) {
				position.left -= elemWidth / 2;
			}

			if ( options.my[ 1 ] === "bottom" ) {
				position.top -= elemHeight;
			} else if ( options.my[ 1 ] === "center" ) {
				position.top -= elemHeight / 2;
			}

			position.left += myOffset[ 0 ];
			position.top += myOffset[ 1 ];

			// if the browser doesn't support fractions, then round for consistent results
			if ( !$.support.offsetFractions ) {
				position.left = round( position.left );
				position.top = round( position.top );
			}

			collisionPosition = {
				marginLeft: marginLeft,
				marginTop: marginTop
			};

			$.each( [ "left", "top" ], function( i, dir ) {
				if ( $.ui.position[ collision[ i ] ] ) {
					$.ui.position[ collision[ i ] ][ dir ]( position, {
						targetWidth: targetWidth,
						targetHeight: targetHeight,
						elemWidth: elemWidth,
						elemHeight: elemHeight,
						collisionPosition: collisionPosition,
						collisionWidth: collisionWidth,
						collisionHeight: collisionHeight,
						offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
						my: options.my,
						at: options.at,
						within: within,
						elem : elem
					});
				}
			});

			if ( options.using ) {
				// adds feedback as second argument to using callback, if present
				using = function( props ) {
					var left = targetOffset.left - position.left,
						right = left + targetWidth - elemWidth,
						top = targetOffset.top - position.top,
						bottom = top + targetHeight - elemHeight,
						feedback = {
							target: {
								element: target,
								left: targetOffset.left,
								top: targetOffset.top,
								width: targetWidth,
								height: targetHeight
							},
							element: {
								element: elem,
								left: position.left,
								top: position.top,
								width: elemWidth,
								height: elemHeight
							},
							horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
							vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
						};
					if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
						feedback.horizontal = "center";
					}
					if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
						feedback.vertical = "middle";
					}
					if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
						feedback.important = "horizontal";
					} else {
						feedback.important = "vertical";
					}
					options.using.call( this, props, feedback );
				};
			}

			elem.offset( $.extend( position, { using: using } ) );
		});
	};

	$.ui.position = {
		fit: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
					outerWidth = within.width,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = withinOffset - collisionPosLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
					newOverRight;

				// element is wider than within
				if ( data.collisionWidth > outerWidth ) {
					// element is initially over the left side of within
					if ( overLeft > 0 && overRight <= 0 ) {
						newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
						position.left += overLeft - newOverRight;
					// element is initially over right side of within
					} else if ( overRight > 0 && overLeft <= 0 ) {
						position.left = withinOffset;
					// element is initially over both left and right sides of within
					} else {
						if ( overLeft > overRight ) {
							position.left = withinOffset + outerWidth - data.collisionWidth;
						} else {
							position.left = withinOffset;
						}
					}
				// too far left -> align with left edge
				} else if ( overLeft > 0 ) {
					position.left += overLeft;
				// too far right -> align with right edge
				} else if ( overRight > 0 ) {
					position.left -= overRight;
				// adjust based on position and margin
				} else {
					position.left = max( position.left - collisionPosLeft, position.left );
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
					outerHeight = data.within.height,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = withinOffset - collisionPosTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
					newOverBottom;

				// element is taller than within
				if ( data.collisionHeight > outerHeight ) {
					// element is initially over the top of within
					if ( overTop > 0 && overBottom <= 0 ) {
						newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
						position.top += overTop - newOverBottom;
					// element is initially over bottom of within
					} else if ( overBottom > 0 && overTop <= 0 ) {
						position.top = withinOffset;
					// element is initially over both top and bottom of within
					} else {
						if ( overTop > overBottom ) {
							position.top = withinOffset + outerHeight - data.collisionHeight;
						} else {
							position.top = withinOffset;
						}
					}
				// too far up -> align with top
				} else if ( overTop > 0 ) {
					position.top += overTop;
				// too far down -> align with bottom edge
				} else if ( overBottom > 0 ) {
					position.top -= overBottom;
				// adjust based on position and margin
				} else {
					position.top = max( position.top - collisionPosTop, position.top );
				}
			}
		},
		flip: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.left + within.scrollLeft,
					outerWidth = within.width,
					offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = collisionPosLeft - offsetLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
					myOffset = data.my[ 0 ] === "left" ?
						-data.elemWidth :
						data.my[ 0 ] === "right" ?
							data.elemWidth :
							0,
					atOffset = data.at[ 0 ] === "left" ?
						data.targetWidth :
						data.at[ 0 ] === "right" ?
							-data.targetWidth :
							0,
					offset = -2 * data.offset[ 0 ],
					newOverRight,
					newOverLeft;

				if ( overLeft < 0 ) {
					newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
					if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
						position.left += myOffset + atOffset + offset;
					}
				}
				else if ( overRight > 0 ) {
					newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
					if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
						position.left += myOffset + atOffset + offset;
					}
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.top + within.scrollTop,
					outerHeight = within.height,
					offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = collisionPosTop - offsetTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
					top = data.my[ 1 ] === "top",
					myOffset = top ?
						-data.elemHeight :
						data.my[ 1 ] === "bottom" ?
							data.elemHeight :
							0,
					atOffset = data.at[ 1 ] === "top" ?
						data.targetHeight :
						data.at[ 1 ] === "bottom" ?
							-data.targetHeight :
							0,
					offset = -2 * data.offset[ 1 ],
					newOverTop,
					newOverBottom;
				if ( overTop < 0 ) {
					newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
					if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
						position.top += myOffset + atOffset + offset;
					}
				}
				else if ( overBottom > 0 ) {
					newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
					if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
						position.top += myOffset + atOffset + offset;
					}
				}
			}
		},
		flipfit: {
			left: function() {
				$.ui.position.flip.left.apply( this, arguments );
				$.ui.position.fit.left.apply( this, arguments );
			},
			top: function() {
				$.ui.position.flip.top.apply( this, arguments );
				$.ui.position.fit.top.apply( this, arguments );
			}
		}
	};

	// fraction support test
	(function () {
		var testElement, testElementParent, testElementStyle, offsetLeft, i,
			body = document.getElementsByTagName( "body" )[ 0 ],
			div = document.createElement( "div" );

		//Create a "fake body" for testing based on method used in jQuery.support
		testElement = document.createElement( body ? "div" : "body" );
		testElementStyle = {
			visibility: "hidden",
			width: 0,
			height: 0,
			border: 0,
			margin: 0,
			background: "none"
		};
		if ( body ) {
			$.extend( testElementStyle, {
				position: "absolute",
				left: "-1000px",
				top: "-1000px"
			});
		}
		for ( i in testElementStyle ) {
			testElement.style[ i ] = testElementStyle[ i ];
		}
		testElement.appendChild( div );
		testElementParent = body || document.documentElement;
		testElementParent.insertBefore( testElement, testElementParent.firstChild );

		div.style.cssText = "position: absolute; left: 10.7432222px;";

		offsetLeft = $( div ).offset().left;
		$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

		testElement.innerHTML = "";
		testElementParent.removeChild( testElement );
	})();

	}( jQuery ) );
	(function( $, undefined ) {

	$.widget("ui.draggable", $.ui.mouse, {
		version: "1.10.0",
		widgetEventPrefix: "drag",
		options: {
			addClasses: true,
			appendTo: "parent",
			axis: false,
			connectToSortable: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			grid: false,
			handle: false,
			helper: "original",
			iframeFix: false,
			opacity: false,
			refreshPositions: false,
			revert: false,
			revertDuration: 500,
			scope: "default",
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			snap: false,
			snapMode: "both",
			snapTolerance: 20,
			stack: false,
			zIndex: false,

			// callbacks
			drag: null,
			start: null,
			stop: null
		},
		_create: function() {

			if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
				this.element[0].style.position = "relative";
			}
			if (this.options.addClasses){
				this.element.addClass("ui-draggable");
			}
			if (this.options.disabled){
				this.element.addClass("ui-draggable-disabled");
			}

			this._mouseInit();

		},

		_destroy: function() {
			this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
			this._mouseDestroy();
		},

		_mouseCapture: function(event) {

			var o = this.options;

			// among others, prevent a drag on a resizable-handle
			if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
				return false;
			}

			//Quit if we're not on a valid handle
			this.handle = this._getHandle(event);
			if (!this.handle) {
				return false;
			}

			$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
				$("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
				.css({
					width: this.offsetWidth+"px", height: this.offsetHeight+"px",
					position: "absolute", opacity: "0.001", zIndex: 1000
				})
				.css($(this).offset())
				.appendTo("body");
			});

			return true;

		},

		_mouseStart: function(event) {

			var o = this.options;

			//Create and append the visible helper
			this.helper = this._createHelper(event);

			this.helper.addClass("ui-draggable-dragging");

			//Cache the helper size
			this._cacheHelperProportions();

			//If ddmanager is used for droppables, set the global draggable
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}

			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */

			//Cache the margins of the original element
			this._cacheMargins();

			//Store the helper's css position
			this.cssPosition = this.helper.css("position");
			this.scrollParent = this.helper.scrollParent();

			//The element's absolute position on the page minus margins
			this.offset = this.positionAbs = this.element.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};

			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});

			//Generate the original position
			this.originalPosition = this.position = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;

			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

			//Set a containment if given in the options
			if(o.containment) {
				this._setContainment();
			}

			//Trigger event + callbacks
			if(this._trigger("start", event) === false) {
				this._clear();
				return false;
			}

			//Recache the helper size
			this._cacheHelperProportions();

			//Prepare the droppable offsets
			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}


			this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

			//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
			if ( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStart(this, event);
			}

			return true;
		},

		_mouseDrag: function(event, noPropagation) {

			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");

			//Call plugins and callbacks and use the resulting position if something is returned
			if (!noPropagation) {
				var ui = this._uiHash();
				if(this._trigger("drag", event, ui) === false) {
					this._mouseUp({});
					return false;
				}
				this.position = ui.position;
			}

			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}

			return false;
		},

		_mouseStop: function(event) {

			//If we are using droppables, inform the manager about the drop
			var element,
				that = this,
				elementInDom = false,
				dropped = false;
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				dropped = $.ui.ddmanager.drop(this, event);
			}

			//if a drop comes from outside (a sortable)
			if(this.dropped) {
				dropped = this.dropped;
				this.dropped = false;
			}

			//if the original element is no longer in the DOM don't bother to continue (see #8269)
			element = this.element[0];
			while ( element && (element = element.parentNode) ) {
				if (element === document ) {
					elementInDom = true;
				}
			}
			if ( !elementInDom && this.options.helper === "original" ) {
				return false;
			}

			if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
				$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
					if(that._trigger("stop", event) !== false) {
						that._clear();
					}
				});
			} else {
				if(this._trigger("stop", event) !== false) {
					this._clear();
				}
			}

			return false;
		},

		_mouseUp: function(event) {
			//Remove frame helpers
			$("div.ui-draggable-iframeFix").each(function() {
				this.parentNode.removeChild(this);
			});

			//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
			if( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStop(this, event);
			}

			return $.ui.mouse.prototype._mouseUp.call(this, event);
		},

		cancel: function() {

			if(this.helper.is(".ui-draggable-dragging")) {
				this._mouseUp({});
			} else {
				this._clear();
			}

			return this;

		},

		_getHandle: function(event) {

			var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
			$(this.options.handle, this.element)
				.find("*")
				.addBack()
				.each(function() {
					if(this === event.target) {
						handle = true;
					}
				});

			return handle;

		},

		_createHelper: function(event) {

			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

			if(!helper.parents("body").length) {
				helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
			}

			if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
				helper.css("position", "absolute");
			}

			return helper;

		},

		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},

		_getParentOffset: function() {

			//Get the offsetParent and cache its position
			this.offsetParent = this.helper.offsetParent();
			var po = this.offsetParent.offset();

			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}

			//This needs to be actually done for all browsers, since pageX/pageY includes this information
			//Ugly IE fix
			if((this.offsetParent[0] === document.body) ||
				(this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}

			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};

		},

		_getRelativeOffset: function() {

			if(this.cssPosition === "relative") {
				var p = this.element.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}

		},

		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.element.css("marginLeft"),10) || 0),
				top: (parseInt(this.element.css("marginTop"),10) || 0),
				right: (parseInt(this.element.css("marginRight"),10) || 0),
				bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
			};
		},

		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},

		_setContainment: function() {

			var over, c, ce,
				o = this.options;

			if(o.containment === "parent") {
				o.containment = this.helper[0].parentNode;
			}
			if(o.containment === "document" || o.containment === "window") {
				this.containment = [
					o.containment === "document" ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
					o.containment === "document" ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
					(o.containment === "document" ? 0 : $(window).scrollLeft()) + $(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
					(o.containment === "document" ? 0 : $(window).scrollTop()) + ($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
				];
			}

			if(!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor !== Array) {
				c = $(o.containment);
				ce = c[0];

				if(!ce) {
					return;
				}

				over = ($(ce).css("overflow") !== "hidden");

				this.containment = [
					(parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0),
					(parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0),
					(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
					(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top  - this.margins.bottom
				];
				this.relative_container = c;

			} else if(o.containment.constructor === Array) {
				this.containment = o.containment;
			}

		},

		_convertPositionTo: function(d, pos) {

			if(!pos) {
				pos = this.position;
			}

			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
				)
			};

		},

		_generatePosition: function(event) {

			var containment, co, top, left,
				o = this.options,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName),
				pageX = event.pageX,
				pageY = event.pageY;

			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */

			if(this.originalPosition) { //If we are not dragging yet, we won't check for options
				if(this.containment) {
				if (this.relative_container){
					co = this.relative_container.offset();
					containment = [ this.containment[0] + co.left,
						this.containment[1] + co.top,
						this.containment[2] + co.left,
						this.containment[3] + co.top ];
				}
				else {
					containment = this.containment;
				}

					if(event.pageX - this.offset.click.left < containment[0]) {
						pageX = containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < containment[1]) {
						pageY = containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > containment[2]) {
						pageX = containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > containment[3]) {
						pageY = containment[3] + this.offset.click.top;
					}
				}

				if(o.grid) {
					//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
					top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
					pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

					left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
					pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}

			}

			return {
				top: (
					pageY -																	// The absolute mouse position
					this.offset.click.top	-												// Click offset (relative to the element)
					this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
				),
				left: (
					pageX -																	// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
				)
			};

		},

		_clear: function() {
			this.helper.removeClass("ui-draggable-dragging");
			if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
				this.helper.remove();
			}
			this.helper = null;
			this.cancelHelperRemoval = false;
		},

		// From now on bulk stuff - mainly helpers

		_trigger: function(type, event, ui) {
			ui = ui || this._uiHash();
			$.ui.plugin.call(this, type, [event, ui]);
			//The absolute position has to be recalculated after plugins
			if(type === "drag") {
				this.positionAbs = this._convertPositionTo("absolute");
			}
			return $.Widget.prototype._trigger.call(this, type, event, ui);
		},

		plugins: {},

		_uiHash: function() {
			return {
				helper: this.helper,
				position: this.position,
				originalPosition: this.originalPosition,
				offset: this.positionAbs
			};
		}

	});

	$.ui.plugin.add("draggable", "connectToSortable", {
		start: function(event, ui) {

			var inst = $(this).data("ui-draggable"), o = inst.options,
				uiSortable = $.extend({}, ui, { item: inst.element });
			inst.sortables = [];
			$(o.connectToSortable).each(function() {
				var sortable = $.data(this, "ui-sortable");
				if (sortable && !sortable.options.disabled) {
					inst.sortables.push({
						instance: sortable,
						shouldRevert: sortable.options.revert
					});
					sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
					sortable._trigger("activate", event, uiSortable);
				}
			});

		},
		stop: function(event, ui) {

			//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
			var inst = $(this).data("ui-draggable"),
				uiSortable = $.extend({}, ui, { item: inst.element });

			$.each(inst.sortables, function() {
				if(this.instance.isOver) {

					this.instance.isOver = 0;

					inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
					this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

					//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
					if(this.shouldRevert) {
						this.instance.options.revert = true;
					}

					//Trigger the stop of the sortable
					this.instance._mouseStop(event);

					this.instance.options.helper = this.instance.options._helper;

					//If the helper has been the original item, restore properties in the sortable
					if(inst.options.helper === "original") {
						this.instance.currentItem.css({ top: "auto", left: "auto" });
					}

				} else {
					this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
					this.instance._trigger("deactivate", event, uiSortable);
				}

			});

		},
		drag: function(event, ui) {

			var inst = $(this).data("ui-draggable"), that = this;

			$.each(inst.sortables, function() {

				var innermostIntersecting = false,
					thisSortable = this;

				//Copy over some variables to allow calling the sortable's native _intersectsWith
				this.instance.positionAbs = inst.positionAbs;
				this.instance.helperProportions = inst.helperProportions;
				this.instance.offset.click = inst.offset.click;

				if(this.instance._intersectsWith(this.instance.containerCache)) {
					innermostIntersecting = true;
					$.each(inst.sortables, function () {
						this.instance.positionAbs = inst.positionAbs;
						this.instance.helperProportions = inst.helperProportions;
						this.instance.offset.click = inst.offset.click;
						if (this !== thisSortable &&
							this.instance._intersectsWith(this.instance.containerCache) &&
							$.ui.contains(thisSortable.instance.element[0], this.instance.element[0])
						) {
							innermostIntersecting = false;
						}
						return innermostIntersecting;
					});
				}


				if(innermostIntersecting) {
					//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
					if(!this.instance.isOver) {

						this.instance.isOver = 1;
						//Now we fake the start of dragging for the sortable instance,
						//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
						//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
						this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
						this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
						this.instance.options.helper = function() { return ui.helper[0]; };

						event.target = this.instance.currentItem[0];
						this.instance._mouseCapture(event, true);
						this.instance._mouseStart(event, true, true);

						//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
						this.instance.offset.click.top = inst.offset.click.top;
						this.instance.offset.click.left = inst.offset.click.left;
						this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
						this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

						inst._trigger("toSortable", event);
						inst.dropped = this.instance.element; //draggable revert needs that
						//hack so receive/update callbacks work (mostly)
						inst.currentItem = inst.element;
						this.instance.fromOutside = inst;

					}

					//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
					if(this.instance.currentItem) {
						this.instance._mouseDrag(event);
					}

				} else {

					//If it doesn't intersect with the sortable, and it intersected before,
					//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
					if(this.instance.isOver) {

						this.instance.isOver = 0;
						this.instance.cancelHelperRemoval = true;

						//Prevent reverting on this forced stop
						this.instance.options.revert = false;

						// The out event needs to be triggered independently
						this.instance._trigger("out", event, this.instance._uiHash(this.instance));

						this.instance._mouseStop(event, true);
						this.instance.options.helper = this.instance.options._helper;

						//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
						this.instance.currentItem.remove();
						if(this.instance.placeholder) {
							this.instance.placeholder.remove();
						}

						inst._trigger("fromSortable", event);
						inst.dropped = false; //draggable revert needs that
					}

				}

			});

		}
	});

	$.ui.plugin.add("draggable", "cursor", {
		start: function() {
			var t = $("body"), o = $(this).data("ui-draggable").options;
			if (t.css("cursor")) {
				o._cursor = t.css("cursor");
			}
			t.css("cursor", o.cursor);
		},
		stop: function() {
			var o = $(this).data("ui-draggable").options;
			if (o._cursor) {
				$("body").css("cursor", o._cursor);
			}
		}
	});

	$.ui.plugin.add("draggable", "opacity", {
		start: function(event, ui) {
			var t = $(ui.helper), o = $(this).data("ui-draggable").options;
			if(t.css("opacity")) {
				o._opacity = t.css("opacity");
			}
			t.css("opacity", o.opacity);
		},
		stop: function(event, ui) {
			var o = $(this).data("ui-draggable").options;
			if(o._opacity) {
				$(ui.helper).css("opacity", o._opacity);
			}
		}
	});

	$.ui.plugin.add("draggable", "scroll", {
		start: function() {
			var i = $(this).data("ui-draggable");
			if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
				i.overflowOffset = i.scrollParent.offset();
			}
		},
		drag: function( event ) {

			var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

			if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

				if(!o.axis || o.axis !== "x") {
					if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
						i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
					}
				}

				if(!o.axis || o.axis !== "y") {
					if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
						i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
					}
				}

			} else {

				if(!o.axis || o.axis !== "x") {
					if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}
				}

				if(!o.axis || o.axis !== "y") {
					if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(i, event);
			}

		}
	});

	$.ui.plugin.add("draggable", "snap", {
		start: function() {

			var i = $(this).data("ui-draggable"),
				o = i.options;

			i.snapElements = [];

			$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
				var $t = $(this),
					$o = $t.offset();
				if(this !== i.element[0]) {
					i.snapElements.push({
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					});
				}
			});

		},
		drag: function(event, ui) {

			var ts, bs, ls, rs, l, r, t, b, i, first,
				inst = $(this).data("ui-draggable"),
				o = inst.options,
				d = o.snapTolerance,
				x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
				y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

			for (i = inst.snapElements.length - 1; i >= 0; i--){

				l = inst.snapElements[i].left;
				r = l + inst.snapElements[i].width;
				t = inst.snapElements[i].top;
				b = t + inst.snapElements[i].height;

				//Yes, I know, this is insane ;)
				if(!((l-d < x1 && x1 < r+d && t-d < y1 && y1 < b+d) || (l-d < x1 && x1 < r+d && t-d < y2 && y2 < b+d) || (l-d < x2 && x2 < r+d && t-d < y1 && y1 < b+d) || (l-d < x2 && x2 < r+d && t-d < y2 && y2 < b+d))) {
					if(inst.snapElements[i].snapping) {
						(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
					}
					inst.snapElements[i].snapping = false;
					continue;
				}

				if(o.snapMode !== "inner") {
					ts = Math.abs(t - y2) <= d;
					bs = Math.abs(b - y1) <= d;
					ls = Math.abs(l - x2) <= d;
					rs = Math.abs(r - x1) <= d;
					if(ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
					}
					if(bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
					}
					if(ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
					}
					if(rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
					}
				}

				first = (ts || bs || ls || rs);

				if(o.snapMode !== "outer") {
					ts = Math.abs(t - y1) <= d;
					bs = Math.abs(b - y2) <= d;
					ls = Math.abs(l - x1) <= d;
					rs = Math.abs(r - x2) <= d;
					if(ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
					}
					if(bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
					}
					if(ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
					}
					if(rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
					}
				}

				if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
					(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

			}

		}
	});

	$.ui.plugin.add("draggable", "stack", {
		start: function() {

			var min,
				o = $(this).data("ui-draggable").options,
				group = $.makeArray($(o.stack)).sort(function(a,b) {
					return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
				});

			if (!group.length) { return; }

			min = parseInt(group[0].style.zIndex, 10) || 0;
			$(group).each(function(i) {
				this.style.zIndex = min + i;
			});

			this[0].style.zIndex = min + group.length;

		}
	});

	$.ui.plugin.add("draggable", "zIndex", {
		start: function(event, ui) {
			var t = $(ui.helper), o = $(this).data("ui-draggable").options;
			if(t.css("zIndex")) {
				o._zIndex = t.css("zIndex");
			}
			t.css("zIndex", o.zIndex);
		},
		stop: function(event, ui) {
			var o = $(this).data("ui-draggable").options;
			if(o._zIndex) {
				$(ui.helper).css("zIndex", o._zIndex);
			}
		}
	});

	})(jQuery);
	(function( $, undefined ) {

	function isOverAxis( x, reference, size ) {
		return ( x > reference ) && ( x < ( reference + size ) );
	}

	$.widget("ui.droppable", {
		version: "1.10.0",
		widgetEventPrefix: "drop",
		options: {
			accept: "*",
			activeClass: false,
			addClasses: true,
			greedy: false,
			hoverClass: false,
			scope: "default",
			tolerance: "intersect",

			// callbacks
			activate: null,
			deactivate: null,
			drop: null,
			out: null,
			over: null
		},
		_create: function() {

			var o = this.options,
				accept = o.accept;

			this.isover = false;
			this.isout = true;

			this.accept = $.isFunction(accept) ? accept : function(d) {
				return d.is(accept);
			};

			//Store the droppable's proportions
			this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

			// Add the reference and positions to the manager
			$.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
			$.ui.ddmanager.droppables[o.scope].push(this);

			(o.addClasses && this.element.addClass("ui-droppable"));

		},

		_destroy: function() {
			var i = 0,
				drop = $.ui.ddmanager.droppables[this.options.scope];

			for ( ; i < drop.length; i++ ) {
				if ( drop[i] === this ) {
					drop.splice(i, 1);
				}
			}

			this.element.removeClass("ui-droppable ui-droppable-disabled");
		},

		_setOption: function(key, value) {

			if(key === "accept") {
				this.accept = $.isFunction(value) ? value : function(d) {
					return d.is(value);
				};
			}
			$.Widget.prototype._setOption.apply(this, arguments);
		},

		_activate: function(event) {
			var draggable = $.ui.ddmanager.current;
			if(this.options.activeClass) {
				this.element.addClass(this.options.activeClass);
			}
			if(draggable){
				this._trigger("activate", event, this.ui(draggable));
			}
		},

		_deactivate: function(event) {
			var draggable = $.ui.ddmanager.current;
			if(this.options.activeClass) {
				this.element.removeClass(this.options.activeClass);
			}
			if(draggable){
				this._trigger("deactivate", event, this.ui(draggable));
			}
		},

		_over: function(event) {

			var draggable = $.ui.ddmanager.current;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return;
			}

			if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.hoverClass) {
					this.element.addClass(this.options.hoverClass);
				}
				this._trigger("over", event, this.ui(draggable));
			}

		},

		_out: function(event) {

			var draggable = $.ui.ddmanager.current;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return;
			}

			if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass);
				}
				this._trigger("out", event, this.ui(draggable));
			}

		},

		_drop: function(event,custom) {

			var draggable = custom || $.ui.ddmanager.current,
				childrenIntersection = false;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return false;
			}

			this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
				var inst = $.data(this, "ui-droppable");
				if(
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
					$.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
				) { childrenIntersection = true; return false; }
			});
			if(childrenIntersection) {
				return false;
			}

			if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.activeClass) {
					this.element.removeClass(this.options.activeClass);
				}
				if(this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass);
				}
				this._trigger("drop", event, this.ui(draggable));
				return this.element;
			}

			return false;

		},

		ui: function(c) {
			return {
				draggable: (c.currentItem || c.element),
				helper: c.helper,
				position: c.position,
				offset: c.positionAbs
			};
		}

	});

	$.ui.intersect = function(draggable, droppable, toleranceMode) {

		if (!droppable.offset) {
			return false;
		}

		var draggableLeft, draggableTop,
			x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
			y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left, r = l + droppable.proportions.width,
			t = droppable.offset.top, b = t + droppable.proportions.height;

		switch (toleranceMode) {
			case "fit":
				return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
			case "intersect":
				return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half
					x2 - (draggable.helperProportions.width / 2) < r && // Left Half
					t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half
					y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
			case "pointer":
				draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);
				draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);
				return isOverAxis( draggableTop, t, droppable.proportions.height ) && isOverAxis( draggableLeft, l, droppable.proportions.width );
			case "touch":
				return (
					(y1 >= t && y1 <= b) ||	// Top edge touching
					(y2 >= t && y2 <= b) ||	// Bottom edge touching
					(y1 < t && y2 > b)		// Surrounded vertically
				) && (
					(x1 >= l && x1 <= r) ||	// Left edge touching
					(x2 >= l && x2 <= r) ||	// Right edge touching
					(x1 < l && x2 > r)		// Surrounded horizontally
				);
			default:
				return false;
			}

	};

	/*
		This manager tracks offsets of draggables and droppables
	*/
	$.ui.ddmanager = {
		current: null,
		droppables: { "default": [] },
		prepareOffsets: function(t, event) {

			var i, j,
				m = $.ui.ddmanager.droppables[t.options.scope] || [],
				type = event ? event.type : null, // workaround for #2317
				list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

			droppablesLoop: for (i = 0; i < m.length; i++) {

				//No disabled and non-accepted
				if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
					continue;
				}

				// Filter out elements in the current dragged item
				for (j=0; j < list.length; j++) {
					if(list[j] === m[i].element[0]) {
						m[i].proportions.height = 0;
						continue droppablesLoop;
					}
				}

				m[i].visible = m[i].element.css("display") !== "none";
				if(!m[i].visible) {
					continue;
				}

				//Activate the droppable if used directly from draggables
				if(type === "mousedown") {
					m[i]._activate.call(m[i], event);
				}

				m[i].offset = m[i].element.offset();
				m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

			}

		},
		drop: function(draggable, event) {

			var dropped = false;
			$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

				if(!this.options) {
					return;
				}
				if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
					dropped = this._drop.call(this, event) || dropped;
				}

				if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
					this.isout = true;
					this.isover = false;
					this._deactivate.call(this, event);
				}

			});
			return dropped;

		},
		dragStart: function( draggable, event ) {
			//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
			draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
				if( !draggable.options.refreshPositions ) {
					$.ui.ddmanager.prepareOffsets( draggable, event );
				}
			});
		},
		drag: function(draggable, event) {

			//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
			if(draggable.options.refreshPositions) {
				$.ui.ddmanager.prepareOffsets(draggable, event);
			}

			//Run through all droppables and check their positions based on specific tolerance options
			$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

				if(this.options.disabled || this.greedyChild || !this.visible) {
					return;
				}

				var parentInstance, scope, parent,
					intersects = $.ui.intersect(draggable, this, this.options.tolerance),
					c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
				if(!c) {
					return;
				}

				if (this.options.greedy) {
					// find droppable parents with same scope
					scope = this.options.scope;
					parent = this.element.parents(":data(ui-droppable)").filter(function () {
						return $.data(this, "ui-droppable").options.scope === scope;
					});

					if (parent.length) {
						parentInstance = $.data(parent[0], "ui-droppable");
						parentInstance.greedyChild = (c === "isover");
					}
				}

				// we just moved into a greedy child
				if (parentInstance && c === "isover") {
					parentInstance.isover = false;
					parentInstance.isout = true;
					parentInstance._out.call(parentInstance, event);
				}

				this[c] = true;
				this[c === "isout" ? "isover" : "isout"] = false;
				this[c === "isover" ? "_over" : "_out"].call(this, event);

				// we just moved out of a greedy child
				if (parentInstance && c === "isout") {
					parentInstance.isout = false;
					parentInstance.isover = true;
					parentInstance._over.call(parentInstance, event);
				}
			});

		},
		dragStop: function( draggable, event ) {
			draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
			//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
			if( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		}
	};

	})(jQuery);
	(function( $, undefined ) {

	function num(v) {
		return parseInt(v, 10) || 0;
	}

	function isNumber(value) {
		return !isNaN(parseInt(value, 10));
	}

	$.widget("ui.resizable", $.ui.mouse, {
		version: "1.10.0",
		widgetEventPrefix: "resize",
		options: {
			alsoResize: false,
			animate: false,
			animateDuration: "slow",
			animateEasing: "swing",
			aspectRatio: false,
			autoHide: false,
			containment: false,
			ghost: false,
			grid: false,
			handles: "e,s,se",
			helper: false,
			maxHeight: null,
			maxWidth: null,
			minHeight: 10,
			minWidth: 10,
			// See #7960
			zIndex: 90,

			// callbacks
			resize: null,
			start: null,
			stop: null
		},
		_create: function() {

			var n, i, handle, axis, hname,
				that = this,
				o = this.options;
			this.element.addClass("ui-resizable");

			$.extend(this, {
				_aspectRatio: !!(o.aspectRatio),
				aspectRatio: o.aspectRatio,
				originalElement: this.element,
				_proportionallyResizeElements: [],
				_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
			});

			//Wrap the element if it cannot hold child nodes
			if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

				//Create a wrapper element and set the wrapper to the new current internal element
				this.element.wrap(
					$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
						position: this.element.css("position"),
						width: this.element.outerWidth(),
						height: this.element.outerHeight(),
						top: this.element.css("top"),
						left: this.element.css("left")
					})
				);

				//Overwrite the original this.element
				this.element = this.element.parent().data(
					"ui-resizable", this.element.data("ui-resizable")
				);

				this.elementIsWrapper = true;

				//Move margins to the wrapper
				this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
				this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

				//Prevent Safari textarea resize
				this.originalResizeStyle = this.originalElement.css("resize");
				this.originalElement.css("resize", "none");

				//Push the actual element to our proportionallyResize internal array
				this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

				// avoid IE jump (hard set the margin)
				this.originalElement.css({ margin: this.originalElement.css("margin") });

				// fix handlers offset
				this._proportionallyResize();

			}

			this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
			if(this.handles.constructor === String) {

				if ( this.handles === "all") {
					this.handles = "n,e,s,w,se,sw,ne,nw";
				}

				n = this.handles.split(",");
				this.handles = {};

				for(i = 0; i < n.length; i++) {

					handle = $.trim(n[i]);
					hname = "ui-resizable-"+handle;
					axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

					// Apply zIndex to all handles - see #7960
					axis.css({ zIndex: o.zIndex });

					//TODO : What's going on here?
					if ("se" === handle) {
						axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
					}

					//Insert into internal handles object and append to element
					this.handles[handle] = ".ui-resizable-"+handle;
					this.element.append(axis);
				}

			}

			this._renderAxis = function(target) {

				var i, axis, padPos, padWrapper;

				target = target || this.element;

				for(i in this.handles) {

					if(this.handles[i].constructor === String) {
						this.handles[i] = $(this.handles[i], this.element).show();
					}

					//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
					if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

						axis = $(this.handles[i], this.element);

						//Checking the correct pad and border
						padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

						//The padding type i have to apply...
						padPos = [ "padding",
							/ne|nw|n/.test(i) ? "Top" :
							/se|sw|s/.test(i) ? "Bottom" :
							/^e$/.test(i) ? "Right" : "Left" ].join("");

						target.css(padPos, padWrapper);

						this._proportionallyResize();

					}

					//TODO: What's that good for? There's not anything to be executed left
					if(!$(this.handles[i]).length) {
						continue;
					}
				}
			};

			//TODO: make renderAxis a prototype function
			this._renderAxis(this.element);

			this._handles = $(".ui-resizable-handle", this.element)
				.disableSelection();

			//Matching axis name
			this._handles.mouseover(function() {
				if (!that.resizing) {
					if (this.className) {
						axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
					}
					//Axis, default = se
					that.axis = axis && axis[1] ? axis[1] : "se";
				}
			});

			//If we want to auto hide the elements
			if (o.autoHide) {
				this._handles.hide();
				$(this.element)
					.addClass("ui-resizable-autohide")
					.mouseenter(function() {
						if (o.disabled) {
							return;
						}
						$(this).removeClass("ui-resizable-autohide");
						that._handles.show();
					})
					.mouseleave(function(){
						if (o.disabled) {
							return;
						}
						if (!that.resizing) {
							$(this).addClass("ui-resizable-autohide");
							that._handles.hide();
						}
					});
			}

			//Initialize the mouse interaction
			this._mouseInit();

		},

		_destroy: function() {

			this._mouseDestroy();

			var wrapper,
				_destroy = function(exp) {
					$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
						.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
				};

			//TODO: Unwrap at same DOM position
			if (this.elementIsWrapper) {
				_destroy(this.element);
				wrapper = this.element;
				this.originalElement.css({
					position: wrapper.css("position"),
					width: wrapper.outerWidth(),
					height: wrapper.outerHeight(),
					top: wrapper.css("top"),
					left: wrapper.css("left")
				}).insertAfter( wrapper );
				wrapper.remove();
			}

			this.originalElement.css("resize", this.originalResizeStyle);
			_destroy(this.originalElement);

			return this;
		},

		_mouseCapture: function(event) {
			var i, handle,
				capture = false;

			for (i in this.handles) {
				handle = $(this.handles[i])[0];
				if (handle === event.target || $.contains(handle, event.target)) {
					capture = true;
				}
			}

			return !this.options.disabled && capture;
		},

		_mouseStart: function(event) {

			var curleft, curtop, cursor,
				o = this.options,
				iniPos = this.element.position(),
				el = this.element;

			this.resizing = true;

			// bugfix for http://dev.jquery.com/ticket/1749
			if ( (/absolute/).test( el.css("position") ) ) {
				el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
			} else if (el.is(".ui-draggable")) {
				el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
			}

			this._renderProxy();

			curleft = num(this.helper.css("left"));
			curtop = num(this.helper.css("top"));

			if (o.containment) {
				curleft += $(o.containment).scrollLeft() || 0;
				curtop += $(o.containment).scrollTop() || 0;
			}

			//Store needed variables
			this.offset = this.helper.offset();
			this.position = { left: curleft, top: curtop };
			this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
			this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
			this.originalPosition = { left: curleft, top: curtop };
			this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
			this.originalMousePosition = { left: event.pageX, top: event.pageY };

			//Aspect Ratio
			this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

			cursor = $(".ui-resizable-" + this.axis).css("cursor");
			$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

			el.addClass("ui-resizable-resizing");
			this._propagate("start", event);
			return true;
		},

		_mouseDrag: function(event) {

			//Increase performance, avoid regex
			var data,
				el = this.helper, props = {},
				smp = this.originalMousePosition,
				a = this.axis,
				prevTop = this.position.top,
				prevLeft = this.position.left,
				prevWidth = this.size.width,
				prevHeight = this.size.height,
				dx = (event.pageX-smp.left)||0,
				dy = (event.pageY-smp.top)||0,
				trigger = this._change[a];

			if (!trigger) {
				return false;
			}

			// Calculate the attrs that will be change
			data = trigger.apply(this, [event, dx, dy]);

			// Put this in the mouseDrag handler since the user can start pressing shift while resizing
			this._updateVirtualBoundaries(event.shiftKey);
			if (this._aspectRatio || event.shiftKey) {
				data = this._updateRatio(data, event);
			}

			data = this._respectSize(data, event);

			this._updateCache(data);

			// plugins callbacks need to be called first
			this._propagate("resize", event);

			if (this.position.top !== prevTop) {
				props.top = this.position.top + "px";
			}
			if (this.position.left !== prevLeft) {
				props.left = this.position.left + "px";
			}
			if (this.size.width !== prevWidth) {
				props.width = this.size.width + "px";
			}
			if (this.size.height !== prevHeight) {
				props.height = this.size.height + "px";
			}
			el.css(props);

			if (!this._helper && this._proportionallyResizeElements.length) {
				this._proportionallyResize();
			}

			// Call the user callback if the element was resized
			if ( ! $.isEmptyObject(props) ) {
				this._trigger("resize", event, this.ui());
			}

			return false;
		},

		_mouseStop: function(event) {

			this.resizing = false;
			var pr, ista, soffseth, soffsetw, s, left, top,
				o = this.options, that = this;

			if(this._helper) {

				pr = this._proportionallyResizeElements;
				ista = pr.length && (/textarea/i).test(pr[0].nodeName);
				soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
				soffsetw = ista ? 0 : that.sizeDiff.width;

				s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
				left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
				top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

				if (!o.animate) {
					this.element.css($.extend(s, { top: top, left: left }));
				}

				that.helper.height(that.size.height);
				that.helper.width(that.size.width);

				if (this._helper && !o.animate) {
					this._proportionallyResize();
				}
			}

			$("body").css("cursor", "auto");

			this.element.removeClass("ui-resizable-resizing");

			this._propagate("stop", event);

			if (this._helper) {
				this.helper.remove();
			}

			return false;

		},

		_updateVirtualBoundaries: function(forceAspectRatio) {
			var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
				o = this.options;

			b = {
				minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
				maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
				minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
				maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
			};

			if(this._aspectRatio || forceAspectRatio) {
				// We want to create an enclosing box whose aspect ration is the requested one
				// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
				pMinWidth = b.minHeight * this.aspectRatio;
				pMinHeight = b.minWidth / this.aspectRatio;
				pMaxWidth = b.maxHeight * this.aspectRatio;
				pMaxHeight = b.maxWidth / this.aspectRatio;

				if(pMinWidth > b.minWidth) {
					b.minWidth = pMinWidth;
				}
				if(pMinHeight > b.minHeight) {
					b.minHeight = pMinHeight;
				}
				if(pMaxWidth < b.maxWidth) {
					b.maxWidth = pMaxWidth;
				}
				if(pMaxHeight < b.maxHeight) {
					b.maxHeight = pMaxHeight;
				}
			}
			this._vBoundaries = b;
		},

		_updateCache: function(data) {
			this.offset = this.helper.offset();
			if (isNumber(data.left)) {
				this.position.left = data.left;
			}
			if (isNumber(data.top)) {
				this.position.top = data.top;
			}
			if (isNumber(data.height)) {
				this.size.height = data.height;
			}
			if (isNumber(data.width)) {
				this.size.width = data.width;
			}
		},

		_updateRatio: function( data ) {

			var cpos = this.position,
				csize = this.size,
				a = this.axis;

			if (isNumber(data.height)) {
				data.width = (data.height * this.aspectRatio);
			} else if (isNumber(data.width)) {
				data.height = (data.width / this.aspectRatio);
			}

			if (a === "sw") {
				data.left = cpos.left + (csize.width - data.width);
				data.top = null;
			}
			if (a === "nw") {
				data.top = cpos.top + (csize.height - data.height);
				data.left = cpos.left + (csize.width - data.width);
			}

			return data;
		},

		_respectSize: function( data ) {

			var o = this._vBoundaries,
				a = this.axis,
				ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
				isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
				dw = this.originalPosition.left + this.originalSize.width,
				dh = this.position.top + this.size.height,
				cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
			if (isminw) {
				data.width = o.minWidth;
			}
			if (isminh) {
				data.height = o.minHeight;
			}
			if (ismaxw) {
				data.width = o.maxWidth;
			}
			if (ismaxh) {
				data.height = o.maxHeight;
			}

			if (isminw && cw) {
				data.left = dw - o.minWidth;
			}
			if (ismaxw && cw) {
				data.left = dw - o.maxWidth;
			}
			if (isminh && ch) {
				data.top = dh - o.minHeight;
			}
			if (ismaxh && ch) {
				data.top = dh - o.maxHeight;
			}

			// fixing jump error on top/left - bug #2330
			if (!data.width && !data.height && !data.left && data.top) {
				data.top = null;
			} else if (!data.width && !data.height && !data.top && data.left) {
				data.left = null;
			}

			return data;
		},

		_proportionallyResize: function() {

			if (!this._proportionallyResizeElements.length) {
				return;
			}

			var i, j, borders, paddings, prel,
				element = this.helper || this.element;

			for ( i=0; i < this._proportionallyResizeElements.length; i++) {

				prel = this._proportionallyResizeElements[i];

				if (!this.borderDif) {
					this.borderDif = [];
					borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
					paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

					for ( j = 0; j < borders.length; j++ ) {
						this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
					}
				}

				prel.css({
					height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
					width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
				});

			}

		},

		_renderProxy: function() {

			var el = this.element, o = this.options;
			this.elementOffset = el.offset();

			if(this._helper) {

				this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

				this.helper.addClass(this._helper).css({
					width: this.element.outerWidth() - 1,
					height: this.element.outerHeight() - 1,
					position: "absolute",
					left: this.elementOffset.left +"px",
					top: this.elementOffset.top +"px",
					zIndex: ++o.zIndex //TODO: Don't modify option
				});

				this.helper
					.appendTo("body")
					.disableSelection();

			} else {
				this.helper = this.element;
			}

		},

		_change: {
			e: function(event, dx) {
				return { width: this.originalSize.width + dx };
			},
			w: function(event, dx) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { left: sp.left + dx, width: cs.width - dx };
			},
			n: function(event, dx, dy) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { top: sp.top + dy, height: cs.height - dy };
			},
			s: function(event, dx, dy) {
				return { height: this.originalSize.height + dy };
			},
			se: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
			},
			sw: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
			},
			ne: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
			},
			nw: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
			}
		},

		_propagate: function(n, event) {
			$.ui.plugin.call(this, n, [event, this.ui()]);
			(n !== "resize" && this._trigger(n, event, this.ui()));
		},

		plugins: {},

		ui: function() {
			return {
				originalElement: this.originalElement,
				element: this.element,
				helper: this.helper,
				position: this.position,
				size: this.size,
				originalSize: this.originalSize,
				originalPosition: this.originalPosition
			};
		}

	});

	/*
	 * Resizable Extensions
	 */

	$.ui.plugin.add("resizable", "animate", {

		stop: function( event ) {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				pr = that._proportionallyResizeElements,
				ista = pr.length && (/textarea/i).test(pr[0].nodeName),
				soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
				soffsetw = ista ? 0 : that.sizeDiff.width,
				style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
				left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
				top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			that.element.animate(
				$.extend(style, top && left ? { top: top, left: left } : {}), {
					duration: o.animateDuration,
					easing: o.animateEasing,
					step: function() {

						var data = {
							width: parseInt(that.element.css("width"), 10),
							height: parseInt(that.element.css("height"), 10),
							top: parseInt(that.element.css("top"), 10),
							left: parseInt(that.element.css("left"), 10)
						};

						if (pr && pr.length) {
							$(pr[0]).css({ width: data.width, height: data.height });
						}

						// propagating resize, and updating values for each animation step
						that._updateCache(data);
						that._propagate("resize", event);

					}
				}
			);
		}

	});

	$.ui.plugin.add("resizable", "containment", {

		start: function() {
			var element, p, co, ch, cw, width, height,
				that = $(this).data("ui-resizable"),
				o = that.options,
				el = that.element,
				oc = o.containment,
				ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

			if (!ce) {
				return;
			}

			that.containerElement = $(ce);

			if (/document/.test(oc) || oc === document) {
				that.containerOffset = { left: 0, top: 0 };
				that.containerPosition = { left: 0, top: 0 };

				that.parentData = {
					element: $(document), left: 0, top: 0,
					width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
				};
			}

			// i'm a node, so compute top, left, right, bottom
			else {
				element = $(ce);
				p = [];
				$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

				that.containerOffset = element.offset();
				that.containerPosition = element.position();
				that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

				co = that.containerOffset;
				ch = that.containerSize.height;
				cw = that.containerSize.width;
				width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
				height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

				that.parentData = {
					element: ce, left: co.left, top: co.top, width: width, height: height
				};
			}
		},

		resize: function( event ) {
			var woset, hoset, isParent, isOffsetRelative,
				that = $(this).data("ui-resizable"),
				o = that.options,
				co = that.containerOffset, cp = that.position,
				pRatio = that._aspectRatio || event.shiftKey,
				cop = { top:0, left:0 }, ce = that.containerElement;

			if (ce[0] !== document && (/static/).test(ce.css("position"))) {
				cop = co;
			}

			if (cp.left < (that._helper ? co.left : 0)) {
				that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
				if (pRatio) {
					that.size.height = that.size.width / that.aspectRatio;
				}
				that.position.left = o.helper ? co.left : 0;
			}

			if (cp.top < (that._helper ? co.top : 0)) {
				that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
				if (pRatio) {
					that.size.width = that.size.height * that.aspectRatio;
				}
				that.position.top = that._helper ? co.top : 0;
			}

			that.offset.left = that.parentData.left+that.position.left;
			that.offset.top = that.parentData.top+that.position.top;

			woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
			hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

			isParent = that.containerElement.get(0) === that.element.parent().get(0);
			isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

			if(isParent && isOffsetRelative) {
				woset -= that.parentData.left;
			}

			if (woset + that.size.width >= that.parentData.width) {
				that.size.width = that.parentData.width - woset;
				if (pRatio) {
					that.size.height = that.size.width / that.aspectRatio;
				}
			}

			if (hoset + that.size.height >= that.parentData.height) {
				that.size.height = that.parentData.height - hoset;
				if (pRatio) {
					that.size.width = that.size.height * that.aspectRatio;
				}
			}
		},

		stop: function(){
			var that = $(this).data("ui-resizable"),
				o = that.options,
				co = that.containerOffset,
				cop = that.containerPosition,
				ce = that.containerElement,
				helper = $(that.helper),
				ho = helper.offset(),
				w = helper.outerWidth() - that.sizeDiff.width,
				h = helper.outerHeight() - that.sizeDiff.height;

			if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
				$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
			}

			if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
				$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
			}

		}
	});

	$.ui.plugin.add("resizable", "alsoResize", {

		start: function () {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				_store = function (exp) {
					$(exp).each(function() {
						var el = $(this);
						el.data("ui-resizable-alsoresize", {
							width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
							left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
						});
					});
				};

			if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
				if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
				else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
			}else{
				_store(o.alsoResize);
			}
		},

		resize: function (event, ui) {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				os = that.originalSize,
				op = that.originalPosition,
				delta = {
					height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
					top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
				},

				_alsoResize = function (exp, c) {
					$(exp).each(function() {
						var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
							css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

						$.each(css, function (i, prop) {
							var sum = (start[prop]||0) + (delta[prop]||0);
							if (sum && sum >= 0) {
								style[prop] = sum || null;
							}
						});

						el.css(style);
					});
				};

			if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
				$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
			}else{
				_alsoResize(o.alsoResize);
			}
		},

		stop: function () {
			$(this).removeData("resizable-alsoresize");
		}
	});

	$.ui.plugin.add("resizable", "ghost", {

		start: function() {

			var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

			that.ghost = that.originalElement.clone();
			that.ghost
				.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
				.addClass("ui-resizable-ghost")
				.addClass(typeof o.ghost === "string" ? o.ghost : "");

			that.ghost.appendTo(that.helper);

		},

		resize: function(){
			var that = $(this).data("ui-resizable");
			if (that.ghost) {
				that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
			}
		},

		stop: function() {
			var that = $(this).data("ui-resizable");
			if (that.ghost && that.helper) {
				that.helper.get(0).removeChild(that.ghost.get(0));
			}
		}

	});

	$.ui.plugin.add("resizable", "grid", {

		resize: function() {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				cs = that.size,
				os = that.originalSize,
				op = that.originalPosition,
				a = that.axis,
				grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
				gridX = (grid[0]||1),
				gridY = (grid[1]||1),
				ox = Math.round((cs.width - os.width) / gridX) * gridX,
				oy = Math.round((cs.height - os.height) / gridY) * gridY,
				newWidth = os.width + ox,
				newHeight = os.height + oy,
				isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
				isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
				isMinWidth = o.minWidth && (o.minWidth > newWidth),
				isMinHeight = o.minHeight && (o.minHeight > newHeight);

			o.grid = grid;

			if (isMinWidth) {
				newWidth = newWidth + gridX;
			}
			if (isMinHeight) {
				newHeight = newHeight + gridY;
			}
			if (isMaxWidth) {
				newWidth = newWidth - gridX;
			}
			if (isMaxHeight) {
				newHeight = newHeight - gridY;
			}

			if (/^(se|s|e)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
			} else if (/^(ne)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else if (/^(sw)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.left = op.left - ox;
			} else {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
				that.position.left = op.left - ox;
			}
		}

	});

	})(jQuery);
	(function( $, undefined ) {

	$.widget("ui.selectable", $.ui.mouse, {
		version: "1.10.0",
		options: {
			appendTo: "body",
			autoRefresh: true,
			distance: 0,
			filter: "*",
			tolerance: "touch",

			// callbacks
			selected: null,
			selecting: null,
			start: null,
			stop: null,
			unselected: null,
			unselecting: null
		},
		_create: function() {
			var selectees,
				that = this;

			this.element.addClass("ui-selectable");

			this.dragged = false;

			// cache selectee children based on filter
			this.refresh = function() {
				selectees = $(that.options.filter, that.element[0]);
				selectees.addClass("ui-selectee");
				selectees.each(function() {
					var $this = $(this),
						pos = $this.offset();
					$.data(this, "selectable-item", {
						element: this,
						$element: $this,
						left: pos.left,
						top: pos.top,
						right: pos.left + $this.outerWidth(),
						bottom: pos.top + $this.outerHeight(),
						startselected: false,
						selected: $this.hasClass("ui-selected"),
						selecting: $this.hasClass("ui-selecting"),
						unselecting: $this.hasClass("ui-unselecting")
					});
				});
			};
			this.refresh();

			this.selectees = selectees.addClass("ui-selectee");

			this._mouseInit();

			this.helper = $("<div class='ui-selectable-helper'></div>");
		},

		_destroy: function() {
			this.selectees
				.removeClass("ui-selectee")
				.removeData("selectable-item");
			this.element
				.removeClass("ui-selectable ui-selectable-disabled");
			this._mouseDestroy();
		},

		_mouseStart: function(event) {
			var that = this,
				options = this.options;

			this.opos = [event.pageX, event.pageY];

			if (this.options.disabled) {
				return;
			}

			this.selectees = $(options.filter, this.element[0]);

			this._trigger("start", event);

			$(options.appendTo).append(this.helper);
			// position helper (lasso)
			this.helper.css({
				"left": event.pageX,
				"top": event.pageY,
				"width": 0,
				"height": 0
			});

			if (options.autoRefresh) {
				this.refresh();
			}

			this.selectees.filter(".ui-selected").each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.startselected = true;
				if (!event.metaKey && !event.ctrlKey) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
					selectee.$element.addClass("ui-unselecting");
					selectee.unselecting = true;
					// selectable UNSELECTING callback
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
			});

			$(event.target).parents().addBack().each(function() {
				var doSelect,
					selectee = $.data(this, "selectable-item");
				if (selectee) {
					doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
					selectee.$element
						.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
						.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
					selectee.unselecting = !doSelect;
					selectee.selecting = doSelect;
					selectee.selected = doSelect;
					// selectable (UN)SELECTING callback
					if (doSelect) {
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					} else {
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
					return false;
				}
			});

		},

		_mouseDrag: function(event) {

			this.dragged = true;

			if (this.options.disabled) {
				return;
			}

			var tmp,
				that = this,
				options = this.options,
				x1 = this.opos[0],
				y1 = this.opos[1],
				x2 = event.pageX,
				y2 = event.pageY;

			if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
			if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
			this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

			this.selectees.each(function() {
				var selectee = $.data(this, "selectable-item"),
					hit = false;

				//prevent helper from being selected if appendTo: selectable
				if (!selectee || selectee.element === that.element[0]) {
					return;
				}

				if (options.tolerance === "touch") {
					hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
				} else if (options.tolerance === "fit") {
					hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
				}

				if (hit) {
					// SELECT
					if (selectee.selected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;
					}
					if (selectee.unselecting) {
						selectee.$element.removeClass("ui-unselecting");
						selectee.unselecting = false;
					}
					if (!selectee.selecting) {
						selectee.$element.addClass("ui-selecting");
						selectee.selecting = true;
						// selectable SELECTING callback
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					}
				} else {
					// UNSELECT
					if (selectee.selecting) {
						if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							selectee.$element.addClass("ui-selected");
							selectee.selected = true;
						} else {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							if (selectee.startselected) {
								selectee.$element.addClass("ui-unselecting");
								selectee.unselecting = true;
							}
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
					if (selectee.selected) {
						if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
							selectee.$element.removeClass("ui-selected");
							selectee.selected = false;

							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
				}
			});

			return false;
		},

		_mouseStop: function(event) {
			var that = this;

			this.dragged = false;

			$(".ui-unselecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-unselecting");
				selectee.unselecting = false;
				selectee.startselected = false;
				that._trigger("unselected", event, {
					unselected: selectee.element
				});
			});
			$(".ui-selecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
				selectee.selecting = false;
				selectee.selected = true;
				selectee.startselected = true;
				that._trigger("selected", event, {
					selected: selectee.element
				});
			});
			this._trigger("stop", event);

			this.helper.remove();

			return false;
		}

	});

	})(jQuery);
	(function( $, undefined ) {

	/*jshint loopfunc: true */

	function isOverAxis( x, reference, size ) {
		return ( x > reference ) && ( x < ( reference + size ) );
	}

	$.widget("ui.sortable", $.ui.mouse, {
		version: "1.10.0",
		widgetEventPrefix: "sort",
		ready: false,
		options: {
			appendTo: "parent",
			axis: false,
			connectWith: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			dropOnEmpty: true,
			forcePlaceholderSize: false,
			forceHelperSize: false,
			grid: false,
			handle: false,
			helper: "original",
			items: "> *",
			opacity: false,
			placeholder: false,
			revert: false,
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			scope: "default",
			tolerance: "intersect",
			zIndex: 1000,

			// callbacks
			activate: null,
			beforeStop: null,
			change: null,
			deactivate: null,
			out: null,
			over: null,
			receive: null,
			remove: null,
			sort: null,
			start: null,
			stop: null,
			update: null
		},
		_create: function() {

			var o = this.options;
			this.containerCache = {};
			this.element.addClass("ui-sortable");

			//Get the items
			this.refresh();

			//Let's determine if the items are being displayed horizontally
			this.floating = this.items.length ? o.axis === "x" || (/left|right/).test(this.items[0].item.css("float")) || (/inline|table-cell/).test(this.items[0].item.css("display")) : false;

			//Let's determine the parent's offset
			this.offset = this.element.offset();

			//Initialize mouse events for interaction
			this._mouseInit();

			//We're ready to go
			this.ready = true;

		},

		_destroy: function() {
			this.element
				.removeClass("ui-sortable ui-sortable-disabled");
			this._mouseDestroy();

			for ( var i = this.items.length - 1; i >= 0; i-- ) {
				this.items[i].item.removeData(this.widgetName + "-item");
			}

			return this;
		},

		_setOption: function(key, value){
			if ( key === "disabled" ) {
				this.options[ key ] = value;

				this.widget().toggleClass( "ui-sortable-disabled", !!value );
			} else {
				// Don't call widget base _setOption for disable as it adds ui-state-disabled class
				$.Widget.prototype._setOption.apply(this, arguments);
			}
		},

		_mouseCapture: function(event, overrideHandle) {
			var currentItem = null,
				validHandle = false,
				that = this;

			if (this.reverting) {
				return false;
			}

			if(this.options.disabled || this.options.type === "static") {
				return false;
			}

			//We have to refresh the items data once first
			this._refreshItems(event);

			//Find out if the clicked node (or one of its parents) is a actual item in this.items
			$(event.target).parents().each(function() {
				if($.data(this, that.widgetName + "-item") === that) {
					currentItem = $(this);
					return false;
				}
			});
			if($.data(event.target, that.widgetName + "-item") === that) {
				currentItem = $(event.target);
			}

			if(!currentItem) {
				return false;
			}
			if(this.options.handle && !overrideHandle) {
				$(this.options.handle, currentItem).find("*").addBack().each(function() {
					if(this === event.target) {
						validHandle = true;
					}
				});
				if(!validHandle) {
					return false;
				}
			}

			this.currentItem = currentItem;
			this._removeCurrentsFromItems();
			return true;

		},

		_mouseStart: function(event, overrideHandle, noActivation) {

			var i,
				o = this.options;

			this.currentContainer = this;

			//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
			this.refreshPositions();

			//Create and append the visible helper
			this.helper = this._createHelper(event);

			//Cache the helper size
			this._cacheHelperProportions();

			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */

			//Cache the margins of the original element
			this._cacheMargins();

			//Get the next scrolling parent
			this.scrollParent = this.helper.scrollParent();

			//The element's absolute position on the page minus margins
			this.offset = this.currentItem.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};

			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});

			// Only after we got the offset, we can change the helper's position to absolute
			// TODO: Still need to figure out a way to make relative sorting possible
			this.helper.css("position", "absolute");
			this.cssPosition = this.helper.css("position");

			//Generate the original position
			this.originalPosition = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;

			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

			//Cache the former DOM position
			this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

			//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
			if(this.helper[0] !== this.currentItem[0]) {
				this.currentItem.hide();
			}

			//Create the placeholder
			this._createPlaceholder();

			//Set a containment if given in the options
			if(o.containment) {
				this._setContainment();
			}

			if(o.cursor) { // cursor option
				if ($("body").css("cursor")) {
					this._storedCursor = $("body").css("cursor");
				}
				$("body").css("cursor", o.cursor);
			}

			if(o.opacity) { // opacity option
				if (this.helper.css("opacity")) {
					this._storedOpacity = this.helper.css("opacity");
				}
				this.helper.css("opacity", o.opacity);
			}

			if(o.zIndex) { // zIndex option
				if (this.helper.css("zIndex")) {
					this._storedZIndex = this.helper.css("zIndex");
				}
				this.helper.css("zIndex", o.zIndex);
			}

			//Prepare scrolling
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
				this.overflowOffset = this.scrollParent.offset();
			}

			//Call callbacks
			this._trigger("start", event, this._uiHash());

			//Recache the helper size
			if(!this._preserveHelperProportions) {
				this._cacheHelperProportions();
			}


			//Post "activate" events to possible containers
			if( !noActivation ) {
				for ( i = this.containers.length - 1; i >= 0; i-- ) {
					this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
				}
			}

			//Prepare possible droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}

			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}

			this.dragging = true;

			this.helper.addClass("ui-sortable-helper");
			this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
			return true;

		},

		_mouseDrag: function(event) {
			var i, item, itemElement, intersection,
				o = this.options,
				scrolled = false;

			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");

			if (!this.lastPositionAbs) {
				this.lastPositionAbs = this.positionAbs;
			}

			//Do scrolling
			if(this.options.scroll) {
				if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

					if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
					}

					if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
					}

				} else {

					if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}

					if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}

				}

				if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
					$.ui.ddmanager.prepareOffsets(this, event);
				}
			}

			//Regenerate the absolute position used for position checks
			this.positionAbs = this._convertPositionTo("absolute");

			//Set the helper position
			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}

			//Rearrange
			for (i = this.items.length - 1; i >= 0; i--) {

				//Cache variables and intersection, continue if no intersection
				item = this.items[i];
				itemElement = item.item[0];
				intersection = this._intersectsWithPointer(item);
				if (!intersection) {
					continue;
				}

				// Only put the placeholder inside the current Container, skip all
				// items form other containers. This works because when moving
				// an item from one container to another the
				// currentContainer is switched before the placeholder is moved.
				//
				// Without this moving items in "sub-sortables" can cause the placeholder to jitter
				// beetween the outer and inner container.
				if (item.instance !== this.currentContainer) {
					continue;
				}

				// cannot intersect with itself
				// no useless actions that have been done before
				// no action if the item moved is the parent of the item checked
				if (itemElement !== this.currentItem[0] &&
					this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
					!$.contains(this.placeholder[0], itemElement) &&
					(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
				) {

					this.direction = intersection === 1 ? "down" : "up";

					if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
						this._rearrange(event, item);
					} else {
						break;
					}

					this._trigger("change", event, this._uiHash());
					break;
				}
			}

			//Post events to containers
			this._contactContainers(event);

			//Interconnect with droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}

			//Call callbacks
			this._trigger("sort", event, this._uiHash());

			this.lastPositionAbs = this.positionAbs;
			return false;

		},

		_mouseStop: function(event, noPropagation) {

			if(!event) {
				return;
			}

			//If we are using droppables, inform the manager about the drop
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				$.ui.ddmanager.drop(this, event);
			}

			if(this.options.revert) {
				var that = this,
					cur = this.placeholder.offset();

				this.reverting = true;

				$(this.helper).animate({
					left: cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft),
					top: cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop)
				}, parseInt(this.options.revert, 10) || 500, function() {
					that._clear(event);
				});
			} else {
				this._clear(event, noPropagation);
			}

			return false;

		},

		cancel: function() {

			if(this.dragging) {

				this._mouseUp({ target: null });

				if(this.options.helper === "original") {
					this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
				} else {
					this.currentItem.show();
				}

				//Post deactivating events to containers
				for (var i = this.containers.length - 1; i >= 0; i--){
					this.containers[i]._trigger("deactivate", null, this._uiHash(this));
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", null, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}

			}

			if (this.placeholder) {
				//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
				if(this.placeholder[0].parentNode) {
					this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
				}
				if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
					this.helper.remove();
				}

				$.extend(this, {
					helper: null,
					dragging: false,
					reverting: false,
					_noFinalSort: null
				});

				if(this.domPosition.prev) {
					$(this.domPosition.prev).after(this.currentItem);
				} else {
					$(this.domPosition.parent).prepend(this.currentItem);
				}
			}

			return this;

		},

		serialize: function(o) {

			var items = this._getItemsAsjQuery(o && o.connected),
				str = [];
			o = o || {};

			$(items).each(function() {
				var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
				if (res) {
					str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
				}
			});

			if(!str.length && o.key) {
				str.push(o.key + "=");
			}

			return str.join("&");

		},

		toArray: function(o) {

			var items = this._getItemsAsjQuery(o && o.connected),
				ret = [];

			o = o || {};

			items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
			return ret;

		},

		/* Be careful with the following core functions */
		_intersectsWith: function(item) {

			var x1 = this.positionAbs.left,
				x2 = x1 + this.helperProportions.width,
				y1 = this.positionAbs.top,
				y2 = y1 + this.helperProportions.height,
				l = item.left,
				r = l + item.width,
				t = item.top,
				b = t + item.height,
				dyClick = this.offset.click.top,
				dxClick = this.offset.click.left,
				isOverElement = (y1 + dyClick) > t && (y1 + dyClick) < b && (x1 + dxClick) > l && (x1 + dxClick) < r;

			if ( this.options.tolerance === "pointer" ||
				this.options.forcePointerForContainers ||
				(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
			) {
				return isOverElement;
			} else {

				return (l < x1 + (this.helperProportions.width / 2) && // Right Half
					x2 - (this.helperProportions.width / 2) < r && // Left Half
					t < y1 + (this.helperProportions.height / 2) && // Bottom Half
					y2 - (this.helperProportions.height / 2) < b ); // Top Half

			}
		},

		_intersectsWithPointer: function(item) {

			var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
				isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
				isOverElement = isOverElementHeight && isOverElementWidth,
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();

			if (!isOverElement) {
				return false;
			}

			return this.floating ?
				( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
				: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

		},

		_intersectsWithSides: function(item) {

			var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
				isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();

			if (this.floating && horizontalDirection) {
				return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
			} else {
				return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
			}

		},

		_getDragVerticalDirection: function() {
			var delta = this.positionAbs.top - this.lastPositionAbs.top;
			return delta !== 0 && (delta > 0 ? "down" : "up");
		},

		_getDragHorizontalDirection: function() {
			var delta = this.positionAbs.left - this.lastPositionAbs.left;
			return delta !== 0 && (delta > 0 ? "right" : "left");
		},

		refresh: function(event) {
			this._refreshItems(event);
			this.refreshPositions();
			return this;
		},

		_connectWith: function() {
			var options = this.options;
			return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
		},

		_getItemsAsjQuery: function(connected) {

			var i, j, cur, inst,
				items = [],
				queries = [],
				connectWith = this._connectWith();

			if(connectWith && connected) {
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i]);
					for ( j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
						}
					}
				}
			}

			queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

			for (i = queries.length - 1; i >= 0; i--){
				queries[i][0].each(function() {
					items.push(this);
				});
			}

			return $(items);

		},

		_removeCurrentsFromItems: function() {

			var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

			this.items = $.grep(this.items, function (item) {
				for (var j=0; j < list.length; j++) {
					if(list[j] === item.item[0]) {
						return false;
					}
				}
				return true;
			});

		},

		_refreshItems: function(event) {

			this.items = [];
			this.containers = [this];

			var i, j, cur, inst, targetData, _queries, item, queriesLength,
				items = this.items,
				queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
				connectWith = this._connectWith();

			if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i]);
					for (j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
							this.containers.push(inst);
						}
					}
				}
			}

			for (i = queries.length - 1; i >= 0; i--) {
				targetData = queries[i][1];
				_queries = queries[i][0];

				for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
					item = $(_queries[j]);

					item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

					items.push({
						item: item,
						instance: targetData,
						width: 0, height: 0,
						left: 0, top: 0
					});
				}
			}

		},

		refreshPositions: function(fast) {

			//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
			if(this.offsetParent && this.helper) {
				this.offset.parent = this._getParentOffset();
			}

			var i, item, t, p;

			for (i = this.items.length - 1; i >= 0; i--){
				item = this.items[i];

				//We ignore calculating positions of all connected containers when we're not over them
				if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
					continue;
				}

				t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

				if (!fast) {
					item.width = t.outerWidth();
					item.height = t.outerHeight();
				}

				p = t.offset();
				item.left = p.left;
				item.top = p.top;
			}

			if(this.options.custom && this.options.custom.refreshContainers) {
				this.options.custom.refreshContainers.call(this);
			} else {
				for (i = this.containers.length - 1; i >= 0; i--){
					p = this.containers[i].element.offset();
					this.containers[i].containerCache.left = p.left;
					this.containers[i].containerCache.top = p.top;
					this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
					this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
				}
			}

			return this;
		},

		_createPlaceholder: function(that) {
			that = that || this;
			var className,
				o = that.options;

			if(!o.placeholder || o.placeholder.constructor === String) {
				className = o.placeholder;
				o.placeholder = {
					element: function() {

						var el = $(document.createElement(that.currentItem[0].nodeName))
							.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
							.removeClass("ui-sortable-helper")[0];

						if(!className) {
							el.style.visibility = "hidden";
						}

						return el;
					},
					update: function(container, p) {

						// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
						// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
						if(className && !o.forcePlaceholderSize) {
							return;
						}

						//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
						if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
						if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
					}
				};
			}

			//Create the placeholder
			that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

			//Append it after the actual current item
			that.currentItem.after(that.placeholder);

			//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
			o.placeholder.update(that, that.placeholder);

		},

		_contactContainers: function(event) {
			var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom,
				innermostContainer = null,
				innermostIndex = null;

			// get innermost container that intersects with item
			for (i = this.containers.length - 1; i >= 0; i--) {

				// never consider a container that's located within the item itself
				if($.contains(this.currentItem[0], this.containers[i].element[0])) {
					continue;
				}

				if(this._intersectsWith(this.containers[i].containerCache)) {

					// if we've already found a container and it's more "inner" than this, then continue
					if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
						continue;
					}

					innermostContainer = this.containers[i];
					innermostIndex = i;

				} else {
					// container doesn't intersect. trigger "out" event if necessary
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", event, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}

			}

			// if no intersecting containers found, return
			if(!innermostContainer) {
				return;
			}

			// move the item into the container if it's not there already
			if(this.containers.length === 1) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			} else {

				//When entering a new container, we will find the item with the least distance and append our item near it
				dist = 10000;
				itemWithLeastDistance = null;
				posProperty = this.containers[innermostIndex].floating ? "left" : "top";
				sizeProperty = this.containers[innermostIndex].floating ? "width" : "height";
				base = this.positionAbs[posProperty] + this.offset.click[posProperty];
				for (j = this.items.length - 1; j >= 0; j--) {
					if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
						continue;
					}
					if(this.items[j].item[0] === this.currentItem[0]) {
						continue;
					}
					cur = this.items[j].item.offset()[posProperty];
					nearBottom = false;
					if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
						nearBottom = true;
						cur += this.items[j][sizeProperty];
					}

					if(Math.abs(cur - base) < dist) {
						dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
						this.direction = nearBottom ? "up": "down";
					}
				}

				//Check if dropOnEmpty is enabled
				if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
					return;
				}

				this.currentContainer = this.containers[innermostIndex];
				itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
				this._trigger("change", event, this._uiHash());
				this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));

				//Update the placeholder
				this.options.placeholder.update(this.currentContainer, this.placeholder);

				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}


		},

		_createHelper: function(event) {

			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

			//Add the helper to the DOM if that didn't happen already
			if(!helper.parents("body").length) {
				$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
			}

			if(helper[0] === this.currentItem[0]) {
				this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
			}

			if(!helper[0].style.width || o.forceHelperSize) {
				helper.width(this.currentItem.width());
			}
			if(!helper[0].style.height || o.forceHelperSize) {
				helper.height(this.currentItem.height());
			}

			return helper;

		},

		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},

		_getParentOffset: function() {


			//Get the offsetParent and cache its position
			this.offsetParent = this.helper.offsetParent();
			var po = this.offsetParent.offset();

			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}

			// This needs to be actually done for all browsers, since pageX/pageY includes this information
			// with an ugly IE fix
			if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}

			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};

		},

		_getRelativeOffset: function() {

			if(this.cssPosition === "relative") {
				var p = this.currentItem.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}

		},

		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
				top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
			};
		},

		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},

		_setContainment: function() {

			var ce, co, over,
				o = this.options;
			if(o.containment === "parent") {
				o.containment = this.helper[0].parentNode;
			}
			if(o.containment === "document" || o.containment === "window") {
				this.containment = [
					0 - this.offset.relative.left - this.offset.parent.left,
					0 - this.offset.relative.top - this.offset.parent.top,
					$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
					($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
				];
			}

			if(!(/^(document|window|parent)$/).test(o.containment)) {
				ce = $(o.containment)[0];
				co = $(o.containment).offset();
				over = ($(ce).css("overflow") !== "hidden");

				this.containment = [
					co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
					co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
					co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
					co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
				];
			}

		},

		_convertPositionTo: function(d, pos) {

			if(!pos) {
				pos = this.position;
			}
			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
				)
			};

		},

		_generatePosition: function(event) {

			var top, left,
				o = this.options,
				pageX = event.pageX,
				pageY = event.pageY,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			// This is another very weird special case that only happens for relative elements:
			// 1. If the css position is relative
			// 2. and the scroll parent is the document or similar to the offset parent
			// we have to refresh the relative offset during the scroll so there are no jumps
			if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
				this.offset.relative = this._getRelativeOffset();
			}

			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */

			if(this.originalPosition) { //If we are not dragging yet, we won't check for options

				if(this.containment) {
					if(event.pageX - this.offset.click.left < this.containment[0]) {
						pageX = this.containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < this.containment[1]) {
						pageY = this.containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > this.containment[2]) {
						pageX = this.containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > this.containment[3]) {
						pageY = this.containment[3] + this.offset.click.top;
					}
				}

				if(o.grid) {
					top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
					pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

					left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
					pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}

			}

			return {
				top: (
					pageY -																// The absolute mouse position
					this.offset.click.top -													// Click offset (relative to the element)
					this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
				),
				left: (
					pageX -																// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
				)
			};

		},

		_rearrange: function(event, i, a, hardRefresh) {

			a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

			//Various things done here to improve the performance:
			// 1. we create a setTimeout, that calls refreshPositions
			// 2. on the instance, we have a counter variable, that get's higher after every append
			// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
			// 4. this lets only the last addition to the timeout stack through
			this.counter = this.counter ? ++this.counter : 1;
			var counter = this.counter;

			this._delay(function() {
				if(counter === this.counter) {
					this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
				}
			});

		},

		_clear: function(event, noPropagation) {

			this.reverting = false;
			// We delay all events that have to be triggered to after the point where the placeholder has been removed and
			// everything else normalized again
			var i,
				delayedTriggers = [];

			// We first have to update the dom position of the actual currentItem
			// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
			if(!this._noFinalSort && this.currentItem.parent().length) {
				this.placeholder.before(this.currentItem);
			}
			this._noFinalSort = null;

			if(this.helper[0] === this.currentItem[0]) {
				for(i in this._storedCSS) {
					if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
						this._storedCSS[i] = "";
					}
				}
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			if(this.fromOutside && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
			}
			if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
			}

			// Check if the items Container has Changed and trigger appropriate
			// events.
			if (this !== this.currentContainer) {
				if(!noPropagation) {
					delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
					delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
					delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
				}
			}


			//Post events to containers
			for (i = this.containers.length - 1; i >= 0; i--){
				if(!noPropagation) {
					delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				}
				if(this.containers[i].containerCache.over) {
					delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
					this.containers[i].containerCache.over = 0;
				}
			}

			//Do what was originally in plugins
			if(this._storedCursor) {
				$("body").css("cursor", this._storedCursor);
			}
			if(this._storedOpacity) {
				this.helper.css("opacity", this._storedOpacity);
			}
			if(this._storedZIndex) {
				this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
			}

			this.dragging = false;
			if(this.cancelHelperRemoval) {
				if(!noPropagation) {
					this._trigger("beforeStop", event, this._uiHash());
					for (i=0; i < delayedTriggers.length; i++) {
						delayedTriggers[i].call(this, event);
					} //Trigger all delayed events
					this._trigger("stop", event, this._uiHash());
				}

				this.fromOutside = false;
				return false;
			}

			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
			}

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

			if(this.helper[0] !== this.currentItem[0]) {
				this.helper.remove();
			}
			this.helper = null;

			if(!noPropagation) {
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return true;

		},

		_trigger: function() {
			if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
				this.cancel();
			}
		},

		_uiHash: function(_inst) {
			var inst = _inst || this;
			return {
				helper: inst.helper,
				placeholder: inst.placeholder || $([]),
				position: inst.position,
				originalPosition: inst.originalPosition,
				offset: inst.positionAbs,
				item: inst.currentItem,
				sender: _inst ? _inst.element : null
			};
		}

	});

	})(jQuery);
	;(jQuery.effects || (function($, undefined) {

	var dataSpace = "ui-effects-";

	$.effects = {
		effect: {}
	};

	/*!
	 * jQuery Color Animations v2.1.2
	 * https://github.com/jquery/jquery-color
	 *
	 * Copyright 2013 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * Date: Wed Jan 16 08:47:09 2013 -0600
	 */
	(function( jQuery, undefined ) {

		var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

		// plusequals test for += 100 -= 100
		rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
		// a set of RE's that can match strings and generate color tuples.
		stringParsers = [{
				re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ],
						execResult[ 3 ],
						execResult[ 4 ]
					];
				}
			}, {
				re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ] * 2.55,
						execResult[ 2 ] * 2.55,
						execResult[ 3 ] * 2.55,
						execResult[ 4 ]
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ], 16 )
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				space: "hsla",
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ] / 100,
						execResult[ 3 ] / 100,
						execResult[ 4 ]
					];
				}
			}],

		// jQuery.Color( )
		color = jQuery.Color = function( color, green, blue, alpha ) {
			return new jQuery.Color.fn.parse( color, green, blue, alpha );
		},
		spaces = {
			rgba: {
				props: {
					red: {
						idx: 0,
						type: "byte"
					},
					green: {
						idx: 1,
						type: "byte"
					},
					blue: {
						idx: 2,
						type: "byte"
					}
				}
			},

			hsla: {
				props: {
					hue: {
						idx: 0,
						type: "degrees"
					},
					saturation: {
						idx: 1,
						type: "percent"
					},
					lightness: {
						idx: 2,
						type: "percent"
					}
				}
			}
		},
		propTypes = {
			"byte": {
				floor: true,
				max: 255
			},
			"percent": {
				max: 1
			},
			"degrees": {
				mod: 360,
				floor: true
			}
		},
		support = color.support = {},

		// element for support tests
		supportElem = jQuery( "<p>" )[ 0 ],

		// colors = jQuery.Color.names
		colors,

		// local aliases of functions called often
		each = jQuery.each;

	// determine rgba support immediately
	supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
	support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

	// define cache name and alpha properties
	// for rgba and hsla spaces
	each( spaces, function( spaceName, space ) {
		space.cache = "_" + spaceName;
		space.props.alpha = {
			idx: 3,
			type: "percent",
			def: 1
		};
	});

	function clamp( value, prop, allowEmpty ) {
		var type = propTypes[ prop.type ] || {};

		if ( value == null ) {
			return (allowEmpty || !prop.def) ? null : prop.def;
		}

		// ~~ is an short way of doing floor for positive numbers
		value = type.floor ? ~~value : parseFloat( value );

		// IE will pass in empty strings as value for alpha,
		// which will hit this case
		if ( isNaN( value ) ) {
			return prop.def;
		}

		if ( type.mod ) {
			// we add mod before modding to make sure that negatives values
			// get converted properly: -10 -> 350
			return (value + type.mod) % type.mod;
		}

		// for now all property types without mod have min and max
		return 0 > value ? 0 : type.max < value ? type.max : value;
	}

	function stringParse( string ) {
		var inst = color(),
			rgba = inst._rgba = [];

		string = string.toLowerCase();

		each( stringParsers, function( i, parser ) {
			var parsed,
				match = parser.re.exec( string ),
				values = match && parser.parse( match ),
				spaceName = parser.space || "rgba";

			if ( values ) {
				parsed = inst[ spaceName ]( values );

				// if this was an rgba parse the assignment might happen twice
				// oh well....
				inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
				rgba = inst._rgba = parsed._rgba;

				// exit each( stringParsers ) here because we matched
				return false;
			}
		});

		// Found a stringParser that handled it
		if ( rgba.length ) {

			// if this came from a parsed string, force "transparent" when alpha is 0
			// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
			if ( rgba.join() === "0,0,0,0" ) {
				jQuery.extend( rgba, colors.transparent );
			}
			return inst;
		}

		// named colors
		return colors[ string ];
	}

	color.fn = jQuery.extend( color.prototype, {
		parse: function( red, green, blue, alpha ) {
			if ( red === undefined ) {
				this._rgba = [ null, null, null, null ];
				return this;
			}
			if ( red.jquery || red.nodeType ) {
				red = jQuery( red ).css( green );
				green = undefined;
			}

			var inst = this,
				type = jQuery.type( red ),
				rgba = this._rgba = [];

			// more than 1 argument specified - assume ( red, green, blue, alpha )
			if ( green !== undefined ) {
				red = [ red, green, blue, alpha ];
				type = "array";
			}

			if ( type === "string" ) {
				return this.parse( stringParse( red ) || colors._default );
			}

			if ( type === "array" ) {
				each( spaces.rgba.props, function( key, prop ) {
					rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
				});
				return this;
			}

			if ( type === "object" ) {
				if ( red instanceof color ) {
					each( spaces, function( spaceName, space ) {
						if ( red[ space.cache ] ) {
							inst[ space.cache ] = red[ space.cache ].slice();
						}
					});
				} else {
					each( spaces, function( spaceName, space ) {
						var cache = space.cache;
						each( space.props, function( key, prop ) {

							// if the cache doesn't exist, and we know how to convert
							if ( !inst[ cache ] && space.to ) {

								// if the value was null, we don't need to copy it
								// if the key was alpha, we don't need to copy it either
								if ( key === "alpha" || red[ key ] == null ) {
									return;
								}
								inst[ cache ] = space.to( inst._rgba );
							}

							// this is the only case where we allow nulls for ALL properties.
							// call clamp with alwaysAllowEmpty
							inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
						});

						// everything defined but alpha?
						if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
							// use the default of 1
							inst[ cache ][ 3 ] = 1;
							if ( space.from ) {
								inst._rgba = space.from( inst[ cache ] );
							}
						}
					});
				}
				return this;
			}
		},
		is: function( compare ) {
			var is = color( compare ),
				same = true,
				inst = this;

			each( spaces, function( _, space ) {
				var localCache,
					isCache = is[ space.cache ];
				if (isCache) {
					localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
					each( space.props, function( _, prop ) {
						if ( isCache[ prop.idx ] != null ) {
							same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
							return same;
						}
					});
				}
				return same;
			});
			return same;
		},
		_space: function() {
			var used = [],
				inst = this;
			each( spaces, function( spaceName, space ) {
				if ( inst[ space.cache ] ) {
					used.push( spaceName );
				}
			});
			return used.pop();
		},
		transition: function( other, distance ) {
			var end = color( other ),
				spaceName = end._space(),
				space = spaces[ spaceName ],
				startColor = this.alpha() === 0 ? color( "transparent" ) : this,
				start = startColor[ space.cache ] || space.to( startColor._rgba ),
				result = start.slice();

			end = end[ space.cache ];
			each( space.props, function( key, prop ) {
				var index = prop.idx,
					startValue = start[ index ],
					endValue = end[ index ],
					type = propTypes[ prop.type ] || {};

				// if null, don't override start value
				if ( endValue === null ) {
					return;
				}
				// if null - use end
				if ( startValue === null ) {
					result[ index ] = endValue;
				} else {
					if ( type.mod ) {
						if ( endValue - startValue > type.mod / 2 ) {
							startValue += type.mod;
						} else if ( startValue - endValue > type.mod / 2 ) {
							startValue -= type.mod;
						}
					}
					result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
				}
			});
			return this[ spaceName ]( result );
		},
		blend: function( opaque ) {
			// if we are already opaque - return ourself
			if ( this._rgba[ 3 ] === 1 ) {
				return this;
			}

			var rgb = this._rgba.slice(),
				a = rgb.pop(),
				blend = color( opaque )._rgba;

			return color( jQuery.map( rgb, function( v, i ) {
				return ( 1 - a ) * blend[ i ] + a * v;
			}));
		},
		toRgbaString: function() {
			var prefix = "rgba(",
				rgba = jQuery.map( this._rgba, function( v, i ) {
					return v == null ? ( i > 2 ? 1 : 0 ) : v;
				});

			if ( rgba[ 3 ] === 1 ) {
				rgba.pop();
				prefix = "rgb(";
			}

			return prefix + rgba.join() + ")";
		},
		toHslaString: function() {
			var prefix = "hsla(",
				hsla = jQuery.map( this.hsla(), function( v, i ) {
					if ( v == null ) {
						v = i > 2 ? 1 : 0;
					}

					// catch 1 and 2
					if ( i && i < 3 ) {
						v = Math.round( v * 100 ) + "%";
					}
					return v;
				});

			if ( hsla[ 3 ] === 1 ) {
				hsla.pop();
				prefix = "hsl(";
			}
			return prefix + hsla.join() + ")";
		},
		toHexString: function( includeAlpha ) {
			var rgba = this._rgba.slice(),
				alpha = rgba.pop();

			if ( includeAlpha ) {
				rgba.push( ~~( alpha * 255 ) );
			}

			return "#" + jQuery.map( rgba, function( v ) {

				// default to 0 when nulls exist
				v = ( v || 0 ).toString( 16 );
				return v.length === 1 ? "0" + v : v;
			}).join("");
		},
		toString: function() {
			return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
		}
	});
	color.fn.parse.prototype = color.fn;

	// hsla conversions adapted from:
	// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

	function hue2rgb( p, q, h ) {
		h = ( h + 1 ) % 1;
		if ( h * 6 < 1 ) {
			return p + (q - p) * h * 6;
		}
		if ( h * 2 < 1) {
			return q;
		}
		if ( h * 3 < 2 ) {
			return p + (q - p) * ((2/3) - h) * 6;
		}
		return p;
	}

	spaces.hsla.to = function ( rgba ) {
		if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
			return [ null, null, null, rgba[ 3 ] ];
		}
		var r = rgba[ 0 ] / 255,
			g = rgba[ 1 ] / 255,
			b = rgba[ 2 ] / 255,
			a = rgba[ 3 ],
			max = Math.max( r, g, b ),
			min = Math.min( r, g, b ),
			diff = max - min,
			add = max + min,
			l = add * 0.5,
			h, s;

		if ( min === max ) {
			h = 0;
		} else if ( r === max ) {
			h = ( 60 * ( g - b ) / diff ) + 360;
		} else if ( g === max ) {
			h = ( 60 * ( b - r ) / diff ) + 120;
		} else {
			h = ( 60 * ( r - g ) / diff ) + 240;
		}

		// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
		// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
		if ( diff === 0 ) {
			s = 0;
		} else if ( l <= 0.5 ) {
			s = diff / add;
		} else {
			s = diff / ( 2 - add );
		}
		return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
	};

	spaces.hsla.from = function ( hsla ) {
		if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
			return [ null, null, null, hsla[ 3 ] ];
		}
		var h = hsla[ 0 ] / 360,
			s = hsla[ 1 ],
			l = hsla[ 2 ],
			a = hsla[ 3 ],
			q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
			p = 2 * l - q;

		return [
			Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
			Math.round( hue2rgb( p, q, h ) * 255 ),
			Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
			a
		];
	};


	each( spaces, function( spaceName, space ) {
		var props = space.props,
			cache = space.cache,
			to = space.to,
			from = space.from;

		// makes rgba() and hsla()
		color.fn[ spaceName ] = function( value ) {

			// generate a cache for this space if it doesn't exist
			if ( to && !this[ cache ] ) {
				this[ cache ] = to( this._rgba );
			}
			if ( value === undefined ) {
				return this[ cache ].slice();
			}

			var ret,
				type = jQuery.type( value ),
				arr = ( type === "array" || type === "object" ) ? value : arguments,
				local = this[ cache ].slice();

			each( props, function( key, prop ) {
				var val = arr[ type === "object" ? key : prop.idx ];
				if ( val == null ) {
					val = local[ prop.idx ];
				}
				local[ prop.idx ] = clamp( val, prop );
			});

			if ( from ) {
				ret = color( from( local ) );
				ret[ cache ] = local;
				return ret;
			} else {
				return color( local );
			}
		};

		// makes red() green() blue() alpha() hue() saturation() lightness()
		each( props, function( key, prop ) {
			// alpha is included in more than one space
			if ( color.fn[ key ] ) {
				return;
			}
			color.fn[ key ] = function( value ) {
				var vtype = jQuery.type( value ),
					fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
					local = this[ fn ](),
					cur = local[ prop.idx ],
					match;

				if ( vtype === "undefined" ) {
					return cur;
				}

				if ( vtype === "function" ) {
					value = value.call( this, cur );
					vtype = jQuery.type( value );
				}
				if ( value == null && prop.empty ) {
					return this;
				}
				if ( vtype === "string" ) {
					match = rplusequals.exec( value );
					if ( match ) {
						value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
					}
				}
				local[ prop.idx ] = value;
				return this[ fn ]( local );
			};
		});
	});

	// add cssHook and .fx.step function for each named hook.
	// accept a space separated string of properties
	color.hook = function( hook ) {
		var hooks = hook.split( " " );
		each( hooks, function( i, hook ) {
			jQuery.cssHooks[ hook ] = {
				set: function( elem, value ) {
					var parsed, curElem,
						backgroundColor = "";

					if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
						value = color( parsed || value );
						if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
							curElem = hook === "backgroundColor" ? elem.parentNode : elem;
							while (
								(backgroundColor === "" || backgroundColor === "transparent") &&
								curElem && curElem.style
							) {
								try {
									backgroundColor = jQuery.css( curElem, "backgroundColor" );
									curElem = curElem.parentNode;
								} catch ( e ) {
								}
							}

							value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
								backgroundColor :
								"_default" );
						}

						value = value.toRgbaString();
					}
					try {
						elem.style[ hook ] = value;
					} catch( e ) {
						// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
					}
				}
			};
			jQuery.fx.step[ hook ] = function( fx ) {
				if ( !fx.colorInit ) {
					fx.start = color( fx.elem, hook );
					fx.end = color( fx.end );
					fx.colorInit = true;
				}
				jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
			};
		});

	};

	color.hook( stepHooks );

	jQuery.cssHooks.borderColor = {
		expand: function( value ) {
			var expanded = {};

			each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
				expanded[ "border" + part + "Color" ] = value;
			});
			return expanded;
		}
	};

	// Basic color names only.
	// Usage of any of the other color names requires adding yourself or including
	// jquery.color.svg-names.js.
	colors = jQuery.Color.names = {
		// 4.1. Basic color keywords
		aqua: "#00ffff",
		black: "#000000",
		blue: "#0000ff",
		fuchsia: "#ff00ff",
		gray: "#808080",
		green: "#008000",
		lime: "#00ff00",
		maroon: "#800000",
		navy: "#000080",
		olive: "#808000",
		purple: "#800080",
		red: "#ff0000",
		silver: "#c0c0c0",
		teal: "#008080",
		white: "#ffffff",
		yellow: "#ffff00",

		// 4.2.3. "transparent" color keyword
		transparent: [ null, null, null, 0 ],

		_default: "#ffffff"
	};

	})( jQuery );


	/******************************************************************************/
	/****************************** CLASS ANIMATIONS ******************************/
	/******************************************************************************/
	(function() {

	var classAnimationActions = [ "add", "remove", "toggle" ],
		shorthandStyles = {
			border: 1,
			borderBottom: 1,
			borderColor: 1,
			borderLeft: 1,
			borderRight: 1,
			borderTop: 1,
			borderWidth: 1,
			margin: 1,
			padding: 1
		};

	$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	});

	function getElementStyles( elem ) {
		var key, len,
			style = elem.ownerDocument.defaultView ?
				elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
				elem.currentStyle,
			styles = {};

		if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
			len = style.length;
			while ( len-- ) {
				key = style[ len ];
				if ( typeof style[ key ] === "string" ) {
					styles[ $.camelCase( key ) ] = style[ key ];
				}
			}
		// support: Opera, IE <9
		} else {
			for ( key in style ) {
				if ( typeof style[ key ] === "string" ) {
					styles[ key ] = style[ key ];
				}
			}
		}

		return styles;
	}


	function styleDifference( oldStyle, newStyle ) {
		var diff = {},
			name, value;

		for ( name in newStyle ) {
			value = newStyle[ name ];
			if ( oldStyle[ name ] !== value ) {
				if ( !shorthandStyles[ name ] ) {
					if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
						diff[ name ] = value;
					}
				}
			}
		}

		return diff;
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	$.effects.animateClass = function( value, duration, easing, callback ) {
		var o = $.speed( duration, easing, callback );

		return this.queue( function() {
			var animated = $( this ),
				baseClass = animated.attr( "class" ) || "",
				applyClassChange,
				allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

			// map the animated objects to store the original styles.
			allAnimations = allAnimations.map(function() {
				var el = $( this );
				return {
					el: el,
					start: getElementStyles( this )
				};
			});

			// apply class change
			applyClassChange = function() {
				$.each( classAnimationActions, function(i, action) {
					if ( value[ action ] ) {
						animated[ action + "Class" ]( value[ action ] );
					}
				});
			};
			applyClassChange();

			// map all animated objects again - calculate new styles and diff
			allAnimations = allAnimations.map(function() {
				this.end = getElementStyles( this.el[ 0 ] );
				this.diff = styleDifference( this.start, this.end );
				return this;
			});

			// apply original class
			animated.attr( "class", baseClass );

			// map all animated objects again - this time collecting a promise
			allAnimations = allAnimations.map(function() {
				var styleInfo = this,
					dfd = $.Deferred(),
					opts = $.extend({}, o, {
						queue: false,
						complete: function() {
							dfd.resolve( styleInfo );
						}
					});

				this.el.animate( this.diff, opts );
				return dfd.promise();
			});

			// once all animations have completed:
			$.when.apply( $, allAnimations.get() ).done(function() {

				// set the final class
				applyClassChange();

				// for each animated element,
				// clear all css properties that were animated
				$.each( arguments, function() {
					var el = this.el;
					$.each( this.diff, function(key) {
						el.css( key, "" );
					});
				});

				// this is guarnteed to be there if you use jQuery.speed()
				// it also handles dequeuing the next anim...
				o.complete.call( animated[ 0 ] );
			});
		});
	};

	$.fn.extend({
		_addClass: $.fn.addClass,
		addClass: function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				this._addClass( classNames );
		},

		_removeClass: $.fn.removeClass,
		removeClass: function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				this._removeClass( classNames );
		},

		_toggleClass: $.fn.toggleClass,
		toggleClass: function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {
					// without speed parameter
					return this._toggleClass( classNames, force );
				} else {
					return $.effects.animateClass.call( this,
						(force ? { add: classNames } : { remove: classNames }),
						speed, easing, callback );
				}
			} else {
				// without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		},

		switchClass: function( remove, add, speed, easing, callback) {
			return $.effects.animateClass.call( this, {
				add: add,
				remove: remove
			}, speed, easing, callback );
		}
	});

	})();

	/******************************************************************************/
	/*********************************** EFFECTS **********************************/
	/******************************************************************************/

	(function() {

	$.extend( $.effects, {
		version: "1.10.0",

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			for( var i=0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i;
			for( i=0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					// support: jQuery 1.6.2
					// http://bugs.jquery.com/ticket/9917
					// jQuery 1.6.2 incorrectly returns undefined for any falsy value.
					// We can't differentiate between "" and 0 here, so we just assume
					// empty string since it's likely to be a more common value...
					if ( val === undefined ) {
						val = "";
					}
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if (mode === "toggle") {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Translates a [top,left] array into a baseline value
		// this should be a little more flexible in the future to handle a string & hash
		getBaseline: function( origin, original ) {
			var y, x;
			switch ( origin[ 0 ] ) {
				case "top": y = 0; break;
				case "middle": y = 0.5; break;
				case "bottom": y = 1; break;
				default: y = origin[ 0 ] / original.height;
			}
			switch ( origin[ 1 ] ) {
				case "left": x = 0; break;
				case "center": x = 0.5; break;
				case "right": x = 1; break;
				default: x = origin[ 1 ] / original.width;
			}
			return {
				x: x,
				y: y
			};
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// if the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" )) {
				return element.parent();
			}

			// wrap the element
			var props = {
					width: element.outerWidth(true),
					height: element.outerHeight(true),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css({
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					}),
				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}

			wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

			// transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css({ position: "relative" });
				element.css({ position: "relative" });
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				});
				$.each([ "top", "left", "bottom", "right" ], function(i, pos) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				});
				element.css({
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				});
			}
			element.css(size);

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).focus();
				}
			}


			return element;
		},

		setTransition: function( element, list, factor, value ) {
			value = value || {};
			$.each( list, function( i, x ) {
				var unit = element.cssUnit( x );
				if ( unit[ 0 ] > 0 ) {
					value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
				}
			});
			return value;
		}
	});

	// return an effect options object for the given parameters:
	function _normalizeArguments( effect, options, speed, callback ) {

		// allow passing all options as the first parameter
		if ( $.isPlainObject( effect ) ) {
			options = effect;
			effect = effect.effect;
		}

		// convert to an object
		effect = { effect: effect };

		// catch (effect, null, ...)
		if ( options == null ) {
			options = {};
		}

		// catch (effect, callback)
		if ( $.isFunction( options ) ) {
			callback = options;
			speed = null;
			options = {};
		}

		// catch (effect, speed, ?)
		if ( typeof options === "number" || $.fx.speeds[ options ] ) {
			callback = speed;
			speed = options;
			options = {};
		}

		// catch (effect, options, callback)
		if ( $.isFunction( speed ) ) {
			callback = speed;
			speed = null;
		}

		// add options to effect
		if ( options ) {
			$.extend( effect, options );
		}

		speed = speed || options.duration;
		effect.duration = $.fx.off ? 0 :
			typeof speed === "number" ? speed :
			speed in $.fx.speeds ? $.fx.speeds[ speed ] :
			$.fx.speeds._default;

		effect.complete = callback || options.complete;

		return effect;
	}

	function standardSpeed( speed ) {
		// valid standard speeds
		if ( !speed || typeof speed === "number" || $.fx.speeds[ speed ] ) {
			return true;
		}

		// invalid strings - treat as "normal" speed
		return typeof speed === "string" && !$.effects.effect[ speed ];
	}

	$.fn.extend({
		effect: function( /* effect, options, speed, callback */ ) {
			var args = _normalizeArguments.apply( this, arguments ),
				mode = args.mode,
				queue = args.queue,
				effectMethod = $.effects.effect[ args.effect ];

			if ( $.fx.off || !effectMethod ) {
				// delegate to the original method (e.g., .show()) if possible
				if ( mode ) {
					return this[ mode ]( args.duration, args.complete );
				} else {
					return this.each( function() {
						if ( args.complete ) {
							args.complete.call( this );
						}
					});
				}
			}

			function run( next ) {
				var elem = $( this ),
					complete = args.complete,
					mode = args.mode;

				function done() {
					if ( $.isFunction( complete ) ) {
						complete.call( elem[0] );
					}
					if ( $.isFunction( next ) ) {
						next();
					}
				}

				// if the element is hiddden and mode is hide,
				// or element is visible and mode is show
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
					done();
				} else {
					effectMethod.call( elem[0], args, done );
				}
			}

			return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
		},

		_show: $.fn.show,
		show: function( speed ) {
			if ( standardSpeed( speed ) ) {
				return this._show.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		},

		_hide: $.fn.hide,
		hide: function( speed ) {
			if ( standardSpeed( speed ) ) {
				return this._hide.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		},

		// jQuery core overloads toggle and creates _toggle
		__toggle: $.fn.toggle,
		toggle: function( speed ) {
			if ( standardSpeed( speed ) || typeof speed === "boolean" || $.isFunction( speed ) ) {
				return this.__toggle.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		},

		// helper functions
		cssUnit: function(key) {
			var style = this.css( key ),
				val = [];

			$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
				if ( style.indexOf( unit ) > 0 ) {
					val = [ parseFloat( style ), unit ];
				}
			});
			return val;
		}
	});

	})();

	/******************************************************************************/
	/*********************************** EASING ***********************************/
	/******************************************************************************/

	(function() {

	// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

	var baseEasings = {};

	$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
		baseEasings[ name ] = function( p ) {
			return Math.pow( p, i + 2 );
		};
	});

	$.extend( baseEasings, {
		Sine: function ( p ) {
			return 1 - Math.cos( p * Math.PI / 2 );
		},
		Circ: function ( p ) {
			return 1 - Math.sqrt( 1 - p * p );
		},
		Elastic: function( p ) {
			return p === 0 || p === 1 ? p :
				-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
		},
		Back: function( p ) {
			return p * p * ( 3 * p - 2 );
		},
		Bounce: function ( p ) {
			var pow2,
				bounce = 4;

			while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
			return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
		}
	});

	$.each( baseEasings, function( name, easeIn ) {
		$.easing[ "easeIn" + name ] = easeIn;
		$.easing[ "easeOut" + name ] = function( p ) {
			return 1 - easeIn( 1 - p );
		};
		$.easing[ "easeInOut" + name ] = function( p ) {
			return p < 0.5 ?
				easeIn( p * 2 ) / 2 :
				1 - easeIn( p * -2 + 2 ) / 2;
		};
	});

	})();

	})(jQuery));
	(function( $, undefined ) {

	var rvertical = /up|down|vertical/,
		rpositivemotion = /up|left|vertical|horizontal/;

	$.effects.effect.blind = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			direction = o.direction || "up",
			vertical = rvertical.test( direction ),
			ref = vertical ? "height" : "width",
			ref2 = vertical ? "top" : "left",
			motion = rpositivemotion.test( direction ),
			animation = {},
			show = mode === "show",
			wrapper, distance, margin;

		// if already wrapped, the wrapper's properties are my property. #6245
		if ( el.parent().is( ".ui-effects-wrapper" ) ) {
			$.effects.save( el.parent(), props );
		} else {
			$.effects.save( el, props );
		}
		el.show();
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});

		distance = wrapper[ ref ]();
		margin = parseFloat( wrapper.css( ref2 ) ) || 0;

		animation[ ref ] = show ? distance : 0;
		if ( !motion ) {
			el
				.css( vertical ? "bottom" : "right", 0 )
				.css( vertical ? "top" : "left", "auto" )
				.css({ position: "absolute" });

			animation[ ref2 ] = show ? margin : distance + margin;
		}

		// start at 0 if we are showing
		if ( show ) {
			wrapper.css( ref, 0 );
			if ( ! motion ) {
				wrapper.css( ref2, margin + distance );
			}
		}

		// Animate
		wrapper.animate( animation, {
			duration: o.duration,
			easing: o.easing,
			queue: false,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.bounce = function( o, done ) {
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

			// defaults:
			mode = $.effects.setMode( el, o.mode || "effect" ),
			hide = mode === "hide",
			show = mode === "show",
			direction = o.direction || "up",
			distance = o.distance,
			times = o.times || 5,

			// number of internal animations
			anims = times * 2 + ( show || hide ? 1 : 0 ),
			speed = o.duration / anims,
			easing = o.easing,

			// utility:
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ),
			i,
			upAnim,
			downAnim,

			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;

		// Avoid touching opacity to prevent clearType and PNG issues in IE
		if ( show || hide ) {
			props.push( "opacity" );
		}

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el ); // Create Wrapper

		// default distance for the BIGGEST bounce is the outer Distance / 3
		if ( !distance ) {
			distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
		}

		if ( show ) {
			downAnim = { opacity: 1 };
			downAnim[ ref ] = 0;

			// if we are showing, force opacity 0 and set the initial position
			// then do the "first" animation
			el.css( "opacity", 0 )
				.css( ref, motion ? -distance * 2 : distance * 2 )
				.animate( downAnim, speed, easing );
		}

		// start at the smallest distance if we are hiding
		if ( hide ) {
			distance = distance / Math.pow( 2, times - 1 );
		}

		downAnim = {};
		downAnim[ ref ] = 0;
		// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
		for ( i = 0; i < times; i++ ) {
			upAnim = {};
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

			el.animate( upAnim, speed, easing )
				.animate( downAnim, speed, easing );

			distance = hide ? distance * 2 : distance / 2;
		}

		// Last Bounce when Hiding
		if ( hide ) {
			upAnim = { opacity: 0 };
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

			el.animate( upAnim, speed, easing );
		}

		el.queue(function() {
			if ( hide ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();

	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.clip = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "vertical",
			vert = direction === "vertical",
			size = vert ? "height" : "width",
			position = vert ? "top" : "left",
			animation = {},
			wrapper, animate, distance;

		// Save & Show
		$.effects.save( el, props );
		el.show();

		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
		distance = animate[ size ]();

		// Shift
		if ( show ) {
			animate.css( size, 0 );
			animate.css( position, distance / 2 );
		}

		// Create Animation Object:
		animation[ size ] = show ? distance : 0;
		animation[ position ] = show ? 0 : distance / 2;

		// Animate
		animate.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( !show ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.drop = function( o, done ) {

		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
			animation = {
				opacity: show ? 1 : 0
			},
			distance;

		// Adjust
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );

		distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

		if ( show ) {
			el
				.css( "opacity", 0 )
				.css( ref, motion === "pos" ? -distance : distance );
		}

		// Animation
		animation[ ref ] = ( show ?
			( motion === "pos" ? "+=" : "-=" ) :
			( motion === "pos" ? "-=" : "+=" ) ) +
			distance;

		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.explode = function( o, done ) {

		var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
			cells = rows,
			el = $( this ),
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",

			// show and then visibility:hidden the element before calculating offset
			offset = el.show().css( "visibility", "hidden" ).offset(),

			// width and height of a piece
			width = Math.ceil( el.outerWidth() / cells ),
			height = Math.ceil( el.outerHeight() / rows ),
			pieces = [],

			// loop
			i, j, left, top, mx, my;

		// children animate complete:
		function childComplete() {
			pieces.push( this );
			if ( pieces.length === rows * cells ) {
				animComplete();
			}
		}

		// clone the element for each row and cell.
		for( i = 0; i < rows ; i++ ) { // ===>
			top = offset.top + i * height;
			my = i - ( rows - 1 ) / 2 ;

			for( j = 0; j < cells ; j++ ) { // |||
				left = offset.left + j * width;
				mx = j - ( cells - 1 ) / 2 ;

				// Create a clone of the now hidden main element that will be absolute positioned
				// within a wrapper div off the -left and -top equal to size of our pieces
				el
					.clone()
					.appendTo( "body" )
					.wrap( "<div></div>" )
					.css({
						position: "absolute",
						visibility: "visible",
						left: -j * width,
						top: -i * height
					})

				// select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
					.parent()
					.addClass( "ui-effects-explode" )
					.css({
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					}).animate({
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, o.duration || 500, o.easing, childComplete );
			}
		}

		function animComplete() {
			el.css({
				visibility: "visible"
			});
			$( pieces ).remove();
			if ( !show ) {
				el.hide();
			}
			done();
		}
	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.fade = function( o, done ) {
		var el = $( this ),
			mode = $.effects.setMode( el, o.mode || "toggle" );

		el.animate({
			opacity: mode
		}, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: done
		});
	};

	})( jQuery );
	(function( $, undefined ) {

	$.effects.effect.fold = function( o, done ) {

		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			hide = mode === "hide",
			size = o.size || 15,
			percent = /([0-9]+)%/.exec( size ),
			horizFirst = !!o.horizFirst,
			widthFirst = show !== horizFirst,
			ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
			duration = o.duration / 2,
			wrapper, distance,
			animation1 = {},
			animation2 = {};

		$.effects.save( el, props );
		el.show();

		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		distance = widthFirst ?
			[ wrapper.width(), wrapper.height() ] :
			[ wrapper.height(), wrapper.width() ];

		if ( percent ) {
			size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
		}
		if ( show ) {
			wrapper.css( horizFirst ? {
				height: 0,
				width: size
			} : {
				height: size,
				width: 0
			});
		}

		// Animation
		animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
		animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

		// Animate
		wrapper
			.animate( animation1, duration, o.easing )
			.animate( animation2, duration, o.easing, function() {
				if ( hide ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});

	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.highlight = function( o, done ) {
		var elem = $( this ),
			props = [ "backgroundImage", "backgroundColor", "opacity" ],
			mode = $.effects.setMode( elem, o.mode || "show" ),
			animation = {
				backgroundColor: elem.css( "backgroundColor" )
			};

		if (mode === "hide") {
			animation.opacity = 0;
		}

		$.effects.save( elem, props );

		elem
			.show()
			.css({
				backgroundImage: "none",
				backgroundColor: o.color || "#ffff99"
			})
			.animate( animation, {
				queue: false,
				duration: o.duration,
				easing: o.easing,
				complete: function() {
					if ( mode === "hide" ) {
						elem.hide();
					}
					$.effects.restore( elem, props );
					done();
				}
			});
	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.pulsate = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "show" ),
			show = mode === "show",
			hide = mode === "hide",
			showhide = ( show || mode === "hide" ),

			// showing or hiding leaves of the "last" animation
			anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
			duration = o.duration / anims,
			animateTo = 0,
			queue = elem.queue(),
			queuelen = queue.length,
			i;

		if ( show || !elem.is(":visible")) {
			elem.css( "opacity", 0 ).show();
			animateTo = 1;
		}

		// anims - 1 opacity "toggles"
		for ( i = 1; i < anims; i++ ) {
			elem.animate({
				opacity: animateTo
			}, duration, o.easing );
			animateTo = 1 - animateTo;
		}

		elem.animate({
			opacity: animateTo
		}, duration, o.easing);

		elem.queue(function() {
			if ( hide ) {
				elem.hide();
			}
			done();
		});

		// We just queued up "anims" animations, we need to put them next in the queue
		if ( queuelen > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		elem.dequeue();
	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.puff = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "hide" ),
			hide = mode === "hide",
			percent = parseInt( o.percent, 10 ) || 150,
			factor = percent / 100,
			original = {
				height: elem.height(),
				width: elem.width(),
				outerHeight: elem.outerHeight(),
				outerWidth: elem.outerWidth()
			};

		$.extend( o, {
			effect: "scale",
			queue: false,
			fade: true,
			mode: mode,
			complete: done,
			percent: hide ? percent : 100,
			from: hide ?
				original :
				{
					height: original.height * factor,
					width: original.width * factor,
					outerHeight: original.outerHeight * factor,
					outerWidth: original.outerWidth * factor
				}
		});

		elem.effect( o );
	};

	$.effects.effect.scale = function( o, done ) {

		// Create element
		var el = $( this ),
			options = $.extend( true, {}, o ),
			mode = $.effects.setMode( el, o.mode || "effect" ),
			percent = parseInt( o.percent, 10 ) ||
				( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
			direction = o.direction || "both",
			origin = o.origin,
			original = {
				height: el.height(),
				width: el.width(),
				outerHeight: el.outerHeight(),
				outerWidth: el.outerWidth()
			},
			factor = {
				y: direction !== "horizontal" ? (percent / 100) : 1,
				x: direction !== "vertical" ? (percent / 100) : 1
			};

		// We are going to pass this effect to the size effect:
		options.effect = "size";
		options.queue = false;
		options.complete = done;

		// Set default origin and restore for show/hide
		if ( mode !== "effect" ) {
			options.origin = origin || ["middle","center"];
			options.restore = true;
		}

		options.from = o.from || ( mode === "show" ? {
			height: 0,
			width: 0,
			outerHeight: 0,
			outerWidth: 0
		} : original );
		options.to = {
			height: original.height * factor.y,
			width: original.width * factor.x,
			outerHeight: original.outerHeight * factor.y,
			outerWidth: original.outerWidth * factor.x
		};

		// Fade option to support puff
		if ( options.fade ) {
			if ( mode === "show" ) {
				options.from.opacity = 0;
				options.to.opacity = 1;
			}
			if ( mode === "hide" ) {
				options.from.opacity = 1;
				options.to.opacity = 0;
			}
		}

		// Animate
		el.effect( options );

	};

	$.effects.effect.size = function( o, done ) {

		// Create element
		var original, baseline, factor,
			el = $( this ),
			props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

			// Always restore
			props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

			// Copy for children
			props2 = [ "width", "height", "overflow" ],
			cProps = [ "fontSize" ],
			vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
			hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

			// Set options
			mode = $.effects.setMode( el, o.mode || "effect" ),
			restore = o.restore || mode !== "effect",
			scale = o.scale || "both",
			origin = o.origin || [ "middle", "center" ],
			position = el.css( "position" ),
			props = restore ? props0 : props1,
			zero = {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};

		if ( mode === "show" ) {
			el.show();
		}
		original = {
			height: el.height(),
			width: el.width(),
			outerHeight: el.outerHeight(),
			outerWidth: el.outerWidth()
		};

		if ( o.mode === "toggle" && mode === "show" ) {
			el.from = o.to || zero;
			el.to = o.from || original;
		} else {
			el.from = o.from || ( mode === "show" ? zero : original );
			el.to = o.to || ( mode === "hide" ? zero : original );
		}

		// Set scaling factor
		factor = {
			from: {
				y: el.from.height / original.height,
				x: el.from.width / original.width
			},
			to: {
				y: el.to.height / original.height,
				x: el.to.width / original.width
			}
		};

		// Scale the css box
		if ( scale === "box" || scale === "both" ) {

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( vProps );
				el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				props = props.concat( hProps );
				el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
				el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
			}
		}

		// Scale the content
		if ( scale === "content" || scale === "both" ) {

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( cProps ).concat( props2 );
				el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
			}
		}

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );
		el.css( "overflow", "hidden" ).css( el.from );

		// Adjust
		if (origin) { // Calculate baseline shifts
			baseline = $.effects.getBaseline( origin, original );
			el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
			el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
			el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
			el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
		}
		el.css( el.from ); // set top & left

		// Animate
		if ( scale === "content" || scale === "both" ) { // Scale the children

			// Add margins/font-size
			vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
			hProps = hProps.concat([ "marginLeft", "marginRight" ]);
			props2 = props0.concat(vProps).concat(hProps);

			el.find( "*[width]" ).each( function(){
				var child = $( this ),
					c_original = {
						height: child.height(),
						width: child.width(),
						outerHeight: child.outerHeight(),
						outerWidth: child.outerWidth()
					};
				if (restore) {
					$.effects.save(child, props2);
				}

				child.from = {
					height: c_original.height * factor.from.y,
					width: c_original.width * factor.from.x,
					outerHeight: c_original.outerHeight * factor.from.y,
					outerWidth: c_original.outerWidth * factor.from.x
				};
				child.to = {
					height: c_original.height * factor.to.y,
					width: c_original.width * factor.to.x,
					outerHeight: c_original.height * factor.to.y,
					outerWidth: c_original.width * factor.to.x
				};

				// Vertical props scaling
				if ( factor.from.y !== factor.to.y ) {
					child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
					child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
				}

				// Horizontal props scaling
				if ( factor.from.x !== factor.to.x ) {
					child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
					child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
				}

				// Animate children
				child.css( child.from );
				child.animate( child.to, o.duration, o.easing, function() {

					// Restore children
					if ( restore ) {
						$.effects.restore( child, props2 );
					}
				});
			});
		}

		// Animate
		el.animate( el.to, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( el.to.opacity === 0 ) {
					el.css( "opacity", el.from.opacity );
				}
				if( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				if ( !restore ) {

					// we need to calculate our new positioning based on the scaling
					if ( position === "static" ) {
						el.css({
							position: "relative",
							top: el.to.top,
							left: el.to.left
						});
					} else {
						$.each([ "top", "left" ], function( idx, pos ) {
							el.css( pos, function( _, str ) {
								var val = parseInt( str, 10 ),
									toRef = idx ? el.to.left : el.to.top;

								// if original was "auto", recalculate the new value from wrapper
								if ( str === "auto" ) {
									return toRef + "px";
								}

								return val + toRef + "px";
							});
						});
					}
				}

				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.shake = function( o, done ) {

		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "effect" ),
			direction = o.direction || "left",
			distance = o.distance || 20,
			times = o.times || 3,
			anims = times * 2 + 1,
			speed = Math.round(o.duration/anims),
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			animation = {},
			animation1 = {},
			animation2 = {},
			i,

			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );

		// Animation
		animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
		animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
		animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

		// Animate
		el.animate( animation, speed, o.easing );

		// Shakes
		for ( i = 1; i < times; i++ ) {
			el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
		}
		el
			.animate( animation1, speed, o.easing )
			.animate( animation, speed / 2, o.easing )
			.queue(function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});

		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();

	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.slide = function( o, done ) {

		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
			mode = $.effects.setMode( el, o.mode || "show" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			distance,
			animation = {};

		// Adjust
		$.effects.save( el, props );
		el.show();
		distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

		$.effects.createWrapper( el ).css({
			overflow: "hidden"
		});

		if ( show ) {
			el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
		}

		// Animation
		animation[ ref ] = ( show ?
			( positiveMotion ? "+=" : "-=") :
			( positiveMotion ? "-=" : "+=")) +
			distance;

		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};

	})(jQuery);
	(function( $, undefined ) {

	$.effects.effect.transfer = function( o, done ) {
		var elem = $( this ),
			target = $( o.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $("body"),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop ,
				left: endPosition.left - fixLeft ,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = elem.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( document.body )
				.addClass( o.className )
				.css({
					top: startPosition.top - fixTop ,
					left: startPosition.left - fixLeft ,
					height: elem.innerHeight(),
					width: elem.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				})
				.animate( animation, o.duration, o.easing, function() {
					transfer.remove();
					done();
				});
	};

	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*jslint browser: true*/
	/*jslint jquery: true*/

	/*
	 * jQuery Hotkeys Plugin
	 * Copyright 2010, John Resig
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Based upon the plugin by Tzury Bar Yochay:
	 * https://github.com/tzuryby/jquery.hotkeys
	 *
	 * Original idea by:
	 * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/
	 */

	/*
	 * One small change is: now keys are passed by object { keys: '...' }
	 * Might be useful, when you want to pass some other data to your handler
	 */

	(function(jQuery) {

	  jQuery.hotkeys = {
	    version: "0.8",

	    specialKeys: {
	      8: "backspace",
	      9: "tab",
	      10: "return",
	      13: "return",
	      16: "shift",
	      17: "ctrl",
	      18: "alt",
	      19: "pause",
	      20: "capslock",
	      27: "esc",
	      32: "space",
	      33: "pageup",
	      34: "pagedown",
	      35: "end",
	      36: "home",
	      37: "left",
	      38: "up",
	      39: "right",
	      40: "down",
	      45: "insert",
	      46: "del",
	      59: ";",
	      61: "=",
	      96: "0",
	      97: "1",
	      98: "2",
	      99: "3",
	      100: "4",
	      101: "5",
	      102: "6",
	      103: "7",
	      104: "8",
	      105: "9",
	      106: "*",
	      107: "+",
	      109: "-",
	      110: ".",
	      111: "/",
	      112: "f1",
	      113: "f2",
	      114: "f3",
	      115: "f4",
	      116: "f5",
	      117: "f6",
	      118: "f7",
	      119: "f8",
	      120: "f9",
	      121: "f10",
	      122: "f11",
	      123: "f12",
	      144: "numlock",
	      145: "scroll",
	      173: "-",
	      186: ";",
	      187: "=",
	      188: ",",
	      189: "-",
	      190: ".",
	      191: "/",
	      192: "`",
	      219: "[",
	      220: "\\",
	      221: "]",
	      222: "'"
	    },

	    shiftNums: {
	      "`": "~",
	      "1": "!",
	      "2": "@",
	      "3": "#",
	      "4": "$",
	      "5": "%",
	      "6": "^",
	      "7": "&",
	      "8": "*",
	      "9": "(",
	      "0": ")",
	      "-": "_",
	      "=": "+",
	      ";": ": ",
	      "'": "\"",
	      ",": "<",
	      ".": ">",
	      "/": "?",
	      "\\": "|"
	    },

	    // excludes: button, checkbox, file, hidden, image, password, radio, reset, search, submit, url
	    textAcceptingInputTypes: [
	      "text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime",
	      "datetime-local", "search", "color", "tel"],

	    // default input types not to bind to unless bound directly
	    textInputTypes: /textarea|input|select/i,

	    options: {
	      filterInputAcceptingElements: true,
	      filterTextInputs: true,
	      filterContentEditable: true
	    }
	  };

	  function keyHandler(handleObj) {
	    if (typeof handleObj.data === "string") {
	      handleObj.data = {
	        keys: handleObj.data
	      };
	    }

	    // Only care when a possible input has been specified
	    if (!handleObj.data || !handleObj.data.keys || typeof handleObj.data.keys !== "string") {
	      return;
	    }

	    var origHandler = handleObj.handler,
	      keys = handleObj.data.keys.toLowerCase().split(" ");

	    handleObj.handler = function(event) {
	      //      Don't fire in text-accepting inputs that we didn't directly bind to
	      if (this !== event.target &&
	        (jQuery.hotkeys.options.filterInputAcceptingElements &&
	          jQuery.hotkeys.textInputTypes.test(event.target.nodeName) ||
	          (jQuery.hotkeys.options.filterContentEditable && jQuery(event.target).attr('contenteditable')) ||
	          (jQuery.hotkeys.options.filterTextInputs &&
	            jQuery.inArray(event.target.type, jQuery.hotkeys.textAcceptingInputTypes) > -1))) {
	        return;
	      }

	      var special = event.type !== "keypress" && jQuery.hotkeys.specialKeys[event.which],
	        character = String.fromCharCode(event.which).toLowerCase(),
	        modif = "",
	        possible = {};

	      jQuery.each(["alt", "ctrl", "shift"], function(index, specialKey) {

	        if (event[specialKey + 'Key'] && special !== specialKey) {
	          modif += specialKey + '+';
	        }
	      });

	      // metaKey is triggered off ctrlKey erronously
	      if (event.metaKey && !event.ctrlKey && special !== "meta") {
	        modif += "meta+";
	      }

	      if (event.metaKey && special !== "meta" && modif.indexOf("alt+ctrl+shift+") > -1) {
	        modif = modif.replace("alt+ctrl+shift+", "hyper+");
	      }

	      if (special) {
	        possible[modif + special] = true;
	      }
	      else {
	        possible[modif + character] = true;
	        possible[modif + jQuery.hotkeys.shiftNums[character]] = true;

	        // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
	        if (modif === "shift+") {
	          possible[jQuery.hotkeys.shiftNums[character]] = true;
	        }
	      }

	      for (var i = 0, l = keys.length; i < l; i++) {
	        if (possible[keys[i]]) {
	          return origHandler.apply(this, arguments);
	        }
	      }
	    };
	  }

	  jQuery.each(["keydown", "keyup", "keypress"], function() {
	    jQuery.event.special[this] = {
	      add: keyHandler
	    };
	  });

	})(jQuery || this.jQuery || window.jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * jQuery Iframe Transport Plugin 1.4
	 * https://github.com/blueimp/jQuery-File-Upload
	 *
	 * Copyright 2011, Sebastian Tschan
	 * https://blueimp.net
	 *
	 * Licensed under the MIT license:
	 * http://www.opensource.org/licenses/MIT
	 */

	/*jslint unparam: true, nomen: true */
	/*global define, window, document */

	(function (factory) {
	    'use strict';
	    if (true) {
	        // Register as an anonymous AMD module:
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(62)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        // Browser globals:
	        factory(window.jQuery);
	    }
	}(function ($) {
	    'use strict';

	    // Helper variable to create unique names for the transport iframes:
	    var counter = 0;

	    // The iframe transport accepts three additional options:
	    // options.fileInput: a jQuery collection of file input fields
	    // options.paramName: the parameter name for the file form data,
	    //  overrides the name property of the file input field(s),
	    //  can be a string or an array of strings.
	    // options.formData: an array of objects with name and value properties,
	    //  equivalent to the return data of .serializeArray(), e.g.:
	    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]
	    $.ajaxTransport('iframe', function (options) {
	        if (options.async && (options.type === 'POST' || options.type === 'GET')) {
	            var form,
	                iframe;
	            return {
	                send: function (_, completeCallback) {
	                    form = $('<form style="display:none;"></form>');
	                    // javascript:false as initial iframe src
	                    // prevents warning popups on HTTPS in IE6.
	                    // IE versions below IE8 cannot set the name property of
	                    // elements that have already been added to the DOM,
	                    // so we set the name along with the iframe HTML markup:
	                    iframe = $(
	                        '<iframe src="javascript:false;" name="iframe-transport-' +
	                            (counter += 1) + '"></iframe>'
	                    ).bind('load', function () {
	                        var fileInputClones,
	                            paramNames = $.isArray(options.paramName) ?
	                                    options.paramName : [options.paramName];
	                        iframe
	                            .unbind('load')
	                            .bind('load', function () {
	                                var response;
	                                // Wrap in a try/catch block to catch exceptions thrown
	                                // when trying to access cross-domain iframe contents:
	                                try {
	                                    response = iframe.contents();
	                                    // Google Chrome and Firefox do not throw an
	                                    // exception when calling iframe.contents() on
	                                    // cross-domain requests, so we unify the response:
	                                    if (!response.length || !response[0].firstChild) {
	                                        throw new Error();
	                                    }
	                                } catch (e) {
	                                    response = undefined;
	                                }
	                                // The complete callback returns the
	                                // iframe content document as response object:
	                                completeCallback(
	                                    200,
	                                    'success',
	                                    {'iframe': response}
	                                );
	                                // Fix for IE endless progress bar activity bug
	                                // (happens on form submits to iframe targets):
	                                $('<iframe src="javascript:false;"></iframe>')
	                                    .appendTo(form);
	                                form.remove();
	                            });
	                        form
	                            .prop('target', iframe.prop('name'))
	                            .prop('action', options.url)
	                            .prop('method', options.type);
	                        if (options.formData) {
	                            $.each(options.formData, function (index, field) {
	                                $('<input type="hidden"/>')
	                                    .prop('name', field.name)
	                                    .val(field.value)
	                                    .appendTo(form);
	                            });
	                        }
	                        if (options.fileInput && options.fileInput.length &&
	                                options.type === 'POST') {
	                            fileInputClones = options.fileInput.clone();
	                            // Insert a clone for each file input field:
	                            options.fileInput.after(function (index) {
	                                return fileInputClones[index];
	                            });
	                            if (options.paramName) {
	                                options.fileInput.each(function (index) {
	                                    $(this).prop(
	                                        'name',
	                                        paramNames[index] || options.paramName
	                                    );
	                                });
	                            }
	                            // Appending the file input fields to the hidden form
	                            // removes them from their original location:
	                            form
	                                .append(options.fileInput)
	                                .prop('enctype', 'multipart/form-data')
	                                // enctype must be set as encoding for IE:
	                                .prop('encoding', 'multipart/form-data');
	                        }
	                        form.submit();
	                        // Insert the file input fields at their original location
	                        // by replacing the clones with the originals:
	                        if (fileInputClones && fileInputClones.length) {
	                            options.fileInput.each(function (index, input) {
	                                var clone = $(fileInputClones[index]);
	                                $(input).prop('name', clone.prop('name'));
	                                clone.replaceWith(input);
	                            });
	                        }
	                    });
	                    form.append(iframe).appendTo(document.body);
	                },
	                abort: function () {
	                    if (iframe) {
	                        // javascript:false as iframe src aborts the request
	                        // and prevents warning popups on HTTPS in IE6.
	                        // concat is used to avoid the "Script URL" JSLint error:
	                        iframe
	                            .unbind('load')
	                            .prop('src', 'javascript'.concat(':false;'));
	                    }
	                    if (form) {
	                        form.remove();
	                    }
	                }
	            };
	        }
	    });

	    // The iframe transport returns the iframe content document as response.
	    // The following adds converters from iframe to text, json, html, and script:
	    $.ajaxSetup({
	        converters: {
	            'iframe text': function (iframe) {
	                return $(iframe[0].body).text();
	            },
	            'iframe json': function (iframe) {
	                return $.parseJSON($(iframe[0].body).text());
	            },
	            'iframe html': function (iframe) {
	                return $(iframe[0].body).html();
	            },
	            'iframe script': function (iframe) {
	                return $.globalEval($(iframe[0].body).text());
	            }
	        }
	    });

	}));


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 * jQuery JSON Plugin
	 * version: 2.3 (2011-09-17)
	 *
	 * This document is licensed as free software under the terms of the
	 * MIT License: http://www.opensource.org/licenses/mit-license.php
	 *
	 * Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
	 * website's http://www.json.org/json2.js, which proclaims:
	 * "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
	 * I uphold.
	 *
	 * It is also influenced heavily by MochiKit's serializeJSON, which is
	 * copyrighted 2005 by Bob Ippolito.
	 */

	(function ($) {

		var	escapeable = /["\\\x00-\x1f\x7f-\x9f]/g,
			meta = {
				'\b': '\\b',
				'\t': '\\t',
				'\n': '\\n',
				'\f': '\\f',
				'\r': '\\r',
				'"' : '\\"',
				'\\': '\\\\'
			};

		/**
		 * jQuery.toJSON
		 * Converts the given argument into a JSON respresentation.
		 *
		 * @param o {Mixed} The json-serializble *thing* to be converted
		 *
		 * If an object has a toJSON prototype, that will be used to get the representation.
		 * Non-integer/string keys are skipped in the object, as are keys that point to a
		 * function.
		 *
		 */
		$.toJSON = typeof JSON === 'object' && JSON.stringify
			? JSON.stringify
			: function( o ) {

			if ( o === null ) {
				return 'null';
			}

			var type = typeof o;

			if ( type === 'undefined' ) {
				return undefined;
			}
			if ( type === 'number' || type === 'boolean' ) {
				return '' + o;
			}
			if ( type === 'string') {
				return $.quoteString( o );
			}
			if ( type === 'object' ) {
				if ( typeof o.toJSON === 'function' ) {
					return $.toJSON( o.toJSON() );
				}
				if ( o.constructor === Date ) {
					var	month = o.getUTCMonth() + 1,
						day = o.getUTCDate(),
						year = o.getUTCFullYear(),
						hours = o.getUTCHours(),
						minutes = o.getUTCMinutes(),
						seconds = o.getUTCSeconds(),
						milli = o.getUTCMilliseconds();

					if ( month < 10 ) {
						month = '0' + month;
					}
					if ( day < 10 ) {
						day = '0' + day;
					}
					if ( hours < 10 ) {
						hours = '0' + hours;
					}
					if ( minutes < 10 ) {
						minutes = '0' + minutes;
					}
					if ( seconds < 10 ) {
						seconds = '0' + seconds;
					}
					if ( milli < 100 ) {
						milli = '0' + milli;
					}
					if ( milli < 10 ) {
						milli = '0' + milli;
					}
					return '"' + year + '-' + month + '-' + day + 'T' +
						hours + ':' + minutes + ':' + seconds +
						'.' + milli + 'Z"';
				}
				if ( o.constructor === Array ) {
					var ret = [];
					for ( var i = 0; i < o.length; i++ ) {
						ret.push( $.toJSON( o[i] ) || 'null' );
					}
					return '[' + ret.join(',') + ']';
				}
				var	name,
					val,
					pairs = [];
				for ( var k in o ) {
					type = typeof k;
					if ( type === 'number' ) {
						name = '"' + k + '"';
					} else if (type === 'string') {
						name = $.quoteString(k);
					} else {
						// Keys must be numerical or string. Skip others
						continue;
					}
					type = typeof o[k];

					if ( type === 'function' || type === 'undefined' ) {
						// Invalid values like these return undefined
						// from toJSON, however those object members
						// shouldn't be included in the JSON string at all.
						continue;
					}
					val = $.toJSON( o[k] );
					pairs.push( name + ':' + val );
				}
				return '{' + pairs.join( ',' ) + '}';
			}
		};

		/**
		 * jQuery.evalJSON
		 * Evaluates a given piece of json source.
		 *
		 * @param src {String}
		 */
		$.evalJSON = typeof JSON === 'object' && JSON.parse
			? JSON.parse
			: function( src ) {
			return (new Function('return ' + src))();
		};

		/**
		 * jQuery.secureEvalJSON
		 * Evals JSON in a way that is *more* secure.
		 *
		 * @param src {String}
		 */
		$.secureEvalJSON = typeof JSON === 'object' && JSON.parse
			? JSON.parse
			: function( src ) {

			var filtered = 
				src
				.replace( /\\["\\\/bfnrtu]/g, '@' )
				.replace( /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
				.replace( /(?:^|:|,)(?:\s*\[)+/g, '');

			if ( /^[\],:{}\s]*$/.test( filtered ) ) {
				return (new Function('return ' + src))();
			} else {
				throw new SyntaxError( 'Error parsing JSON, source is not valid.' );
			}
		};

		/**
		 * jQuery.quoteString
		 * Returns a string-repr of a string, escaping quotes intelligently.
		 * Mostly a support function for toJSON.
		 * Examples:
		 * >>> jQuery.quoteString('apple')
		 * "apple"
		 *
		 * >>> jQuery.quoteString('"Where are we going?", she asked.')
		 * "\"Where are we going?\", she asked."
		 */
		$.quoteString = function( string ) {
			if ( string.match( escapeable ) ) {
				return '"' + string.replace( escapeable, function( a ) {
					var c = meta[a];
					if ( typeof c === 'string' ) {
						return c;
					}
					c = a.charCodeAt();
					return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
				}) + '"';
			}
			return '"' + string + '"';
		};

	})( jQuery );

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/**
	 * jquery.LavaLamp v1.3.5 - light up your menus with fluid, jQuery powered animations.
	 *
	 * Requires jQuery v1.2.3 or better from http://jquery.com
	 * Tested on jQuery 1.4.4, 1.3.2 and 1.2.6
	 *
	 * http://nixbox.com/projects/jquery-lavalamp/
	 *
	 * Copyright (c) 2008, 2009, 2010 Jolyon Terwilliger, jolyon@nixbox.com
	 * Source code Copyright (c) 2008, 2009, 2010
	 * Dual licensed under the MIT and GPL licenses:
	 * http://www.opensource.org/licenses/mit-license.php
	 * http://www.gnu.org/licenses/gpl.html
	 *
	 * credits to Guillermo Rauch and Ganeshji Marwaha (gmarwaha.com) for previous editions
	 *
	 * Version: 1.0 - adapted for jQuery 1.2.x series
	 * Version: 1.1 - added linum parameter
	 * Version: 1.2 - modified to support vertical resizing of elements
	 * Version: 1.3 - enhanced automatic <li> item hi-lighting - will attempt to
	 *					lock onto li > a element with href closest to selected
	 *					window.location
	 *			 	- click always returns 'true' by default, for standard link follow through.
	 *
	 * Version: 1.3.1 - verified for use with jQuery 1.3 - should still work with 1.2.x series
	 *				- changed linum parameter to startItem for clarity
	 *				- improved slide-in accuracy for .back elements with borders
	 *				- changed .current class to .selectedLava for clarity and improved
	 *					support
	 *				- appended 'Lava' to all internal class names to avoid conflicts
	 *				- fixed bug applying selectedLava class to elements with matching
	 *					location.hash
	 *				- now supports jquery.compat plugin for cross-library support
	 *				- performance improvements
	 *				- added new options:
	 *				autoReturn: true - if set to false, hover will not return to last selected
	 *									item upon list mouseout.
	 *				returnDelay: 0 - if set, will delay auto-return feature specified # of
	 *									milliseconds.
	 *				setOnClick: true - if set to false, hover will return to default element
	 *									regardless of click event.
	 *				homeLeft: 0, homeTop: 0 - if either set to non zero value, absolute
	 *									positioned li element with class .homeLava is 
	 *									prepended to list for homing feature.
	 *				homeWidth: 0, homeHeight: 0 - if set, are used for creation of li.homeLava
	 *									element.
	 *				returnHome: false - if set along with homeLeft or homeTop, lavalamp hover
	 *									will always return to li.home after click.
	 *
	 * Version: 1.3.2 - fixed: stray $ references inside the plugin to work with
	 *					jQuery.noConflict() properly - thanks Colin.
	 *
	 * Version: 1.3.3 - fixed: added closure with null passed argument for move() command in
	 * 					returnDelay to fix errors some were seeing - thanks to Michel and 
	 *					Richard for noticing this.
	 *
	 *					fixed: changed mouseover/out events to mouseenter/leave to fix jerky
	 *					animation problem when using excessive margins instead of padding.  
	 *					Thanks to Thomas for the solution and Chris for demonstrating the problem.
	 *					* requires jQuery 1.3 or better
	 *
	 *					enhanced: added 'noLava' class detection to prevent LavaLamp effect
	 *					application to LI elements with this class. This feature allows you to
	 *					create submenus - for details, see examples at
	 *					http://nixboxdesigns.com/demos/jquery-lavalamp-demos.html
	 *
	 *					enhanced: modified to better automatically find default location for 
	 *					relative links. Thanks to Harold for testing and finding this bug.
	 *
	 * Version: 1.3.4 - major overhaul on practically everything:
	 *					enhanced: added autoResize option; see examples below.
	 *					enhanced: better automatic default item selection and URI resolution,
	 *					better support for returnHome and returnDelay, refined internal variable
	 *					usage and test to be as lean as possible
	 *					fixed: backLava hover element now exactly covers the destination LI dimensions.
	 *					fixed: changed use of mouseleave/mouseenter to bind events so will work with
	 *							jQuery 1.2.2 onward.
	 *					fixed: proper closure on instance - should finally play nice with other libraries
	 *					fixed: proper quotes around all object element labels.
	 *					enhanced: behaves more like a plugin should and now automatically adds proper
	 * 							position and display CSS tags to the backLava element and parent container
	 *							if absent.
	 *
	 * Version: 1.3.5 - new options:
	 * 						target: 'li' - plain element to target to receive hover events.
	 *						container: '' - plain element to create for the hover .backLava and .homeLava
	 *							elements. If left blank (default) same value as target option is used.
	 *						includeMargins: false - set to true to expand the hover element dimensions to 
	 *							include the margins of the target element.
	 *				    changed: the backLava hover element now has all margins and padding manually set to 
	 *							zero to allow proper resizing of hover when used with custom target, container  
	 * 							and includeMargins options. While this workaround has no effect with the site
	 *							demos, it potentially may affect your current implementation. If you do 
	 *							experience problems try re-adjusting the CSS padding and margins for 
	 *							your target elements.
	 *
	 *
	 * Examples and usage:
	 *
	 * The HTML markup used to build the menu can be as simple as...
	 *
	 *       <ul class="lavaLamp">
	 *           <li><a href="#">Phone Home</a></li>
	 *           <li><a href="#">Make Contact</a></li>
	 *           <li><a href="#">Board Ship</a></li>
	 *           <li><a href="#">Fly to Venus</a></li>
	 *       </ul>
	 *
	 * Additional Styles must be added to make the LavaLamp perform properly, to wit:
	 *
	 * <style>
	 * ul.lavaLamp {
	 *   padding:5px;  // use some minimal padding to account for sloppy mouse movements
	 * }
	 * ul.lavaLamp li.backLava {
	 *   z-index:3;   // must be less than z-index of A tags within the LI elements
	 * }
	 * ul.lavaLamp li a {
	 *  display:block;  // helps with positioning the link within the LI element
	 *  z-index:10;     // or must be higher than li.backLava z-index
	 * }
	 * </style>
	 *
	 * Once you have included the basic styles above, you will need to include 
	 * the jQuery library, easing plugin (optional) and the this LavaLamp plugin.
	 *
	 * jQuery Easing Library 1.3 available here:  http://plugins.jquery.com/project/Easing
	 * 
	 * Example LavaLamp initializing statement:
	 * $(function() { $("ul.lavaLamp").lavaLamp({ fx: "easeOutBack", speed: 700}) });
	 * finds all UL elements in the document with the class of 'lavaLamp' and attaches the 
	 * LavaLamp plugin using an easing library fx of OutBack and an animate speed of 
	 * 700 milliseconds or 7/10ths of a second.
	 *
	 *
	 * List of Parameters
	 *
	 * @param target - default: 'li' 
	 * valid selector for target elements to receive hover effect.
	 *
	 * Example:
	 * jQuery("div#article").lavaLamp({ target:'p' });
	 * assigns all p elements under div#article to receive lavaLamp hover events.
	 *
	 * @param container - default: '' (empty string) 
	 * DOM element to create for the hover element. If container is empty, LavaLamp
	 * will assume it is the same as the target option.
	 *
	 * Example:
	 * jQuery("div#article").lavaLamp({ container:'p' });
	 * creates a p element under div#article to act as the animated hover container, and optionally the
	 * home container, if homing options are enabled
	 * use in combination with 'target' option for best results (see above)
	 *
	 * @param fx - default: 'swing'
	 * selects the easing formula for the animation - requires the jQuery Easing library 
	 * to be loaded for additional effects
	 * 
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ fx: "easeOutElastic" });
	 * animates the backLava element using the OutElastic formula
	 * 
	 * @param speed - default: 500
	 * sets animation speed in milliseconds
	 * 
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ speed: 1000 });
	 * sets the animation speed to one second.
	 * 
	 * @param click - default: function() { return true; }
	 * Callback to be executed when the menu item is clicked. The 'event' object and source target
	 * DOM element will be passed in as arguments so you can use them in your function.
	 * 
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ click: function(event, menuItem) {
	 *		alert(event+el);
	 *		return false;
	 * } });
	 *
	 * causes the browser to display an alert message of the variables passed and 
	 * return false aborts any other click events on child items, including not 
	 * following any links contained within the target
	 *
	 * @param startItem - default: 'no'
	 * specifies the number target element as default, starting with 0 for the first element
	 * Used to manually set the default lavaLamp hi-light on load.
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ startItem: 2 });
	 * selects the third element in the list as default location for backLava
	 *
	 * @param includeMargins - default: false
	 * expands the hover .backLava element to include the margins of the target element.
	 * Best used in combination with the target and container options.
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ includeMargins: true });
	 * expands the hover .backLava element dimentions to include the margins of all
	 * target elements inside ul.lavaLamp.
	 *
	 * @param autoReturn - default: true
	 * defines whether the backLava hover should return to the last selectedLava element
	 * upon mouseleave.
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ autoReturn: false });
	 * turns off the autoReturn feature - backLava element will stay on the last element
	 * that you hovered over.
	 *
	 * @param returnDelay - default: 0
	 * how many milliseconds to wait before returning the backLava element to the last
	 * selected element.  Only works if autoReturn is set to true (default setting)
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ returnDelay: 1000 });
	 * waits one second after mouseleave event before returning to the last selected
	 * element.
	 *
	 * @param setOnClick - default: true
	 * defines whether a clicked element should receive the selectLava class and become the
	 * most recently selected element
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ setOnClick:false });
	 * disables selecting of elements once clicked - after you leave the parent list element
	 * the backLava will return to the original default element the page was loaded with.
	 *
	 * @param homeTop - default: 0
	 * @param homeLeft - default: 0
	 * @param homeHeight - default: 0
	 * @param homeWidth - default: 0
	 * allows you to define an independent 'home' element where the backLava defaults to or can
	 * be sent to. This can be used to define a unique starting and/or resting place for the 
	 * backLava upon leaving the parent element.
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ homeTop:-100, homeLeft:0, homeHeight:20, homeWidth:600 });
	 * creates a home element 100 pixels above the parent container with a height of 20px and
	 * width of 600px.  If the parent element has CSS of overflow:hidden, this can provide
	 * an interesting fly-in effect
	 *
	 * @param returnHome - default:false
	 * adjusts behavior of the backLava element when the mouse leaves the parent container. 
	 * the default behavior of 'false' causes the backLava element to stay on the active menu 
	 * items after it is first triggered. this feature respects the returnDelay parameter, if set.
	 * this feature overrides the autoReturn parameter.
	 *
	 * Example:
	 * jQuery("ul.lavaLamp").lavaLamp({ returnHome:true });
	 * causes the backLava element to always return to the homeLava position after 
	 * mouse leaves the parent container.  this can be manually triggered by running 
	 * the command jQuery("ul.lavaLamp").mouseover();
	 *
	 * @param autoResize - default:false
	 * triggers the selectedLava mouseenter event when the window is resized 
	 * setting autoResize to true causes the backLava element to reposition and change dimensions
	 * if the resizing the screen changes the shape of the lavaLamp. Default is false for efficiency 
	 * as this feature is new and seldom needed for stock installs.
	 *
	 * Example:
	 * jQuery('div#articles').lavaLamp({target:'p',autoSize:true});
	 * causes the backLava element to resize and reposition to the p.selectedLava position 
	 * and dimensions when the window resizes.
	 *
	 */

	//console.log();
	(function($) {
	jQuery.fn.lavaLamp = function(o) {
		o = $.extend({
					'target': 'li',
					'container': '',
					'fx': 'swing',
					'speed': 500, 
					'click': function(){return true}, 
					'startItem': '',
					'includeMargins': false,
					'autoReturn': true,
					'returnDelay': 0,
					'setOnClick': true,
					'homeTop':0,
					'homeLeft':0,
					'homeWidth':0,
					'homeHeight':0,
					'returnHome':false,
					'autoResize':false
					}, 
				o || {});

		// parseInt for easy mathing
		function getInt(arg) {
			var myint = parseInt(arg);
			return (isNaN(myint)? 0: myint);
		}

		if (o.container == '')
			o.container = o.target;

		if (o.autoResize)
			$(window).resize(function(){
				$(o.target+'.selectedLava').trigger('mouseenter');
			});

		return this.each(function() {
			// ensures parent UL or OL element has some positioning
			if ($(this).css('position')=='static')
				$(this).css('position','relative');

			// create homeLava element if origin dimensions set
			if (o.homeTop || o.homeLeft) { 
				var $home = $('<'+o.container+' class="homeLava"></'+o.container+'>').css({ 'left':o.homeLeft, 'top':o.homeTop, 'width':o.homeWidth, 'height':o.homeHeight, 'position':'absolute','display':'block' });
				$(this).prepend($home);
			}

			var path = location.pathname + location.search + location.hash, $selected, $back, $lt = $(o.target+'[class!=noLava]', this), delayTimer, bx=0, by=0, mh=0, mw=0, ml=0, mt=0;

			// start $selected default with CSS class 'selectedLava'
			$selected = $(o.target+'.selectedLava', this);
			
			// override $selected if startItem is set
			if (o.startItem != '')
				$selected = $lt.eq(o.startItem);

			// default to $home element
			if ((o.homeTop || o.homeLeft) && $selected.length<1)
				$selected = $home;

			// loop through all the target element a href tags and
			// the longest href to match the location path is deemed the most 
			// accurate and selected as default
			if ($selected.length<1) {
				var pathmatch_len=0, $pathel;
		
				$lt.each(function(){ 
					var thishref = $('a:first',this).attr('href');
					//console.log(thishref+' size:'+thishref.length);
					if (path.indexOf(thishref)>-1 && thishref.length > pathmatch_len )
					{
						$pathel = $(this);
						pathmatch_len = thishref.length;
					}
		
				});
				if (pathmatch_len>0) {
					//console.log('found match:'+$('a:first',$pathel).attr('href'));
					$selected = $pathel;
				}
				//else 
					//console.log('no match!');
			}
		
			// if still no matches, default to the first element
			if ( $selected.length<1 )
				$selected = $lt.eq(0);

			// make sure we only have one element as $selected and apply selectedLava class
			$selected = $($selected.eq(0).addClass('selectedLava'));
				
			// add mouseover event for every sub element
			$lt.bind('mouseenter', function() {
				//console.log('mouseenter');
				// help backLava behave if returnDelay is set
				if(delayTimer) {clearTimeout(delayTimer);delayTimer=null;}
				move($(this));
			}).click(function(e) {
				if (o.setOnClick) {
					$selected.removeClass('selectedLava');
					$selected = $(this).addClass('selectedLava');
				}
				return o.click.apply(this, [e, this]);
			});
			
			// creates and adds to the container a backLava element with absolute positioning
			$back = $('<'+o.container+' class="backLava"><div class="leftLava"></div><div class="bottomLava"></div><div class="cornerLava"></div></'+o.container+'>').css({'position':'absolute','display':'block','margin':0,'padding':0}).prependTo(this);

			// setting css height and width actually sets the innerHeight and innerWidth, so
			// compute border and padding differences on styled backLava element to fit them in also.
			if (o.includeMargins) {
				mh = getInt($selected.css('marginTop')) + getInt($selected.css('marginBottom'));
				mw = getInt($selected.css('marginLeft')) + getInt($selected.css('marginRight'));
			}
			bx = getInt($back.css('borderLeftWidth'))+getInt($back.css('borderRightWidth'))+getInt($back.css('paddingLeft'))+getInt($back.css('paddingRight'))-mw;
			by = getInt($back.css('borderTopWidth'))+getInt($back.css('borderBottomWidth'))+getInt($back.css('paddingTop'))+getInt($back.css('paddingBottom'))-mh;

			// set the starting position for the lavalamp hover element: .back
			if (o.homeTop || o.homeLeft)
				$back.css({ 'left':o.homeLeft, 'top':o.homeTop, 'width':o.homeWidth, 'height':o.homeHeight });
			else
			{
				if (!o.includeMargins) {
					ml = (getInt($selected.css('marginLeft')));
					mt = (getInt($selected.css('marginTop')));
				}
				$back.css({ 'left': $selected.position().left+ml, 'top': $selected.position().top+mt, 'width': $selected.outerWidth()-bx, 'height': $selected.outerHeight()-by }); 
			}

			// after we leave the container element, move back to default/last clicked element
			$(this).bind('mouseleave', function() {
				//console.log('mouseleave');
				var $returnEl = null;
				if (o.returnHome)
					$returnEl = $home;
				else if (!o.autoReturn)
					return true;
			
				if (o.returnDelay) {
					if(delayTimer) clearTimeout(delayTimer);
					delayTimer = setTimeout(function(){move($returnEl);},o.returnDelay);
				}
				else {
					move($returnEl);
				}
				return true;
			});

			function move($el) {
				if (!$el) $el = $selected;

				if (!o.includeMargins) {
					ml = (getInt($el.css('marginLeft')));
					mt = (getInt($el.css('marginTop')));
				}
				var dims = {
					'left': $el.position().left+ml,
					'top': $el.position().top+mt,
					'width': $el.outerWidth()-bx,
					'height': $el.outerHeight()-by
				};
				
				$back.stop().animate(dims, o.speed, o.fx);
			};
		});
		
	};
	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/**
	 * jqMetro
	 * JQUERY PLUGIN FOR METRO UI CONTROLS
	 *
	 * Copyright (c) 2011 Mohammad Valipour (http://manorey.net/mohblog)
	 * Licensed under the MIT License:
	 *   http://www.opensource.org/licenses/mit-license.php
	 *
	 */

	;(function ($) {
	    var defaults = {
	        animationDuration: 150,
	        headerOpacity: 0.5,
	        fixedHeaders: false,
	        headerSelector: function (item) { return item.children("h3").first(); },
	        itemSelector: function (item) { return item.children(".pivot-item"); },
	        headerItemTemplate: function () { return $("<span class='header' />"); },
	        pivotItemTemplate: function () { return $("<div class='pivotItem' />"); },
	        itemsTemplate: function () { return $("<div class='items' />"); },
	        headersTemplate: function () { return $("<div class='headers' />"); },
	        controlInitialized: undefined,
	        selectedItemChanged: undefined
	    };

	    $.fn.metroPivot = function (settings) {
	        if(this.length > 1)
	        {
	            return this.each(function(index, el){ $(el).wp7Pivot(settings); });
	        }

	        $.extend(this, defaults, settings);
	        $.extend(this,{
	            animating : false,
	            headers : undefined,
	            items : undefined,
	            goToNext: function(){
	                if(this.animating) return;
	                this.headers.children(".current").next().trigger("click");
	            },
	            goToPrevious: function(){
	                if(this.animating) return;
	                this.headers.children(".header").last().trigger("click");
	            },
	            goToItemByName:function(header){
	                if(this.animating) return;
	                this.headers.children(":contains("+header+")").first().trigger("click");
	            },
	            goToItemByIndex:function(index){
	                if(this.animating) return;
	                this.headers.children().eq(index).trigger("click");
	            },
	            initialize : function () {
	                var pivot = this;
	                // define sections

	                var headers = pivot.headersTemplate();
	                var items = pivot.itemsTemplate();

	                pivot.itemSelector(pivot).each(function (index, el) {
	                    el = $(el);

	                    var h3Element = pivot.headerSelector(el);
	                    if (h3Element.length == 0) return;

	                    var headerItem = pivot.headerItemTemplate().html(h3Element.html()).fadeTo(0, pivot.headerOpacity);
	                    var pivotItem = pivot.pivotItemTemplate().append(el).hide();

	                    if (index == 0) {
	                        headerItem.addClass("current").fadeTo(0, 1);
	                        pivotItem.addClass("current").show();
	                    }
	                    headerItem.attr("index", index);
	                    headerItem.click(function() { pivot.pivotHeader_Click($(this)); });

	                    headers.append(headerItem);
	                    items.append(pivotItem);

	                    h3Element.remove();
	                });

	                pivot.append(headers).append(items);
	                pivot.headers = headers;
	                pivot.items = items;

	                this.data("controller", pivot);

	                if(this.controlInitialized != undefined)
	                {
	                    this.controlInitialized();
	                }
	            },
	            setCurrentHeader: function(header){
	                var pivot = this;

	                // make current header a normal one
	                this.headers.children(".header.current").removeClass("current").fadeTo(0, this.headerOpacity);

	                // make selected header to current
	                header.addClass("current").fadeTo(0, 1);

	                if(pivot.fixedHeaders == false)
	                {
	                    // create a copy for fadeout navigation
	                    var copy = header.prevAll().clone();
	                    // detach items to move to end of headers
	                    var detached = $(header.prevAll().detach().toArray().reverse());

	                    // copy animation items to beginning and animate them
	                    $("<span />").append(copy).prependTo(pivot.headers).animate({ width: 0, opacity: 0 }, pivot.animationDuration, function () {
	                        // when finished: delete animation objects
	                        $(this).remove();

	                        // and attach detached items to the end of headers
	                        detached.fadeTo(0, 0).appendTo(pivot.headers).fadeTo(200, pivot.headerOpacity);
	                    });
	                }
	            },
	            setCurrentItem: function(item, index){
	                var pivot = this;
	                
	                // hide current item immediately
	                pivot.items.children(".pivotItem.current").hide().removeClass("current");

	                // after a little delay
	                setTimeout(function () {
	                    // move the item to far right and make it visible
	                    item.css({ marginLeft: item.outerWidth() }).show().addClass("current");

	                    // animate it to left
	                    item.animate( { marginLeft: 0 }, pivot.animationDuration, function() { pivot.currentItemChanged(index);});

	                }, 200);                
	            },
	            currentItemChanged: function(index) {
	                this.animating = false;
	                if(this.selectedItemChanged != undefined)
	                {
	                    this.selectedItemChanged(index);
	                }
	            },
	            pivotHeader_Click : function (me) {
	                // ignore if already current
	                if (me.is(".current")) return;

	                // ignore if still animating
	                if (this.animating) return;
	                this.animating = true;

	                // set current header
	                this.setCurrentHeader(me);

	                var index = me.attr("index");
	                // find and set current item
	                var item = this.items.children(".pivotItem:nth(" + index + ")");
	                this.setCurrentItem(item, index);
	            },
	        });

	        return this.initialize();
	    };
	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 * jQuery MiniColors: A tiny color picker built on jQuery
	 *
	 * Copyright Cory LaViska for A Beautiful Site, LLC. (http://www.abeautifulsite.net/)
	 *
	 * Licensed under the MIT license: http://opensource.org/licenses/MIT
	 *
	 */
	if(jQuery) (function($) {

		// Defaults
		$.minicolors = {
			defaults: {
				animationSpeed: 50,
				animationEasing: 'swing',
				change: null,
				changeDelay: 0,
				control: 'hue',
				defaultValue: '',
				hide: null,
				hideSpeed: 100,
				inline: false,
				letterCase: 'lowercase',
				opacity: false,
				position: 'bottom left',
				show: null,
				showSpeed: 100,
				theme: 'default'
			}
		};

		// Public methods
		$.extend($.fn, {
			minicolors: function(method, data) {

				switch(method) {

					// Destroy the control
					case 'destroy':
						$(this).each( function() {
							destroy($(this));
						});
						return $(this);

					// Hide the color picker
					case 'hide':
						hide();
						return $(this);

					// Get/set opacity
					case 'opacity':
						// Getter
						if( data === undefined ) {
							// Getter
							return $(this).attr('data-opacity');
						} else {
							// Setter
							$(this).each( function() {
								updateFromInput($(this).attr('data-opacity', data));
							});
						}
						return $(this);

					// Get an RGB(A) object based on the current color/opacity
					case 'rgbObject':
						return rgbObject($(this), method === 'rgbaObject');

					// Get an RGB(A) string based on the current color/opacity
					case 'rgbString':
					case 'rgbaString':
						return rgbString($(this), method === 'rgbaString');

					// Get/set settings on the fly
					case 'settings':
						if( data === undefined ) {
							return $(this).data('minicolors-settings');
						} else {
							// Setter
							$(this).each( function() {
								var settings = $(this).data('minicolors-settings') || {};
								destroy($(this));
								$(this).minicolors($.extend(true, settings, data));
							});
						}
						return $(this);

					// Show the color picker
					case 'show':
						show( $(this).eq(0) );
						return $(this);

					// Get/set the hex color value
					case 'value':
						if( data === undefined ) {
							// Getter
							return $(this).val();
						} else {
							// Setter
							$(this).each( function() {
								updateFromInput($(this).val(data));
							});
						}
						return $(this);

					// Initializes the control
					default:
						if( method !== 'create' ) data = method;
						$(this).each( function() {
							init($(this), data);
						});
						return $(this);

				}

			}
		});

		// Initialize input elements
		function init(input, settings) {

			var minicolors = $('<div class="minicolors" />'),
				defaults = $.minicolors.defaults;

			// Do nothing if already initialized
			if( input.data('minicolors-initialized') ) return;

			// Handle settings
			settings = $.extend(true, {}, defaults, settings);

			// The wrapper
			minicolors
				.addClass('minicolors-theme-' + settings.theme)
				.toggleClass('minicolors-with-opacity', settings.opacity);

			// Custom positioning
			if( settings.position !== undefined ) {
				$.each(settings.position.split(' '), function() {
					minicolors.addClass('minicolors-position-' + this);
				});
			}

			// The input
			input
				.addClass('minicolors-input')
				.data('minicolors-initialized', false)
				.data('minicolors-settings', settings)
				.prop('size', 7)
				.wrap(minicolors)
				.after(
					'<div class="minicolors-panel minicolors-slider-' + settings.control + '">' +
						'<div class="minicolors-slider">' +
							'<div class="minicolors-picker"></div>' +
						'</div>' +
						'<div class="minicolors-opacity-slider">' +
							'<div class="minicolors-picker"></div>' +
						'</div>' +
						'<div class="minicolors-grid">' +
							'<div class="minicolors-grid-inner"></div>' +
							'<div class="minicolors-picker"><div></div></div>' +
						'</div>' +
					'</div>'
				);

			// The swatch
			if( !settings.inline ) {
				input.after('<span class="minicolors-swatch"><span class="minicolors-swatch-color"></span></span>');
				input.next('.minicolors-swatch').on('click', function(event) {
					event.preventDefault();
					input.focus();
				});
			}

			// Prevent text selection in IE
			input.parent().find('.minicolors-panel').on('selectstart', function() { return false; }).end();

			// Inline controls
			if( settings.inline ) input.parent().addClass('minicolors-inline');

			updateFromInput(input, false);

			input.data('minicolors-initialized', true);

		}

		// Returns the input back to its original state
		function destroy(input) {

			var minicolors = input.parent();

			// Revert the input element
			input
				.removeData('minicolors-initialized')
				.removeData('minicolors-settings')
				.removeProp('size')
				.removeClass('minicolors-input');

			// Remove the wrap and destroy whatever remains
			minicolors.before(input).remove();

		}

		// Shows the specified dropdown panel
		function show(input) {

			var minicolors = input.parent(),
				panel = minicolors.find('.minicolors-panel'),
				settings = input.data('minicolors-settings');

			// Do nothing if uninitialized, disabled, inline, or already open
			if( !input.data('minicolors-initialized') ||
				input.prop('disabled') ||
				minicolors.hasClass('minicolors-inline') ||
				minicolors.hasClass('minicolors-focus')
			) return;

			hide();

			minicolors.addClass('minicolors-focus');
			panel
				.stop(true, true)
				.fadeIn(settings.showSpeed, function() {
					if( settings.show ) settings.show.call(input.get(0));
				});

		}

		// Hides all dropdown panels
		function hide() {

			$('.minicolors-focus').each( function() {

				var minicolors = $(this),
					input = minicolors.find('.minicolors-input'),
					panel = minicolors.find('.minicolors-panel'),
					settings = input.data('minicolors-settings');

				panel.fadeOut(settings.hideSpeed, function() {
					if( settings.hide ) settings.hide.call(input.get(0));
					minicolors.removeClass('minicolors-focus');
				});

			});
		}

		// Moves the selected picker
		function move(target, event, animate) {

			var input = target.parents('.minicolors').find('.minicolors-input'),
				settings = input.data('minicolors-settings'),
				picker = target.find('[class$=-picker]'),
				offsetX = target.offset().left,
				offsetY = target.offset().top,
				x = Math.round(event.pageX - offsetX),
				y = Math.round(event.pageY - offsetY),
				duration = animate ? settings.animationSpeed : 0,
				wx, wy, r, phi;

			// Touch support
			if( event.originalEvent.changedTouches ) {
				x = event.originalEvent.changedTouches[0].pageX - offsetX;
				y = event.originalEvent.changedTouches[0].pageY - offsetY;
			}

			// Constrain picker to its container
			if( x < 0 ) x = 0;
			if( y < 0 ) y = 0;
			if( x > target.width() ) x = target.width();
			if( y > target.height() ) y = target.height();

			// Constrain color wheel values to the wheel
			if( target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid') ) {
				wx = 75 - x;
				wy = 75 - y;
				r = Math.sqrt(wx * wx + wy * wy);
				phi = Math.atan2(wy, wx);
				if( phi < 0 ) phi += Math.PI * 2;
				if( r > 75 ) {
					r = 75;
					x = 75 - (75 * Math.cos(phi));
					y = 75 - (75 * Math.sin(phi));
				}
				x = Math.round(x);
				y = Math.round(y);
			}

			// Move the picker
			if( target.is('.minicolors-grid') ) {
				picker
					.stop(true)
					.animate({
						top: y + 'px',
						left: x + 'px'
					}, duration, settings.animationEasing, function() {
						updateFromControl(input, target);
					});
			} else {
				picker
					.stop(true)
					.animate({
						top: y + 'px'
					}, duration, settings.animationEasing, function() {
						updateFromControl(input, target);
					});
			}

		}

		// Sets the input based on the color picker values
		function updateFromControl(input, target) {

			function getCoords(picker, container) {

				var left, top;
				if( !picker.length || !container ) return null;
				left = picker.offset().left;
				top = picker.offset().top;

				return {
					x: left - container.offset().left + (picker.outerWidth() / 2),
					y: top - container.offset().top + (picker.outerHeight() / 2)
				};

			}

			var hue, saturation, brightness, x, y, r, phi,

				hex = input.val(),
				opacity = input.attr('data-opacity'),

				// Helpful references
				minicolors = input.parent(),
				settings = input.data('minicolors-settings'),
				swatch = minicolors.find('.minicolors-swatch'),

				// Panel objects
				grid = minicolors.find('.minicolors-grid'),
				slider = minicolors.find('.minicolors-slider'),
				opacitySlider = minicolors.find('.minicolors-opacity-slider'),

				// Picker objects
				gridPicker = grid.find('[class$=-picker]'),
				sliderPicker = slider.find('[class$=-picker]'),
				opacityPicker = opacitySlider.find('[class$=-picker]'),

				// Picker positions
				gridPos = getCoords(gridPicker, grid),
				sliderPos = getCoords(sliderPicker, slider),
				opacityPos = getCoords(opacityPicker, opacitySlider);

			// Handle colors
			if( target.is('.minicolors-grid, .minicolors-slider') ) {

				// Determine HSB values
				switch(settings.control) {

					case 'wheel':
						// Calculate hue, saturation, and brightness
						x = (grid.width() / 2) - gridPos.x;
						y = (grid.height() / 2) - gridPos.y;
						r = Math.sqrt(x * x + y * y);
						phi = Math.atan2(y, x);
						if( phi < 0 ) phi += Math.PI * 2;
						if( r > 75 ) {
							r = 75;
							gridPos.x = 69 - (75 * Math.cos(phi));
							gridPos.y = 69 - (75 * Math.sin(phi));
						}
						saturation = keepWithin(r / 0.75, 0, 100);
						hue = keepWithin(phi * 180 / Math.PI, 0, 360);
						brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});

						// Update UI
						slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
						break;

					case 'saturation':
						// Calculate hue, saturation, and brightness
						hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
						saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
						brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});

						// Update UI
						slider.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: brightness }));
						minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);
						break;

					case 'brightness':
						// Calculate hue, saturation, and brightness
						hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
						saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
						brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});

						// Update UI
						slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
						minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (brightness / 100));
						break;

					default:
						// Calculate hue, saturation, and brightness
						hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);
						saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);
						brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
						hex = hsb2hex({
							h: hue,
							s: saturation,
							b: brightness
						});

						// Update UI
						grid.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: 100 }));
						break;

				}

				// Adjust case
				input.val( convertCase(hex, settings.letterCase) );

			}

			// Handle opacity
			if( target.is('.minicolors-opacity-slider') ) {
				if( settings.opacity ) {
					opacity = parseFloat(1 - (opacityPos.y / opacitySlider.height())).toFixed(2);
				} else {
					opacity = 1;
				}
				if( settings.opacity ) input.attr('data-opacity', opacity);
			}

			// Set swatch color
			swatch.find('SPAN').css({
				backgroundColor: hex,
				opacity: opacity
			});

			// Handle change event
			doChange(input, hex, opacity);

		}

		// Sets the color picker values from the input
		function updateFromInput(input, preserveInputValue) {

			var hex,
				hsb,
				opacity,
				x, y, r, phi,

				// Helpful references
				minicolors = input.parent(),
				settings = input.data('minicolors-settings'),
				swatch = minicolors.find('.minicolors-swatch'),

				// Panel objects
				grid = minicolors.find('.minicolors-grid'),
				slider = minicolors.find('.minicolors-slider'),
				opacitySlider = minicolors.find('.minicolors-opacity-slider'),

				// Picker objects
				gridPicker = grid.find('[class$=-picker]'),
				sliderPicker = slider.find('[class$=-picker]'),
				opacityPicker = opacitySlider.find('[class$=-picker]');

			// Determine hex/HSB values
			hex = convertCase(parseHex(input.val(), true), settings.letterCase);
			if( !hex ){
				hex = convertCase(parseHex(settings.defaultValue, true), settings.letterCase);
			}
			hsb = hex2hsb(hex);

			// Update input value
			if( !preserveInputValue ) input.val(hex);

			// Determine opacity value
			if( settings.opacity ) {
				// Get from data-opacity attribute and keep within 0-1 range
				opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);
				if( isNaN(opacity) ) opacity = 1;
				input.attr('data-opacity', opacity);
				swatch.find('SPAN').css('opacity', opacity);

				// Set opacity picker position
				y = keepWithin(opacitySlider.height() - (opacitySlider.height() * opacity), 0, opacitySlider.height());
				opacityPicker.css('top', y + 'px');
			}

			// Update swatch
			swatch.find('SPAN').css('backgroundColor', hex);

			// Determine picker locations
			switch(settings.control) {

				case 'wheel':
					// Set grid position
					r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);
					phi = hsb.h * Math.PI / 180;
					x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());
					y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});

					// Set slider position
					y = 150 - (hsb.b / (100 / grid.height()));
					if( hex === '' ) y = 0;
					sliderPicker.css('top', y + 'px');

					// Update panel color
					slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
					break;

				case 'saturation':
					// Set grid position
					x = keepWithin((5 * hsb.h) / 12, 0, 150);
					y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});

					// Set slider position
					y = keepWithin(slider.height() - (hsb.s * (slider.height() / 100)), 0, slider.height());
					sliderPicker.css('top', y + 'px');

					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: hsb.b }));
					minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);
					break;

				case 'brightness':
					// Set grid position
					x = keepWithin((5 * hsb.h) / 12, 0, 150);
					y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});

					// Set slider position
					y = keepWithin(slider.height() - (hsb.b * (slider.height() / 100)), 0, slider.height());
					sliderPicker.css('top', y + 'px');

					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
					minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (hsb.b / 100));
					break;

				default:
					// Set grid position
					x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());
					y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
					gridPicker.css({
						top: y + 'px',
						left: x + 'px'
					});

					// Set slider position
					y = keepWithin(slider.height() - (hsb.h / (360 / slider.height())), 0, slider.height());
					sliderPicker.css('top', y + 'px');

					// Update panel color
					grid.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: 100 }));
					break;

			}

			// Fire change event, but only if minicolors is fully initialized
			if( input.data('minicolors-initialized') ) {
				doChange(input, hex, opacity);
			}

		}

		// Runs the change and changeDelay callbacks
		function doChange(input, hex, opacity) {

			var settings = input.data('minicolors-settings'),
				lastChange = input.data('minicolors-lastChange');

			// Only run if it actually changed
			if( !lastChange || lastChange.hex !== hex || lastChange.opacity !== opacity ) {

				// Remember last-changed value
				input.data('minicolors-lastChange', {
					hex: hex,
					opacity: opacity
				});

				// Fire change event
				if( settings.change ) {
					if( settings.changeDelay ) {
						// Call after a delay
						clearTimeout(input.data('minicolors-changeTimeout'));
						input.data('minicolors-changeTimeout', setTimeout( function() {
							settings.change.call(input.get(0), hex, opacity);
						}, settings.changeDelay));
					} else {
						// Call immediately
						settings.change.call(input.get(0), hex, opacity);
					}
				}
				input.trigger('change').trigger('input');
			}

		}

		// Generates an RGB(A) object based on the input's value
		function rgbObject(input) {
			var hex = parseHex($(input).val(), true),
				rgb = hex2rgb(hex),
				opacity = $(input).attr('data-opacity');
			if( !rgb ) return null;
			if( opacity !== undefined ) $.extend(rgb, { a: parseFloat(opacity) });
			return rgb;
		}

		// Genearates an RGB(A) string based on the input's value
		function rgbString(input, alpha) {
			var hex = parseHex($(input).val(), true),
				rgb = hex2rgb(hex),
				opacity = $(input).attr('data-opacity');
			if( !rgb ) return null;
			if( opacity === undefined ) opacity = 1;
			if( alpha ) {
				return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';
			} else {
				return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
			}
		}

		// Converts to the letter case specified in settings
		function convertCase(string, letterCase) {
			return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();
		}

		// Parses a string and returns a valid hex string when possible
		function parseHex(string, expand) {
			string = string.replace(/[^A-F0-9]/ig, '');
			if( string.length !== 3 && string.length !== 6 ) return '';
			if( string.length === 3 && expand ) {
				string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];
			}
			return '#' + string;
		}

		// Keeps value within min and max
		function keepWithin(value, min, max) {
			if( value < min ) value = min;
			if( value > max ) value = max;
			return value;
		}

		// Converts an HSB object to an RGB object
		function hsb2rgb(hsb) {
			var rgb = {};
			var h = Math.round(hsb.h);
			var s = Math.round(hsb.s * 255 / 100);
			var v = Math.round(hsb.b * 255 / 100);
			if(s === 0) {
				rgb.r = rgb.g = rgb.b = v;
			} else {
				var t1 = v;
				var t2 = (255 - s) * v / 255;
				var t3 = (t1 - t2) * (h % 60) / 60;
				if( h === 360 ) h = 0;
				if( h < 60 ) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3; }
				else if( h < 120 ) {rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3; }
				else if( h < 180 ) {rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3; }
				else if( h < 240 ) {rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3; }
				else if( h < 300 ) {rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3; }
				else if( h < 360 ) {rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3; }
				else { rgb.r = 0; rgb.g = 0; rgb.b = 0; }
			}
			return {
				r: Math.round(rgb.r),
				g: Math.round(rgb.g),
				b: Math.round(rgb.b)
			};
		}

		// Converts an RGB object to a hex string
		function rgb2hex(rgb) {
			var hex = [
				rgb.r.toString(16),
				rgb.g.toString(16),
				rgb.b.toString(16)
			];
			$.each(hex, function(nr, val) {
				if (val.length === 1) hex[nr] = '0' + val;
			});
			return '#' + hex.join('');
		}

		// Converts an HSB object to a hex string
		function hsb2hex(hsb) {
			return rgb2hex(hsb2rgb(hsb));
		}

		// Converts a hex string to an HSB object
		function hex2hsb(hex) {
			var hsb = rgb2hsb(hex2rgb(hex));
			if( hsb.s === 0 ) hsb.h = 360;
			return hsb;
		}

		// Converts an RGB object to an HSB object
		function rgb2hsb(rgb) {
			var hsb = { h: 0, s: 0, b: 0 };
			var min = Math.min(rgb.r, rgb.g, rgb.b);
			var max = Math.max(rgb.r, rgb.g, rgb.b);
			var delta = max - min;
			hsb.b = max;
			hsb.s = max !== 0 ? 255 * delta / max : 0;
			if( hsb.s !== 0 ) {
				if( rgb.r === max ) {
					hsb.h = (rgb.g - rgb.b) / delta;
				} else if( rgb.g === max ) {
					hsb.h = 2 + (rgb.b - rgb.r) / delta;
				} else {
					hsb.h = 4 + (rgb.r - rgb.g) / delta;
				}
			} else {
				hsb.h = -1;
			}
			hsb.h *= 60;
			if( hsb.h < 0 ) {
				hsb.h += 360;
			}
			hsb.s *= 100/255;
			hsb.b *= 100/255;
			return hsb;
		}

		// Converts a hex string to an RGB object
		function hex2rgb(hex) {
			hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
			return {
				r: hex >> 16,
				g: (hex & 0x00FF00) >> 8,
				b: (hex & 0x0000FF)
			};
		}

		// Handle events
		$(document)
			// Hide on clicks outside of the control
			.on('mousedown.minicolors touchstart.minicolors', function(event) {
				if( !$(event.target).parents().add(event.target).hasClass('minicolors') ) {
					hide();
				}
			})
			// Start moving
			.on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function(event) {
				var target = $(this);
				event.preventDefault();
				$(document).data('minicolors-target', target);
				move(target, event, true);
			})
			// Move pickers
			.on('mousemove.minicolors touchmove.minicolors', function(event) {
				var target = $(document).data('minicolors-target');
				if( target ) move(target, event);
			})
			// Stop moving
			.on('mouseup.minicolors touchend.minicolors', function() {
				$(this).removeData('minicolors-target');
			})
			// Show panel when swatch is clicked
			.on('mousedown.minicolors touchstart.minicolors', '.minicolors-swatch', function(event) {
				var input = $(this).parent().find('.minicolors-input');
				event.preventDefault();
				show(input);
			})
			// Show on focus
			.on('focus.minicolors', '.minicolors-input', function() {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				show(input);
			})
			// Fix hex on blur
			.on('blur.minicolors', '.minicolors-input', function() {
				var input = $(this),
					settings = input.data('minicolors-settings');
				if( !input.data('minicolors-initialized') ) return;

				// Parse Hex
				input.val(parseHex(input.val(), true));

				// Is it blank?
				if( input.val() === '' ) input.val(parseHex(settings.defaultValue, true));

				// Adjust case
				input.val( convertCase(input.val(), settings.letterCase) );

			})
			// Handle keypresses
			.on('keydown.minicolors', '.minicolors-input', function(event) {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				switch(event.keyCode) {
					case 9: // tab
						hide();
						break;
					case 13: // enter
					case 27: // esc
						hide();
						input.blur();
						break;
				}
			})
			// Update on keyup
			.on('keyup.minicolors', '.minicolors-input', function() {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				updateFromInput(input, true);
			})
			// Update on paste
			.on('paste.minicolors', '.minicolors-input', function() {
				var input = $(this);
				if( !input.data('minicolors-initialized') ) return;
				setTimeout( function() {
					updateFromInput(input, true);
				}, 1);
			});

	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 * Pulse plugin for jQuery 
	 * ---
	 * @author James Padolsey (http://james.padolsey.com)
	 * @version 0.1
	 * @updated 16-DEC-09
	 * ---
	 * Note: In order to animate color properties, you need
	 * the color plugin from here: http://plugins.jquery.com/project/color
	 * ---
	 * @info http://james.padolsey.com/javascript/simple-pulse-plugin-for-jquery/
	 */
	jQuery.fn.pulse = function( prop, speed, times, easing, callback ) {
	    
	    if ( isNaN(times) ) {
	        callback = easing;
	        easing = times;
	        times = 1;
	    }
	    
	    var optall = jQuery.speed(speed, easing, callback),
	        queue = optall.queue !== false,
	        largest = 0;
	        
	    for (var p in prop) {
	        largest = Math.max(prop[p].length, largest);
	    }
	    
	    optall.times = optall.times || times;
	    
	    return this[queue?'queue':'each'](function(){
	        
	        var counts = {},
	            opt = jQuery.extend({}, optall),
	            self = jQuery(this);
	            
	        pulse();
	        
	        function pulse() {
	            
	            var propsSingle = {},
	                doAnimate = false;
	            
	            for (var p in prop) {
	                
	                // Make sure counter is setup for current prop
	                counts[p] = counts[p] || {runs:0,cur:-1};
	                
	                // Set "cur" to reflect new position in pulse array
	                if ( counts[p].cur < prop[p].length - 1 ) {
	                    ++counts[p].cur;
	                } else {
	                    // Reset to beginning of pulse array
	                    counts[p].cur = 0;
	                    ++counts[p].runs;
	                }
	                
	                if ( prop[p].length === largest ) {
	                    doAnimate = opt.times > counts[p].runs;
	                }
	                
	                propsSingle[p] = prop[p][counts[p].cur];
	                
	            }
	            
	            opt.complete = pulse;
	            opt.queue = false;
	            
	            if (doAnimate) {
	                self.animate(propsSingle, opt);
	            } else {
	                optall.complete.call(self[0]);
	            }
	            
	        }
	            
	    });
	    
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery.scrollTo
	 * Copyright (c) 2007-2014 Ariel Flesler - aflesler<a>gmail<d>com | http://flesler.blogspot.com
	 * Licensed under MIT
	 * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
	 * @projectDescription Easy element scrolling using jQuery.
	 * @author Ariel Flesler
	 * @version 1.4.14
	 */
	;(function (define) {
		'use strict';

		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(62)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {

			var $scrollTo = $.scrollTo = function( target, duration, settings ) {
				return $(window).scrollTo( target, duration, settings );
			};

			$scrollTo.defaults = {
				axis:'xy',
				duration: 0,
				limit:true
			};

			// Returns the element that needs to be animated to scroll the window.
			// Kept for backwards compatibility (specially for localScroll & serialScroll)
			$scrollTo.window = function( scope ) {
				return $(window)._scrollable();
			};

			// Hack, hack, hack :)
			// Returns the real elements to scroll (supports window/iframes, documents and regular nodes)
			$.fn._scrollable = function() {
				return this.map(function() {
					var elem = this,
						isWin = !elem.nodeName || $.inArray( elem.nodeName.toLowerCase(), ['iframe','#document','html','body'] ) != -1;

						if (!isWin)
							return elem;

					var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;

					return /webkit/i.test(navigator.userAgent) || doc.compatMode == 'BackCompat' ?
						doc.body :
						doc.documentElement;
				});
			};

			$.fn.scrollTo = function( target, duration, settings ) {
				if (typeof duration == 'object') {
					settings = duration;
					duration = 0;
				}
				if (typeof settings == 'function')
					settings = { onAfter:settings };

				if (target == 'max')
					target = 9e9;

				settings = $.extend( {}, $scrollTo.defaults, settings );
				// Speed is still recognized for backwards compatibility
				duration = duration || settings.duration;
				// Make sure the settings are given right
				settings.queue = settings.queue && settings.axis.length > 1;

				if (settings.queue)
					// Let's keep the overall duration
					duration /= 2;
				settings.offset = both( settings.offset );
				settings.over = both( settings.over );

				return this._scrollable().each(function() {
					// Null target yields nothing, just like jQuery does
					if (target == null) return;

					var elem = this,
						$elem = $(elem),
						targ = target, toff, attr = {},
						win = $elem.is('html,body');

					switch (typeof targ) {
						// A number will pass the regex
						case 'number':
						case 'string':
							if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
								targ = both( targ );
								// We are done
								break;
							}
							// Relative/Absolute selector, no break!
							targ = win ? $(targ) : $(targ, this);
							if (!targ.length) return;
						case 'object':
							// DOMElement / jQuery
							if (targ.is || targ.style)
								// Get the real position of the target
								toff = (targ = $(targ)).offset();
					}

					var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;

					$.each( settings.axis.split(''), function( i, axis ) {
						var Pos	= axis == 'x' ? 'Left' : 'Top',
							pos = Pos.toLowerCase(),
							key = 'scroll' + Pos,
							old = elem[key],
							max = $scrollTo.max(elem, axis);

						if (toff) {// jQuery / DOMElement
							attr[key] = toff[pos] + ( win ? 0 : old - $elem.offset()[pos] );

							// If it's a dom element, reduce the margin
							if (settings.margin) {
								attr[key] -= parseInt(targ.css('margin'+Pos)) || 0;
								attr[key] -= parseInt(targ.css('border'+Pos+'Width')) || 0;
							}

							attr[key] += offset[pos] || 0;

							if(settings.over[pos])
								// Scroll to a fraction of its width/height
								attr[key] += targ[axis=='x'?'width':'height']() * settings.over[pos];
						} else {
							var val = targ[pos];
							// Handle percentage values
							attr[key] = val.slice && val.slice(-1) == '%' ?
								parseFloat(val) / 100 * max
								: val;
						}

						// Number or 'number'
						if (settings.limit && /^\d+$/.test(attr[key]))
							// Check the limits
							attr[key] = attr[key] <= 0 ? 0 : Math.min( attr[key], max );

						// Queueing axes
						if (!i && settings.queue) {
							// Don't waste time animating, if there's no need.
							if (old != attr[key])
								// Intermediate animation
								animate( settings.onAfterFirst );
							// Don't animate this axis again in the next iteration.
							delete attr[key];
						}
					});

					animate( settings.onAfter );

					function animate( callback ) {
						$elem.animate( attr, duration, settings.easing, callback && function() {
							callback.call(this, targ, settings);
						});
					}
				}).end();
			};

			// Max scrolling position, works on quirks mode
			// It only fails (not too badly) on IE, quirks mode.
			$scrollTo.max = function( elem, axis ) {
				var Dim = axis == 'x' ? 'Width' : 'Height',
					scroll = 'scroll'+Dim;

				if (!$(elem).is('html,body'))
					return elem[scroll] - $(elem)[Dim.toLowerCase()]();

				var size = 'client' + Dim,
					html = elem.ownerDocument.documentElement,
					body = elem.ownerDocument.body;

				return Math.max( html[scroll], body[scroll] ) - Math.min( html[size]  , body[size]   );
			};

			function both( val ) {
				return $.isFunction(val) || $.isPlainObject(val) ? val : { top:val, left:val };
			}

			// AMD requirement
			return $scrollTo;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	}(__webpack_require__(106)));


/***/ },
/* 106 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 * jQuery Storage API Plugin
	 *
	 * Copyright (c) 2013 Julien Maurel
	 *
	 * Licensed under the MIT license:
	 * http://www.opensource.org/licenses/mit-license.php
	 *
	 * Project home:
	 * https://github.com/julien-maurel/jQuery-Storage-API
	 *
	 * Version: 1.7.0
	 *
	 */
	(function($){
		// Prefix to use with cookie fallback
		var cookie_local_prefix="ls_";
		var cookie_session_prefix="ss_";

		// Get items from a storage
		function _get(storage){
			var l=arguments.length,s=window[storage],a=arguments,a1=a[1],vi,ret,tmp;
			if(l<2) throw new Error('Minimum 2 arguments must be given');
			else if($.isArray(a1)){
				// If second argument is an array, return an object with value of storage for each item in this array
				ret={};
				for(var i in a1){
					vi=a1[i];
					try{
						ret[vi]=JSON.parse(s.getItem(vi));
					}catch(e){
						ret[vi]=s.getItem(vi);
					}
				}
				return ret;
			}else if(l==2){
				// If only 2 arguments, return value directly
				try{
					return JSON.parse(s.getItem(a1));
				}catch(e){
					return s.getItem(a1);
				}
			}else{
				// If more than 2 arguments, parse storage to retrieve final value to return it
				// Get first level
				try{
					ret=JSON.parse(s.getItem(a1));
				}catch(e){
					throw new ReferenceError(a1+' is not defined in this storage');
				}
				// Parse next levels
				for(var i=2;i<l-1;i++){
					ret=ret[a[i]];
					if(ret===undefined) throw new ReferenceError([].slice.call(a,1,i+1).join('.')+' is not defined in this storage');
				}
				// If last argument is an array, return an object with value for each item in this array
				// Else return value normally
				if($.isArray(a[i])){
					tmp=ret;
					ret={};
					for(var j in a[i]){
						ret[a[i][j]]=tmp[a[i][j]];
					}
					return ret;
				}else{
					return ret[a[i]];
				}
			}
		}

		// Set items of a storage
		function _set(storage){
			var l=arguments.length,s=window[storage],a=arguments,a1=a[1],a2=a[2],vi,to_store={},tmp;
			if(l<2 || !$.isPlainObject(a1) && l<3) throw new Error('Minimum 3 arguments must be given or second parameter must be an object');
			else if($.isPlainObject(a1)){
				// If first argument is an object, set values of storage for each property of this object
				for(var i in a1){
					vi=a1[i];
					if(!$.isPlainObject(vi)) s.setItem(i,vi);
					else s.setItem(i,JSON.stringify(vi));
				}
				return a1;
			}else if(l==3){
				// If only 3 arguments, set value of storage directly
				if(typeof a2==='object') s.setItem(a1,JSON.stringify(a2));
				else s.setItem(a1,a2);
				return a2;
			}else{
				// If more than 3 arguments, parse storage to retrieve final node and set value
				// Get first level
				try{
					tmp=s.getItem(a1);
					if(tmp!=null) {
						to_store=JSON.parse(tmp);
					}
				}catch(e){
				}
				tmp=to_store;
				// Parse next levels and set value
				for(var i=2;i<l-2;i++){
					vi=a[i];
					if(!tmp[vi] || !$.isPlainObject(tmp[vi])) tmp[vi]={};
					tmp=tmp[vi];
				}
				tmp[a[i]]=a[i+1];
				s.setItem(a1,JSON.stringify(to_store));
				return to_store;
			}
		}

		// Remove items from a storage
		function _remove(storage){
			var l=arguments.length,s=window[storage],a=arguments,a1=a[1],to_store,tmp;
			if(l<2) throw new Error('Minimum 2 arguments must be given');
			else if($.isArray(a1)){
				// If first argument is an array, remove values from storage for each item of this array
				for(var i in a1){
					s.removeItem(a1[i]);
				}
				return true;
			}else if(l==2){
				// If only 2 arguments, remove value from storage directly
				s.removeItem(a1);
				return true;
			}else{
				// If more than 2 arguments, parse storage to retrieve final node and remove value
				// Get first level
				try{
					to_store=tmp=JSON.parse(s.getItem(a1));
				}catch(e){
					throw new ReferenceError(a1+' is not defined in this storage');
				}
				// Parse next levels and remove value
				for(var i=2;i<l-1;i++){
					tmp=tmp[a[i]];
					if(tmp===undefined) throw new ReferenceError([].slice.call(a,1,i).join('.')+' is not defined in this storage');
				}
				// If last argument is an array,remove value for each item in this array
				// Else remove value normally
				if($.isArray(a[i])){
					for(var j in a[i]){
						delete tmp[a[i][j]];
					}
				}else{
					delete tmp[a[i]];
				}
				s.setItem(a1,JSON.stringify(to_store));
				return true;
			}
		}

		// Remove all items from a storage
		function _removeAll(storage, reinit_ns){
			var keys=_keys(storage);
			for(var i in keys){
				_remove(storage,keys[i]);
			}
			// Reinitialize all namespace storages
			if(reinit_ns){
				for(var i in $.namespaceStorages){
					_createNamespace(i);
				}
			}
		}

		// Check if items of a storage are empty
		function _isEmpty(storage){
			var l=arguments.length,a=arguments,s=window[storage],a1=a[1];
			if(l==1){
				// If only one argument, test if storage is empty
				return (_keys(storage).length==0);
			}else if($.isArray(a1)){
				// If first argument is an array, test each item of this array and return true only if all items are empty
				for(var i=0; i<a1.length;i++){
					if(!_isEmpty(storage,a1[i])) return false;
				}
				return true;
			}else{
				// If more than 1 argument, try to get value and test it
				try{
					var v=_get.apply(this, arguments);
					// Convert result to an object (if last argument is an array, _get return already an object) and test each item
					if(!$.isArray(a[l-1])) v={'totest':v};
					for(var i in v){
						if(!(
							($.isPlainObject(v[i]) && $.isEmptyObject(v[i])) ||
							($.isArray(v[i]) && !v[i].length) ||
							(!v[i])
						)) return false;
					}
					return true;
				}catch(e){
					return true;
				}
			}
		}

		// Check if items of a storage exist
		function _isSet(storage){
			var l=arguments.length,a=arguments,s=window[storage],a1=a[1];
			if(l<2) throw new Error('Minimum 2 arguments must be given');
			if($.isArray(a1)){
				// If first argument is an array, test each item of this array and return true only if all items exist
				for(var i=0; i<a1.length;i++){
					if(!_isSet(storage,a1[i])) return false;
				}
				return true;
			}else{
				// For other case, try to get value and test it
				try{
					var v=_get.apply(this, arguments);
					// Convert result to an object (if last argument is an array, _get return already an object) and test each item
					if(!$.isArray(a[l-1])) v={'totest':v};
					for(var i in v){
						if(!(v[i]!==undefined && v[i]!==null)) return false;
					}
					return true;
				}catch(e){
					return false;
				}
			}
		}

		// Get keys of a storage or of an item of the storage
		function _keys(storage){
			var l=arguments.length,s=window[storage],a=arguments,a1=a[1],keys=[],o={};
			// If more than 1 argument, get value from storage to retrieve keys
			// Else, use storage to retrieve keys
			if(l>1){
				o=_get.apply(this,a);
			}else{
				o=s;
			}
			if(o._cookie){
				// If storage is a cookie, use $.cookie to retrieve keys
				for(var key in $.cookie()){
					if(key!='') {
						keys.push(key.replace(o._prefix,''));
					}
				}
			}else{
				for(var i in o){
					keys.push(i);
				}
			}
			return keys;
		}

		// Create new namespace storage
		function _createNamespace(name){
			if(!name || typeof name!="string") throw new Error('First parameter must be a string');
			if(!window.localStorage.getItem(name)) window.localStorage.setItem(name,'{}');
			if(!window.sessionStorage.getItem(name)) window.sessionStorage.setItem(name,'{}');
			var ns={
				localStorage:$.extend({},$.localStorage,{_ns:name}),
				sessionStorage:$.extend({},$.sessionStorage,{_ns:name})
			};
			if($.cookie){
				if(!window.cookieStorage.getItem(name)) window.cookieStorage.setItem(name,'{}');
				ns.cookieStorage=$.extend({},$.cookieStorage,{_ns:name});
			}
			$.namespaceStorages[name]=ns;
			return ns;
		}

		// Namespace object
		var storage={
			_type:'',
			_ns:'',
			_callMethod:function(f,a){
				var p=[this._type],a=Array.prototype.slice.call(a),a0=a[0];
				if(this._ns) p.push(this._ns);
				if(typeof a0==='string' && a0.indexOf('.')!==-1){
					a.shift();
					[].unshift.apply(a,a0.split('.'));
				}
				[].push.apply(p,a);
				return f.apply(this,p);
			},
			// Get items. If no parameters and storage have a namespace, return all namespace
			get:function(){
				return this._callMethod(_get,arguments);
			},
			// Set items
			set:function(){
				var l=arguments.length,a=arguments,a0=a[0];
				if(l<1 || !$.isPlainObject(a0) && l<2) throw new Error('Minimum 2 arguments must be given or first parameter must be an object');
				// If first argument is an object and storage is a namespace storage, set values individually
				if($.isPlainObject(a0) && this._ns){
					for(var i in a0){
						_set(this._type,this._ns,i,a0[i]);
					}
					return a0;
				}else{
					r=this._callMethod(_set,a);
					if(this._ns) return r[a0.split('.')[0]];
					else return r;
				}
			},
			// Delete items
			remove:function(){
				if(arguments.length<1) throw new Error('Minimum 1 argument must be given');
				return this._callMethod(_remove,arguments);
			},
			// Delete all items
			removeAll:function(reinit_ns){
				if(this._ns){
					_set(this._type,this._ns,{});
					return true;
				}else{
					return _removeAll(this._type, reinit_ns);
				}
			},
			// Items empty
			isEmpty:function(){
				return this._callMethod(_isEmpty,arguments);
			},
			// Items exists
			isSet:function(){
				if(arguments.length<1) throw new Error('Minimum 1 argument must be given');
				return this._callMethod(_isSet,arguments);
			},
			// Get keys of items
			keys:function(){
				return this._callMethod(_keys,arguments);
			}
		};

		// Use jquery.cookie for compatibility with old browsers and give access to cookieStorage
		if($.cookie){
			// sessionStorage is valid for one window/tab. To simulate that with cookie, we set a name for the window and use it for the name of the cookie
			if(!window.name) window.name=Math.floor(Math.random()*100000000);
			var cookie_storage={
				_cookie:true,
				_prefix:'',
				_expires:null,
				_path:null,
				_domain:null,
				setItem:function(n,v){
					$.cookie(this._prefix+n,v,{expires:this._expires,path:this._path,domain:this._domain});
				},
				getItem:function(n){
					return $.cookie(this._prefix+n);
				},
				removeItem:function(n){
					return $.removeCookie(this._prefix+n);
				},
				clear:function(){
					for(var key in $.cookie()){
						if(key!=''){
							if(!this._prefix && key.indexOf(cookie_local_prefix)===-1 && key.indexOf(cookie_session_prefix)===-1 || this._prefix && key.indexOf(this._prefix)===0) {
								$.removeCookie(key);
							}
						}
					}
				},
				setExpires:function(e){
					this._expires=e;
					return this;
				},
				setPath:function(p){
					this._path=p;
					return this;
				},
				setDomain:function(d){
					this._domain=d;
					return this;
				},
				setConf:function(c){
					if(c.path) this._path=c.path;
					if(c.domain) this._domain=c.domain;
					if(c.expires) this._expires=c.expires;
					return this;
				},
				setDefaultConf:function(){
					this._path=this._domain=this._expires=null;
				}
			};
			if(!window.localStorage){
				window.localStorage=$.extend({},cookie_storage,{_prefix:cookie_local_prefix,_expires:365*10});
				window.sessionStorage=$.extend({},cookie_storage,{_prefix:cookie_session_prefix+window.name+'_'});
			}
			window.cookieStorage=$.extend({},cookie_storage);
			// cookieStorage API
			$.cookieStorage=$.extend({},storage,{
				_type:'cookieStorage',
				setExpires:function(e){window.cookieStorage.setExpires(e); return this;},
				setPath:function(p){window.cookieStorage.setPath(p); return this;},
				setDomain:function(d){window.cookieStorage.setDomain(d); return this;},
				setConf:function(c){window.cookieStorage.setConf(c); return this;},
				setDefaultConf:function(){window.cookieStorage.setDefaultConf(); return this;}
			});
		}

		// Get a new API on a namespace
		$.initNamespaceStorage=function(ns){ return _createNamespace(ns); };
		// localStorage API
		$.localStorage=$.extend({},storage,{_type:'localStorage'});
		// sessionStorage API
		$.sessionStorage=$.extend({},storage,{_type:'sessionStorage'});
		// List of all namespace storage
		$.namespaceStorages={};
		// Remove all items in all storages
		$.removeAllStorages=function(reinit_ns){
			$.localStorage.removeAll(reinit_ns);
			$.sessionStorage.removeAll(reinit_ns);
			if($.cookieStorage) $.cookieStorage.removeAll(reinit_ns);
			if(!reinit_ns){
				$.namespaceStorages={};
			}
		}
	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*
	 * bubbletip
	 *
	 *	Copyright (c) 2009-2010, UhLeeKa.
	 *	Version: 1.0.6
	 *	Licensed under the GNU Lesser General Public License:
	 *		http://www.gnu.org/licenses/lgpl-3.0.html
	 *	Author Website:
	 *		http://www.uhleeka.com
	 *	Project Hosting on Google Code:
	 *		http://code.google.com/p/bubbletip/
	 */

	(function ($) {
		var bindIndex = 0;
		$.fn.extend({
			open: function () {
				$(this).trigger('open.bubbletip');
			},
			close: function (immediate) {
				if (immediate) {
					$(this).trigger('hide.bubbletip');
				} else {
					$(this).trigger('close.bubbletip');
				}
			},
			bubbletip: function (tip, options) {
				$(this).data('tip', $(tip).get(0).id);

				// check to see if the tip is a descendant of
				// a table.bubbletip element and therefore
				// has already been instantiated as a bubbletip
				if ($('table.bubbletip #' + $(tip).get(0).id).length > 0) {
					return this;
				}
				var _this, _tip, _options, _calc, _timeoutAnimate, _timeoutRefresh, _isActive, _isHiding, _wrapper, _bindIndex;
				// hack for IE6,IE7
				var _windowWidth, _windowHeight;

				_this = $(this);
				_tip = $(tip);
				_bindIndex = bindIndex++;  // for window.resize namespace binding
				_options = {
					id: '',
					position: 'absolute', // absolute | fixed
					fixedHorizontal: 'right', // left | right
					fixedVertical: 'bottom', // top | bottom
					positionAt: 'element', // element | body | mouse
					positionAtElement: _this,
					offsetTop: 0,
					offsetLeft: 0,
					deltaPosition: 30,
					deltaDirection: 'up', // direction: up | down | left | right
					animationDuration: 250,
					animationEasing: 'swing', // linear | swing
					delayShow: 0,
					delayHide: 500,
					calculateOnShow: false
				};
				if (options) {
					_options = $.extend(_options, options);
				}
				// calculated values
				_calc = {
					top: 0,
					left: 0,
					right: 0,
					bottom: 0,
					delta: 0,
					mouseTop: 0,
					mouseLeft: 0,
					tipHeight: 0
				};
				_timeoutAnimate = null;
				_timeoutRefresh = null;
				_isActive = false;
				_isHiding = false;

				// store the tip id for removeBubbletip
				if (!_this.data('bubbletip_tips')) {
					_this.data('bubbletip_tips', [[_tip.get(0).id, _bindIndex]]);
				} else {
					_this.data('bubbletip_tips', $.merge(_this.data('bubbletip_tips'), [[_tip.get(0).id, _bindIndex]]));
				}


				// validate _options
				if (!_options.fixedVertical.match(/^top|bottom$/i)) {
					_options.positionAt = 'top';
				}
				if (!_options.fixedHorizontal.match(/^left|right$/i)) {
					_options.positionAt = 'left';
				}
				if (!_options.positionAt.match(/^element|body|mouse$/i)) {
					_options.positionAt = 'element';
				}
				if (!_options.deltaDirection.match(/^up|down|left|right$/i)) {
					_options.deltaDirection = 'up';
				}
				if (_options.id.length > 0) {
					_options.id = ' id="' + _options.id + '"';
				}

				// create the wrapper table element
				if (_options.deltaDirection.match(/^up$/i)) {
					_wrapper = $('<table' + _options.id + ' class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td class="bt-top"></td><td class="bt-topright"></td></tr><tr><td class="bt-left"></td><td class="bt-content"></td><td class="bt-right"></td></tr><tr><td class="bt-bottomleft"></td><td><table class="bt-bottom" cellspacing="0" cellpadding="0"><tr><th></th><td><div></div></td><th></th></tr></table></td><td class="bt-bottomright"></td></tr></tbody></table>');
				} else if (_options.deltaDirection.match(/^down$/i)) {
					_wrapper = $('<table' + _options.id + ' class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td><table class="bt-top" cellspacing="0" cellpadding="0"><tr><th></th><td><div></div></td><th></th></tr></table></td><td class="bt-topright"></td></tr><tr><td class="bt-left"></td><td class="bt-content"></td><td class="bt-right"></td></tr><tr><td class="bt-bottomleft"></td><td class="bt-bottom"></td><td class="bt-bottomright"></td></tr></tbody></table>');
				} else if (_options.deltaDirection.match(/^left$/i)) {
					_wrapper = $('<table' + _options.id + ' class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td class="bt-top"></td><td class="bt-topright"></td></tr><tr><td class="bt-left"></td><td class="bt-content"></td><td class="bt-right-tail"><div class="bt-right"></div><div class="bt-right-tail"></div><div class="bt-right"></div></td></tr><tr><td class="bt-bottomleft"></td><td class="bt-bottom"></td><td class="bt-bottomright"></td></tr></tbody></table>');
				} else if (_options.deltaDirection.match(/^right$/i)) {
					_wrapper = $('<table' + _options.id + ' class="bubbletip" cellspacing="0" cellpadding="0"><tbody><tr><td class="bt-topleft"></td><td class="bt-top"></td><td class="bt-topright"></td></tr><tr><td class="bt-left-tail"><div class="bt-left"></div><div class="bt-left-tail"></div><div class="bt-left"></div></td><td class="bt-content"></td><td class="bt-right"></td></tr><tr><td class="bt-bottomleft"></td><td class="bt-bottom"></td><td class="bt-bottomright"></td></tr></tbody></table>');
				}

				// append the wrapper to the document body
				_wrapper.appendTo('body');

				// apply IE filters to _wrapper elements
				if ((/msie/.test(navigator.userAgent.toLowerCase())) && (!/opera/.test(navigator.userAgent.toLowerCase()))) {
					$('*', _wrapper).each(function () {
						var image = $(this).css('background-image');
						if (image.match(/^url\(["']?(.*\.png)["']?\)$/i)) {
							image = RegExp.$1;
							$(this).css({
								'backgroundImage': 'none',
								'filter': 'progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=' + ($(this).css('backgroundRepeat') == 'no-repeat' ? 'crop' : 'scale') + ', src=\'' + image + '\')'
							}).each(function () {
								var position = $(this).css('position');
								if (position != 'absolute' && position != 'relative')
									$(this).css('position', 'relative');
							});
						}
					});
				}
				// move the tip element into the content section of the wrapper
				$('.bt-content', _wrapper).append(_tip);
				// show the tip (in case it is hidden) so that we can calculate its dimensions
				_tip.show();
				// handle left|right delta
				if (_options.deltaDirection.match(/^left|right$/i)) {
					// tail is 40px, so divide height by two and subtract 20px;
					_calc.tipHeight = parseInt(_tip.height() / 2, 10);
					// handle odd integer height
					if ((_tip.height() % 2) == 1) {
						_calc.tipHeight++;
					}
					_calc.tipHeight = (_calc.tipHeight < 20) ? 1 : _calc.tipHeight - 20;
					if (_options.deltaDirection.match(/^left$/i)) {
						$('div.bt-right', _wrapper).css('height', _calc.tipHeight + 'px');
					} else {
						$('div.bt-left', _wrapper).css('height', _calc.tipHeight + 'px');
					}
				}
				// set the opacity of the wrapper to 0
				_wrapper.css('opacity', 0);
				// hack for FF 3.6
				_wrapper.css({ 'width': _wrapper.width(), 'height': _wrapper.height() });
				// execute initial calculations
				_Calculate();
				_wrapper.hide();

				// handle window.resize
				$(window).bind('resize.bubbletip' + _bindIndex, function () {
					var w = $(window).width();
					var h = $(window).height();

					if (_options.position.match(/^fixed$/i) || ((w === _windowWidth) && (h === _windowHeight))) {
						return;
					}
					_windowWidth = w;
					_windowHeight = h;

					if (_timeoutRefresh) {
						clearTimeout(_timeoutRefresh);
					}
					_timeoutRefresh = setTimeout(function () {
						_Calculate();
					}, 250);
				});
				$([_wrapper.get(0), this.get(0)]).bind('open.bubbletip', function () {
					_isActive = false;
					if (_timeoutAnimate) {
						clearTimeout(_timeoutAnimate);
					}
					if (_options.delayShow === 0) {
						_Show();
					} else {
						_timeoutAnimate = setTimeout(function () {
							_Show();
						}, _options.delayShow);
					}
					return false;
				});

				$([_wrapper.get(0), this.get(0)]).bind('close.bubbletip', function () {
					if (_timeoutAnimate) {
						clearTimeout(_timeoutAnimate);
					}
					if (_options.delayHide === 0) {
						_Hide();
					} else {
						_timeoutAnimate = setTimeout(function () {
							_Hide();
						}, _options.delayHide);
					}
					return false;
				});

				$([_wrapper.get(0), this.get(0)]).bind('hide.bubbletip', function () {
					_Hide(true);
					return false;
				});

				function _Show() {
					var animation;

					if (_isActive) { // the tip is currently showing; do nothing
						return;
					}
					_isActive = true;
					if (_isHiding) { // the tip is currently hiding; interrupt and start showing again
						_wrapper.stop(true, false);
					}

					if (_options.calculateOnShow) {
						_Calculate();
					}
					if (_options.position.match(/^fixed$/i)) {
						animation = {};
						if (_options.deltaDirection.match(/^up|down$/i)) {
							if (_options.fixedVertical.match(/^top$/i)) {
								if (!_isHiding) {
									_wrapper.css('top', parseInt(_calc.top - _calc.delta, 10) + 'px');
								}
								animation.top = parseInt(_calc.top, 10) + 'px';
							} else {
								if (!_isHiding) {
									_wrapper.css('bottom', parseInt(_calc.bottom + _calc.delta, 10) + 'px');
								}
								animation.bottom = parseInt(_calc.bottom, 10) + 'px';
							}
						} else {
							if (_options.fixedHorizontal.match(/^right$/i)) {
								if (!_isHiding) {
									if (_options.fixedVertical.match(/^top$/i)) {
										_wrapper.css({ 'top': parseInt(_calc.top, 10) + 'px', 'right': parseInt(_calc.right - _calc.delta, 10) + 'px' });
									} else {
										_wrapper.css({ 'bottom': parseInt(_calc.bottom, 10) + 'px', 'right': parseInt(_calc.right - _calc.delta, 10) + 'px' });
									}
								}
								animation.right = parseInt(_calc.right, 10) + 'px';
							} else {
								if (!_isHiding) {
									if (_options.fixedVertical.match(/^top$/i)) {
										_wrapper.css({ 'top': parseInt(_calc.top, 10) + 'px', 'left': parseInt(_calc.left + _calc.delta, 10) + 'px' });
									} else {
										_wrapper.css({ 'bottom': parseInt(_calc.bottom, 10) + 'px', 'left': parseInt(_calc.left + _calc.delta, 10) + 'px' });
									}
								}
								animation.left = parseInt(_calc.left, 10) + 'px';
							}
						}
					} else {
						if (_options.positionAt.match(/^element|body$/i)) {
							if (_options.deltaDirection.match(/^up|down$/i)) {
								if (!_isHiding) {
									_wrapper.css('top', parseInt(_calc.top - _calc.delta, 10) + 'px');
								}
								animation = { 'top': _calc.top + 'px' };
							} else {
								if (!_isHiding) {
									_wrapper.css('left', parseInt(_calc.left - _calc.delta, 10) + 'px');
								}
								animation = { 'left': _calc.left + 'px' };
							}
						} else {
							if (_options.deltaDirection.match(/^up|down$/i)) {
								if (!_isHiding) {
									_calc.mouseTop = e.pageY + _calc.top;
									_wrapper.css({ 'top': parseInt(_calc.mouseTop + _calc.delta, 10) + 'px', 'left': parseInt(e.pageX - (_wrapper.width() / 2), 10) + 'px' });
								}
								animation = { 'top': _calc.mouseTop + 'px' };
							} else {
								if (!_isHiding) {
									_calc.mouseLeft = e.pageX + _calc.left;
									_wrapper.css({ 'left': parseInt(_calc.mouseLeft + _calc.delta, 10) + 'px', 'top': parseInt(e.pageY - (_wrapper.height() / 2), 10) + 'px' });
								}
								animation = { 'left': _calc.left + 'px' };
							}
						}
					}
					_isHiding = false;
					_wrapper.show();
					animation = $.extend(animation, { 'opacity': 1 });
					_wrapper.animate(animation, _options.animationDuration, _options.animationEasing, function () {
						if (_options.position.match(/^fixed$/i)) {
							_wrapper.css({
								'opacity': '',
								'position': 'fixed',
								'top': _calc.top,
								'left': _calc.left
							});
						} else {
							_wrapper.css('opacity', '');
						}
						_isActive = true;
					});
				}
				function _Hide(immediate) {
					var animation;

					_isActive = false;
					_isHiding = true;
					if (_options.position.match(/^fixed$/i)) {
						animation = {};
						if (_options.deltaDirection.match(/^up|down$/i))  {
							if (_calc.bottom !== '') { animation.bottom = parseInt(_calc.bottom + _calc.delta, 10) + 'px'; }
							if (_calc.top !== '') { animation.top = parseInt(_calc.top - _calc.delta, 10) + 'px'; }
						} else {
							if (_options.fixedHorizontal.match(/^left$/i)) {
								if (_calc.right !== '') { animation.right = parseInt(_calc.right + _calc.delta, 10) + 'px'; }
								if (_calc.left !== '') { animation.left = parseInt(_calc.left + _calc.delta, 10) + 'px'; }
							} else {
								if (_calc.right !== '') { animation.right = parseInt(_calc.right - _calc.delta, 10) + 'px'; }
								if (_calc.left !== '') { animation.left = parseInt(_calc.left - _calc.delta, 10) + 'px'; }
							}
						}
					} else {
						if (_options.positionAt.match(/^element|body$/i)) {
							if (_options.deltaDirection.match(/^up|down$/i)) {
								animation = { 'top': parseInt(_calc.top - _calc.delta, 10) + 'px' };
							} else {
								animation = { 'left': parseInt(_calc.left - _calc.delta, 10) + 'px' };
							}
						} else {
							if (_options.deltaDirection.match(/^up|down$/i)) {
								animation = { 'top': parseInt(_calc.mouseTop - _calc.delta, 10) + 'px' };
							} else {
								animation = { 'left': parseInt(_calc.mouseLeft - _calc.delta, 10) + 'px' };
							}
						}
					}
					animation = $.extend(animation, {
						'opacity': 0
					});

					if (immediate) {
						_wrapper.css(animation);
						_wrapper.hide();
						_isHiding = false;
					} else {
						_wrapper.animate(animation, _options.animationDuration, _options.animationEasing, function () {
							_wrapper.hide();
							_isHiding = false;
						});
					}
				}
				function _Calculate() {
					var offset;
					// calculate values
					if (_options.position.match(/^fixed$/i)) {
						offset = _options.positionAtElement.offset();
						if (_options.fixedHorizontal.match(/^left$/i)) {
							_calc.left = offset.left + (_options.positionAtElement.outerWidth() / 2);
						} else {
							_calc.left = '';
						}
						if (_options.fixedHorizontal.match(/^right$/i)) {
							_calc.right = ($(window).width() - offset.left) - ((_options.positionAtElement.outerWidth() + _wrapper.outerWidth()) / 2);
						} else {
							_calc.right = '';
						}
						if (_options.fixedVertical.match(/^top$/i)) {
							_calc.top = offset.top - $(window).scrollTop() - _wrapper.outerHeight();
						} else {
							_calc.top = '';
						}
						if (_options.fixedVertical.match(/^bottom$/i)) {
							_calc.bottom = $(window).scrollTop() + $(window).height() - offset.top + _options.offsetTop;
						} else {
							_calc.bottom = '';
						}
						if (_options.deltaDirection.match(/^left|right$/i)) {
							if (_options.fixedVertical.match(/^top$/i)) {
								_calc.top = _calc.top + (_wrapper.outerHeight() / 2) + (_options.positionAtElement.outerHeight() / 2);
							} else {
								_calc.bottom = _calc.bottom - (_wrapper.outerHeight() / 2) - (_options.positionAtElement.outerHeight() / 2);
							}
						}
						if (_options.deltaDirection.match(/^left$/i)) {
							if (_options.fixedHorizontal.match(/^left$/i)) {
								_calc.left = _calc.left - _wrapper.outerWidth();
							} else {
								_calc.right = _calc.right + (_wrapper.outerWidth() / 2);
							}
						} else if (_options.deltaDirection.match(/^right$/i)) {
							if (_options.fixedHorizontal.match(/^left$/i)) {
								_calc.left = _calc.left;
							} else {
								_calc.right = _calc.right - (_wrapper.outerWidth() / 2);
							}
						} else if (_options.deltaDirection.match(/^down$/i)) {
							if (_options.fixedVertical.match(/^top$/i)) {
								_calc.top = _calc.top + _wrapper.outerHeight() + _options.positionAtElement.outerHeight();
							} else {
								_calc.bottom = _calc.bottom - _wrapper.outerHeight() - _options.positionAtElement.outerHeight();
							}
							if (_options.fixedHorizontal.match(/^left$/i)) {
								_calc.left = _calc.left - (_wrapper.outerWidth() / 2);
							}
						} else {
							if (_options.fixedHorizontal.match(/^left$/i)) {
								_calc.left = _calc.left - (_wrapper.outerWidth() / 2);
							}
						}
						if (_options.deltaDirection.match(/^up|right$/i) && _options.fixedHorizontal.match(/^left|right$/i)) {
							_calc.delta = _options.deltaPosition;
						} else {
							_calc.delta = -_options.deltaPosition;
						}
					} else if (_options.positionAt.match(/^element$/i)) {
						offset = _options.positionAtElement.offset();
						if (_options.deltaDirection.match(/^up$/i)) {
							_calc.top = offset.top + _options.offsetTop - _wrapper.outerHeight();
							_calc.left = offset.left + _options.offsetLeft + ((_options.positionAtElement.outerWidth() - _wrapper.outerWidth()) / 2);
							_calc.delta = _options.deltaPosition;
						} else if (_options.deltaDirection.match(/^down$/i)) {
							_calc.top = offset.top + _options.positionAtElement.outerHeight() + _options.offsetTop;
							_calc.left = offset.left + _options.offsetLeft + ((_options.positionAtElement.outerWidth() - _wrapper.outerWidth()) / 2);
							_calc.delta = -_options.deltaPosition;
						} else if (_options.deltaDirection.match(/^left$/i)) {
							_calc.top = offset.top + _options.offsetTop + ((_options.positionAtElement.outerHeight() - _wrapper.outerHeight()) / 2);
							_calc.left = offset.left + _options.offsetLeft - _wrapper.outerWidth();
							_calc.delta = _options.deltaPosition;
						} else if (_options.deltaDirection.match(/^right$/i)) {
							_calc.top = offset.top + _options.offsetTop + ((_options.positionAtElement.outerHeight() - _wrapper.outerHeight()) / 2);
							_calc.left = offset.left + _options.positionAtElement.outerWidth() + _options.offsetLeft;
							_calc.delta = -_options.deltaPosition;
						}
					} else if (_options.positionAt.match(/^body$/i)) {
						if (_options.deltaDirection.match(/^up|left$/i)) {
							_calc.top = _options.offsetTop;
							_calc.left = _options.offsetLeft;
							// up or left
							_calc.delta = _options.deltaPosition;
						} else {
							if (_options.deltaDirection.match(/^down$/i)) {
								_calc.top = parseInt(_options.offsetTop + _wrapper.outerHeight(), 10);
								_calc.left = _options.offsetLeft;
							} else {
								_calc.top = _options.offsetTop;
								_calc.left = parseInt(_options.offsetLeft + _wrapper.outerWidth(), 10);
							}
							// down or right
							_calc.delta = -_options.deltaPosition;
						}
					} else if (_options.positionAt.match(/^mouse$/i)) {
						if (_options.deltaDirection.match(/^up|left$/i)) {
							if (_options.deltaDirection.match(/^up$/i)) {
								_calc.top = -(_options.offsetTop + _wrapper.outerHeight());
								_calc.left = _options.offsetLeft;
							} else if (_options.deltaDirection.match(/^left$/i)) {
								_calc.top = _options.offsetTop;
								_calc.left = -(_options.offsetLeft + _wrapper.outerWidth());
							}
							// up or left
							_calc.delta = _options.deltaPosition;
						} else {
							_calc.top = _options.offsetTop;
							_calc.left = _options.offsetLeft;
							// down or right
							_calc.delta = -_options.deltaPosition;
						}
					}

					// handle the wrapper (element|body) positioning
					if (_options.position.match(/^fixed$/i)) {
						if (_options.positionAt.match(/^element|body$/i)) {
							_wrapper.css({
								'position': 'fixed',
								'left': _calc.left,
								'top': _calc.top,
								'right': _calc.right + 'px',
								'bottom': _calc.bottom + 'px'
							});
						}
					} else {
						if (_options.positionAt.match(/^element|body$/i)) {
							_wrapper.css({
								'position': 'absolute',
								'top': _calc.top + 'px',
								'left': _calc.left + 'px'
							});
						}
					}
				}
				return this;
			},
			removeBubbletip: function (tips) {
				var tipsActive;
				var tipsToRemove = [];
				var tipsActiveAdjusted = [];
				var arr, i, ix;
				var elem;

				tipsActive = $.makeArray($(this).data('bubbletip_tips'));

				// convert the parameter array of tip id's or elements to id's
				arr = $.makeArray(tips);
				for (i = 0; i < arr.length; i++) {
					tipsToRemove.push($(arr[i]).get(0).id);
				}

				for (i = 0; i < tipsActive.length; i++) {
					ix = null;
					if ((tipsToRemove.length === 0) || ((ix = $.inArray(tipsActive[i][0], tipsToRemove)) >= 0)) {
						// remove all tips if there are none specified
						// otherwise, remove only specified tips

						// find the surrounding table.bubbletip
						elem = $('#' + tipsActive[i][0]).get(0).parentNode;
						while (elem.tagName.toLowerCase() != 'table') {
							elem = elem.parentNode;
						}
						// attach the tip element to body and hide
						$('#' + tipsActive[i][0]).appendTo('body').hide();
						// remove the surrounding table.bubbletip
						$(elem).remove();

						// unbind show/hide events
						$(this).unbind('.bubbletip' + tipsActive[i][1]);

						// unbind window.resize event
						$(window).unbind('.bubbletip' + tipsActive[i][1]);
					} else {
						// tip is not being removed, so add it to the adjusted array
						tipsActiveAdjusted.push(tipsActive[i]);
					}
				}
				$(this).data('bubbletip_tips', tipsActiveAdjusted);

				return this;
			}
		});
	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*!
	 * Bootstrap v3.1.1 (http://getbootstrap.com)
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 */

	if (typeof jQuery === 'undefined') { throw new Error('Bootstrap\'s JavaScript requires jQuery') }

	/* ========================================================================
	 * Bootstrap: transition.js v3.1.1
	 * http://getbootstrap.com/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
	  // ============================================================

	  function transitionEnd() {
	    var el = document.createElement('bootstrap')

	    var transEndEventNames = {
	      'WebkitTransition' : 'webkitTransitionEnd',
	      'MozTransition'    : 'transitionend',
	      'OTransition'      : 'oTransitionEnd otransitionend',
	      'transition'       : 'transitionend'
	    }

	    for (var name in transEndEventNames) {
	      if (el.style[name] !== undefined) {
	        return { end: transEndEventNames[name] }
	      }
	    }

	    return false // explicit for ie8 (  ._.)
	  }

	  // http://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
	    var called = false, $el = this
	    $(this).one($.support.transition.end, function () { called = true })
	    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
	    setTimeout(callback, duration)
	    return this
	  }

	  $(function () {
	    $.support.transition = transitionEnd()
	  })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: alert.js v3.1.1
	 * http://getbootstrap.com/javascript/#alerts
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // ALERT CLASS DEFINITION
	  // ======================

	  var dismiss = '[data-dismiss="alert"]'
	  var Alert   = function (el) {
	    $(el).on('click', dismiss, this.close)
	  }

	  Alert.prototype.close = function (e) {
	    var $this    = $(this)
	    var selector = $this.attr('data-target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }

	    var $parent = $(selector)

	    if (e) e.preventDefault()

	    if (!$parent.length) {
	      $parent = $this.hasClass('alert') ? $this : $this.parent()
	    }

	    $parent.trigger(e = $.Event('close.bs.alert'))

	    if (e.isDefaultPrevented()) return

	    $parent.removeClass('in')

	    function removeElement() {
	      $parent.trigger('closed.bs.alert').remove()
	    }

	    $.support.transition && $parent.hasClass('fade') ?
	      $parent
	        .one($.support.transition.end, removeElement)
	        .emulateTransitionEnd(150) :
	      removeElement()
	  }


	  // ALERT PLUGIN DEFINITION
	  // =======================

	  var old = $.fn.alert

	  $.fn.alert = function (option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.alert')

	      if (!data) $this.data('bs.alert', (data = new Alert(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }

	  $.fn.alert.Constructor = Alert


	  // ALERT NO CONFLICT
	  // =================

	  $.fn.alert.noConflict = function () {
	    $.fn.alert = old
	    return this
	  }


	  // ALERT DATA-API
	  // ==============

	  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: button.js v3.1.1
	 * http://getbootstrap.com/javascript/#buttons
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // BUTTON PUBLIC CLASS DEFINITION
	  // ==============================

	  var Button = function (element, options) {
	    this.$element  = $(element)
	    this.options   = $.extend({}, Button.DEFAULTS, options)
	    this.isLoading = false
	  }

	  Button.DEFAULTS = {
	    loadingText: 'loading...'
	  }

	  Button.prototype.setState = function (state) {
	    var d    = 'disabled'
	    var $el  = this.$element
	    var val  = $el.is('input') ? 'val' : 'html'
	    var data = $el.data()

	    state = state + 'Text'

	    if (!data.resetText) $el.data('resetText', $el[val]())

	    $el[val](data[state] || this.options[state])

	    // push to event loop to allow forms to submit
	    setTimeout($.proxy(function () {
	      if (state == 'loadingText') {
	        this.isLoading = true
	        $el.addClass(d).attr(d, d)
	      } else if (this.isLoading) {
	        this.isLoading = false
	        $el.removeClass(d).removeAttr(d)
	      }
	    }, this), 0)
	  }

	  Button.prototype.toggle = function () {
	    var changed = true
	    var $parent = this.$element.closest('[data-toggle="buttons"]')

	    if ($parent.length) {
	      var $input = this.$element.find('input')
	      if ($input.prop('type') == 'radio') {
	        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false
	        else $parent.find('.active').removeClass('active')
	      }
	      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
	    }

	    if (changed) this.$element.toggleClass('active')
	  }


	  // BUTTON PLUGIN DEFINITION
	  // ========================

	  var old = $.fn.button

	  $.fn.button = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.button')
	      var options = typeof option == 'object' && option

	      if (!data) $this.data('bs.button', (data = new Button(this, options)))

	      if (option == 'toggle') data.toggle()
	      else if (option) data.setState(option)
	    })
	  }

	  $.fn.button.Constructor = Button


	  // BUTTON NO CONFLICT
	  // ==================

	  $.fn.button.noConflict = function () {
	    $.fn.button = old
	    return this
	  }


	  // BUTTON DATA-API
	  // ===============

	  $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
	    var $btn = $(e.target)
	    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
	    $btn.button('toggle')
	    e.preventDefault()
	  })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: carousel.js v3.1.1
	 * http://getbootstrap.com/javascript/#carousel
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // CAROUSEL CLASS DEFINITION
	  // =========================

	  var Carousel = function (element, options) {
	    this.$element    = $(element)
	    this.$indicators = this.$element.find('.carousel-indicators')
	    this.options     = options
	    this.paused      =
	    this.sliding     =
	    this.interval    =
	    this.$active     =
	    this.$items      = null

	    this.options.pause == 'hover' && this.$element
	      .on('mouseenter', $.proxy(this.pause, this))
	      .on('mouseleave', $.proxy(this.cycle, this))
	  }

	  Carousel.DEFAULTS = {
	    interval: 5000,
	    pause: 'hover',
	    wrap: true
	  }

	  Carousel.prototype.cycle =  function (e) {
	    e || (this.paused = false)

	    this.interval && clearInterval(this.interval)

	    this.options.interval
	      && !this.paused
	      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

	    return this
	  }

	  Carousel.prototype.getActiveIndex = function () {
	    this.$active = this.$element.find('.item.active')
	    this.$items  = this.$active.parent().children()

	    return this.$items.index(this.$active)
	  }

	  Carousel.prototype.to = function (pos) {
	    var that        = this
	    var activeIndex = this.getActiveIndex()

	    if (pos > (this.$items.length - 1) || pos < 0) return

	    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) })
	    if (activeIndex == pos) return this.pause().cycle()

	    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
	  }

	  Carousel.prototype.pause = function (e) {
	    e || (this.paused = true)

	    if (this.$element.find('.next, .prev').length && $.support.transition) {
	      this.$element.trigger($.support.transition.end)
	      this.cycle(true)
	    }

	    this.interval = clearInterval(this.interval)

	    return this
	  }

	  Carousel.prototype.next = function () {
	    if (this.sliding) return
	    return this.slide('next')
	  }

	  Carousel.prototype.prev = function () {
	    if (this.sliding) return
	    return this.slide('prev')
	  }

	  Carousel.prototype.slide = function (type, next) {
	    var $active   = this.$element.find('.item.active')
	    var $next     = next || $active[type]()
	    var isCycling = this.interval
	    var direction = type == 'next' ? 'left' : 'right'
	    var fallback  = type == 'next' ? 'first' : 'last'
	    var that      = this

	    if (!$next.length) {
	      if (!this.options.wrap) return
	      $next = this.$element.find('.item')[fallback]()
	    }

	    if ($next.hasClass('active')) return this.sliding = false

	    var e = $.Event('slide.bs.carousel', { relatedTarget: $next[0], direction: direction })
	    this.$element.trigger(e)
	    if (e.isDefaultPrevented()) return

	    this.sliding = true

	    isCycling && this.pause()

	    if (this.$indicators.length) {
	      this.$indicators.find('.active').removeClass('active')
	      this.$element.one('slid.bs.carousel', function () {
	        var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
	        $nextIndicator && $nextIndicator.addClass('active')
	      })
	    }

	    if ($.support.transition && this.$element.hasClass('slide')) {
	      $next.addClass(type)
	      $next[0].offsetWidth // force reflow
	      $active.addClass(direction)
	      $next.addClass(direction)
	      $active
	        .one($.support.transition.end, function () {
	          $next.removeClass([type, direction].join(' ')).addClass('active')
	          $active.removeClass(['active', direction].join(' '))
	          that.sliding = false
	          setTimeout(function () { that.$element.trigger('slid.bs.carousel') }, 0)
	        })
	        .emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000)
	    } else {
	      $active.removeClass('active')
	      $next.addClass('active')
	      this.sliding = false
	      this.$element.trigger('slid.bs.carousel')
	    }

	    isCycling && this.cycle()

	    return this
	  }


	  // CAROUSEL PLUGIN DEFINITION
	  // ==========================

	  var old = $.fn.carousel

	  $.fn.carousel = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.carousel')
	      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
	      var action  = typeof option == 'string' ? option : options.slide

	      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
	      if (typeof option == 'number') data.to(option)
	      else if (action) data[action]()
	      else if (options.interval) data.pause().cycle()
	    })
	  }

	  $.fn.carousel.Constructor = Carousel


	  // CAROUSEL NO CONFLICT
	  // ====================

	  $.fn.carousel.noConflict = function () {
	    $.fn.carousel = old
	    return this
	  }


	  // CAROUSEL DATA-API
	  // =================

	  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
	    var $this   = $(this), href
	    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
	    var options = $.extend({}, $target.data(), $this.data())
	    var slideIndex = $this.attr('data-slide-to')
	    if (slideIndex) options.interval = false

	    $target.carousel(options)

	    if (slideIndex = $this.attr('data-slide-to')) {
	      $target.data('bs.carousel').to(slideIndex)
	    }

	    e.preventDefault()
	  })

	  $(window).on('load', function () {
	    $('[data-ride="carousel"]').each(function () {
	      var $carousel = $(this)
	      $carousel.carousel($carousel.data())
	    })
	  })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: collapse.js v3.1.1
	 * http://getbootstrap.com/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================

	  var Collapse = function (element, options) {
	    this.$element      = $(element)
	    this.options       = $.extend({}, Collapse.DEFAULTS, options)
	    this.transitioning = null

	    if (this.options.parent) this.$parent = $(this.options.parent)
	    if (this.options.toggle) this.toggle()
	  }

	  Collapse.DEFAULTS = {
	    toggle: true
	  }

	  Collapse.prototype.dimension = function () {
	    var hasWidth = this.$element.hasClass('width')
	    return hasWidth ? 'width' : 'height'
	  }

	  Collapse.prototype.show = function () {
	    if (this.transitioning || this.$element.hasClass('in')) return

	    var startEvent = $.Event('show.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return

	    var actives = this.$parent && this.$parent.find('> .panel > .in')

	    if (actives && actives.length) {
	      var hasData = actives.data('bs.collapse')
	      if (hasData && hasData.transitioning) return
	      actives.collapse('hide')
	      hasData || actives.data('bs.collapse', null)
	    }

	    var dimension = this.dimension()

	    this.$element
	      .removeClass('collapse')
	      .addClass('collapsing')
	      [dimension](0)

	    this.transitioning = 1

	    var complete = function () {
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse in')
	        [dimension]('auto')
	      this.transitioning = 0
	      this.$element.trigger('shown.bs.collapse')
	    }

	    if (!$.support.transition) return complete.call(this)

	    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

	    this.$element
	      .one($.support.transition.end, $.proxy(complete, this))
	      .emulateTransitionEnd(350)
	      [dimension](this.$element[0][scrollSize])
	  }

	  Collapse.prototype.hide = function () {
	    if (this.transitioning || !this.$element.hasClass('in')) return

	    var startEvent = $.Event('hide.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return

	    var dimension = this.dimension()

	    this.$element
	      [dimension](this.$element[dimension]())
	      [0].offsetHeight

	    this.$element
	      .addClass('collapsing')
	      .removeClass('collapse')
	      .removeClass('in')

	    this.transitioning = 1

	    var complete = function () {
	      this.transitioning = 0
	      this.$element
	        .trigger('hidden.bs.collapse')
	        .removeClass('collapsing')
	        .addClass('collapse')
	    }

	    if (!$.support.transition) return complete.call(this)

	    this.$element
	      [dimension](0)
	      .one($.support.transition.end, $.proxy(complete, this))
	      .emulateTransitionEnd(350)
	  }

	  Collapse.prototype.toggle = function () {
	    this[this.$element.hasClass('in') ? 'hide' : 'show']()
	  }


	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================

	  var old = $.fn.collapse

	  $.fn.collapse = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.collapse')
	      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

	      if (!data && options.toggle && option == 'show') option = !option
	      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  $.fn.collapse.Constructor = Collapse


	  // COLLAPSE NO CONFLICT
	  // ====================

	  $.fn.collapse.noConflict = function () {
	    $.fn.collapse = old
	    return this
	  }


	  // COLLAPSE DATA-API
	  // =================

	  $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
	    var $this   = $(this), href
	    var target  = $this.attr('data-target')
	        || e.preventDefault()
	        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
	    var $target = $(target)
	    var data    = $target.data('bs.collapse')
	    var option  = data ? 'toggle' : $this.data()
	    var parent  = $this.attr('data-parent')
	    var $parent = parent && $(parent)

	    if (!data || !data.transitioning) {
	      if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed')
	      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
	    }

	    $target.collapse(option)
	  })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: dropdown.js v3.1.1
	 * http://getbootstrap.com/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // DROPDOWN CLASS DEFINITION
	  // =========================

	  var backdrop = '.dropdown-backdrop'
	  var toggle   = '[data-toggle=dropdown]'
	  var Dropdown = function (element) {
	    $(element).on('click.bs.dropdown', this.toggle)
	  }

	  Dropdown.prototype.toggle = function (e) {
	    var $this = $(this)

	    if ($this.is('.disabled, :disabled')) return

	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')

	    clearMenus()

	    if (!isActive) {
	      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
	        // if mobile we use a backdrop because click events don't delegate
	        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
	      }

	      var relatedTarget = { relatedTarget: this }
	      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

	      if (e.isDefaultPrevented()) return

	      $parent
	        .toggleClass('open')
	        .trigger('shown.bs.dropdown', relatedTarget)

	      $this.focus()
	    }

	    return false
	  }

	  Dropdown.prototype.keydown = function (e) {
	    if (!/(38|40|27)/.test(e.keyCode)) return

	    var $this = $(this)

	    e.preventDefault()
	    e.stopPropagation()

	    if ($this.is('.disabled, :disabled')) return

	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')

	    if (!isActive || (isActive && e.keyCode == 27)) {
	      if (e.which == 27) $parent.find(toggle).focus()
	      return $this.click()
	    }

	    var desc = ' li:not(.divider):visible a'
	    var $items = $parent.find('[role=menu]' + desc + ', [role=listbox]' + desc)

	    if (!$items.length) return

	    var index = $items.index($items.filter(':focus'))

	    if (e.keyCode == 38 && index > 0)                 index--                        // up
	    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
	    if (!~index)                                      index = 0

	    $items.eq(index).focus()
	  }

	  function clearMenus(e) {
	    $(backdrop).remove()
	    $(toggle).each(function () {
	      var $parent = getParent($(this))
	      var relatedTarget = { relatedTarget: this }
	      if (!$parent.hasClass('open')) return
	      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
	      if (e.isDefaultPrevented()) return
	      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
	    })
	  }

	  function getParent($this) {
	    var selector = $this.attr('data-target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
	    }

	    var $parent = selector && $(selector)

	    return $parent && $parent.length ? $parent : $this.parent()
	  }


	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================

	  var old = $.fn.dropdown

	  $.fn.dropdown = function (option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.dropdown')

	      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }

	  $.fn.dropdown.Constructor = Dropdown


	  // DROPDOWN NO CONFLICT
	  // ====================

	  $.fn.dropdown.noConflict = function () {
	    $.fn.dropdown = old
	    return this
	  }


	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================

	  $(document)
	    .on('click.bs.dropdown.data-api', clearMenus)
	    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
	    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
	    .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu], [role=listbox]', Dropdown.prototype.keydown)

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: modal.js v3.1.1
	 * http://getbootstrap.com/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // MODAL CLASS DEFINITION
	  // ======================

	  var Modal = function (element, options) {
	    this.options   = options
	    this.$element  = $(element)
	    this.$backdrop =
	    this.isShown   = null

	    if (this.options.remote) {
	      this.$element
	        .find('.modal-content')
	        .load(this.options.remote, $.proxy(function () {
	          this.$element.trigger('loaded.bs.modal')
	        }, this))
	    }
	  }

	  Modal.DEFAULTS = {
	    backdrop: true,
	    keyboard: true,
	    show: true
	  }

	  Modal.prototype.toggle = function (_relatedTarget) {
	    return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
	  }

	  Modal.prototype.show = function (_relatedTarget) {
	    var that = this
	    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

	    this.$element.trigger(e)

	    if (this.isShown || e.isDefaultPrevented()) return

	    this.isShown = true

	    this.escape()

	    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

	    this.backdrop(function () {
	      var transition = $.support.transition && that.$element.hasClass('fade')

	      if (!that.$element.parent().length) {
	        that.$element.appendTo(document.body) // don't move modals dom position
	      }

	      that.$element
	        .show()
	        .scrollTop(0)

	      if (transition) {
	        that.$element[0].offsetWidth // force reflow
	      }

	      that.$element
	        .addClass('in')
	        .attr('aria-hidden', false)

	      that.enforceFocus()

	      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

	      transition ?
	        that.$element.find('.modal-dialog') // wait for modal to slide in
	          .one($.support.transition.end, function () {
	            that.$element.focus().trigger(e)
	          })
	          .emulateTransitionEnd(300) :
	        that.$element.focus().trigger(e)
	    })
	  }

	  Modal.prototype.hide = function (e) {
	    if (e) e.preventDefault()

	    e = $.Event('hide.bs.modal')

	    this.$element.trigger(e)

	    if (!this.isShown || e.isDefaultPrevented()) return

	    this.isShown = false

	    this.escape()

	    $(document).off('focusin.bs.modal')

	    this.$element
	      .removeClass('in')
	      .attr('aria-hidden', true)
	      .off('click.dismiss.bs.modal')

	    $.support.transition && this.$element.hasClass('fade') ?
	      this.$element
	        .one($.support.transition.end, $.proxy(this.hideModal, this))
	        .emulateTransitionEnd(300) :
	      this.hideModal()
	  }

	  Modal.prototype.enforceFocus = function () {
	    $(document)
	      .off('focusin.bs.modal') // guard against infinite focus loop
	      .on('focusin.bs.modal', $.proxy(function (e) {
	        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
	          this.$element.focus()
	        }
	      }, this))
	  }

	  Modal.prototype.escape = function () {
	    if (this.isShown && this.options.keyboard) {
	      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
	        e.which == 27 && this.hide()
	      }, this))
	    } else if (!this.isShown) {
	      this.$element.off('keyup.dismiss.bs.modal')
	    }
	  }

	  Modal.prototype.hideModal = function () {
	    var that = this
	    this.$element.hide()
	    this.backdrop(function () {
	      that.removeBackdrop()
	      that.$element.trigger('hidden.bs.modal')
	    })
	  }

	  Modal.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove()
	    this.$backdrop = null
	  }

	  Modal.prototype.backdrop = function (callback) {
	    var animate = this.$element.hasClass('fade') ? 'fade' : ''

	    if (this.isShown && this.options.backdrop) {
	      var doAnimate = $.support.transition && animate

	      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
	        .appendTo(document.body)

	      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
	        if (e.target !== e.currentTarget) return
	        this.options.backdrop == 'static'
	          ? this.$element[0].focus.call(this.$element[0])
	          : this.hide.call(this)
	      }, this))

	      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

	      this.$backdrop.addClass('in')

	      if (!callback) return

	      doAnimate ?
	        this.$backdrop
	          .one($.support.transition.end, callback)
	          .emulateTransitionEnd(150) :
	        callback()

	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass('in')

	      $.support.transition && this.$element.hasClass('fade') ?
	        this.$backdrop
	          .one($.support.transition.end, callback)
	          .emulateTransitionEnd(150) :
	        callback()

	    } else if (callback) {
	      callback()
	    }
	  }


	  // MODAL PLUGIN DEFINITION
	  // =======================

	  var old = $.fn.modal

	  $.fn.modal = function (option, _relatedTarget) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.modal')
	      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

	      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
	      if (typeof option == 'string') data[option](_relatedTarget)
	      else if (options.show) data.show(_relatedTarget)
	    })
	  }

	  $.fn.modal.Constructor = Modal


	  // MODAL NO CONFLICT
	  // =================

	  $.fn.modal.noConflict = function () {
	    $.fn.modal = old
	    return this
	  }


	  // MODAL DATA-API
	  // ==============

	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
	    var $this   = $(this)
	    var href    = $this.attr('href')
	    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
	    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

	    if ($this.is('a')) e.preventDefault()

	    $target
	      .modal(option, this)
	      .one('hide', function () {
	        $this.is(':visible') && $this.focus()
	      })
	  })

	  $(document)
	    .on('show.bs.modal', '.modal', function () { $(document.body).addClass('modal-open') })
	    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: tooltip.js v3.1.1
	 * http://getbootstrap.com/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================

	  var Tooltip = function (element, options) {
	    this.type       =
	    this.options    =
	    this.enabled    =
	    this.timeout    =
	    this.hoverState =
	    this.$element   = null

	    this.init('tooltip', element, options)
	  }

	  Tooltip.DEFAULTS = {
	    animation: true,
	    placement: 'top',
	    selector: false,
	    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    container: false
	  }

	  Tooltip.prototype.init = function (type, element, options) {
	    this.enabled  = true
	    this.type     = type
	    this.$element = $(element)
	    this.options  = this.getOptions(options)

	    var triggers = this.options.trigger.split(' ')

	    for (var i = triggers.length; i--;) {
	      var trigger = triggers[i]

	      if (trigger == 'click') {
	        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
	      } else if (trigger != 'manual') {
	        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
	        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

	        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
	        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
	      }
	    }

	    this.options.selector ?
	      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
	      this.fixTitle()
	  }

	  Tooltip.prototype.getDefaults = function () {
	    return Tooltip.DEFAULTS
	  }

	  Tooltip.prototype.getOptions = function (options) {
	    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

	    if (options.delay && typeof options.delay == 'number') {
	      options.delay = {
	        show: options.delay,
	        hide: options.delay
	      }
	    }

	    return options
	  }

	  Tooltip.prototype.getDelegateOptions = function () {
	    var options  = {}
	    var defaults = this.getDefaults()

	    this._options && $.each(this._options, function (key, value) {
	      if (defaults[key] != value) options[key] = value
	    })

	    return options
	  }

	  Tooltip.prototype.enter = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

	    clearTimeout(self.timeout)

	    self.hoverState = 'in'

	    if (!self.options.delay || !self.options.delay.show) return self.show()

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'in') self.show()
	    }, self.options.delay.show)
	  }

	  Tooltip.prototype.leave = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

	    clearTimeout(self.timeout)

	    self.hoverState = 'out'

	    if (!self.options.delay || !self.options.delay.hide) return self.hide()

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'out') self.hide()
	    }, self.options.delay.hide)
	  }

	  Tooltip.prototype.show = function () {
	    var e = $.Event('show.bs.' + this.type)

	    if (this.hasContent() && this.enabled) {
	      this.$element.trigger(e)

	      if (e.isDefaultPrevented()) return
	      var that = this;

	      var $tip = this.tip()

	      this.setContent()

	      if (this.options.animation) $tip.addClass('fade')

	      var placement = typeof this.options.placement == 'function' ?
	        this.options.placement.call(this, $tip[0], this.$element[0]) :
	        this.options.placement

	      var autoToken = /\s?auto?\s?/i
	      var autoPlace = autoToken.test(placement)
	      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

	      $tip
	        .detach()
	        .css({ top: 0, left: 0, display: 'block' })
	        .addClass(placement)

	      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

	      var pos          = this.getPosition()
	      var actualWidth  = $tip[0].offsetWidth
	      var actualHeight = $tip[0].offsetHeight

	      if (autoPlace) {
	        var $parent = this.$element.parent()

	        var orgPlacement = placement
	        var docScroll    = document.documentElement.scrollTop || document.body.scrollTop
	        var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth()
	        var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight()
	        var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left

	        placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
	                    placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
	                    placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
	                    placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
	                    placement

	        $tip
	          .removeClass(orgPlacement)
	          .addClass(placement)
	      }

	      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

	      this.applyPlacement(calculatedOffset, placement)
	      this.hoverState = null

	      var complete = function() {
	        that.$element.trigger('shown.bs.' + that.type)
	      }

	      $.support.transition && this.$tip.hasClass('fade') ?
	        $tip
	          .one($.support.transition.end, complete)
	          .emulateTransitionEnd(150) :
	        complete()
	    }
	  }

	  Tooltip.prototype.applyPlacement = function (offset, placement) {
	    var replace
	    var $tip   = this.tip()
	    var width  = $tip[0].offsetWidth
	    var height = $tip[0].offsetHeight

	    // manually read margins because getBoundingClientRect includes difference
	    var marginTop = parseInt($tip.css('margin-top'), 10)
	    var marginLeft = parseInt($tip.css('margin-left'), 10)

	    // we must check for NaN for ie 8/9
	    if (isNaN(marginTop))  marginTop  = 0
	    if (isNaN(marginLeft)) marginLeft = 0

	    offset.top  = offset.top  + marginTop
	    offset.left = offset.left + marginLeft

	    // $.fn.offset doesn't round pixel values
	    // so we use setOffset directly with our own function B-0
	    $.offset.setOffset($tip[0], $.extend({
	      using: function (props) {
	        $tip.css({
	          top: Math.round(props.top),
	          left: Math.round(props.left)
	        })
	      }
	    }, offset), 0)

	    $tip.addClass('in')

	    // check to see if placing tip in new offset caused the tip to resize itself
	    var actualWidth  = $tip[0].offsetWidth
	    var actualHeight = $tip[0].offsetHeight

	    if (placement == 'top' && actualHeight != height) {
	      replace = true
	      offset.top = offset.top + height - actualHeight
	    }

	    if (/bottom|top/.test(placement)) {
	      var delta = 0

	      if (offset.left < 0) {
	        delta       = offset.left * -2
	        offset.left = 0

	        $tip.offset(offset)

	        actualWidth  = $tip[0].offsetWidth
	        actualHeight = $tip[0].offsetHeight
	      }

	      this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
	    } else {
	      this.replaceArrow(actualHeight - height, actualHeight, 'top')
	    }

	    if (replace) $tip.offset(offset)
	  }

	  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
	    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + '%') : '')
	  }

	  Tooltip.prototype.setContent = function () {
	    var $tip  = this.tip()
	    var title = this.getTitle()

	    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
	    $tip.removeClass('fade in top bottom left right')
	  }

	  Tooltip.prototype.hide = function () {
	    var that = this
	    var $tip = this.tip()
	    var e    = $.Event('hide.bs.' + this.type)

	    function complete() {
	      if (that.hoverState != 'in') $tip.detach()
	      that.$element.trigger('hidden.bs.' + that.type)
	    }

	    this.$element.trigger(e)

	    if (e.isDefaultPrevented()) return

	    $tip.removeClass('in')

	    $.support.transition && this.$tip.hasClass('fade') ?
	      $tip
	        .one($.support.transition.end, complete)
	        .emulateTransitionEnd(150) :
	      complete()

	    this.hoverState = null

	    return this
	  }

	  Tooltip.prototype.fixTitle = function () {
	    var $e = this.$element
	    if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
	      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
	    }
	  }

	  Tooltip.prototype.hasContent = function () {
	    return this.getTitle()
	  }

	  Tooltip.prototype.getPosition = function () {
	    var el = this.$element[0]
	    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
	      width: el.offsetWidth,
	      height: el.offsetHeight
	    }, this.$element.offset())
	  }

	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
	    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
	           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
	           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
	        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }
	  }

	  Tooltip.prototype.getTitle = function () {
	    var title
	    var $e = this.$element
	    var o  = this.options

	    title = $e.attr('data-original-title')
	      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

	    return title
	  }

	  Tooltip.prototype.tip = function () {
	    return this.$tip = this.$tip || $(this.options.template)
	  }

	  Tooltip.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow')
	  }

	  Tooltip.prototype.validate = function () {
	    if (!this.$element[0].parentNode) {
	      this.hide()
	      this.$element = null
	      this.options  = null
	    }
	  }

	  Tooltip.prototype.enable = function () {
	    this.enabled = true
	  }

	  Tooltip.prototype.disable = function () {
	    this.enabled = false
	  }

	  Tooltip.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled
	  }

	  Tooltip.prototype.toggle = function (e) {
	    var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this
	    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
	  }

	  Tooltip.prototype.destroy = function () {
	    clearTimeout(this.timeout)
	    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
	  }


	  // TOOLTIP PLUGIN DEFINITION
	  // =========================

	  var old = $.fn.tooltip

	  $.fn.tooltip = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.tooltip')
	      var options = typeof option == 'object' && option

	      if (!data && option == 'destroy') return
	      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  $.fn.tooltip.Constructor = Tooltip


	  // TOOLTIP NO CONFLICT
	  // ===================

	  $.fn.tooltip.noConflict = function () {
	    $.fn.tooltip = old
	    return this
	  }

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: popover.js v3.1.1
	 * http://getbootstrap.com/javascript/#popovers
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // POPOVER PUBLIC CLASS DEFINITION
	  // ===============================

	  var Popover = function (element, options) {
	    this.init('popover', element, options)
	  }

	  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

	  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
	    placement: 'right',
	    trigger: 'click',
	    content: '',
	    template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
	  })


	  // NOTE: POPOVER EXTENDS tooltip.js
	  // ================================

	  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

	  Popover.prototype.constructor = Popover

	  Popover.prototype.getDefaults = function () {
	    return Popover.DEFAULTS
	  }

	  Popover.prototype.setContent = function () {
	    var $tip    = this.tip()
	    var title   = this.getTitle()
	    var content = this.getContent()

	    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
	    $tip.find('.popover-content')[ // we use append for html objects to maintain js events
	      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
	    ](content)

	    $tip.removeClass('fade top bottom left right in')

	    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
	    // this manually by checking the contents.
	    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
	  }

	  Popover.prototype.hasContent = function () {
	    return this.getTitle() || this.getContent()
	  }

	  Popover.prototype.getContent = function () {
	    var $e = this.$element
	    var o  = this.options

	    return $e.attr('data-content')
	      || (typeof o.content == 'function' ?
	            o.content.call($e[0]) :
	            o.content)
	  }

	  Popover.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find('.arrow')
	  }

	  Popover.prototype.tip = function () {
	    if (!this.$tip) this.$tip = $(this.options.template)
	    return this.$tip
	  }


	  // POPOVER PLUGIN DEFINITION
	  // =========================

	  var old = $.fn.popover

	  $.fn.popover = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.popover')
	      var options = typeof option == 'object' && option

	      if (!data && option == 'destroy') return
	      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  $.fn.popover.Constructor = Popover


	  // POPOVER NO CONFLICT
	  // ===================

	  $.fn.popover.noConflict = function () {
	    $.fn.popover = old
	    return this
	  }

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: scrollspy.js v3.1.1
	 * http://getbootstrap.com/javascript/#scrollspy
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // SCROLLSPY CLASS DEFINITION
	  // ==========================

	  function ScrollSpy(element, options) {
	    var href
	    var process  = $.proxy(this.process, this)

	    this.$element       = $(element).is('body') ? $(window) : $(element)
	    this.$body          = $('body')
	    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
	    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
	    this.selector       = (this.options.target
	      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
	      || '') + ' .nav li > a'
	    this.offsets        = $([])
	    this.targets        = $([])
	    this.activeTarget   = null

	    this.refresh()
	    this.process()
	  }

	  ScrollSpy.DEFAULTS = {
	    offset: 10
	  }

	  ScrollSpy.prototype.refresh = function () {
	    var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

	    this.offsets = $([])
	    this.targets = $([])

	    var self     = this
	    var $targets = this.$body
	      .find(this.selector)
	      .map(function () {
	        var $el   = $(this)
	        var href  = $el.data('target') || $el.attr('href')
	        var $href = /^#./.test(href) && $(href)

	        return ($href
	          && $href.length
	          && $href.is(':visible')
	          && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
	      })
	      .sort(function (a, b) { return a[0] - b[0] })
	      .each(function () {
	        self.offsets.push(this[0])
	        self.targets.push(this[1])
	      })
	  }

	  ScrollSpy.prototype.process = function () {
	    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
	    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
	    var maxScroll    = scrollHeight - this.$scrollElement.height()
	    var offsets      = this.offsets
	    var targets      = this.targets
	    var activeTarget = this.activeTarget
	    var i

	    if (scrollTop >= maxScroll) {
	      return activeTarget != (i = targets.last()[0]) && this.activate(i)
	    }

	    if (activeTarget && scrollTop <= offsets[0]) {
	      return activeTarget != (i = targets[0]) && this.activate(i)
	    }

	    for (i = offsets.length; i--;) {
	      activeTarget != targets[i]
	        && scrollTop >= offsets[i]
	        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
	        && this.activate( targets[i] )
	    }
	  }

	  ScrollSpy.prototype.activate = function (target) {
	    this.activeTarget = target

	    $(this.selector)
	      .parentsUntil(this.options.target, '.active')
	      .removeClass('active')

	    var selector = this.selector +
	        '[data-target="' + target + '"],' +
	        this.selector + '[href="' + target + '"]'

	    var active = $(selector)
	      .parents('li')
	      .addClass('active')

	    if (active.parent('.dropdown-menu').length) {
	      active = active
	        .closest('li.dropdown')
	        .addClass('active')
	    }

	    active.trigger('activate.bs.scrollspy')
	  }


	  // SCROLLSPY PLUGIN DEFINITION
	  // ===========================

	  var old = $.fn.scrollspy

	  $.fn.scrollspy = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.scrollspy')
	      var options = typeof option == 'object' && option

	      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  $.fn.scrollspy.Constructor = ScrollSpy


	  // SCROLLSPY NO CONFLICT
	  // =====================

	  $.fn.scrollspy.noConflict = function () {
	    $.fn.scrollspy = old
	    return this
	  }


	  // SCROLLSPY DATA-API
	  // ==================

	  $(window).on('load', function () {
	    $('[data-spy="scroll"]').each(function () {
	      var $spy = $(this)
	      $spy.scrollspy($spy.data())
	    })
	  })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: tab.js v3.1.1
	 * http://getbootstrap.com/javascript/#tabs
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // TAB CLASS DEFINITION
	  // ====================

	  var Tab = function (element) {
	    this.element = $(element)
	  }

	  Tab.prototype.show = function () {
	    var $this    = this.element
	    var $ul      = $this.closest('ul:not(.dropdown-menu)')
	    var selector = $this.data('target')

	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
	    }

	    if ($this.parent('li').hasClass('active')) return

	    var previous = $ul.find('.active:last a')[0]
	    var e        = $.Event('show.bs.tab', {
	      relatedTarget: previous
	    })

	    $this.trigger(e)

	    if (e.isDefaultPrevented()) return

	    var $target = $(selector)

	    this.activate($this.parent('li'), $ul)
	    this.activate($target, $target.parent(), function () {
	      $this.trigger({
	        type: 'shown.bs.tab',
	        relatedTarget: previous
	      })
	    })
	  }

	  Tab.prototype.activate = function (element, container, callback) {
	    var $active    = container.find('> .active')
	    var transition = callback
	      && $.support.transition
	      && $active.hasClass('fade')

	    function next() {
	      $active
	        .removeClass('active')
	        .find('> .dropdown-menu > .active')
	        .removeClass('active')

	      element.addClass('active')

	      if (transition) {
	        element[0].offsetWidth // reflow for transition
	        element.addClass('in')
	      } else {
	        element.removeClass('fade')
	      }

	      if (element.parent('.dropdown-menu')) {
	        element.closest('li.dropdown').addClass('active')
	      }

	      callback && callback()
	    }

	    transition ?
	      $active
	        .one($.support.transition.end, next)
	        .emulateTransitionEnd(150) :
	      next()

	    $active.removeClass('in')
	  }


	  // TAB PLUGIN DEFINITION
	  // =====================

	  var old = $.fn.tab

	  $.fn.tab = function ( option ) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.tab')

	      if (!data) $this.data('bs.tab', (data = new Tab(this)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  $.fn.tab.Constructor = Tab


	  // TAB NO CONFLICT
	  // ===============

	  $.fn.tab.noConflict = function () {
	    $.fn.tab = old
	    return this
	  }


	  // TAB DATA-API
	  // ============

	  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
	    e.preventDefault()
	    $(this).tab('show')
	  })

	}(jQuery);

	/* ========================================================================
	 * Bootstrap: affix.js v3.1.1
	 * http://getbootstrap.com/javascript/#affix
	 * ========================================================================
	 * Copyright 2011-2014 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */


	+function ($) {
	  'use strict';

	  // AFFIX CLASS DEFINITION
	  // ======================

	  var Affix = function (element, options) {
	    this.options = $.extend({}, Affix.DEFAULTS, options)
	    this.$window = $(window)
	      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
	      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

	    this.$element     = $(element)
	    this.affixed      =
	    this.unpin        =
	    this.pinnedOffset = null

	    this.checkPosition()
	  }

	  Affix.RESET = 'affix affix-top affix-bottom'

	  Affix.DEFAULTS = {
	    offset: 0
	  }

	  Affix.prototype.getPinnedOffset = function () {
	    if (this.pinnedOffset) return this.pinnedOffset
	    this.$element.removeClass(Affix.RESET).addClass('affix')
	    var scrollTop = this.$window.scrollTop()
	    var position  = this.$element.offset()
	    return (this.pinnedOffset = position.top - scrollTop)
	  }

	  Affix.prototype.checkPositionWithEventLoop = function () {
	    setTimeout($.proxy(this.checkPosition, this), 1)
	  }

	  Affix.prototype.checkPosition = function () {
	    if (!this.$element.is(':visible')) return

	    var scrollHeight = $(document).height()
	    var scrollTop    = this.$window.scrollTop()
	    var position     = this.$element.offset()
	    var offset       = this.options.offset
	    var offsetTop    = offset.top
	    var offsetBottom = offset.bottom

	    if (this.affixed == 'top') position.top += scrollTop

	    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
	    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
	    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

	    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
	                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
	                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

	    if (this.affixed === affix) return
	    if (this.unpin) this.$element.css('top', '')

	    var affixType = 'affix' + (affix ? '-' + affix : '')
	    var e         = $.Event(affixType + '.bs.affix')

	    this.$element.trigger(e)

	    if (e.isDefaultPrevented()) return

	    this.affixed = affix
	    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

	    this.$element
	      .removeClass(Affix.RESET)
	      .addClass(affixType)
	      .trigger($.Event(affixType.replace('affix', 'affixed')))

	    if (affix == 'bottom') {
	      this.$element.offset({ top: scrollHeight - offsetBottom - this.$element.height() })
	    }
	  }


	  // AFFIX PLUGIN DEFINITION
	  // =======================

	  var old = $.fn.affix

	  $.fn.affix = function (option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.affix')
	      var options = typeof option == 'object' && option

	      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }

	  $.fn.affix.Constructor = Affix


	  // AFFIX NO CONFLICT
	  // =================

	  $.fn.affix.noConflict = function () {
	    $.fn.affix = old
	    return this
	  }


	  // AFFIX DATA-API
	  // ==============

	  $(window).on('load', function () {
	    $('[data-spy="affix"]').each(function () {
	      var $spy = $(this)
	      var data = $spy.data()

	      data.offset = data.offset || {}

	      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
	      if (data.offsetTop)    data.offset.top    = data.offsetTop

	      $spy.affix(data)
	    })
	  })

	}(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Intro.js v1.0.0
	 * https://github.com/usablica/intro.js
	 * MIT licensed
	 *
	 * Copyright (C) 2013 usabli.ca - A weekend project by Afshin Mehrabani (@afshinmeh)
	 */

	(function (root, factory) {
	  if (true) {
	    // CommonJS
	    factory(exports);
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(['exports'], factory);
	  } else {
	    // Browser globals
	    factory(root);
	  }
	} (this, function (exports) {
	  //Default config/variables
	  var VERSION = '1.0.0';

	  /**
	   * IntroJs main class
	   *
	   * @class IntroJs
	   */
	  function IntroJs(obj) {
	    this._targetElement = obj;

	    this._options = {
	      /* Next button label in tooltip box */
	      nextLabel: 'Next &rarr;',
	      /* Previous button label in tooltip box */
	      prevLabel: '&larr; Back',
	      /* Skip button label in tooltip box */
	      skipLabel: 'Skip',
	      /* Done button label in tooltip box */
	      doneLabel: 'Done',
	      /* Default tooltip box position */
	      tooltipPosition: 'bottom',
	      /* Next CSS class for tooltip boxes */
	      tooltipClass: '',
	      /* CSS class that is added to the helperLayer */
	      highlightClass: '',
	      /* Close introduction when pressing Escape button? */
	      exitOnEsc: true,
	      /* Close introduction when clicking on overlay layer? */
	      exitOnOverlayClick: true,
	      /* Show step numbers in introduction? */
	      showStepNumbers: true,
	      /* Let user use keyboard to navigate the tour? */
	      keyboardNavigation: true,
	      /* Show tour control buttons? */
	      showButtons: true,
	      /* Show tour bullets? */
	      showBullets: true,
	      /* Show tour progress? */
	      showProgress: false,
	      /* Scroll to highlighted element? */
	      scrollToElement: true,
	      /* Set the overlay opacity */
	      overlayOpacity: 0.8,
	      /* Precedence of positions, when auto is enabled */
	      positionPrecedence: ["bottom", "top", "right", "left"],
	      /* Disable an interaction with element? */
	      disableInteraction: false
	    };
	  }

	  /**
	   * Initiate a new introduction/guide from an element in the page
	   *
	   * @api private
	   * @method _introForElement
	   * @param {Object} targetElm
	   * @returns {Boolean} Success or not?
	   */
	  function _introForElement(targetElm) {
	    var introItems = [],
	        self = this;

	    if (this._options.steps) {
	      //use steps passed programmatically
	      var allIntroSteps = [];

	      for (var i = 0, stepsLength = this._options.steps.length; i < stepsLength; i++) {
	        var currentItem = _cloneObject(this._options.steps[i]);
	        //set the step
	        currentItem.step = introItems.length + 1;
	        //use querySelector function only when developer used CSS selector
	        if (typeof(currentItem.element) === 'string') {
	          //grab the element with given selector from the page
	          currentItem.element = document.querySelector(currentItem.element);
	        }

	        //intro without element
	        if (typeof(currentItem.element) === 'undefined' || currentItem.element == null) {
	          var floatingElementQuery = document.querySelector(".introjsFloatingElement");

	          if (floatingElementQuery == null) {
	            floatingElementQuery = document.createElement('div');
	            floatingElementQuery.className = 'introjsFloatingElement';

	            document.body.appendChild(floatingElementQuery);
	          }

	          currentItem.element  = floatingElementQuery;
	          currentItem.position = 'floating';
	        }

	        if (currentItem.element != null) {
	          introItems.push(currentItem);
	        }
	      }

	    } else {
	      //use steps from data-* annotations
	      var allIntroSteps = targetElm.querySelectorAll('*[data-intro]');
	      //if there's no element to intro
	      if (allIntroSteps.length < 1) {
	        return false;
	      }

	      //first add intro items with data-step
	      for (var i = 0, elmsLength = allIntroSteps.length; i < elmsLength; i++) {
	        var currentElement = allIntroSteps[i];
	        var step = parseInt(currentElement.getAttribute('data-step'), 10);

	        if (step > 0) {
	          introItems[step - 1] = {
	            element: currentElement,
	            intro: currentElement.getAttribute('data-intro'),
	            step: parseInt(currentElement.getAttribute('data-step'), 10),
	            tooltipClass: currentElement.getAttribute('data-tooltipClass'),
	            highlightClass: currentElement.getAttribute('data-highlightClass'),
	            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition
	          };
	        }
	      }

	      //next add intro items without data-step
	      //todo: we need a cleanup here, two loops are redundant
	      var nextStep = 0;
	      for (var i = 0, elmsLength = allIntroSteps.length; i < elmsLength; i++) {
	        var currentElement = allIntroSteps[i];

	        if (currentElement.getAttribute('data-step') == null) {

	          while (true) {
	            if (typeof introItems[nextStep] == 'undefined') {
	              break;
	            } else {
	              nextStep++;
	            }
	          }

	          introItems[nextStep] = {
	            element: currentElement,
	            intro: currentElement.getAttribute('data-intro'),
	            step: nextStep + 1,
	            tooltipClass: currentElement.getAttribute('data-tooltipClass'),
	            highlightClass: currentElement.getAttribute('data-highlightClass'),
	            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition
	          };
	        }
	      }
	    }

	    //removing undefined/null elements
	    var tempIntroItems = [];
	    for (var z = 0; z < introItems.length; z++) {
	      introItems[z] && tempIntroItems.push(introItems[z]);  // copy non-empty values to the end of the array
	    }

	    introItems = tempIntroItems;

	    //Ok, sort all items with given steps
	    introItems.sort(function (a, b) {
	      return a.step - b.step;
	    });

	    //set it to the introJs object
	    self._introItems = introItems;

	    //add overlay layer to the page
	    if(_addOverlayLayer.call(self, targetElm)) {
	      //then, start the show
	      _nextStep.call(self);

	      var skipButton     = targetElm.querySelector('.introjs-skipbutton'),
	          nextStepButton = targetElm.querySelector('.introjs-nextbutton');

	      self._onKeyDown = function(e) {
	        if (e.keyCode === 27 && self._options.exitOnEsc == true) {
	          //escape key pressed, exit the intro
	          _exitIntro.call(self, targetElm);
	          //check if any callback is defined
	          if (self._introExitCallback != undefined) {
	            self._introExitCallback.call(self);
	          }
	        } else if(e.keyCode === 37) {
	          //left arrow
	          _previousStep.call(self);
	        } else if (e.keyCode === 39) {
	          //right arrow
	          _nextStep.call(self);
	        } else if (e.keyCode === 13) {
	          //srcElement === ie
	          var target = e.target || e.srcElement;
	          if (target && target.className.indexOf('introjs-prevbutton') > 0) {
	            //user hit enter while focusing on previous button
	            _previousStep.call(self);
	          } else if (target && target.className.indexOf('introjs-skipbutton') > 0) {
	            //user hit enter while focusing on skip button
	            _exitIntro.call(self, targetElm);
	          } else {
	            //default behavior for responding to enter
	            _nextStep.call(self);
	          }

	          //prevent default behaviour on hitting Enter, to prevent steps being skipped in some browsers
	          if(e.preventDefault) {
	            e.preventDefault();
	          } else {
	            e.returnValue = false;
	          }
	        }
	      };

	      self._onResize = function(e) {
	        _setHelperLayerPosition.call(self, document.querySelector('.introjs-helperLayer'));
	        _setHelperLayerPosition.call(self, document.querySelector('.introjs-tooltipReferenceLayer'));
	      };

	      if (window.addEventListener) {
	        if (this._options.keyboardNavigation) {
	          window.addEventListener('keydown', self._onKeyDown, true);
	        }
	        //for window resize
	        window.addEventListener('resize', self._onResize, true);
	      } else if (document.attachEvent) { //IE
	        if (this._options.keyboardNavigation) {
	          document.attachEvent('onkeydown', self._onKeyDown);
	        }
	        //for window resize
	        document.attachEvent('onresize', self._onResize);
	      }
	    }
	    return false;
	  }

	 /*
	   * makes a copy of the object
	   * @api private
	   * @method _cloneObject
	  */
	  function _cloneObject(object) {
	      if (object == null || typeof (object) != 'object' || typeof (object.nodeType) != 'undefined') {
	          return object;
	      }
	      var temp = {};
	      for (var key in object) {
	          temp[key] = _cloneObject(object[key]);
	      }
	      return temp;
	  }
	  /**
	   * Go to specific step of introduction
	   *
	   * @api private
	   * @method _goToStep
	   */
	  function _goToStep(step) {
	    //because steps starts with zero
	    this._currentStep = step - 2;
	    if (typeof (this._introItems) !== 'undefined') {
	      _nextStep.call(this);
	    }
	  }

	  /**
	   * Go to next step on intro
	   *
	   * @api private
	   * @method _nextStep
	   */
	  function _nextStep() {
	    this._direction = 'forward';

	    if (typeof (this._currentStep) === 'undefined') {
	      this._currentStep = 0;
	    } else {
	      ++this._currentStep;
	    }

	    if ((this._introItems.length) <= this._currentStep) {
	      //end of the intro
	      //check if any callback is defined
	      if (typeof (this._introCompleteCallback) === 'function') {
	        this._introCompleteCallback.call(this);
	      }
	      _exitIntro.call(this, this._targetElement);
	      return;
	    }

	    var nextStep = this._introItems[this._currentStep];
	    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {
	      this._introBeforeChangeCallback.call(this, nextStep.element);
	    }

	    _showElement.call(this, nextStep);
	  }

	  /**
	   * Go to previous step on intro
	   *
	   * @api private
	   * @method _nextStep
	   */
	  function _previousStep() {
	    this._direction = 'backward';

	    if (this._currentStep === 0) {
	      return false;
	    }

	    var nextStep = this._introItems[--this._currentStep];
	    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {
	      this._introBeforeChangeCallback.call(this, nextStep.element);
	    }

	    _showElement.call(this, nextStep);
	  }

	  /**
	   * Exit from intro
	   *
	   * @api private
	   * @method _exitIntro
	   * @param {Object} targetElement
	   */
	  function _exitIntro(targetElement) {
	    //remove overlay layer from the page
	    var overlayLayer = targetElement.querySelector('.introjs-overlay');

	    //return if intro already completed or skipped
	    if (overlayLayer == null) {
	      return;
	    }

	    //for fade-out animation
	    overlayLayer.style.opacity = 0;
	    setTimeout(function () {
	      if (overlayLayer.parentNode) {
	        overlayLayer.parentNode.removeChild(overlayLayer);
	      }
	    }, 500);

	    //remove all helper layers
	    var helperLayer = targetElement.querySelector('.introjs-helperLayer');
	    if (helperLayer) {
	      helperLayer.parentNode.removeChild(helperLayer);
	    }

	    var referenceLayer = targetElement.querySelector('.introjs-tooltipReferenceLayer');
	    if (referenceLayer) {
	      referenceLayer.parentNode.removeChild(referenceLayer);
		}
	    //remove disableInteractionLayer
	    var disableInteractionLayer = targetElement.querySelector('.introjs-disableInteraction');
	    if (disableInteractionLayer) {
	      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);
	    }

	    //remove intro floating element
	    var floatingElement = document.querySelector('.introjsFloatingElement');
	    if (floatingElement) {
	      floatingElement.parentNode.removeChild(floatingElement);
	    }

	    //remove `introjs-showElement` class from the element
	    var showElement = document.querySelector('.introjs-showElement');
	    if (showElement) {
	      showElement.className = showElement.className.replace(/introjs-[a-zA-Z]+/g, '').replace(/^\s+|\s+$/g, ''); // This is a manual trim.
	    }

	    //remove `introjs-fixParent` class from the elements
	    var fixParents = document.querySelectorAll('.introjs-fixParent');
	    if (fixParents && fixParents.length > 0) {
	      for (var i = fixParents.length - 1; i >= 0; i--) {
	        fixParents[i].className = fixParents[i].className.replace(/introjs-fixParent/g, '').replace(/^\s+|\s+$/g, '');
	      };
	    }

	    //clean listeners
	    if (window.removeEventListener) {
	      window.removeEventListener('keydown', this._onKeyDown, true);
	    } else if (document.detachEvent) { //IE
	      document.detachEvent('onkeydown', this._onKeyDown);
	    }

	    //set the step to zero
	    this._currentStep = undefined;
	  }

	  /**
	   * Render tooltip box in the page
	   *
	   * @api private
	   * @method _placeTooltip
	   * @param {Object} targetElement
	   * @param {Object} tooltipLayer
	   * @param {Object} arrowLayer
	   */
	  function _placeTooltip(targetElement, tooltipLayer, arrowLayer, helperNumberLayer) {
	    var tooltipCssClass = '',
	        currentStepObj,
	        tooltipOffset,
	        targetElementOffset;

	    //reset the old style
	    tooltipLayer.style.top        = null;
	    tooltipLayer.style.right      = null;
	    tooltipLayer.style.bottom     = null;
	    tooltipLayer.style.left       = null;
	    tooltipLayer.style.marginLeft = null;
	    tooltipLayer.style.marginTop  = null;

	    arrowLayer.style.display = 'inherit';

	    if (typeof(helperNumberLayer) != 'undefined' && helperNumberLayer != null) {
	      helperNumberLayer.style.top  = null;
	      helperNumberLayer.style.left = null;
	    }

	    //prevent error when `this._currentStep` is undefined
	    if (!this._introItems[this._currentStep]) return;

	    //if we have a custom css class for each step
	    currentStepObj = this._introItems[this._currentStep];
	    if (typeof (currentStepObj.tooltipClass) === 'string') {
	      tooltipCssClass = currentStepObj.tooltipClass;
	    } else {
	      tooltipCssClass = this._options.tooltipClass;
	    }

	    tooltipLayer.className = ('introjs-tooltip ' + tooltipCssClass).replace(/^\s+|\s+$/g, '');

	    //custom css class for tooltip boxes
	    var tooltipCssClass = this._options.tooltipClass;

	    currentTooltipPosition = this._introItems[this._currentStep].position;
	    if ((currentTooltipPosition == "auto" || this._options.tooltipPosition == "auto")) {
	      if (currentTooltipPosition != "floating") { // Floating is always valid, no point in calculating
	        currentTooltipPosition = _determineAutoPosition.call(this, targetElement, tooltipLayer, currentTooltipPosition)
	      }
	    }
	    var targetOffset = _getOffset(targetElement)
	    var tooltipHeight = _getOffset(tooltipLayer).height
	    var windowSize = _getWinSize()
	    switch (currentTooltipPosition) {
	      case 'top':
	        tooltipLayer.style.left = '15px';
	        tooltipLayer.style.top = '-' + (tooltipHeight + 10) + 'px';
	        arrowLayer.className = 'introjs-arrow bottom';
	        break;
	      case 'right':
	        tooltipLayer.style.left = (_getOffset(targetElement).width + 20) + 'px';
	        if (targetOffset.top + tooltipHeight > windowSize.height) {
	          // In this case, right would have fallen below the bottom of the screen.
	          // Modify so that the bottom of the tooltip connects with the target
	          arrowLayer.className = "introjs-arrow left-bottom";
	          tooltipLayer.style.top = "-" + (tooltipHeight - targetOffset.height - 20) + "px"
	        }
	        arrowLayer.className = 'introjs-arrow left';
	        break;
	      case 'left':
	        if (this._options.showStepNumbers == true) {
	          tooltipLayer.style.top = '15px';
	        }

	        if (targetOffset.top + tooltipHeight > windowSize.height) {
	          // In this case, left would have fallen below the bottom of the screen.
	          // Modify so that the bottom of the tooltip connects with the target
	          tooltipLayer.style.top = "-" + (tooltipHeight - targetOffset.height - 20) + "px"
	          arrowLayer.className = 'introjs-arrow right-bottom';
	        } else {
	          arrowLayer.className = 'introjs-arrow right';
	        }
	        tooltipLayer.style.right = (targetOffset.width + 20) + 'px';


	        break;
	      case 'floating':
	        arrowLayer.style.display = 'none';

	        //we have to adjust the top and left of layer manually for intro items without element
	        tooltipOffset = _getOffset(tooltipLayer);

	        tooltipLayer.style.left   = '50%';
	        tooltipLayer.style.top    = '50%';
	        tooltipLayer.style.marginLeft = '-' + (tooltipOffset.width / 2)  + 'px';
	        tooltipLayer.style.marginTop  = '-' + (tooltipOffset.height / 2) + 'px';

	        if (typeof(helperNumberLayer) != 'undefined' && helperNumberLayer != null) {
	          helperNumberLayer.style.left = '-' + ((tooltipOffset.width / 2) + 18) + 'px';
	          helperNumberLayer.style.top  = '-' + ((tooltipOffset.height / 2) + 18) + 'px';
	        }

	        break;
	      case 'bottom-right-aligned':
	        arrowLayer.className      = 'introjs-arrow top-right';
	        tooltipLayer.style.right  = '0px';
	        tooltipLayer.style.bottom = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
	        break;
	      case 'bottom-middle-aligned':
	        targetElementOffset = _getOffset(targetElement);
	        tooltipOffset       = _getOffset(tooltipLayer);

	        arrowLayer.className      = 'introjs-arrow top-middle';
	        tooltipLayer.style.left   = (targetElementOffset.width / 2 - tooltipOffset.width / 2) + 'px';
	        tooltipLayer.style.bottom = '-' + (tooltipOffset.height + 10) + 'px';
	        break;
	      case 'bottom-left-aligned':
	      // Bottom-left-aligned is the same as the default bottom
	      case 'bottom':
	      // Bottom going to follow the default behavior
	      default:
	        tooltipLayer.style.bottom = '-' + (_getOffset(tooltipLayer).height + 10) + 'px';
	        tooltipLayer.style.left = (_getOffset(targetElement).width / 2 - _getOffset(tooltipLayer).width / 2) + 'px';

	        arrowLayer.className = 'introjs-arrow top';
	        break;
	    }
	  }

	  /**
	   * Determines the position of the tooltip based on the position precedence and availability
	   * of screen space.
	   *
	   * @param {Object} targetElement
	   * @param {Object} tooltipLayer
	   * @param {Object} desiredTooltipPosition
	   *
	   */
	  function _determineAutoPosition(targetElement, tooltipLayer, desiredTooltipPosition) {

	    // Take a clone of position precedence. These will be the available
	    var possiblePositions = this._options.positionPrecedence.slice()

	    var windowSize = _getWinSize()
	    var tooltipHeight = _getOffset(tooltipLayer).height + 10
	    var tooltipWidth = _getOffset(tooltipLayer).width + 20
	    var targetOffset = _getOffset(targetElement)

	    // If we check all the possible areas, and there are no valid places for the tooltip, the element
	    // must take up most of the screen real estate. Show the tooltip floating in the middle of the screen.
	    var calculatedPosition = "floating"

	    // Check if the width of the tooltip + the starting point would spill off the right side of the screen
	    // If no, neither bottom or top are valid
	    if (targetOffset.left + tooltipWidth > windowSize.width || ((targetOffset.left + (targetOffset.width / 2)) - tooltipWidth) < 0) {
	      _removeEntry(possiblePositions, "bottom")
	      _removeEntry(possiblePositions, "top");
	    } else {
	      // Check for space below
	      if ((targetOffset.height + targetOffset.top + tooltipHeight) > windowSize.height) {
	        _removeEntry(possiblePositions, "bottom")
	      }

	      // Check for space above
	      if (targetOffset.top - tooltipHeight < 0) {
	        _removeEntry(possiblePositions, "top");
	      }
	    }

	    // Check for space to the right
	    if (targetOffset.width + targetOffset.left + tooltipWidth > windowSize.width) {
	      _removeEntry(possiblePositions, "right");
	    }

	    // Check for space to the left
	    if (targetOffset.left - tooltipWidth < 0) {
	      _removeEntry(possiblePositions, "left");
	    }

	    // At this point, our array only has positions that are valid. Pick the first one, as it remains in order
	    if (possiblePositions.length > 0) {
	      calculatedPosition = possiblePositions[0];
	    }

	    // If the requested position is in the list, replace our calculated choice with that
	    if (desiredTooltipPosition && desiredTooltipPosition != "auto") {
	      if (possiblePositions.indexOf(desiredTooltipPosition) > -1) {
	        calculatedPosition = desiredTooltipPosition
	      }
	    }

	    return calculatedPosition
	  }

	  /**
	   * Remove an entry from a string array if it's there, does nothing if it isn't there.
	   *
	   * @param {Array} stringArray
	   * @param {String} stringToRemove
	   */
	  function _removeEntry(stringArray, stringToRemove) {
	    if (stringArray.indexOf(stringToRemove) > -1) {
	      stringArray.splice(stringArray.indexOf(stringToRemove), 1);
	    }
	  }

	  /**
	   * Update the position of the helper layer on the screen
	   *
	   * @api private
	   * @method _setHelperLayerPosition
	   * @param {Object} helperLayer
	   */
	  function _setHelperLayerPosition(helperLayer) {
	    if (helperLayer) {
	      //prevent error when `this._currentStep` in undefined
	      if (!this._introItems[this._currentStep]) return;

	      var currentElement  = this._introItems[this._currentStep],
	          elementPosition = _getOffset(currentElement.element),
	          widthHeightPadding = 10;

	      if (currentElement.position == 'floating') {
	        widthHeightPadding = 0;
	      }

	      //set new position to helper layer
	      helperLayer.setAttribute('style', 'width: ' + (elementPosition.width  + widthHeightPadding)  + 'px; ' +
	                                        'height:' + (elementPosition.height + widthHeightPadding)  + 'px; ' +
	                                        'top:'    + (elementPosition.top    - 5)   + 'px;' +
	                                        'left: '  + (elementPosition.left   - 5)   + 'px;');

	    }
	  }

	  /**
	   * Add disableinteraction layer and adjust the size and position of the layer
	   *
	   * @api private
	   * @method _disableInteraction
	   */
	  function _disableInteraction () {
	    var disableInteractionLayer = document.querySelector('.introjs-disableInteraction');
	    if (disableInteractionLayer === null) {
	      disableInteractionLayer = document.createElement('div');
	      disableInteractionLayer.className = 'introjs-disableInteraction';
	      this._targetElement.appendChild(disableInteractionLayer);
	    }

	    _setHelperLayerPosition.call(this, disableInteractionLayer);
	  }

	  /**
	   * Show an element on the page
	   *
	   * @api private
	   * @method _showElement
	   * @param {Object} targetElement
	   */
	  function _showElement(targetElement) {

	    if (typeof (this._introChangeCallback) !== 'undefined') {
	      this._introChangeCallback.call(this, targetElement.element);
	    }

	    var self = this,
	        oldHelperLayer = document.querySelector('.introjs-helperLayer'),
	        oldReferenceLayer = document.querySelector('.introjs-tooltipReferenceLayer'),
	        highlightClass = 'introjs-helperLayer',
	        elementPosition = _getOffset(targetElement.element);

	    //check for a current step highlight class
	    if (typeof (targetElement.highlightClass) === 'string') {
	      highlightClass += (' ' + targetElement.highlightClass);
	    }
	    //check for options highlight class
	    if (typeof (this._options.highlightClass) === 'string') {
	      highlightClass += (' ' + this._options.highlightClass);
	    }

	    if (oldHelperLayer != null) {
	      var oldHelperNumberLayer = oldReferenceLayer.querySelector('.introjs-helperNumberLayer'),
	          oldtooltipLayer      = oldReferenceLayer.querySelector('.introjs-tooltiptext'),
	          oldArrowLayer        = oldReferenceLayer.querySelector('.introjs-arrow'),
	          oldtooltipContainer  = oldReferenceLayer.querySelector('.introjs-tooltip'),
	          skipTooltipButton    = oldReferenceLayer.querySelector('.introjs-skipbutton'),
	          prevTooltipButton    = oldReferenceLayer.querySelector('.introjs-prevbutton'),
	          nextTooltipButton    = oldReferenceLayer.querySelector('.introjs-nextbutton');

	      //update or reset the helper highlight class
	      oldHelperLayer.className = highlightClass;
	      //hide the tooltip
	      oldtooltipContainer.style.opacity = 0;
	      oldtooltipContainer.style.display = "none";

	      if (oldHelperNumberLayer != null) {
	        var lastIntroItem = this._introItems[(targetElement.step - 2 >= 0 ? targetElement.step - 2 : 0)];

	        if (lastIntroItem != null && (this._direction == 'forward' && lastIntroItem.position == 'floating') || (this._direction == 'backward' && targetElement.position == 'floating')) {
	          oldHelperNumberLayer.style.opacity = 0;
	        }
	      }

	      //set new position to helper layer
	      _setHelperLayerPosition.call(self, oldHelperLayer);
	      _setHelperLayerPosition.call(self, oldReferenceLayer);

	      //remove `introjs-fixParent` class from the elements
	      var fixParents = document.querySelectorAll('.introjs-fixParent');
	      if (fixParents && fixParents.length > 0) {
	        for (var i = fixParents.length - 1; i >= 0; i--) {
	          fixParents[i].className = fixParents[i].className.replace(/introjs-fixParent/g, '').replace(/^\s+|\s+$/g, '');
	        };
	      }

	      //remove old classes
	      var oldShowElement = document.querySelector('.introjs-showElement');
	      oldShowElement.className = oldShowElement.className.replace(/introjs-[a-zA-Z]+/g, '').replace(/^\s+|\s+$/g, '');

	      //we should wait until the CSS3 transition is competed (it's 0.3 sec) to prevent incorrect `height` and `width` calculation
	      if (self._lastShowElementTimer) {
	        clearTimeout(self._lastShowElementTimer);
	      }
	      self._lastShowElementTimer = setTimeout(function() {
	        //set current step to the label
	        if (oldHelperNumberLayer != null) {
	          oldHelperNumberLayer.innerHTML = targetElement.step;
	        }
	        //set current tooltip text
	        oldtooltipLayer.innerHTML = targetElement.intro;
	        //set the tooltip position
	        oldtooltipContainer.style.display = "block";
	        _placeTooltip.call(self, targetElement.element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);

	        //change active bullet
	        oldReferenceLayer.querySelector('.introjs-bullets li > a.active').className = '';
	        oldReferenceLayer.querySelector('.introjs-bullets li > a[data-stepnumber="' + targetElement.step + '"]').className = 'active';

	        oldReferenceLayer.querySelector('.introjs-progress .introjs-progressbar').setAttribute('style', 'width:' + _getProgress.call(self) + '%;');

	        //show the tooltip
	        oldtooltipContainer.style.opacity = 1;
	        if (oldHelperNumberLayer) oldHelperNumberLayer.style.opacity = 1;

	        //reset button focus
	        if (nextTooltipButton.tabIndex === -1) {
	          //tabindex of -1 means we are at the end of the tour - focus on skip / done
	          skipTooltipButton.focus();
	        } else {
	          //still in the tour, focus on next
	          nextTooltipButton.focus();
	        }
	      }, 350);

	    } else {
	      var helperLayer       = document.createElement('div'),
	          referenceLayer    = document.createElement('div'),
	          arrowLayer        = document.createElement('div'),
	          tooltipLayer      = document.createElement('div'),
	          tooltipTextLayer  = document.createElement('div'),
	          bulletsLayer      = document.createElement('div'),
	          progressLayer     = document.createElement('div'),
	          buttonsLayer      = document.createElement('div');

	      helperLayer.className = highlightClass;
	      referenceLayer.className = 'introjs-tooltipReferenceLayer';

	      //set new position to helper layer
	      _setHelperLayerPosition.call(self, helperLayer);
	      _setHelperLayerPosition.call(self, referenceLayer);

	      //add helper layer to target element
	      this._targetElement.appendChild(helperLayer);
	      this._targetElement.appendChild(referenceLayer);

	      arrowLayer.className = 'introjs-arrow';

	      tooltipTextLayer.className = 'introjs-tooltiptext';
	      tooltipTextLayer.innerHTML = targetElement.intro;

	      bulletsLayer.className = 'introjs-bullets';

	      if (this._options.showBullets === false) {
	        bulletsLayer.style.display = 'none';
	      }


	      var ulContainer = document.createElement('ul');

	      for (var i = 0, stepsLength = this._introItems.length; i < stepsLength; i++) {
	        var innerLi    = document.createElement('li');
	        var anchorLink = document.createElement('a');

	        anchorLink.onclick = function() {
	          self.goToStep(this.getAttribute('data-stepnumber'));
	        };

	        if (i === (targetElement.step-1)) anchorLink.className = 'active';

	        anchorLink.href = 'javascript:void(0);';
	        anchorLink.innerHTML = "&nbsp;";
	        anchorLink.setAttribute('data-stepnumber', this._introItems[i].step);

	        innerLi.appendChild(anchorLink);
	        ulContainer.appendChild(innerLi);
	      }

	      bulletsLayer.appendChild(ulContainer);

	      progressLayer.className = 'introjs-progress';

	      if (this._options.showProgress === false) {
	        progressLayer.style.display = 'none';
	      }
	      var progressBar = document.createElement('div');
	      progressBar.className = 'introjs-progressbar';
	      progressBar.setAttribute('style', 'width:' + _getProgress.call(this) + '%;');

	      progressLayer.appendChild(progressBar);

	      buttonsLayer.className = 'introjs-tooltipbuttons';
	      if (this._options.showButtons === false) {
	        buttonsLayer.style.display = 'none';
	      }

	      tooltipLayer.className = 'introjs-tooltip';
	      tooltipLayer.appendChild(tooltipTextLayer);
	      tooltipLayer.appendChild(bulletsLayer);
	      tooltipLayer.appendChild(progressLayer);

	      //add helper layer number
	      if (this._options.showStepNumbers == true) {
	        var helperNumberLayer = document.createElement('span');
	        helperNumberLayer.className = 'introjs-helperNumberLayer';
	        helperNumberLayer.innerHTML = targetElement.step;
	        referenceLayer.appendChild(helperNumberLayer);
	      }

	      tooltipLayer.appendChild(arrowLayer);
	      referenceLayer.appendChild(tooltipLayer);

	      //next button
	      var nextTooltipButton = document.createElement('a');

	      nextTooltipButton.onclick = function() {
	        if (self._introItems.length - 1 != self._currentStep) {
	          _nextStep.call(self);
	        }
	      };

	      nextTooltipButton.href = 'javascript:void(0);';
	      nextTooltipButton.innerHTML = this._options.nextLabel;

	      //previous button
	      var prevTooltipButton = document.createElement('a');

	      prevTooltipButton.onclick = function() {
	        if (self._currentStep != 0) {
	          _previousStep.call(self);
	        }
	      };

	      prevTooltipButton.href = 'javascript:void(0);';
	      prevTooltipButton.innerHTML = this._options.prevLabel;

	      //skip button
	      var skipTooltipButton = document.createElement('a');
	      skipTooltipButton.className = 'introjs-button introjs-skipbutton';
	      skipTooltipButton.href = 'javascript:void(0);';
	      skipTooltipButton.innerHTML = this._options.skipLabel;

	      skipTooltipButton.onclick = function() {
	        if (self._introItems.length - 1 == self._currentStep && typeof (self._introCompleteCallback) === 'function') {
	          self._introCompleteCallback.call(self);
	        }

	        if (self._introItems.length - 1 != self._currentStep && typeof (self._introExitCallback) === 'function') {
	          self._introExitCallback.call(self);
	        }

	        _exitIntro.call(self, self._targetElement);
	      };

	      buttonsLayer.appendChild(skipTooltipButton);

	      //in order to prevent displaying next/previous button always
	      if (this._introItems.length > 1) {
	        buttonsLayer.appendChild(prevTooltipButton);
	        buttonsLayer.appendChild(nextTooltipButton);
	      }

	      tooltipLayer.appendChild(buttonsLayer);

	      //set proper position
	      _placeTooltip.call(self, targetElement.element, tooltipLayer, arrowLayer, helperNumberLayer);
	    }

	    //disable interaction
	    if (this._options.disableInteraction === true) {
	      _disableInteraction.call(self);
	    }

	    prevTooltipButton.removeAttribute('tabIndex');
	    nextTooltipButton.removeAttribute('tabIndex');

	    if (this._currentStep == 0 && this._introItems.length > 1) {
	      prevTooltipButton.className = 'introjs-button introjs-prevbutton introjs-disabled';
	      prevTooltipButton.tabIndex = '-1';
	      nextTooltipButton.className = 'introjs-button introjs-nextbutton';
	      skipTooltipButton.innerHTML = this._options.skipLabel;
	    } else if (this._introItems.length - 1 == this._currentStep || this._introItems.length == 1) {
	      skipTooltipButton.innerHTML = this._options.doneLabel;
	      prevTooltipButton.className = 'introjs-button introjs-prevbutton';
	      nextTooltipButton.className = 'introjs-button introjs-nextbutton introjs-disabled';
	      nextTooltipButton.tabIndex = '-1';
	    } else {
	      prevTooltipButton.className = 'introjs-button introjs-prevbutton';
	      nextTooltipButton.className = 'introjs-button introjs-nextbutton';
	      skipTooltipButton.innerHTML = this._options.skipLabel;
	    }

	    //Set focus on "next" button, so that hitting Enter always moves you onto the next step
	    nextTooltipButton.focus();

	    //add target element position style
	    targetElement.element.className += ' introjs-showElement';

	    var currentElementPosition = _getPropValue(targetElement.element, 'position');
	    if (currentElementPosition !== 'absolute' &&
	        currentElementPosition !== 'relative') {
	      //change to new intro item
	      targetElement.element.className += ' introjs-relativePosition';
	    }

	    var parentElm = targetElement.element.parentNode;
	    while (parentElm != null) {
	      if (parentElm.tagName.toLowerCase() === 'body') break;

	      //fix The Stacking Contenxt problem.
	      //More detail: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context
	      var zIndex = _getPropValue(parentElm, 'z-index');
	      var opacity = parseFloat(_getPropValue(parentElm, 'opacity'));
	      var transform = _getPropValue(parentElm, 'transform') || _getPropValue(parentElm, '-webkit-transform') || _getPropValue(parentElm, '-moz-transform') || _getPropValue(parentElm, '-ms-transform') || _getPropValue(parentElm, '-o-transform');
	      if (/[0-9]+/.test(zIndex) || opacity < 1 || transform !== 'none') {
	        parentElm.className += ' introjs-fixParent';
	      }

	      parentElm = parentElm.parentNode;
	    }

	    if (!_elementInViewport(targetElement.element) && this._options.scrollToElement === true) {
	      var rect = targetElement.element.getBoundingClientRect(),
	        winHeight = _getWinSize().height,
	        top = rect.bottom - (rect.bottom - rect.top),
	        bottom = rect.bottom - winHeight;

	      //Scroll up
	      if (top < 0 || targetElement.element.clientHeight > winHeight) {
	        window.scrollBy(0, top - 30); // 30px padding from edge to look nice

	      //Scroll down
	      } else {
	        window.scrollBy(0, bottom + 100); // 70px + 30px padding from edge to look nice
	      }
	    }

	    if (typeof (this._introAfterChangeCallback) !== 'undefined') {
	      this._introAfterChangeCallback.call(this, targetElement.element);
	    }
	  }

	  /**
	   * Get an element CSS property on the page
	   * Thanks to JavaScript Kit: http://www.javascriptkit.com/dhtmltutors/dhtmlcascade4.shtml
	   *
	   * @api private
	   * @method _getPropValue
	   * @param {Object} element
	   * @param {String} propName
	   * @returns Element's property value
	   */
	  function _getPropValue (element, propName) {
	    var propValue = '';
	    if (element.currentStyle) { //IE
	      propValue = element.currentStyle[propName];
	    } else if (document.defaultView && document.defaultView.getComputedStyle) { //Others
	      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);
	    }

	    //Prevent exception in IE
	    if (propValue && propValue.toLowerCase) {
	      return propValue.toLowerCase();
	    } else {
	      return propValue;
	    }
	  }

	  /**
	   * Provides a cross-browser way to get the screen dimensions
	   * via: http://stackoverflow.com/questions/5864467/internet-explorer-innerheight
	   *
	   * @api private
	   * @method _getWinSize
	   * @returns {Object} width and height attributes
	   */
	  function _getWinSize() {
	    if (window.innerWidth != undefined) {
	      return { width: window.innerWidth, height: window.innerHeight };
	    } else {
	      var D = document.documentElement;
	      return { width: D.clientWidth, height: D.clientHeight };
	    }
	  }

	  /**
	   * Add overlay layer to the page
	   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport
	   *
	   * @api private
	   * @method _elementInViewport
	   * @param {Object} el
	   */
	  function _elementInViewport(el) {
	    var rect = el.getBoundingClientRect();

	    return (
	      rect.top >= 0 &&
	      rect.left >= 0 &&
	      (rect.bottom+80) <= window.innerHeight && // add 80 to get the text right
	      rect.right <= window.innerWidth
	    );
	  }

	  /**
	   * Add overlay layer to the page
	   *
	   * @api private
	   * @method _addOverlayLayer
	   * @param {Object} targetElm
	   */
	  function _addOverlayLayer(targetElm) {
	    var overlayLayer = document.createElement('div'),
	        styleText = '',
	        self = this;

	    //set css class name
	    overlayLayer.className = 'introjs-overlay';

	    //check if the target element is body, we should calculate the size of overlay layer in a better way
	    if (targetElm.tagName.toLowerCase() === 'body') {
	      styleText += 'top: 0;bottom: 0; left: 0;right: 0;position: fixed;';
	      overlayLayer.setAttribute('style', styleText);
	    } else {
	      //set overlay layer position
	      var elementPosition = _getOffset(targetElm);
	      if (elementPosition) {
	        styleText += 'width: ' + elementPosition.width + 'px; height:' + elementPosition.height + 'px; top:' + elementPosition.top + 'px;left: ' + elementPosition.left + 'px;';
	        overlayLayer.setAttribute('style', styleText);
	      }
	    }

	    targetElm.appendChild(overlayLayer);

	    overlayLayer.onclick = function() {
	      if (self._options.exitOnOverlayClick == true) {
	        _exitIntro.call(self, targetElm);

	        //check if any callback is defined
	        if (self._introExitCallback != undefined) {
	          self._introExitCallback.call(self);
	        }
	      }
	    };

	    setTimeout(function() {
	      styleText += 'opacity: ' + self._options.overlayOpacity.toString() + ';';
	      overlayLayer.setAttribute('style', styleText);
	    }, 10);

	    return true;
	  }

	  /**
	   * Get an element position on the page
	   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966
	   *
	   * @api private
	   * @method _getOffset
	   * @param {Object} element
	   * @returns Element's position info
	   */
	  function _getOffset(element) {
	    var elementPosition = {};

	    //set width
	    elementPosition.width = element.offsetWidth;

	    //set height
	    elementPosition.height = element.offsetHeight;

	    //calculate element top and left
	    var _x = 0;
	    var _y = 0;
	    while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {
	      _x += element.offsetLeft;
	      _y += element.offsetTop;
	      element = element.offsetParent;
	    }
	    //set top
	    elementPosition.top = _y;
	    //set left
	    elementPosition.left = _x;

	    return elementPosition;
	  }

	  /**
	   * Gets the current progress percentage
	   *
	   * @api private
	   * @method _getProgress
	   * @returns current progress percentage
	   */
	  function _getProgress() {
	    // Steps are 0 indexed
	    var currentStep = parseInt((this._currentStep + 1), 10);
	    return ((currentStep / this._introItems.length) * 100);
	  }

	  /**
	   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
	   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically
	   *
	   * @param obj1
	   * @param obj2
	   * @returns obj3 a new object based on obj1 and obj2
	   */
	  function _mergeOptions(obj1,obj2) {
	    var obj3 = {};
	    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
	    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
	    return obj3;
	  }

	  var introJs = function (targetElm) {
	    if (typeof (targetElm) === 'object') {
	      //Ok, create a new instance
	      return new IntroJs(targetElm);

	    } else if (typeof (targetElm) === 'string') {
	      //select the target element with query selector
	      var targetElement = document.querySelector(targetElm);

	      if (targetElement) {
	        return new IntroJs(targetElement);
	      } else {
	        throw new Error('There is no element with given selector.');
	      }
	    } else {
	      return new IntroJs(document.body);
	    }
	  };

	  /**
	   * Current IntroJs version
	   *
	   * @property version
	   * @type String
	   */
	  introJs.version = VERSION;

	  //Prototype
	  introJs.fn = IntroJs.prototype = {
	    clone: function () {
	      return new IntroJs(this);
	    },
	    setOption: function(option, value) {
	      this._options[option] = value;
	      return this;
	    },
	    setOptions: function(options) {
	      this._options = _mergeOptions(this._options, options);
	      return this;
	    },
	    start: function () {
	      _introForElement.call(this, this._targetElement);
	      return this;
	    },
	    goToStep: function(step) {
	      _goToStep.call(this, step);
	      return this;
	    },
	    nextStep: function() {
	      _nextStep.call(this);
	      return this;
	    },
	    previousStep: function() {
	      _previousStep.call(this);
	      return this;
	    },
	    exit: function() {
	      _exitIntro.call(this, this._targetElement);
	      return this;
	    },
	    refresh: function() {
	      _setHelperLayerPosition.call(this, document.querySelector('.introjs-helperLayer'));
	      _setHelperLayerPosition.call(this, document.querySelector('.introjs-tooltipReferenceLayer'));
	      return this;
	    },
	    onbeforechange: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introBeforeChangeCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onbeforechange was not a function');
	      }
	      return this;
	    },
	    onchange: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introChangeCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onchange was not a function.');
	      }
	      return this;
	    },
	    onafterchange: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introAfterChangeCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onafterchange was not a function');
	      }
	      return this;
	    },
	    oncomplete: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introCompleteCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for oncomplete was not a function.');
	      }
	      return this;
	    },
	    onexit: function(providedCallback) {
	      if (typeof (providedCallback) === 'function') {
	        this._introExitCallback = providedCallback;
	      } else {
	        throw new Error('Provided callback for onexit was not a function.');
	      }
	      return this;
	    }
	  };

	  exports.introJs = introJs;
	  return introJs;
	}));

/***/ },
/* 111 */
/***/ function(module, exports) {

	/*! intercom.js | https://github.com/diy/intercom.js | Apache License (v2) */
	/*! Removed Socket.io binding for intercom.js */

	var Intercom = (function() {	
		
		// --- lib/events.js ---
		
		var EventEmitter = function() {};
		
		EventEmitter.createInterface = function(space) {
			var methods = {};
			
			methods.on = function(name, fn) {
				if (typeof this[space] === 'undefined') {
					this[space] = {};
				}
				if (!this[space].hasOwnProperty(name)) {
					this[space][name] = [];
				}
				this[space][name].push(fn);
			};
			
			methods.off = function(name, fn) {
				if (typeof this[space] === 'undefined') return;
				if (this[space].hasOwnProperty(name)) {
					util.removeItem(fn, this[space][name]);
				}
			};
			
			methods.trigger = function(name) {
				if (typeof this[space] !== 'undefined' && this[space].hasOwnProperty(name)) {
					var args = Array.prototype.slice.call(arguments, 1);
					for (var i = 0; i < this[space][name].length; i++) {
						this[space][name][i].apply(this[space][name][i], args);
					}
				}
			};
			
			return methods;
		};
		
		var pvt = EventEmitter.createInterface('_handlers');
		EventEmitter.prototype._on = pvt.on;
		EventEmitter.prototype._off = pvt.off;
		EventEmitter.prototype._trigger = pvt.trigger;
		
		var pub = EventEmitter.createInterface('handlers');
		EventEmitter.prototype.on = function() {
			pub.on.apply(this, arguments);
			Array.prototype.unshift.call(arguments, 'on');
			this._trigger.apply(this, arguments);
		};
		EventEmitter.prototype.off = pub.off;
		EventEmitter.prototype.trigger = pub.trigger;
		
		// --- lib/localstorage.js ---
		
		var localStorage = window.localStorage;
		if (typeof localStorage === 'undefined') {
			localStorage = {
				getItem    : function() {},
				setItem    : function() {},
				removeItem : function() {}
			};
		}
		
		// --- lib/util.js ---
		
		var util = {};
		
		util.guid = (function() {
			var S4 = function() {
				return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
			};
			return function() {
				return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
			};
		})();
		
		util.throttle = function(delay, fn) {
			var last = 0;
			return function() {
				var now = (new Date()).getTime();
				if (now - last > delay) {
					last = now;
					fn.apply(this, arguments);
				}
			};
		};
		
		util.extend = function(a, b) {
			if (typeof a === 'undefined' || !a) { a = {}; }
			if (typeof b === 'object') {
				for (var key in b) {
					if (b.hasOwnProperty(key)) {
						a[key] = b[key];
					}
				}
			}
			return a;
		};
		
		util.removeItem = function(item, array) {
			for (var i = array.length - 1; i >= 0; i--) {
				if (array[i] === item) {
					array.splice(i, 1);
				}
			}
			return array;
		};
		
		// --- lib/intercom.js ---
		
		/**
		* A cross-window broadcast service built on top
		* of the HTML5 localStorage API. The interface
		* mimic socket.io in design.
		*
		* @author Brian Reavis <brian@thirdroute.com>
		* @constructor
		*/
		
		var Intercom = function() {
			var self = this;
			var now = (new Date()).getTime();
		
			this.origin         = util.guid();
			this.lastMessage    = now;
			this.bindings       = [];
			this.receivedIDs    = {};
			this.previousValues = {};
		
			var storageHandler = function() { self._onStorageEvent.apply(self, arguments); };
			if (window.attachEvent) { document.attachEvent('onstorage', storageHandler); }
			else { window.addEventListener('storage', storageHandler, false); };
		};
		
		Intercom.prototype._transaction = function(fn) {
			var TIMEOUT   = 1000;
			var WAIT      = 20;
		
			var self      = this;
			var executed  = false;
			var listening = false;
			var waitTimer = null;
		
			var lock = function() {
				if (executed) return;
		
				var now = (new Date()).getTime();
				var activeLock = parseInt(localStorage.getItem(INDEX_LOCK) || 0);
				if (activeLock && now - activeLock < TIMEOUT) {
					if (!listening) {
						self._on('storage', lock);
						listening = true;
					}
					waitTimer = window.setTimeout(lock, WAIT);
					return;
				}
				executed = true;
				localStorage.setItem(INDEX_LOCK, now);
		
				fn();
				unlock();
			};
		
			var unlock = function() {
				if (listening) { self._off('storage', lock); }
				if (waitTimer) { window.clearTimeout(waitTimer); }
				localStorage.removeItem(INDEX_LOCK);
			};
		
			lock();
		};
		
		Intercom.prototype._cleanup_emit = util.throttle(100, function() {
			var self = this;
		
			this._transaction(function() {
				var now = (new Date()).getTime();
				var threshold = now - THRESHOLD_TTL_EMIT;
				var changed = 0;
		
				var messages = JSON.parse(localStorage.getItem(INDEX_EMIT) || '[]');
				for (var i = messages.length - 1; i >= 0; i--) {
					if (messages[i].timestamp < threshold) {
						messages.splice(i, 1);
						changed++;
					}
				}
				if (changed > 0) {
					localStorage.setItem(INDEX_EMIT, JSON.stringify(messages));
				}
			});
		});
		
		Intercom.prototype._cleanup_once = util.throttle(100, function() {
			var self = this;
		
			this._transaction(function() {
				var timestamp, ttl, key;
				var table   = JSON.parse(localStorage.getItem(INDEX_ONCE) || '{}');
				var now     = (new Date()).getTime();
				var changed = 0;
		
				for (key in table) {
					if (self._once_expired(key, table)) {
						delete table[key];
						changed++;
					}
				}
		
				if (changed > 0) {
					localStorage.setItem(INDEX_ONCE, JSON.stringify(table));
				}
			});
		});
		
		Intercom.prototype._once_expired = function(key, table) {
			if (!table) return true;
			if (!table.hasOwnProperty(key)) return true;
			if (typeof table[key] !== 'object') return true;
			var ttl = table[key].ttl || THRESHOLD_TTL_ONCE;
			var now = (new Date()).getTime();
			var timestamp = table[key].timestamp;
			return timestamp < now - ttl;
		};
		
		Intercom.prototype._localStorageChanged = function(event, field) {
			if (event && event.key) {
				return event.key === field;
			}
		
			var currentValue = localStorage.getItem(field);
			if (currentValue === this.previousValues[field]) {
				return false;
			}
			this.previousValues[field] = currentValue;
			return true;
		};
		
		Intercom.prototype._onStorageEvent = function(event) {
			event = event || window.event;
			var self = this;
		
			if (this._localStorageChanged(event, INDEX_EMIT)) {
				this._transaction(function() {
					var now = (new Date()).getTime();
					var data = localStorage.getItem(INDEX_EMIT);
					var messages = JSON.parse(data || '[]');
					for (var i = 0; i < messages.length; i++) {
						if (messages[i].origin === self.origin) continue;
						if (messages[i].timestamp < self.lastMessage) continue;
						if (messages[i].id) {
							if (self.receivedIDs.hasOwnProperty(messages[i].id)) continue;
							self.receivedIDs[messages[i].id] = true;
						}
						self.trigger(messages[i].name, messages[i].payload);
					}
					self.lastMessage = now;
				});
			}
		
			this._trigger('storage', event);
		};
		
		Intercom.prototype._emit = function(name, message, id) {
			id = (typeof id === 'string' || typeof id === 'number') ? String(id) : null;
			if (id && id.length) {
				if (this.receivedIDs.hasOwnProperty(id)) return;
				this.receivedIDs[id] = true;
			}
		
			var packet = {
				id        : id,
				name      : name,
				origin    : this.origin,
				timestamp : (new Date()).getTime(),
				payload   : message
			};
		
			var self = this;
			this._transaction(function() {
				var data = localStorage.getItem(INDEX_EMIT) || '[]';
				var delimiter = (data === '[]') ? '' : ',';
				data = [data.substring(0, data.length - 1), delimiter, JSON.stringify(packet), ']'].join('');
				localStorage.setItem(INDEX_EMIT, data);
				self.trigger(name, message);
		
				window.setTimeout(function() { self._cleanup_emit(); }, 50);
			});
		};
		
		Intercom.prototype.bind = function(object, options) {
			for (var i = 0; i < Intercom.bindings.length; i++) {
				var binding = Intercom.bindings[i].factory(object, options || null, this);
				if (binding) { this.bindings.push(binding); }
			}
		};
		
		Intercom.prototype.emit = function(name, message) {
			this._emit.apply(this, arguments);
			this._trigger('emit', name, message);
		};
		
		Intercom.prototype.once = function(key, fn, ttl) {
			if (!Intercom.supported) return;
		
			var self = this;
			this._transaction(function() {
				var data = JSON.parse(localStorage.getItem(INDEX_ONCE) || '{}');
				if (!self._once_expired(key, data)) return;
		
				data[key] = {};
				data[key].timestamp = (new Date()).getTime();
				if (typeof ttl === 'number') {
					data[key].ttl = ttl * 1000;
				}
		
				localStorage.setItem(INDEX_ONCE, JSON.stringify(data));
				fn();
		
				window.setTimeout(function() { self._cleanup_once(); }, 50);
			});
		};
		
		util.extend(Intercom.prototype, EventEmitter.prototype);
		
		Intercom.bindings = [];
		Intercom.supported = (typeof localStorage !== 'undefined');
		
		var INDEX_EMIT = 'intercom';
		var INDEX_ONCE = 'intercom_once';
		var INDEX_LOCK = 'intercom_lock';
		
		var THRESHOLD_TTL_EMIT = 50000;
		var THRESHOLD_TTL_ONCE = 1000 * 3600;
		
		Intercom.destroy = function() {
			localStorage.removeItem(INDEX_LOCK);
			localStorage.removeItem(INDEX_EMIT);
			localStorage.removeItem(INDEX_ONCE);
		};
		
		Intercom.getInstance = (function() {
			var intercom = null;
			return function() {
				if (!intercom) {
					intercom = new Intercom();
				}
				return intercom;
			};
		})();
		
		return Intercom;
	})();

/***/ },
/* 112 */
/***/ function(module, exports) {

	//---------------------------------------------------------------------
	// QRCode for JavaScript
	//
	// Copyright (c) 2009 Kazuhiko Arase
	//
	// URL: http://www.d-project.com/
	//
	// Licensed under the MIT license:
	//   http://www.opensource.org/licenses/mit-license.php
	//
	// The word "QR Code" is registered trademark of 
	// DENSO WAVE INCORPORATED
	//   http://www.denso-wave.com/qrcode/faqpatent-e.html
	//
	//---------------------------------------------------------------------

	//---------------------------------------------------------------------
	// QR8bitByte
	//---------------------------------------------------------------------

	function QR8bitByte(data) {
		this.mode = QRMode.MODE_8BIT_BYTE;
		this.data = data;
	}

	QR8bitByte.prototype = {

		getLength : function(buffer) {
			return this.data.length;
		},
		
		write : function(buffer) {
			for (var i = 0; i < this.data.length; i++) {
				// not JIS ...
				buffer.put(this.data.charCodeAt(i), 8);
			}
		}
	};

	//---------------------------------------------------------------------
	// QRCode
	//---------------------------------------------------------------------

	function QRCode(typeNumber, errorCorrectLevel) {
		this.typeNumber = typeNumber;
		this.errorCorrectLevel = errorCorrectLevel;
		this.modules = null;
		this.moduleCount = 0;
		this.dataCache = null;
		this.dataList = new Array();
	}

	QRCode.prototype = {
		
		addData : function(data) {
			var newData = new QR8bitByte(data);
			this.dataList.push(newData);
			this.dataCache = null;
		},
		
		isDark : function(row, col) {
			if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
				throw new Error(row + "," + col);
			}
			return this.modules[row][col];
		},

		getModuleCount : function() {
			return this.moduleCount;
		},
		
		make : function() {
			this.makeImpl(false, this.getBestMaskPattern() );
		},
		
		makeImpl : function(test, maskPattern) {
			
			this.moduleCount = this.typeNumber * 4 + 17;
			this.modules = new Array(this.moduleCount);
			
			for (var row = 0; row < this.moduleCount; row++) {
				
				this.modules[row] = new Array(this.moduleCount);
				
				for (var col = 0; col < this.moduleCount; col++) {
					this.modules[row][col] = null;//(col + row) % 3;
				}
			}
		
			this.setupPositionProbePattern(0, 0);
			this.setupPositionProbePattern(this.moduleCount - 7, 0);
			this.setupPositionProbePattern(0, this.moduleCount - 7);
			this.setupPositionAdjustPattern();
			this.setupTimingPattern();
			this.setupTypeInfo(test, maskPattern);
			
			if (this.typeNumber >= 7) {
				this.setupTypeNumber(test);
			}
		
			if (this.dataCache == null) {
				this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
			}
		
			this.mapData(this.dataCache, maskPattern);
		},

		setupPositionProbePattern : function(row, col)  {
			
			for (var r = -1; r <= 7; r++) {
				
				if (row + r <= -1 || this.moduleCount <= row + r) continue;
				
				for (var c = -1; c <= 7; c++) {
					
					if (col + c <= -1 || this.moduleCount <= col + c) continue;
					
					if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )
							|| (0 <= c && c <= 6 && (r == 0 || r == 6) )
							|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {
						this.modules[row + r][col + c] = true;
					} else {
						this.modules[row + r][col + c] = false;
					}
				}		
			}		
		},
		
		getBestMaskPattern : function() {
		
			var minLostPoint = 0;
			var pattern = 0;
		
			for (var i = 0; i < 8; i++) {
				
				this.makeImpl(true, i);
		
				var lostPoint = QRUtil.getLostPoint(this);
		
				if (i == 0 || minLostPoint >  lostPoint) {
					minLostPoint = lostPoint;
					pattern = i;
				}
			}
		
			return pattern;
		},
		
		createMovieClip : function(target_mc, instance_name, depth) {
		
			var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
			var cs = 1;
		
			this.make();

			for (var row = 0; row < this.modules.length; row++) {
				
				var y = row * cs;
				
				for (var col = 0; col < this.modules[row].length; col++) {
		
					var x = col * cs;
					var dark = this.modules[row][col];
				
					if (dark) {
						qr_mc.beginFill(0, 100);
						qr_mc.moveTo(x, y);
						qr_mc.lineTo(x + cs, y);
						qr_mc.lineTo(x + cs, y + cs);
						qr_mc.lineTo(x, y + cs);
						qr_mc.endFill();
					}
				}
			}
			
			return qr_mc;
		},

		setupTimingPattern : function() {
			
			for (var r = 8; r < this.moduleCount - 8; r++) {
				if (this.modules[r][6] != null) {
					continue;
				}
				this.modules[r][6] = (r % 2 == 0);
			}
		
			for (var c = 8; c < this.moduleCount - 8; c++) {
				if (this.modules[6][c] != null) {
					continue;
				}
				this.modules[6][c] = (c % 2 == 0);
			}
		},
		
		setupPositionAdjustPattern : function() {
		
			var pos = QRUtil.getPatternPosition(this.typeNumber);
			
			for (var i = 0; i < pos.length; i++) {
			
				for (var j = 0; j < pos.length; j++) {
				
					var row = pos[i];
					var col = pos[j];
					
					if (this.modules[row][col] != null) {
						continue;
					}
					
					for (var r = -2; r <= 2; r++) {
					
						for (var c = -2; c <= 2; c++) {
						
							if (r == -2 || r == 2 || c == -2 || c == 2 
									|| (r == 0 && c == 0) ) {
								this.modules[row + r][col + c] = true;
							} else {
								this.modules[row + r][col + c] = false;
							}
						}
					}
				}
			}
		},
		
		setupTypeNumber : function(test) {
		
			var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
		
			for (var i = 0; i < 18; i++) {
				var mod = (!test && ( (bits >> i) & 1) == 1);
				this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
			}
		
			for (var i = 0; i < 18; i++) {
				var mod = (!test && ( (bits >> i) & 1) == 1);
				this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
			}
		},
		
		setupTypeInfo : function(test, maskPattern) {
		
			var data = (this.errorCorrectLevel << 3) | maskPattern;
			var bits = QRUtil.getBCHTypeInfo(data);
		
			// vertical		
			for (var i = 0; i < 15; i++) {
		
				var mod = (!test && ( (bits >> i) & 1) == 1);
		
				if (i < 6) {
					this.modules[i][8] = mod;
				} else if (i < 8) {
					this.modules[i + 1][8] = mod;
				} else {
					this.modules[this.moduleCount - 15 + i][8] = mod;
				}
			}
		
			// horizontal
			for (var i = 0; i < 15; i++) {
		
				var mod = (!test && ( (bits >> i) & 1) == 1);
				
				if (i < 8) {
					this.modules[8][this.moduleCount - i - 1] = mod;
				} else if (i < 9) {
					this.modules[8][15 - i - 1 + 1] = mod;
				} else {
					this.modules[8][15 - i - 1] = mod;
				}
			}
		
			// fixed module
			this.modules[this.moduleCount - 8][8] = (!test);
		
		},
		
		mapData : function(data, maskPattern) {
			
			var inc = -1;
			var row = this.moduleCount - 1;
			var bitIndex = 7;
			var byteIndex = 0;
			
			for (var col = this.moduleCount - 1; col > 0; col -= 2) {
		
				if (col == 6) col--;
		
				while (true) {
		
					for (var c = 0; c < 2; c++) {
						
						if (this.modules[row][col - c] == null) {
							
							var dark = false;
		
							if (byteIndex < data.length) {
								dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);
							}
		
							var mask = QRUtil.getMask(maskPattern, row, col - c);
		
							if (mask) {
								dark = !dark;
							}
							
							this.modules[row][col - c] = dark;
							bitIndex--;
		
							if (bitIndex == -1) {
								byteIndex++;
								bitIndex = 7;
							}
						}
					}
									
					row += inc;
		
					if (row < 0 || this.moduleCount <= row) {
						row -= inc;
						inc = -inc;
						break;
					}
				}
			}
			
		}

	};

	QRCode.PAD0 = 0xEC;
	QRCode.PAD1 = 0x11;

	QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {
		
		var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
		
		var buffer = new QRBitBuffer();
		
		for (var i = 0; i < dataList.length; i++) {
			var data = dataList[i];
			buffer.put(data.mode, 4);
			buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );
			data.write(buffer);
		}

		// calc num max data.
		var totalDataCount = 0;
		for (var i = 0; i < rsBlocks.length; i++) {
			totalDataCount += rsBlocks[i].dataCount;
		}

		if (buffer.getLengthInBits() > totalDataCount * 8) {
			throw new Error("code length overflow. ("
				+ buffer.getLengthInBits()
				+ ">"
				+  totalDataCount * 8
				+ ")");
		}

		// end code
		if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
			buffer.put(0, 4);
		}

		// padding
		while (buffer.getLengthInBits() % 8 != 0) {
			buffer.putBit(false);
		}

		// padding
		while (true) {
			
			if (buffer.getLengthInBits() >= totalDataCount * 8) {
				break;
			}
			buffer.put(QRCode.PAD0, 8);
			
			if (buffer.getLengthInBits() >= totalDataCount * 8) {
				break;
			}
			buffer.put(QRCode.PAD1, 8);
		}

		return QRCode.createBytes(buffer, rsBlocks);
	}

	QRCode.createBytes = function(buffer, rsBlocks) {

		var offset = 0;
		
		var maxDcCount = 0;
		var maxEcCount = 0;
		
		var dcdata = new Array(rsBlocks.length);
		var ecdata = new Array(rsBlocks.length);
		
		for (var r = 0; r < rsBlocks.length; r++) {

			var dcCount = rsBlocks[r].dataCount;
			var ecCount = rsBlocks[r].totalCount - dcCount;

			maxDcCount = Math.max(maxDcCount, dcCount);
			maxEcCount = Math.max(maxEcCount, ecCount);
			
			dcdata[r] = new Array(dcCount);
			
			for (var i = 0; i < dcdata[r].length; i++) {
				dcdata[r][i] = 0xff & buffer.buffer[i + offset];
			}
			offset += dcCount;
			
			var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
			var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);

			var modPoly = rawPoly.mod(rsPoly);
			ecdata[r] = new Array(rsPoly.getLength() - 1);
			for (var i = 0; i < ecdata[r].length; i++) {
	            var modIndex = i + modPoly.getLength() - ecdata[r].length;
				ecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;
			}

		}
		
		var totalCodeCount = 0;
		for (var i = 0; i < rsBlocks.length; i++) {
			totalCodeCount += rsBlocks[i].totalCount;
		}

		var data = new Array(totalCodeCount);
		var index = 0;

		for (var i = 0; i < maxDcCount; i++) {
			for (var r = 0; r < rsBlocks.length; r++) {
				if (i < dcdata[r].length) {
					data[index++] = dcdata[r][i];
				}
			}
		}

		for (var i = 0; i < maxEcCount; i++) {
			for (var r = 0; r < rsBlocks.length; r++) {
				if (i < ecdata[r].length) {
					data[index++] = ecdata[r][i];
				}
			}
		}

		return data;

	}

	//---------------------------------------------------------------------
	// QRMode
	//---------------------------------------------------------------------

	var QRMode = {
		MODE_NUMBER :		1 << 0,
		MODE_ALPHA_NUM : 	1 << 1,
		MODE_8BIT_BYTE : 	1 << 2,
		MODE_KANJI :		1 << 3
	};

	//---------------------------------------------------------------------
	// QRErrorCorrectLevel
	//---------------------------------------------------------------------
	 
	var QRErrorCorrectLevel = {
		L : 1,
		M : 0,
		Q : 3,
		H : 2
	};

	//---------------------------------------------------------------------
	// QRMaskPattern
	//---------------------------------------------------------------------

	var QRMaskPattern = {
		PATTERN000 : 0,
		PATTERN001 : 1,
		PATTERN010 : 2,
		PATTERN011 : 3,
		PATTERN100 : 4,
		PATTERN101 : 5,
		PATTERN110 : 6,
		PATTERN111 : 7
	};

	//---------------------------------------------------------------------
	// QRUtil
	//---------------------------------------------------------------------
	 
	var QRUtil = {

	    PATTERN_POSITION_TABLE : [
		    [],
		    [6, 18],
		    [6, 22],
		    [6, 26],
		    [6, 30],
		    [6, 34],
		    [6, 22, 38],
		    [6, 24, 42],
		    [6, 26, 46],
		    [6, 28, 50],
		    [6, 30, 54],		
		    [6, 32, 58],
		    [6, 34, 62],
		    [6, 26, 46, 66],
		    [6, 26, 48, 70],
		    [6, 26, 50, 74],
		    [6, 30, 54, 78],
		    [6, 30, 56, 82],
		    [6, 30, 58, 86],
		    [6, 34, 62, 90],
		    [6, 28, 50, 72, 94],
		    [6, 26, 50, 74, 98],
		    [6, 30, 54, 78, 102],
		    [6, 28, 54, 80, 106],
		    [6, 32, 58, 84, 110],
		    [6, 30, 58, 86, 114],
		    [6, 34, 62, 90, 118],
		    [6, 26, 50, 74, 98, 122],
		    [6, 30, 54, 78, 102, 126],
		    [6, 26, 52, 78, 104, 130],
		    [6, 30, 56, 82, 108, 134],
		    [6, 34, 60, 86, 112, 138],
		    [6, 30, 58, 86, 114, 142],
		    [6, 34, 62, 90, 118, 146],
		    [6, 30, 54, 78, 102, 126, 150],
		    [6, 24, 50, 76, 102, 128, 154],
		    [6, 28, 54, 80, 106, 132, 158],
		    [6, 32, 58, 84, 110, 136, 162],
		    [6, 26, 54, 82, 110, 138, 166],
		    [6, 30, 58, 86, 114, 142, 170]
	    ],

	    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),
	    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),
	    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)	| (1 << 4) | (1 << 1),

	    getBCHTypeInfo : function(data) {
		    var d = data << 10;
		    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
			    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); 	
		    }
		    return ( (data << 10) | d) ^ QRUtil.G15_MASK;
	    },

	    getBCHTypeNumber : function(data) {
		    var d = data << 12;
		    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
			    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); 	
		    }
		    return (data << 12) | d;
	    },

	    getBCHDigit : function(data) {

		    var digit = 0;

		    while (data != 0) {
			    digit++;
			    data >>>= 1;
		    }

		    return digit;
	    },

	    getPatternPosition : function(typeNumber) {
		    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
	    },

	    getMask : function(maskPattern, i, j) {
		    
		    switch (maskPattern) {
			    
		    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;
		    case QRMaskPattern.PATTERN001 : return i % 2 == 0;
		    case QRMaskPattern.PATTERN010 : return j % 3 == 0;
		    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;
		    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;
		    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;
		    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;
		    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;

		    default :
			    throw new Error("bad maskPattern:" + maskPattern);
		    }
	    },

	    getErrorCorrectPolynomial : function(errorCorrectLength) {

		    var a = new QRPolynomial([1], 0);

		    for (var i = 0; i < errorCorrectLength; i++) {
			    a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0) );
		    }

		    return a;
	    },

	    getLengthInBits : function(mode, type) {

		    if (1 <= type && type < 10) {

			    // 1 - 9

			    switch(mode) {
			    case QRMode.MODE_NUMBER 	: return 10;
			    case QRMode.MODE_ALPHA_NUM 	: return 9;
			    case QRMode.MODE_8BIT_BYTE	: return 8;
			    case QRMode.MODE_KANJI  	: return 8;
			    default :
				    throw new Error("mode:" + mode);
			    }

		    } else if (type < 27) {

			    // 10 - 26

			    switch(mode) {
			    case QRMode.MODE_NUMBER 	: return 12;
			    case QRMode.MODE_ALPHA_NUM 	: return 11;
			    case QRMode.MODE_8BIT_BYTE	: return 16;
			    case QRMode.MODE_KANJI  	: return 10;
			    default :
				    throw new Error("mode:" + mode);
			    }

		    } else if (type < 41) {

			    // 27 - 40

			    switch(mode) {
			    case QRMode.MODE_NUMBER 	: return 14;
			    case QRMode.MODE_ALPHA_NUM	: return 13;
			    case QRMode.MODE_8BIT_BYTE	: return 16;
			    case QRMode.MODE_KANJI  	: return 12;
			    default :
				    throw new Error("mode:" + mode);
			    }

		    } else {
			    throw new Error("type:" + type);
		    }
	    },

	    getLostPoint : function(qrCode) {
		    
		    var moduleCount = qrCode.getModuleCount();
		    
		    var lostPoint = 0;
		    
		    // LEVEL1
		    
		    for (var row = 0; row < moduleCount; row++) {

			    for (var col = 0; col < moduleCount; col++) {

				    var sameCount = 0;
				    var dark = qrCode.isDark(row, col);

					for (var r = -1; r <= 1; r++) {

					    if (row + r < 0 || moduleCount <= row + r) {
						    continue;
					    }

					    for (var c = -1; c <= 1; c++) {

						    if (col + c < 0 || moduleCount <= col + c) {
							    continue;
						    }

						    if (r == 0 && c == 0) {
							    continue;
						    }

						    if (dark == qrCode.isDark(row + r, col + c) ) {
							    sameCount++;
						    }
					    }
				    }

				    if (sameCount > 5) {
					    lostPoint += (3 + sameCount - 5);
				    }
			    }
		    }

		    // LEVEL2

		    for (var row = 0; row < moduleCount - 1; row++) {
			    for (var col = 0; col < moduleCount - 1; col++) {
				    var count = 0;
				    if (qrCode.isDark(row,     col    ) ) count++;
				    if (qrCode.isDark(row + 1, col    ) ) count++;
				    if (qrCode.isDark(row,     col + 1) ) count++;
				    if (qrCode.isDark(row + 1, col + 1) ) count++;
				    if (count == 0 || count == 4) {
					    lostPoint += 3;
				    }
			    }
		    }

		    // LEVEL3

		    for (var row = 0; row < moduleCount; row++) {
			    for (var col = 0; col < moduleCount - 6; col++) {
				    if (qrCode.isDark(row, col)
						    && !qrCode.isDark(row, col + 1)
						    &&  qrCode.isDark(row, col + 2)
						    &&  qrCode.isDark(row, col + 3)
						    &&  qrCode.isDark(row, col + 4)
						    && !qrCode.isDark(row, col + 5)
						    &&  qrCode.isDark(row, col + 6) ) {
					    lostPoint += 40;
				    }
			    }
		    }

		    for (var col = 0; col < moduleCount; col++) {
			    for (var row = 0; row < moduleCount - 6; row++) {
				    if (qrCode.isDark(row, col)
						    && !qrCode.isDark(row + 1, col)
						    &&  qrCode.isDark(row + 2, col)
						    &&  qrCode.isDark(row + 3, col)
						    &&  qrCode.isDark(row + 4, col)
						    && !qrCode.isDark(row + 5, col)
						    &&  qrCode.isDark(row + 6, col) ) {
					    lostPoint += 40;
				    }
			    }
		    }

		    // LEVEL4
		    
		    var darkCount = 0;

		    for (var col = 0; col < moduleCount; col++) {
			    for (var row = 0; row < moduleCount; row++) {
				    if (qrCode.isDark(row, col) ) {
					    darkCount++;
				    }
			    }
		    }
		    
		    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
		    lostPoint += ratio * 10;

		    return lostPoint;		
	    }

	};


	//---------------------------------------------------------------------
	// QRMath
	//---------------------------------------------------------------------

	var QRMath = {

		glog : function(n) {
		
			if (n < 1) {
				throw new Error("glog(" + n + ")");
			}
			
			return QRMath.LOG_TABLE[n];
		},
		
		gexp : function(n) {
		
			while (n < 0) {
				n += 255;
			}
		
			while (n >= 256) {
				n -= 255;
			}
		
			return QRMath.EXP_TABLE[n];
		},
		
		EXP_TABLE : new Array(256),
		
		LOG_TABLE : new Array(256)

	};
		
	for (var i = 0; i < 8; i++) {
		QRMath.EXP_TABLE[i] = 1 << i;
	}
	for (var i = 8; i < 256; i++) {
		QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]
			^ QRMath.EXP_TABLE[i - 5]
			^ QRMath.EXP_TABLE[i - 6]
			^ QRMath.EXP_TABLE[i - 8];
	}
	for (var i = 0; i < 255; i++) {
		QRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;
	}

	//---------------------------------------------------------------------
	// QRPolynomial
	//---------------------------------------------------------------------

	function QRPolynomial(num, shift) {

		if (num.length == undefined) {
			throw new Error(num.length + "/" + shift);
		}

		var offset = 0;

		while (offset < num.length && num[offset] == 0) {
			offset++;
		}

		this.num = new Array(num.length - offset + shift);
		for (var i = 0; i < num.length - offset; i++) {
			this.num[i] = num[i + offset];
		}
	}

	QRPolynomial.prototype = {

		get : function(index) {
			return this.num[index];
		},
		
		getLength : function() {
			return this.num.length;
		},
		
		multiply : function(e) {
		
			var num = new Array(this.getLength() + e.getLength() - 1);
		
			for (var i = 0; i < this.getLength(); i++) {
				for (var j = 0; j < e.getLength(); j++) {
					num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i) ) + QRMath.glog(e.get(j) ) );
				}
			}
		
			return new QRPolynomial(num, 0);
		},
		
		mod : function(e) {
		
			if (this.getLength() - e.getLength() < 0) {
				return this;
			}
		
			var ratio = QRMath.glog(this.get(0) ) - QRMath.glog(e.get(0) );
		
			var num = new Array(this.getLength() );
			
			for (var i = 0; i < this.getLength(); i++) {
				num[i] = this.get(i);
			}
			
			for (var i = 0; i < e.getLength(); i++) {
				num[i] ^= QRMath.gexp(QRMath.glog(e.get(i) ) + ratio);
			}
		
			// recursive call
			return new QRPolynomial(num, 0).mod(e);
		}
	};

	//---------------------------------------------------------------------
	// QRRSBlock
	//---------------------------------------------------------------------

	function QRRSBlock(totalCount, dataCount) {
		this.totalCount = totalCount;
		this.dataCount  = dataCount;
	}

	QRRSBlock.RS_BLOCK_TABLE = [

		// L
		// M
		// Q
		// H

		// 1
		[1, 26, 19],
		[1, 26, 16],
		[1, 26, 13],
		[1, 26, 9],
		
		// 2
		[1, 44, 34],
		[1, 44, 28],
		[1, 44, 22],
		[1, 44, 16],

		// 3
		[1, 70, 55],
		[1, 70, 44],
		[2, 35, 17],
		[2, 35, 13],

		// 4		
		[1, 100, 80],
		[2, 50, 32],
		[2, 50, 24],
		[4, 25, 9],
		
		// 5
		[1, 134, 108],
		[2, 67, 43],
		[2, 33, 15, 2, 34, 16],
		[2, 33, 11, 2, 34, 12],
		
		// 6
		[2, 86, 68],
		[4, 43, 27],
		[4, 43, 19],
		[4, 43, 15],
		
		// 7		
		[2, 98, 78],
		[4, 49, 31],
		[2, 32, 14, 4, 33, 15],
		[4, 39, 13, 1, 40, 14],
		
		// 8
		[2, 121, 97],
		[2, 60, 38, 2, 61, 39],
		[4, 40, 18, 2, 41, 19],
		[4, 40, 14, 2, 41, 15],
		
		// 9
		[2, 146, 116],
		[3, 58, 36, 2, 59, 37],
		[4, 36, 16, 4, 37, 17],
		[4, 36, 12, 4, 37, 13],
		
		// 10		
		[2, 86, 68, 2, 87, 69],
		[4, 69, 43, 1, 70, 44],
		[6, 43, 19, 2, 44, 20],
		[6, 43, 15, 2, 44, 16]

	];

	QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
		
		var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
		
		if (rsBlock == undefined) {
			throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
		}

		var length = rsBlock.length / 3;
		
		var list = new Array();
		
		for (var i = 0; i < length; i++) {

			var count = rsBlock[i * 3 + 0];
			var totalCount = rsBlock[i * 3 + 1];
			var dataCount  = rsBlock[i * 3 + 2];

			for (var j = 0; j < count; j++) {
				list.push(new QRRSBlock(totalCount, dataCount) );	
			}
		}
		
		return list;
	}

	QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {

		switch(errorCorrectLevel) {
		case QRErrorCorrectLevel.L :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
		case QRErrorCorrectLevel.M :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
		case QRErrorCorrectLevel.Q :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
		case QRErrorCorrectLevel.H :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
		default :
			return undefined;
		}
	}

	//---------------------------------------------------------------------
	// QRBitBuffer
	//---------------------------------------------------------------------

	function QRBitBuffer() {
		this.buffer = new Array();
		this.length = 0;
	}

	QRBitBuffer.prototype = {

		get : function(index) {
			var bufIndex = Math.floor(index / 8);
			return ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;
		},
		
		put : function(num, length) {
			for (var i = 0; i < length; i++) {
				this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);
			}
		},
		
		getLengthInBits : function() {
			return this.length;
		},
		
		putBit : function(bit) {
		
			var bufIndex = Math.floor(this.length / 8);
			if (this.buffer.length <= bufIndex) {
				this.buffer.push(0);
			}
		
			if (bit) {
				this.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );
			}
		
			this.length++;
		}
	};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/***
	 * Contains core SlickGrid classes.
	 * @module Core
	 * @namespace Slick
	 */

	(function ($) {
	  // register namespace
	  $.extend(true, window, {
	    "Slick": {
	      "Event": Event,
	      "EventData": EventData,
	      "EventHandler": EventHandler,
	      "Range": Range,
	      "NonDataRow": NonDataItem,
	      "Group": Group,
	      "GroupTotals": GroupTotals,
	      "EditorLock": EditorLock,

	      /***
	       * A global singleton editor lock.
	       * @class GlobalEditorLock
	       * @static
	       * @constructor
	       */
	      "GlobalEditorLock": new EditorLock()
	    }
	  });

	  /***
	   * An event object for passing data to event handlers and letting them control propagation.
	   * <p>This is pretty much identical to how W3C and jQuery implement events.</p>
	   * @class EventData
	   * @constructor
	   */
	  function EventData() {
	    var isPropagationStopped = false;
	    var isImmediatePropagationStopped = false;

	    /***
	     * Stops event from propagating up the DOM tree.
	     * @method stopPropagation
	     */
	    this.stopPropagation = function () {
	      isPropagationStopped = true;
	    };

	    /***
	     * Returns whether stopPropagation was called on this event object.
	     * @method isPropagationStopped
	     * @return {Boolean}
	     */
	    this.isPropagationStopped = function () {
	      return isPropagationStopped;
	    };

	    /***
	     * Prevents the rest of the handlers from being executed.
	     * @method stopImmediatePropagation
	     */
	    this.stopImmediatePropagation = function () {
	      isImmediatePropagationStopped = true;
	    };

	    /***
	     * Returns whether stopImmediatePropagation was called on this event object.\
	     * @method isImmediatePropagationStopped
	     * @return {Boolean}
	     */
	    this.isImmediatePropagationStopped = function () {
	      return isImmediatePropagationStopped;
	    }
	  }

	  /***
	   * A simple publisher-subscriber implementation.
	   * @class Event
	   * @constructor
	   */
	  function Event() {
	    var handlers = [];

	    /***
	     * Adds an event handler to be called when the event is fired.
	     * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>
	     * object the event was fired with.<p>
	     * @method subscribe
	     * @param fn {Function} Event handler.
	     */
	    this.subscribe = function (fn) {
	      handlers.push(fn);
	    };

	    /***
	     * Removes an event handler added with <code>subscribe(fn)</code>.
	     * @method unsubscribe
	     * @param fn {Function} Event handler to be removed.
	     */
	    this.unsubscribe = function (fn) {
	      for (var i = handlers.length - 1; i >= 0; i--) {
	        if (handlers[i] === fn) {
	          handlers.splice(i, 1);
	        }
	      }
	    };

	    /***
	     * Fires an event notifying all subscribers.
	     * @method notify
	     * @param args {Object} Additional data object to be passed to all handlers.
	     * @param e {EventData}
	     *      Optional.
	     *      An <code>EventData</code> object to be passed to all handlers.
	     *      For DOM events, an existing W3C/jQuery event object can be passed in.
	     * @param scope {Object}
	     *      Optional.
	     *      The scope ("this") within which the handler will be executed.
	     *      If not specified, the scope will be set to the <code>Event</code> instance.
	     */
	    this.notify = function (args, e, scope) {
	      e = e || new EventData();
	      scope = scope || this;

	      var returnValue;
	      for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {
	        returnValue = handlers[i].call(scope, e, args);
	      }

	      return returnValue;
	    };
	  }

	  function EventHandler() {
	    var handlers = [];

	    this.subscribe = function (event, handler) {
	      handlers.push({
	        event: event,
	        handler: handler
	      });
	      event.subscribe(handler);

	      return this;  // allow chaining
	    };

	    this.unsubscribe = function (event, handler) {
	      var i = handlers.length;
	      while (i--) {
	        if (handlers[i].event === event &&
	            handlers[i].handler === handler) {
	          handlers.splice(i, 1);
	          event.unsubscribe(handler);
	          return;
	        }
	      }

	      return this;  // allow chaining
	    };

	    this.unsubscribeAll = function () {
	      var i = handlers.length;
	      while (i--) {
	        handlers[i].event.unsubscribe(handlers[i].handler);
	      }
	      handlers = [];

	      return this;  // allow chaining
	    }
	  }

	  /***
	   * A structure containing a range of cells.
	   * @class Range
	   * @constructor
	   * @param fromRow {Integer} Starting row.
	   * @param fromCell {Integer} Starting cell.
	   * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.
	   * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.
	   */
	  function Range(fromRow, fromCell, toRow, toCell) {
	    if (toRow === undefined && toCell === undefined) {
	      toRow = fromRow;
	      toCell = fromCell;
	    }

	    /***
	     * @property fromRow
	     * @type {Integer}
	     */
	    this.fromRow = Math.min(fromRow, toRow);

	    /***
	     * @property fromCell
	     * @type {Integer}
	     */
	    this.fromCell = Math.min(fromCell, toCell);

	    /***
	     * @property toRow
	     * @type {Integer}
	     */
	    this.toRow = Math.max(fromRow, toRow);

	    /***
	     * @property toCell
	     * @type {Integer}
	     */
	    this.toCell = Math.max(fromCell, toCell);

	    /***
	     * Returns whether a range represents a single row.
	     * @method isSingleRow
	     * @return {Boolean}
	     */
	    this.isSingleRow = function () {
	      return this.fromRow == this.toRow;
	    };

	    /***
	     * Returns whether a range represents a single cell.
	     * @method isSingleCell
	     * @return {Boolean}
	     */
	    this.isSingleCell = function () {
	      return this.fromRow == this.toRow && this.fromCell == this.toCell;
	    };

	    /***
	     * Returns whether a range contains a given cell.
	     * @method contains
	     * @param row {Integer}
	     * @param cell {Integer}
	     * @return {Boolean}
	     */
	    this.contains = function (row, cell) {
	      return row >= this.fromRow && row <= this.toRow &&
	          cell >= this.fromCell && cell <= this.toCell;
	    };

	    /***
	     * Returns a readable representation of a range.
	     * @method toString
	     * @return {String}
	     */
	    this.toString = function () {
	      if (this.isSingleCell()) {
	        return "(" + this.fromRow + ":" + this.fromCell + ")";
	      }
	      else {
	        return "(" + this.fromRow + ":" + this.fromCell + " - " + this.toRow + ":" + this.toCell + ")";
	      }
	    }
	  }


	  /***
	   * A base class that all special / non-data rows (like Group and GroupTotals) derive from.
	   * @class NonDataItem
	   * @constructor
	   */
	  function NonDataItem() {
	    this.__nonDataRow = true;
	  }


	  /***
	   * Information about a group of rows.
	   * @class Group
	   * @extends Slick.NonDataItem
	   * @constructor
	   */
	  function Group() {
	    this.__group = true;

	    /**
	     * Grouping level, starting with 0.
	     * @property level
	     * @type {Number}
	     */
	    this.level = 0;

	    /***
	     * Number of rows in the group.
	     * @property count
	     * @type {Integer}
	     */
	    this.count = 0;

	    /***
	     * Grouping value.
	     * @property value
	     * @type {Object}
	     */
	    this.value = null;

	    /***
	     * Formatted display value of the group.
	     * @property title
	     * @type {String}
	     */
	    this.title = null;

	    /***
	     * Whether a group is collapsed.
	     * @property collapsed
	     * @type {Boolean}
	     */
	    this.collapsed = false;

	    /***
	     * GroupTotals, if any.
	     * @property totals
	     * @type {GroupTotals}
	     */
	    this.totals = null;

	    /**
	     * Rows that are part of the group.
	     * @property rows
	     * @type {Array}
	     */
	    this.rows = [];

	    /**
	     * Sub-groups that are part of the group.
	     * @property groups
	     * @type {Array}
	     */
	    this.groups = null;

	    /**
	     * A unique key used to identify the group.  This key can be used in calls to DataView
	     * collapseGroup() or expandGroup().
	     * @property groupingKey
	     * @type {Object}
	     */
	    this.groupingKey = null;
	  }

	  Group.prototype = new NonDataItem();

	  /***
	   * Compares two Group instances.
	   * @method equals
	   * @return {Boolean}
	   * @param group {Group} Group instance to compare to.
	   */
	  Group.prototype.equals = function (group) {
	    return this.value === group.value &&
	        this.count === group.count &&
	        this.collapsed === group.collapsed;
	  };

	  /***
	   * Information about group totals.
	   * An instance of GroupTotals will be created for each totals row and passed to the aggregators
	   * so that they can store arbitrary data in it.  That data can later be accessed by group totals
	   * formatters during the display.
	   * @class GroupTotals
	   * @extends Slick.NonDataItem
	   * @constructor
	   */
	  function GroupTotals() {
	    this.__groupTotals = true;

	    /***
	     * Parent Group.
	     * @param group
	     * @type {Group}
	     */
	    this.group = null;
	  }

	  GroupTotals.prototype = new NonDataItem();

	  /***
	   * A locking helper to track the active edit controller and ensure that only a single controller
	   * can be active at a time.  This prevents a whole class of state and validation synchronization
	   * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress
	   * and attempt a commit or cancel before proceeding.
	   * @class EditorLock
	   * @constructor
	   */
	  function EditorLock() {
	    var activeEditController = null;

	    /***
	     * Returns true if a specified edit controller is active (has the edit lock).
	     * If the parameter is not specified, returns true if any edit controller is active.
	     * @method isActive
	     * @param editController {EditController}
	     * @return {Boolean}
	     */
	    this.isActive = function (editController) {
	      return (editController ? activeEditController === editController : activeEditController !== null);
	    };

	    /***
	     * Sets the specified edit controller as the active edit controller (acquire edit lock).
	     * If another edit controller is already active, and exception will be thrown.
	     * @method activate
	     * @param editController {EditController} edit controller acquiring the lock
	     */
	    this.activate = function (editController) {
	      if (editController === activeEditController) { // already activated?
	        return;
	      }
	      if (activeEditController !== null) {
	        throw "SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController";
	      }
	      if (!editController.commitCurrentEdit) {
	        throw "SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()";
	      }
	      if (!editController.cancelCurrentEdit) {
	        throw "SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()";
	      }
	      activeEditController = editController;
	    };

	    /***
	     * Unsets the specified edit controller as the active edit controller (release edit lock).
	     * If the specified edit controller is not the active one, an exception will be thrown.
	     * @method deactivate
	     * @param editController {EditController} edit controller releasing the lock
	     */
	    this.deactivate = function (editController) {
	      if (activeEditController !== editController) {
	        throw "SlickGrid.EditorLock.deactivate: specified editController is not the currently active one";
	      }
	      activeEditController = null;
	    };

	    /***
	     * Attempts to commit the current edit by calling "commitCurrentEdit" method on the active edit
	     * controller and returns whether the commit attempt was successful (commit may fail due to validation
	     * errors, etc.).  Edit controller's "commitCurrentEdit" must return true if the commit has succeeded
	     * and false otherwise.  If no edit controller is active, returns true.
	     * @method commitCurrentEdit
	     * @return {Boolean}
	     */
	    this.commitCurrentEdit = function () {
	      return (activeEditController ? activeEditController.commitCurrentEdit() : true);
	    };

	    /***
	     * Attempts to cancel the current edit by calling "cancelCurrentEdit" method on the active edit
	     * controller and returns whether the edit was successfully cancelled.  If no edit controller is
	     * active, returns true.
	     * @method cancelCurrentEdit
	     * @return {Boolean}
	     */
	    this.cancelCurrentEdit = function cancelCurrentEdit() {
	      return (activeEditController ? activeEditController.cancelCurrentEdit() : true);
	    };
	  }
	})(jQuery);



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($) {
	  $.extend(true, window, {
	    Slick: {
	      Data: {
	        DataView: DataView,
	        Aggregators: {
	          Avg: AvgAggregator,
	          Min: MinAggregator,
	          Max: MaxAggregator,
	          Sum: SumAggregator
	        }
	      }
	    }
	  });


	  /***
	   * A sample Model implementation.
	   * Provides a filtered view of the underlying data.
	   *
	   * Relies on the data item having an "id" property uniquely identifying it.
	   */
	  function DataView(options) {
	    var self = this;

	    var defaults = {
	      groupItemMetadataProvider: null,
	      inlineFilters: false
	    };


	    // private
	    var idProperty = "id";  // property holding a unique row id
	    var items = [];         // data by index
	    var rows = [];          // data by row
	    var idxById = {};       // indexes by id
	    var rowsById = null;    // rows by id; lazy-calculated
	    var filter = null;      // filter function
	    var updated = null;     // updated item ids
	    var suspend = false;    // suspends the recalculation
	    var sortAsc = true;
	    var fastSortField;
	    var sortComparer;
	    var refreshHints = {};
	    var prevRefreshHints = {};
	    var filterArgs;
	    var filteredItems = [];
	    var compiledFilter;
	    var compiledFilterWithCaching;
	    var filterCache = [];

	    // grouping
	    var groupingInfoDefaults = {
	      getter: null,
	      formatter: null,
	      comparer: function(a, b) { return a.value - b.value; },
	      predefinedValues: [],
	      aggregators: [],
	      aggregateEmpty: false,
	      aggregateCollapsed: false,
	      aggregateChildGroups: false,
	      collapsed: false,
	      displayTotalsRow: true
	    };
	    var groupingInfos = [];
	    var groups = [];
	    var toggledGroupsByLevel = [];
	    var groupingDelimiter = ':|:';

	    var pagesize = 0;
	    var pagenum = 0;
	    var totalRows = 0;

	    // events
	    var onRowCountChanged = new Slick.Event();
	    var onRowsChanged = new Slick.Event();
	    var onPagingInfoChanged = new Slick.Event();

	    options = $.extend(true, {}, defaults, options);


	    function beginUpdate() {
	      suspend = true;
	    }

	    function endUpdate() {
	      suspend = false;
	      refresh();
	    }

	    function setRefreshHints(hints) {
	      refreshHints = hints;
	    }

	    function setFilterArgs(args) {
	      filterArgs = args;
	    }

	    function updateIdxById(startingIndex) {
	      startingIndex = startingIndex || 0;
	      var id;
	      for (var i = startingIndex, l = items.length; i < l; i++) {
	        id = items[i][idProperty];
	        if (id === undefined) {
	          throw "Each data element must implement a unique 'id' property";
	        }
	        idxById[id] = i;
	      }
	    }

	    function ensureIdUniqueness() {
	      var id;
	      for (var i = 0, l = items.length; i < l; i++) {
	        id = items[i][idProperty];
	        if (id === undefined || idxById[id] !== i) {
	          throw "Each data element must implement a unique 'id' property";
	        }
	      }
	    }

	    function getItems() {
	      return items;
	    }

	    function setItems(data, objectIdProperty) {
	      if (objectIdProperty !== undefined) {
	        idProperty = objectIdProperty;
	      }
	      items = filteredItems = data;
	      idxById = {};
	      updateIdxById();
	      ensureIdUniqueness();
	      refresh();
	    }

	    function setPagingOptions(args) {
	      if (args.pageSize != undefined) {
	        pagesize = args.pageSize;
	        pagenum = pagesize ? Math.min(pagenum, Math.max(0, Math.ceil(totalRows / pagesize) - 1)) : 0;
	      }

	      if (args.pageNum != undefined) {
	        pagenum = Math.min(args.pageNum, Math.max(0, Math.ceil(totalRows / pagesize) - 1));
	      }

	      onPagingInfoChanged.notify(getPagingInfo(), null, self);

	      refresh();
	    }

	    function getPagingInfo() {
	      var totalPages = pagesize ? Math.max(1, Math.ceil(totalRows / pagesize)) : 1;
	      return {pageSize: pagesize, pageNum: pagenum, totalRows: totalRows, totalPages: totalPages};
	    }

	    function sort(comparer, ascending) {
	      sortAsc = ascending;
	      sortComparer = comparer;
	      fastSortField = null;
	      if (ascending === false) {
	        items.reverse();
	      }
	      items.sort(comparer);
	      if (ascending === false) {
	        items.reverse();
	      }
	      idxById = {};
	      updateIdxById();
	      refresh();
	    }

	    /***
	     * Provides a workaround for the extremely slow sorting in IE.
	     * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString
	     * to return the value of that field and then doing a native Array.sort().
	     */
	    function fastSort(field, ascending) {
	      sortAsc = ascending;
	      fastSortField = field;
	      sortComparer = null;
	      var oldToString = Object.prototype.toString;
	      Object.prototype.toString = (typeof field == "function") ? field : function () {
	        return this[field]
	      };
	      // an extra reversal for descending sort keeps the sort stable
	      // (assuming a stable native sort implementation, which isn't true in some cases)
	      if (ascending === false) {
	        items.reverse();
	      }
	      items.sort();
	      Object.prototype.toString = oldToString;
	      if (ascending === false) {
	        items.reverse();
	      }
	      idxById = {};
	      updateIdxById();
	      refresh();
	    }

	    function reSort() {
	      if (sortComparer) {
	        sort(sortComparer, sortAsc);
	      } else if (fastSortField) {
	        fastSort(fastSortField, sortAsc);
	      }
	    }

	    function setFilter(filterFn) {
	      filter = filterFn;
	      if (options.inlineFilters) {
	        compiledFilter = compileFilter();
	        compiledFilterWithCaching = compileFilterWithCaching();
	      }
	      refresh();
	    }

	    function getGrouping() {
	      return groupingInfos;
	    }

	    function setGrouping(groupingInfo) {
	      if (!options.groupItemMetadataProvider) {
	        options.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();
	      }

	      groups = [];
	      toggledGroupsByLevel = [];
	      groupingInfo = groupingInfo || [];
	      groupingInfos = (groupingInfo instanceof Array) ? groupingInfo : [groupingInfo];

	      for (var i = 0; i < groupingInfos.length; i++) {
	        var gi = groupingInfos[i] = $.extend(true, {}, groupingInfoDefaults, groupingInfos[i]);
	        gi.getterIsAFn = typeof gi.getter === "function";

	        // pre-compile accumulator loops
	        gi.compiledAccumulators = [];
	        var idx = gi.aggregators.length;
	        while (idx--) {
	          gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);
	        }

	        toggledGroupsByLevel[i] = {};
	      }

	      refresh();
	    }

	    /**
	     * @deprecated Please use {@link setGrouping}.
	     */
	    function groupBy(valueGetter, valueFormatter, sortComparer) {
	      if (valueGetter == null) {
	        setGrouping([]);
	        return;
	      }

	      setGrouping({
	        getter: valueGetter,
	        formatter: valueFormatter,
	        comparer: sortComparer
	      });
	    }

	    /**
	     * @deprecated Please use {@link setGrouping}.
	     */
	    function setAggregators(groupAggregators, includeCollapsed) {
	      if (!groupingInfos.length) {
	        throw new Error("At least one grouping must be specified before calling setAggregators().");
	      }

	      groupingInfos[0].aggregators = groupAggregators;
	      groupingInfos[0].aggregateCollapsed = includeCollapsed;

	      setGrouping(groupingInfos);
	    }

	    function getItemByIdx(i) {
	      return items[i];
	    }

	    function getIdxById(id) {
	      return idxById[id];
	    }

	    function ensureRowsByIdCache() {
	      if (!rowsById) {
	        rowsById = {};
	        for (var i = 0, l = rows.length; i < l; i++) {
	          rowsById[rows[i][idProperty]] = i;
	        }
	      }
	    }

	    function getRowById(id) {
	      ensureRowsByIdCache();
	      return rowsById[id];
	    }

	    function getItemById(id) {
	      return items[idxById[id]];
	    }

	    function mapIdsToRows(idArray) {
	      var rows = [];
	      ensureRowsByIdCache();
	      for (var i = 0; i < idArray.length; i++) {
	        var row = rowsById[idArray[i]];
	        if (row != null) {
	          rows[rows.length] = row;
	        }
	      }
	      return rows;
	    }

	    function mapRowsToIds(rowArray) {
	      var ids = [];
	      for (var i = 0; i < rowArray.length; i++) {
	        if (rowArray[i] < rows.length) {
	          ids[ids.length] = rows[rowArray[i]][idProperty];
	        }
	      }
	      return ids;
	    }

	    function updateItem(id, item) {
	      if (idxById[id] === undefined || id !== item[idProperty]) {
	        throw "Invalid or non-matching id";
	      }
	      items[idxById[id]] = item;
	      if (!updated) {
	        updated = {};
	      }
	      updated[id] = true;
	      refresh();
	    }

	    function insertItem(insertBefore, item) {
	      items.splice(insertBefore, 0, item);
	      updateIdxById(insertBefore);
	      refresh();
	    }

	    function addItem(item) {
	      items.push(item);
	      updateIdxById(items.length - 1);
	      refresh();
	    }

	    function deleteItem(id) {
	      var idx = idxById[id];
	      if (idx === undefined) {
	        throw "Invalid id";
	      }
	      delete idxById[id];
	      items.splice(idx, 1);
	      updateIdxById(idx);
	      refresh();
	    }

	    function getLength() {
	      return rows.length;
	    }

	    function getItem(i) {
	      return rows[i];
	    }

	    function getItemMetadata(i) {
	      var item = rows[i];
	      if (item === undefined) {
	        return null;
	      }

	      // overrides for grouping rows
	      if (item.__group) {
	        return options.groupItemMetadataProvider.getGroupRowMetadata(item);
	      }

	      // overrides for totals rows
	      if (item.__groupTotals) {
	        return options.groupItemMetadataProvider.getTotalsRowMetadata(item);
	      }

	      return null;
	    }

	    function expandCollapseAllGroups(level, collapse) {
	      if (level == null) {
	        for (var i = 0; i < groupingInfos.length; i++) {
	          toggledGroupsByLevel[i] = {};
	          groupingInfos[i].collapsed = collapse;
	        }
	      } else {
	        toggledGroupsByLevel[level] = {};
	        groupingInfos[level].collapsed = collapse;
	      }
	      refresh();
	    }

	    /**
	     * @param level {Number} Optional level to collapse.  If not specified, applies to all levels.
	     */
	    function collapseAllGroups(level) {
	      expandCollapseAllGroups(level, true);
	    }

	    /**
	     * @param level {Number} Optional level to expand.  If not specified, applies to all levels.
	     */
	    function expandAllGroups(level) {
	      expandCollapseAllGroups(level, false);
	    }

	    function expandCollapseGroup(level, groupingKey, collapse) {
	      toggledGroupsByLevel[level][groupingKey] = groupingInfos[level].collapsed ^ collapse;
	      refresh();
	    }

	    /**
	     * @param varArgs Either a Slick.Group's "groupingKey" property, or a
	     *     variable argument list of grouping values denoting a unique path to the row.  For
	     *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of
	     *     the 'high' setGrouping.
	     */
	    function collapseGroup(varArgs) {
	      var args = Array.prototype.slice.call(arguments);
	      var arg0 = args[0];
	      if (args.length == 1 && arg0.indexOf(groupingDelimiter) != -1) {
	        expandCollapseGroup(arg0.split(groupingDelimiter).length - 1, arg0, true);
	      } else {
	        expandCollapseGroup(args.length - 1, args.join(groupingDelimiter), true);
	      }
	    }

	    /**
	     * @param varArgs Either a Slick.Group's "groupingKey" property, or a
	     *     variable argument list of grouping values denoting a unique path to the row.  For
	     *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of
	     *     the 'high' setGrouping.
	     */
	    function expandGroup(varArgs) {
	      var args = Array.prototype.slice.call(arguments);
	      var arg0 = args[0];
	      if (args.length == 1 && arg0.indexOf(groupingDelimiter) != -1) {
	        expandCollapseGroup(arg0.split(groupingDelimiter).length - 1, arg0, false);
	      } else {
	        expandCollapseGroup(args.length - 1, args.join(groupingDelimiter), false);
	      }
	    }

	    function getGroups() {
	      return groups;
	    }

	    function extractGroups(rows, parentGroup) {
	      var group;
	      var val;
	      var groups = [];
	      var groupsByVal = [];
	      var r;
	      var level = parentGroup ? parentGroup.level + 1 : 0;
	      var gi = groupingInfos[level];

	      for (var i = 0, l = gi.predefinedValues.length; i < l; i++) {
	        val = gi.predefinedValues[i];
	        group = groupsByVal[val];
	        if (!group) {
	          group = new Slick.Group();
	          group.value = val;
	          group.level = level;
	          group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;
	          groups[groups.length] = group;
	          groupsByVal[val] = group;
	        }
	      }

	      for (var i = 0, l = rows.length; i < l; i++) {
	        r = rows[i];
	        val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];
	        group = groupsByVal[val];
	        if (!group) {
	          group = new Slick.Group();
	          group.value = val;
	          group.level = level;
	          group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;
	          groups[groups.length] = group;
	          groupsByVal[val] = group;
	        }

	        group.rows[group.count++] = r;
	      }

	      if (level < groupingInfos.length - 1) {
	        for (var i = 0; i < groups.length; i++) {
	          group = groups[i];
	          group.groups = extractGroups(group.rows, group);
	        }
	      }      

	      groups.sort(groupingInfos[level].comparer);

	      return groups;
	    }

	    // TODO:  lazy totals calculation
	    function calculateGroupTotals(group) {
	      // TODO:  try moving iterating over groups into compiled accumulator
	      var gi = groupingInfos[group.level];
	      var isLeafLevel = (group.level == groupingInfos.length);
	      var totals = new Slick.GroupTotals();
	      var agg, idx = gi.aggregators.length;
	      while (idx--) {
	        agg = gi.aggregators[idx];
	        agg.init();
	        gi.compiledAccumulators[idx].call(agg,
	            (!isLeafLevel && gi.aggregateChildGroups) ? group.groups : group.rows);
	        agg.storeResult(totals);
	      }
	      totals.group = group;
	      group.totals = totals;
	    }

	    function calculateTotals(groups, level) {
	      level = level || 0;
	      var gi = groupingInfos[level];
	      var idx = groups.length, g;
	      while (idx--) {
	        g = groups[idx];

	        if (g.collapsed && !gi.aggregateCollapsed) {
	          continue;
	        }

	        // Do a depth-first aggregation so that parent setGrouping aggregators can access subgroup totals.
	        if (g.groups) {
	          calculateTotals(g.groups, level + 1);
	        }

	        if (gi.aggregators.length && (
	            gi.aggregateEmpty || g.rows.length || (g.groups && g.groups.length))) {
	          calculateGroupTotals(g);
	        }
	      }
	    }

	    function finalizeGroups(groups, level) {
	      level = level || 0;
	      var gi = groupingInfos[level];
	      var groupCollapsed = gi.collapsed;
	      var toggledGroups = toggledGroupsByLevel[level];
	      var idx = groups.length, g;
	      while (idx--) {
	        g = groups[idx];
	        g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];
	        g.title = gi.formatter ? gi.formatter(g) : g.value;

	        if (g.groups) {
	          finalizeGroups(g.groups, level + 1);
	          // Let the non-leaf setGrouping rows get garbage-collected.
	          // They may have been used by aggregates that go over all of the descendants,
	          // but at this point they are no longer needed.
	          g.rows = [];
	        }
	      }
	    }

	    function flattenGroupedRows(groups, level) {
	      level = level || 0;
	      var gi = groupingInfos[level];
	      var groupedRows = [], rows, gl = 0, g;
	      for (var i = 0, l = groups.length; i < l; i++) {
	        g = groups[i];
	        groupedRows[gl++] = g;

	        if (!g.collapsed) {
	          rows = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;
	          for (var j = 0, jj = rows.length; j < jj; j++) {
	            groupedRows[gl++] = rows[j];
	          }
	        }

	        if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {
	          groupedRows[gl++] = g.totals;
	        }
	      }
	      return groupedRows;
	    }

	    function getFunctionInfo(fn) {
	      var fnRegex = /^function[^(]*\(([^)]*)\)\s*{([\s\S]*)}$/;
	      var matches = fn.toString().match(fnRegex);
	      return {
	        params: matches[1].split(","),
	        body: matches[2]
	      };
	    }

	    function compileAccumulatorLoop(aggregator) {
	      var accumulatorInfo = getFunctionInfo(aggregator.accumulate);
	      var fn = new Function(
	          "_items",
	          "for (var " + accumulatorInfo.params[0] + ", _i=0, _il=_items.length; _i<_il; _i++) {" +
	              accumulatorInfo.params[0] + " = _items[_i]; " +
	              accumulatorInfo.body +
	          "}"
	      );
	      fn.displayName = fn.name = "compiledAccumulatorLoop";
	      return fn;
	    }

	    function compileFilter() {
	      var filterInfo = getFunctionInfo(filter);

	      var filterBody = filterInfo.body
	          .replace(/return false\s*([;}]|$)/gi, "{ continue _coreloop; }$1")
	          .replace(/return true\s*([;}]|$)/gi, "{ _retval[_idx++] = $item$; continue _coreloop; }$1")
	          .replace(/return ([^;}]+?)\s*([;}]|$)/gi,
	          "{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2");

	      // This preserves the function template code after JS compression,
	      // so that replace() commands still work as expected.
	      var tpl = [
	        //"function(_items, _args) { ",
	        "var _retval = [], _idx = 0; ",
	        "var $item$, $args$ = _args; ",
	        "_coreloop: ",
	        "for (var _i = 0, _il = _items.length; _i < _il; _i++) { ",
	        "$item$ = _items[_i]; ",
	        "$filter$; ",
	        "} ",
	        "return _retval; "
	        //"}"
	      ].join("");
	      tpl = tpl.replace(/\$filter\$/gi, filterBody);
	      tpl = tpl.replace(/\$item\$/gi, filterInfo.params[0]);
	      tpl = tpl.replace(/\$args\$/gi, filterInfo.params[1]);

	      var fn = new Function("_items,_args", tpl);
	      fn.displayName = fn.name = "compiledFilter";
	      return fn;
	    }

	    function compileFilterWithCaching() {
	      var filterInfo = getFunctionInfo(filter);

	      var filterBody = filterInfo.body
	          .replace(/return false\s*([;}]|$)/gi, "{ continue _coreloop; }$1")
	          .replace(/return true\s*([;}]|$)/gi, "{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1")
	          .replace(/return ([^;}]+?)\s*([;}]|$)/gi,
	          "{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2");

	      // This preserves the function template code after JS compression,
	      // so that replace() commands still work as expected.
	      var tpl = [
	        //"function(_items, _args, _cache) { ",
	        "var _retval = [], _idx = 0; ",
	        "var $item$, $args$ = _args; ",
	        "_coreloop: ",
	        "for (var _i = 0, _il = _items.length; _i < _il; _i++) { ",
	        "$item$ = _items[_i]; ",
	        "if (_cache[_i]) { ",
	        "_retval[_idx++] = $item$; ",
	        "continue _coreloop; ",
	        "} ",
	        "$filter$; ",
	        "} ",
	        "return _retval; "
	        //"}"
	      ].join("");
	      tpl = tpl.replace(/\$filter\$/gi, filterBody);
	      tpl = tpl.replace(/\$item\$/gi, filterInfo.params[0]);
	      tpl = tpl.replace(/\$args\$/gi, filterInfo.params[1]);

	      var fn = new Function("_items,_args,_cache", tpl);
	      fn.displayName = fn.name = "compiledFilterWithCaching";
	      return fn;
	    }

	    function uncompiledFilter(items, args) {
	      var retval = [], idx = 0;

	      for (var i = 0, ii = items.length; i < ii; i++) {
	        if (filter(items[i], args)) {
	          retval[idx++] = items[i];
	        }
	      }

	      return retval;
	    }

	    function uncompiledFilterWithCaching(items, args, cache) {
	      var retval = [], idx = 0, item;

	      for (var i = 0, ii = items.length; i < ii; i++) {
	        item = items[i];
	        if (cache[i]) {
	          retval[idx++] = item;
	        } else if (filter(item, args)) {
	          retval[idx++] = item;
	          cache[i] = true;
	        }
	      }

	      return retval;
	    }

	    function getFilteredAndPagedItems(items) {
	      if (filter) {
	        var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;
	        var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;

	        if (refreshHints.isFilterNarrowing) {
	          filteredItems = batchFilter(filteredItems, filterArgs);
	        } else if (refreshHints.isFilterExpanding) {
	          filteredItems = batchFilterWithCaching(items, filterArgs, filterCache);
	        } else if (!refreshHints.isFilterUnchanged) {
	          filteredItems = batchFilter(items, filterArgs);
	        }
	      } else {
	        // special case:  if not filtering and not paging, the resulting
	        // rows collection needs to be a copy so that changes due to sort
	        // can be caught
	        filteredItems = pagesize ? items : items.concat();
	      }

	      // get the current page
	      var paged;
	      if (pagesize) {
	        if (filteredItems.length < pagenum * pagesize) {
	          pagenum = Math.floor(filteredItems.length / pagesize);
	        }
	        paged = filteredItems.slice(pagesize * pagenum, pagesize * pagenum + pagesize);
	      } else {
	        paged = filteredItems;
	      }

	      return {totalRows: filteredItems.length, rows: paged};
	    }

	    function getRowDiffs(rows, newRows) {
	      var item, r, eitherIsNonData, diff = [];
	      var from = 0, to = newRows.length;

	      if (refreshHints && refreshHints.ignoreDiffsBefore) {
	        from = Math.max(0,
	            Math.min(newRows.length, refreshHints.ignoreDiffsBefore));
	      }

	      if (refreshHints && refreshHints.ignoreDiffsAfter) {
	        to = Math.min(newRows.length,
	            Math.max(0, refreshHints.ignoreDiffsAfter));
	      }

	      for (var i = from, rl = rows.length; i < to; i++) {
	        if (i >= rl) {
	          diff[diff.length] = i;
	        } else {
	          item = newRows[i];
	          r = rows[i];

	          if ((groupingInfos.length && (eitherIsNonData = (item.__nonDataRow) || (r.__nonDataRow)) &&
	              item.__group !== r.__group ||
	              item.__group && !item.equals(r))
	              || (eitherIsNonData &&
	              // no good way to compare totals since they are arbitrary DTOs
	              // deep object comparison is pretty expensive
	              // always considering them 'dirty' seems easier for the time being
	              (item.__groupTotals || r.__groupTotals))
	              || item[idProperty] != r[idProperty]
	              || (updated && updated[item[idProperty]])
	              ) {
	            diff[diff.length] = i;
	          }
	        }
	      }
	      return diff;
	    }

	    function recalc(_items) {
	      rowsById = null;

	      if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing ||
	          refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {
	        filterCache = [];
	      }

	      var filteredItems = getFilteredAndPagedItems(_items);
	      totalRows = filteredItems.totalRows;
	      var newRows = filteredItems.rows;

	      groups = [];
	      if (groupingInfos.length) {
	        groups = extractGroups(newRows);
	        if (groups.length) {
	          calculateTotals(groups);
	          finalizeGroups(groups);
	          newRows = flattenGroupedRows(groups);
	        }
	      }

	      var diff = getRowDiffs(rows, newRows);

	      rows = newRows;

	      return diff;
	    }

	    function refresh() {
	      if (suspend) {
	        return;
	      }

	      var countBefore = rows.length;
	      var totalRowsBefore = totalRows;

	      var diff = recalc(items, filter); // pass as direct refs to avoid closure perf hit

	      // if the current page is no longer valid, go to last page and recalc
	      // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized
	      if (pagesize && totalRows < pagenum * pagesize) {
	        pagenum = Math.max(0, Math.ceil(totalRows / pagesize) - 1);
	        diff = recalc(items, filter);
	      }

	      updated = null;
	      prevRefreshHints = refreshHints;
	      refreshHints = {};

	      if (totalRowsBefore != totalRows) {
	        onPagingInfoChanged.notify(getPagingInfo(), null, self);
	      }
	      if (countBefore != rows.length) {
	        onRowCountChanged.notify({previous: countBefore, current: rows.length}, null, self);
	      }
	      if (diff.length > 0) {
	        onRowsChanged.notify({rows: diff}, null, self);
	      }
	    }

	    function syncGridSelection(grid, preserveHidden) {
	      var self = this;
	      var selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());;
	      var inHandler;

	      function update() {
	        if (selectedRowIds.length > 0) {
	          inHandler = true;
	          var selectedRows = self.mapIdsToRows(selectedRowIds);
	          if (!preserveHidden) {
	            selectedRowIds = self.mapRowsToIds(selectedRows);
	          }
	          grid.setSelectedRows(selectedRows);
	          inHandler = false;
	        }
	      }

	      grid.onSelectedRowsChanged.subscribe(function(e, args) {
	        if (inHandler) { return; }
	        selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());
	      });

	      this.onRowsChanged.subscribe(update);

	      this.onRowCountChanged.subscribe(update);
	    }

	    function syncGridCellCssStyles(grid, key) {
	      var hashById;
	      var inHandler;

	      // since this method can be called after the cell styles have been set,
	      // get the existing ones right away
	      storeCellCssStyles(grid.getCellCssStyles(key));

	      function storeCellCssStyles(hash) {
	        hashById = {};
	        for (var row in hash) {
	          var id = rows[row][idProperty];
	          hashById[id] = hash[row];
	        }
	      }

	      function update() {
	        if (hashById) {
	          inHandler = true;
	          ensureRowsByIdCache();
	          var newHash = {};
	          for (var id in hashById) {
	            var row = rowsById[id];
	            if (row != undefined) {
	              newHash[row] = hashById[id];
	            }
	          }
	          grid.setCellCssStyles(key, newHash);
	          inHandler = false;
	        }
	      }

	      grid.onCellCssStylesChanged.subscribe(function(e, args) {
	        if (inHandler) { return; }
	        if (key != args.key) { return; }
	        if (args.hash) {
	          storeCellCssStyles(args.hash);
	        }
	      });

	      this.onRowsChanged.subscribe(update);

	      this.onRowCountChanged.subscribe(update);
	    }

	    $.extend(this, {
	      // methods
	      "beginUpdate": beginUpdate,
	      "endUpdate": endUpdate,
	      "setPagingOptions": setPagingOptions,
	      "getPagingInfo": getPagingInfo,
	      "getItems": getItems,
	      "setItems": setItems,
	      "setFilter": setFilter,
	      "sort": sort,
	      "fastSort": fastSort,
	      "reSort": reSort,
	      "setGrouping": setGrouping,
	      "getGrouping": getGrouping,
	      "groupBy": groupBy,
	      "setAggregators": setAggregators,
	      "collapseAllGroups": collapseAllGroups,
	      "expandAllGroups": expandAllGroups,
	      "collapseGroup": collapseGroup,
	      "expandGroup": expandGroup,
	      "getGroups": getGroups,
	      "getIdxById": getIdxById,
	      "getRowById": getRowById,
	      "getItemById": getItemById,
	      "getItemByIdx": getItemByIdx,
	      "mapRowsToIds": mapRowsToIds,
	      "mapIdsToRows": mapIdsToRows,
	      "setRefreshHints": setRefreshHints,
	      "setFilterArgs": setFilterArgs,
	      "refresh": refresh,
	      "updateItem": updateItem,
	      "insertItem": insertItem,
	      "addItem": addItem,
	      "deleteItem": deleteItem,
	      "syncGridSelection": syncGridSelection,
	      "syncGridCellCssStyles": syncGridCellCssStyles,

	      // data provider methods
	      "getLength": getLength,
	      "getItem": getItem,
	      "getItemMetadata": getItemMetadata,

	      // events
	      "onRowCountChanged": onRowCountChanged,
	      "onRowsChanged": onRowsChanged,
	      "onPagingInfoChanged": onPagingInfoChanged
	    });
	  }

	  function AvgAggregator(field) {
	    this.field_ = field;

	    this.init = function () {
	      this.count_ = 0;
	      this.nonNullCount_ = 0;
	      this.sum_ = 0;
	    };

	    this.accumulate = function (item) {
	      var val = item[this.field_];
	      this.count_++;
	      if (val != null && val !== "" && val !== NaN) {
	        this.nonNullCount_++;
	        this.sum_ += parseFloat(val);
	      }
	    };

	    this.storeResult = function (groupTotals) {
	      if (!groupTotals.avg) {
	        groupTotals.avg = {};
	      }
	      if (this.nonNullCount_ != 0) {
	        groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;
	      }
	    };
	  }

	  function MinAggregator(field) {
	    this.field_ = field;

	    this.init = function () {
	      this.min_ = null;
	    };

	    this.accumulate = function (item) {
	      var val = item[this.field_];
	      if (val != null && val !== "" && val !== NaN) {
	        if (this.min_ == null || val < this.min_) {
	          this.min_ = val;
	        }
	      }
	    };

	    this.storeResult = function (groupTotals) {
	      if (!groupTotals.min) {
	        groupTotals.min = {};
	      }
	      groupTotals.min[this.field_] = this.min_;
	    }
	  }

	  function MaxAggregator(field) {
	    this.field_ = field;

	    this.init = function () {
	      this.max_ = null;
	    };

	    this.accumulate = function (item) {
	      var val = item[this.field_];
	      if (val != null && val !== "" && val !== NaN) {
	        if (this.max_ == null || val > this.max_) {
	          this.max_ = val;
	        }
	      }
	    };

	    this.storeResult = function (groupTotals) {
	      if (!groupTotals.max) {
	        groupTotals.max = {};
	      }
	      groupTotals.max[this.field_] = this.max_;
	    }
	  }

	  function SumAggregator(field) {
	    this.field_ = field;

	    this.init = function () {
	      this.sum_ = null;
	    };

	    this.accumulate = function (item) {
	      var val = item[this.field_];
	      if (val != null && val !== "" && val !== NaN) {
	        this.sum_ += parseFloat(val);
	      }
	    };

	    this.storeResult = function (groupTotals) {
	      if (!groupTotals.sum) {
	        groupTotals.sum = {};
	      }
	      groupTotals.sum[this.field_] = this.sum_;
	    }
	  }

	  // TODO:  add more built-in aggregators
	  // TODO:  merge common aggregators in one to prevent needles iterating

	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/**
	 * @license
	 * (c) 2009-2012 Michael Leibman
	 * michael{dot}leibman{at}gmail{dot}com
	 * http://github.com/mleibman/slickgrid
	 *
	 * Distributed under MIT license.
	 * All rights reserved.
	 *
	 * SlickGrid v2.1
	 *
	 * NOTES:
	 *     Cell/row DOM manipulations are done directly bypassing jQuery's DOM manipulation methods.
	 *     This increases the speed dramatically, but can only be done safely because there are no event handlers
	 *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()
	 *     and do proper cleanup.
	 */

	// make sure required JavaScript modules are loaded
	if (typeof jQuery === "undefined") {
	  throw "SlickGrid requires jquery module to be loaded";
	}
	if (!jQuery.fn.drag) {
	  throw "SlickGrid requires jquery.event.drag module to be loaded";
	}
	if (typeof Slick === "undefined") {
	  throw "slick.core.js not loaded";
	}


	(function ($) {
	  // Slick.Grid
	  $.extend(true, window, {
	    Slick: {
	      Grid: SlickGrid
	    }
	  });

	  // shared across all grids on the page
	  var scrollbarDimensions;
	  var maxSupportedCssHeight;  // browser's breaking point

	  //////////////////////////////////////////////////////////////////////////////////////////////
	  // SlickGrid class implementation (available as Slick.Grid)

	  /**
	   * Creates a new instance of the grid.
	   * @class SlickGrid
	   * @constructor
	   * @param {Node}              container   Container node to create the grid in.
	   * @param {Array,Object}      data        An array of objects for databinding.
	   * @param {Array}             columns     An array of column definitions.
	   * @param {Object}            options     Grid options.
	   **/
	  function SlickGrid(container, data, columns, options) {
	    // settings
	    var defaults = {
	      explicitInitialization: false,
	      rowHeight: 25,
	      defaultColumnWidth: 80,
	      enableAddRow: false,
	      leaveSpaceForNewRows: false,
	      editable: false,
	      autoEdit: true,
	      enableCellNavigation: true,
	      enableColumnReorder: true,
	      asyncEditorLoading: false,
	      asyncEditorLoadDelay: 100,
	      forceFitColumns: false,
	      enableAsyncPostRender: false,
	      asyncPostRenderDelay: 50,
	      autoHeight: false,
	      editorLock: Slick.GlobalEditorLock,
	      showHeaderRow: false,
	      headerRowHeight: 25,
	      showTopPanel: false,
	      topPanelHeight: 25,
	      formatterFactory: null,
	      editorFactory: null,
	      cellFlashingCssClass: "flashing",
	      selectedCellCssClass: "selected",
	      multiSelect: true,
	      enableTextSelectionOnCells: false,
	      dataItemColumnValueExtractor: null,
	      fullWidthRows: false,
	      multiColumnSort: false,
	      defaultFormatter: defaultFormatter,
	      forceSyncScrolling: false
	    };

	    var columnDefaults = {
	      name: "",
	      resizable: true,
	      sortable: false,
	      minWidth: 30,
	      rerenderOnResize: false,
	      headerCssClass: null,
	      defaultSortAsc: true,
	      focusable: true,
	      selectable: true
	    };

	    // scroller
	    var th;   // virtual height
	    var h;    // real scrollable height
	    var ph;   // page height
	    var n;    // number of pages
	    var cj;   // "jumpiness" coefficient

	    var page = 0;       // current page
	    var offset = 0;     // current page offset
	    var vScrollDir = 1;

	    // private
	    var initialized = false;
	    var $container;
	    var uid = "slickgrid_" + Math.round(1000000 * Math.random());
	    var self = this;
	    var $focusSink, $focusSink2;
	    var $headerScroller;
	    var $headers;
	    var $headerRow, $headerRowScroller, $headerRowSpacer;
	    var $topPanelScroller;
	    var $topPanel;
	    var $viewport;
	    var $canvas;
	    var $style;
	    var $boundAncestors;
	    var stylesheet, columnCssRulesL, columnCssRulesR;
	    var viewportH, viewportW;
	    var canvasWidth;
	    var viewportHasHScroll, viewportHasVScroll;
	    var headerColumnWidthDiff = 0, headerColumnHeightDiff = 0, // border+padding
	        cellWidthDiff = 0, cellHeightDiff = 0;
	    var absoluteColumnMinWidth;
	    var numberOfRows = 0;

	    var tabbingDirection = 1;
	    var activePosX;
	    var activeRow, activeCell;
	    var activeCellNode = null;
	    var currentEditor = null;
	    var serializedEditorValue;
	    var editController;

	    var rowsCache = {};
	    var renderedRows = 0;
	    var numVisibleRows;
	    var prevScrollTop = 0;
	    var scrollTop = 0;
	    var lastRenderedScrollTop = 0;
	    var lastRenderedScrollLeft = 0;
	    var prevScrollLeft = 0;
	    var scrollLeft = 0;

	    var selectionModel;
	    var selectedRows = [];

	    var plugins = [];
	    var cellCssClasses = {};

	    var columnsById = {};
	    var sortColumns = [];
	    var columnPosLeft = [];
	    var columnPosRight = [];


	    // async call handles
	    var h_editorLoader = null;
	    var h_render = null;
	    var h_postrender = null;
	    var postProcessedRows = {};
	    var postProcessToRow = null;
	    var postProcessFromRow = null;

	    // perf counters
	    var counter_rows_rendered = 0;
	    var counter_rows_removed = 0;


	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // Initialization

	    function init() {
	      $container = $(container);
	      if ($container.length < 1) {
	        throw new Error("SlickGrid requires a valid container, " + container + " does not exist in the DOM.");
	      }

	      // calculate these only once and share between grid instances
	      maxSupportedCssHeight = maxSupportedCssHeight || getMaxSupportedCssHeight();
	      scrollbarDimensions = scrollbarDimensions || measureScrollbar();

	      options = $.extend({}, defaults, options);
	      validateAndEnforceOptions();
	      columnDefaults.width = options.defaultColumnWidth;

	      columnsById = {};
	      for (var i = 0; i < columns.length; i++) {
	        var m = columns[i] = $.extend({}, columnDefaults, columns[i]);
	        columnsById[m.id] = i;
	        if (m.minWidth && m.width < m.minWidth) {
	          m.width = m.minWidth;
	        }
	        if (m.maxWidth && m.width > m.maxWidth) {
	          m.width = m.maxWidth;
	        }
	      }

	      // validate loaded JavaScript modules against requested options
	      if (options.enableColumnReorder && !$.fn.sortable) {
	        throw new Error("SlickGrid's 'enableColumnReorder = true' option requires jquery-ui.sortable module to be loaded");
	      }

	      editController = {
	        "commitCurrentEdit": commitCurrentEdit,
	        "cancelCurrentEdit": cancelCurrentEdit
	      };

	      $container
	          .empty()
	          .css("overflow", "hidden")
	          .css("outline", 0)
	          .addClass(uid)
	          .addClass("ui-widget");

	      // set up a positioning container if needed
	      if (!/relative|absolute|fixed/.test($container.css("position"))) {
	        $container.css("position", "relative");
	      }

	      $focusSink = $("<div tabIndex='0' hideFocus style='position:fixed;width:0;height:0;top:0;left:0;outline:0;'></div>").appendTo($container);

	      $headerScroller = $("<div class='slick-header ui-state-default' style='overflow:hidden;position:relative;' />").appendTo($container);
	      $headers = $("<div class='slick-header-columns' style='left:-1000px' />").appendTo($headerScroller);
	      $headers.width(getHeadersWidth());

	      $headerRowScroller = $("<div class='slick-headerrow ui-state-default' style='overflow:hidden;position:relative;' />").appendTo($container);
	      $headerRow = $("<div class='slick-headerrow-columns' />").appendTo($headerRowScroller);
	      $headerRowSpacer = $("<div style='display:block;height:1px;position:absolute;top:0;left:0;'></div>")
	          .css("width", getCanvasWidth() + scrollbarDimensions.width + "px")
	          .appendTo($headerRowScroller);

	      $topPanelScroller = $("<div class='slick-top-panel-scroller ui-state-default' style='overflow:hidden;position:relative;' />").appendTo($container);
	      $topPanel = $("<div class='slick-top-panel' style='width:10000px' />").appendTo($topPanelScroller);

	      if (!options.showTopPanel) {
	        $topPanelScroller.hide();
	      }

	      if (!options.showHeaderRow) {
	        $headerRowScroller.hide();
	      }

	      $viewport = $("<div class='slick-viewport' style='width:100%;overflow:auto;outline:0;position:relative;;'>").appendTo($container);
	      $viewport.css("overflow-y", options.autoHeight ? "hidden" : "auto");

	      $canvas = $("<div class='grid-canvas' />").appendTo($viewport);

	      $focusSink2 = $focusSink.clone().appendTo($container);

	      if (!options.explicitInitialization) {
	        finishInitialization();
	      }
	    }

	    function finishInitialization() {
	      if (!initialized) {
	        initialized = true;

	        viewportW = parseFloat($.css($container[0], "width", true));

	        // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)
	        // calculate the diff so we can set consistent sizes
	        measureCellPaddingAndBorder();

	        // for usability reasons, all text selection in SlickGrid is disabled
	        // with the exception of input and textarea elements (selection must
	        // be enabled there so that editors work as expected); note that
	        // selection in grid cells (grid body) is already unavailable in
	        // all browsers except IE
	        disableSelection($headers); // disable all text selection in header (including input and textarea)

	        if (!options.enableTextSelectionOnCells) {
	          // disable text selection in grid cells except in input and textarea elements
	          // (this is IE-specific, because selectstart event will only fire in IE)
	          $viewport.bind("selectstart.ui", function (event) {
	            return $(event.target).is("input,textarea");
	          });
	        }

	        updateColumnCaches();
	        createColumnHeaders();
	        setupColumnSort();
	        createCssRules();
	        resizeCanvas();
	        bindAncestorScrollEvents();

	        $container
	            .bind("resize.slickgrid", resizeCanvas);
	        $viewport
	            .bind("scroll", handleScroll);
	        $headerScroller
	            .bind("contextmenu", handleHeaderContextMenu)
	            .bind("click", handleHeaderClick)
	            .delegate(".slick-header-column", "mouseenter", handleHeaderMouseEnter)
	            .delegate(".slick-header-column", "mouseleave", handleHeaderMouseLeave);
	        $headerRowScroller
	            .bind("scroll", handleHeaderRowScroll);
	        $focusSink.add($focusSink2)
	            .bind("keydown", handleKeyDown);
	        $canvas
	            .bind("keydown", handleKeyDown)
	            .bind("click", handleClick)
	            .bind("dblclick", handleDblClick)
	            .bind("contextmenu", handleContextMenu)
	            .bind("draginit", handleDragInit)
	            .bind("dragstart", {distance: 3}, handleDragStart)
	            .bind("drag", handleDrag)
	            .bind("dragend", handleDragEnd)
	            .delegate(".slick-cell", "mouseenter", handleMouseEnter)
	            .delegate(".slick-cell", "mouseleave", handleMouseLeave);
	      }
	    }

	    function registerPlugin(plugin) {
	      plugins.unshift(plugin);
	      plugin.init(self);
	    }

	    function unregisterPlugin(plugin) {
	      for (var i = plugins.length; i >= 0; i--) {
	        if (plugins[i] === plugin) {
	          if (plugins[i].destroy) {
	            plugins[i].destroy();
	          }
	          plugins.splice(i, 1);
	          break;
	        }
	      }
	    }

	    function setSelectionModel(model) {
	      if (selectionModel) {
	        selectionModel.onSelectedRangesChanged.unsubscribe(handleSelectedRangesChanged);
	        if (selectionModel.destroy) {
	          selectionModel.destroy();
	        }
	      }

	      selectionModel = model;
	      if (selectionModel) {
	        selectionModel.init(self);
	        selectionModel.onSelectedRangesChanged.subscribe(handleSelectedRangesChanged);
	      }
	    }

	    function getSelectionModel() {
	      return selectionModel;
	    }

	    function getCanvasNode() {
	      return $canvas[0];
	    }

	    function measureScrollbar() {
	      var $c = $("<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'></div>").appendTo("body");
	      var dim = {
	        width: $c.width() - $c[0].clientWidth,
	        height: $c.height() - $c[0].clientHeight
	      };
	      $c.remove();
	      return dim;
	    }

	    function getHeadersWidth() {
	      var headersWidth = 0;
	      for (var i = 0, ii = columns.length; i < ii; i++) {
	        var width = columns[i].width;
	        headersWidth += width;
	      }
	      headersWidth += scrollbarDimensions.width;
	      return Math.max(headersWidth, viewportW) + 1000;
	    }

	    function getCanvasWidth() {
	      var availableWidth = viewportHasVScroll ? viewportW - scrollbarDimensions.width : viewportW;
	      var rowWidth = 0;
	      var i = columns.length;
	      while (i--) {
	        rowWidth += columns[i].width;
	      }
	      return options.fullWidthRows ? Math.max(rowWidth, availableWidth) : rowWidth;
	    }

	    function updateCanvasWidth(forceColumnWidthsUpdate) {
	      var oldCanvasWidth = canvasWidth;
	      canvasWidth = getCanvasWidth();

	      if (canvasWidth != oldCanvasWidth) {
	        $canvas.width(canvasWidth);
	        $headerRow.width(canvasWidth);
	        $headers.width(getHeadersWidth());
	        viewportHasHScroll = (canvasWidth > viewportW - scrollbarDimensions.width);
	      }

	      $headerRowSpacer.width(canvasWidth + (viewportHasVScroll ? scrollbarDimensions.width : 0));

	      if (canvasWidth != oldCanvasWidth || forceColumnWidthsUpdate) {
	        applyColumnWidths();
	      }
	    }

	    function disableSelection($target) {
	      if ($target && $target.jquery) {
	        $target
	            .attr("unselectable", "on")
	            .css("MozUserSelect", "none")
	            .bind("selectstart.ui", function () {
	              return false;
	            }); // from jquery:ui.core.js 1.7.2
	      }
	    }

	    function getMaxSupportedCssHeight() {
	      var supportedHeight = 1000000;
	      // FF reports the height back but still renders blank after ~6M px
	      var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;
	      var div = $("<div style='display:none' />").appendTo(document.body);

	      while (true) {
	        var test = supportedHeight * 2;
	        div.css("height", test);
	        if (test > testUpTo || div.height() !== test) {
	          break;
	        } else {
	          supportedHeight = test;
	        }
	      }

	      div.remove();
	      return supportedHeight;
	    }

	    // TODO:  this is static.  need to handle page mutation.
	    function bindAncestorScrollEvents() {
	      var elem = $canvas[0];
	      while ((elem = elem.parentNode) != document.body && elem != null) {
	        // bind to scroll containers only
	        if (elem == $viewport[0] || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight) {
	          var $elem = $(elem);
	          if (!$boundAncestors) {
	            $boundAncestors = $elem;
	          } else {
	            $boundAncestors = $boundAncestors.add($elem);
	          }
	          $elem.bind("scroll." + uid, handleActiveCellPositionChange);
	        }
	      }
	    }

	    function unbindAncestorScrollEvents() {
	      if (!$boundAncestors) {
	        return;
	      }
	      $boundAncestors.unbind("scroll." + uid);
	      $boundAncestors = null;
	    }

	    function updateColumnHeader(columnId, title, toolTip) {
	      if (!initialized) { return; }
	      var idx = getColumnIndex(columnId);
	      if (idx == null) {
	        return;
	      }

	      var columnDef = columns[idx];
	      var $header = $headers.children().eq(idx);
	      if ($header) {
	        if (title !== undefined) {
	          columns[idx].name = title;
	        }
	        if (toolTip !== undefined) {
	          columns[idx].toolTip = toolTip;
	        }

	        trigger(self.onBeforeHeaderCellDestroy, {
	          "node": $header[0],
	          "column": columnDef
	        });

	        $header
	            .attr("title", toolTip || "")
	            .children().eq(0).html(title);

	        trigger(self.onHeaderCellRendered, {
	          "node": $header[0],
	          "column": columnDef
	        });
	      }
	    }

	    function getHeaderRow() {
	      return $headerRow[0];
	    }

	    function getHeaderRowColumn(columnId) {
	      var idx = getColumnIndex(columnId);
	      var $header = $headerRow.children().eq(idx);
	      return $header && $header[0];
	    }

	    function createColumnHeaders() {
	      function onMouseEnter() {
	        $(this).addClass("ui-state-hover");
	      }

	      function onMouseLeave() {
	        $(this).removeClass("ui-state-hover");
	      }

	      $headers.find(".slick-header-column")
	        .each(function() {
	          var columnDef = $(this).data("column");
	          if (columnDef) {
	            trigger(self.onBeforeHeaderCellDestroy, {
	              "node": this,
	              "column": columnDef
	            });
	          }
	        });
	      $headers.empty();
	      $headers.width(getHeadersWidth());

	      $headerRow.find(".slick-headerrow-column")
	        .each(function() {
	          var columnDef = $(this).data("column");
	          if (columnDef) {
	            trigger(self.onBeforeHeaderRowCellDestroy, {
	              "node": this,
	              "column": columnDef
	            });
	          }
	        });
	      $headerRow.empty();

	      for (var i = 0; i < columns.length; i++) {
	        var m = columns[i];

	        var header = $("<div class='ui-state-default slick-header-column' />")
	            .html("<span class='slick-column-name'>" + m.name + "</span>")
	            .width(m.width - headerColumnWidthDiff)
	            .attr("id", "" + uid + m.id)
	            .attr("title", m.toolTip || "")
	            .data("column", m)
	            .addClass(m.headerCssClass || "")
	            .appendTo($headers);

	        if (options.enableColumnReorder || m.sortable) {
	          header
	            .on('mouseenter', onMouseEnter)
	            .on('mouseleave', onMouseLeave);
	        }

	        if (m.sortable) {
	          header.addClass("slick-header-sortable");
	          header.append("<span class='slick-sort-indicator' />");
	        }

	        trigger(self.onHeaderCellRendered, {
	          "node": header[0],
	          "column": m
	        });

	        if (options.showHeaderRow) {
	          var headerRowCell = $("<div class='ui-state-default slick-headerrow-column l" + i + " r" + i + "'></div>")
	              .data("column", m)
	              .appendTo($headerRow);

	          trigger(self.onHeaderRowCellRendered, {
	            "node": headerRowCell[0],
	            "column": m
	          });
	        }
	      }

	      setSortColumns(sortColumns);
	      setupColumnResize();
	      if (options.enableColumnReorder) {
	        setupColumnReorder();
	      }
	    }

	    function setupColumnSort() {
	      $headers.click(function (e) {
	        // temporary workaround for a bug in jQuery 1.7.1 (http://bugs.jquery.com/ticket/11328)
	        e.metaKey = e.metaKey || e.ctrlKey;

	        if ($(e.target).hasClass("slick-resizable-handle")) {
	          return;
	        }

	        var $col = $(e.target).closest(".slick-header-column");
	        if (!$col.length) {
	          return;
	        }

	        var column = $col.data("column");
	        if (column.sortable) {
	          if (!getEditorLock().commitCurrentEdit()) {
	            return;
	          }

	          var sortOpts = null;
	          var i = 0;
	          for (; i < sortColumns.length; i++) {
	            if (sortColumns[i].columnId == column.id) {
	              sortOpts = sortColumns[i];
	              sortOpts.sortAsc = !sortOpts.sortAsc;
	              break;
	            }
	          }

	          if (e.metaKey && options.multiColumnSort) {
	            if (sortOpts) {
	              sortColumns.splice(i, 1);
	            }
	          }
	          else {
	            if ((!e.shiftKey && !e.metaKey) || !options.multiColumnSort) {
	              sortColumns = [];
	            }

	            if (!sortOpts) {
	              sortOpts = { columnId: column.id, sortAsc: column.defaultSortAsc };
	              sortColumns.push(sortOpts);
	            } else if (sortColumns.length == 0) {
	              sortColumns.push(sortOpts);
	            }
	          }

	          setSortColumns(sortColumns);

	          if (!options.multiColumnSort) {
	            trigger(self.onSort, {
	              multiColumnSort: false,
	              sortCol: column,
	              sortAsc: sortOpts.sortAsc}, e);
	          } else {
	            trigger(self.onSort, {
	              multiColumnSort: true,
	              sortCols: $.map(sortColumns, function(col) {
	                return {sortCol: columns[getColumnIndex(col.columnId)], sortAsc: col.sortAsc };
	              })}, e);
	          }
	        }
	      });
	    }

	    function setupColumnReorder() {
	      $headers.filter(":ui-sortable").sortable("destroy");
	      $headers.sortable({
	        containment: "parent",
	        distance: 3,
	        axis: "x",
	        cursor: "default",
	        tolerance: "intersection",
	        helper: "clone",
	        placeholder: "slick-sortable-placeholder ui-state-default slick-header-column",
	        forcePlaceholderSize: true,
	        start: function (e, ui) {
	          $(ui.helper).addClass("slick-header-column-active");
	        },
	        beforeStop: function (e, ui) {
	          $(ui.helper).removeClass("slick-header-column-active");
	        },
	        stop: function (e) {
	          if (!getEditorLock().commitCurrentEdit()) {
	            $(this).sortable("cancel");
	            return;
	          }

	          var reorderedIds = $headers.sortable("toArray");
	          var reorderedColumns = [];
	          for (var i = 0; i < reorderedIds.length; i++) {
	            reorderedColumns.push(columns[getColumnIndex(reorderedIds[i].replace(uid, ""))]);
	          }
	          setColumns(reorderedColumns);

	          trigger(self.onColumnsReordered, {});
	          e.stopPropagation();
	          setupColumnResize();
	        }
	      });
	    }

	    function setupColumnResize() {
	      var $col, j, c, pageX, columnElements, minPageX, maxPageX, firstResizable, lastResizable;
	      columnElements = $headers.children();
	      columnElements.find(".slick-resizable-handle").remove();
	      columnElements.each(function (i, e) {
	        if (columns[i].resizable) {
	          if (firstResizable === undefined) {
	            firstResizable = i;
	          }
	          lastResizable = i;
	        }
	      });
	      if (firstResizable === undefined) {
	        return;
	      }
	      columnElements.each(function (i, e) {
	        if (i < firstResizable || (options.forceFitColumns && i >= lastResizable)) {
	          return;
	        }
	        $col = $(e);
	        $("<div class='slick-resizable-handle' />")
	            .appendTo(e)
	            .bind("dragstart", function (e, dd) {
	              if (!getEditorLock().commitCurrentEdit()) {
	                return false;
	              }
	              pageX = e.pageX;
	              $(this).parent().addClass("slick-header-column-active");
	              var shrinkLeewayOnRight = null, stretchLeewayOnRight = null;
	              // lock each column's width option to current width
	              columnElements.each(function (i, e) {
	                columns[i].previousWidth = $(e).outerWidth();
	              });
	              if (options.forceFitColumns) {
	                shrinkLeewayOnRight = 0;
	                stretchLeewayOnRight = 0;
	                // colums on right affect maxPageX/minPageX
	                for (j = i + 1; j < columnElements.length; j++) {
	                  c = columns[j];
	                  if (c.resizable) {
	                    if (stretchLeewayOnRight !== null) {
	                      if (c.maxWidth) {
	                        stretchLeewayOnRight += c.maxWidth - c.previousWidth;
	                      } else {
	                        stretchLeewayOnRight = null;
	                      }
	                    }
	                    shrinkLeewayOnRight += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);
	                  }
	                }
	              }
	              var shrinkLeewayOnLeft = 0, stretchLeewayOnLeft = 0;
	              for (j = 0; j <= i; j++) {
	                // columns on left only affect minPageX
	                c = columns[j];
	                if (c.resizable) {
	                  if (stretchLeewayOnLeft !== null) {
	                    if (c.maxWidth) {
	                      stretchLeewayOnLeft += c.maxWidth - c.previousWidth;
	                    } else {
	                      stretchLeewayOnLeft = null;
	                    }
	                  }
	                  shrinkLeewayOnLeft += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);
	                }
	              }
	              if (shrinkLeewayOnRight === null) {
	                shrinkLeewayOnRight = 100000;
	              }
	              if (shrinkLeewayOnLeft === null) {
	                shrinkLeewayOnLeft = 100000;
	              }
	              if (stretchLeewayOnRight === null) {
	                stretchLeewayOnRight = 100000;
	              }
	              if (stretchLeewayOnLeft === null) {
	                stretchLeewayOnLeft = 100000;
	              }
	              maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);
	              minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);
	            })
	            .bind("drag", function (e, dd) {
	              var actualMinWidth, d = Math.min(maxPageX, Math.max(minPageX, e.pageX)) - pageX, x;
	              if (d < 0) { // shrink column
	                x = d;
	                for (j = i; j >= 0; j--) {
	                  c = columns[j];
	                  if (c.resizable) {
	                    actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);
	                    if (x && c.previousWidth + x < actualMinWidth) {
	                      x += c.previousWidth - actualMinWidth;
	                      c.width = actualMinWidth;
	                    } else {
	                      c.width = c.previousWidth + x;
	                      x = 0;
	                    }
	                  }
	                }

	                if (options.forceFitColumns) {
	                  x = -d;
	                  for (j = i + 1; j < columnElements.length; j++) {
	                    c = columns[j];
	                    if (c.resizable) {
	                      if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {
	                        x -= c.maxWidth - c.previousWidth;
	                        c.width = c.maxWidth;
	                      } else {
	                        c.width = c.previousWidth + x;
	                        x = 0;
	                      }
	                    }
	                  }
	                }
	              } else { // stretch column
	                x = d;
	                for (j = i; j >= 0; j--) {
	                  c = columns[j];
	                  if (c.resizable) {
	                    if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {
	                      x -= c.maxWidth - c.previousWidth;
	                      c.width = c.maxWidth;
	                    } else {
	                      c.width = c.previousWidth + x;
	                      x = 0;
	                    }
	                  }
	                }

	                if (options.forceFitColumns) {
	                  x = -d;
	                  for (j = i + 1; j < columnElements.length; j++) {
	                    c = columns[j];
	                    if (c.resizable) {
	                      actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);
	                      if (x && c.previousWidth + x < actualMinWidth) {
	                        x += c.previousWidth - actualMinWidth;
	                        c.width = actualMinWidth;
	                      } else {
	                        c.width = c.previousWidth + x;
	                        x = 0;
	                      }
	                    }
	                  }
	                }
	              }
	              applyColumnHeaderWidths();
	              if (options.syncColumnCellResize) {
	                applyColumnWidths();
	              }
	            })
	            .bind("dragend", function (e, dd) {
	              var newWidth;
	              $(this).parent().removeClass("slick-header-column-active");
	              for (j = 0; j < columnElements.length; j++) {
	                c = columns[j];
	                newWidth = $(columnElements[j]).outerWidth();

	                if (c.previousWidth !== newWidth && c.rerenderOnResize) {
	                  invalidateAllRows();
	                }
	              }
	              updateCanvasWidth(true);
	              render();
	              trigger(self.onColumnsResized, {});
	            });
	      });
	    }

	    function getVBoxDelta($el) {
	      var p = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
	      var delta = 0;
	      $.each(p, function (n, val) {
	        delta += parseFloat($el.css(val)) || 0;
	      });
	      return delta;
	    }

	    function measureCellPaddingAndBorder() {
	      var el;
	      var h = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"];
	      var v = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];

	      el = $("<div class='ui-state-default slick-header-column' style='visibility:hidden'>-</div>").appendTo($headers);
	      headerColumnWidthDiff = headerColumnHeightDiff = 0;
	      $.each(h, function (n, val) {
	        headerColumnWidthDiff += parseFloat(el.css(val)) || 0;
	      });
	      $.each(v, function (n, val) {
	        headerColumnHeightDiff += parseFloat(el.css(val)) || 0;
	      });
	      el.remove();

	      var r = $("<div class='slick-row' />").appendTo($canvas);
	      el = $("<div class='slick-cell' id='' style='visibility:hidden'>-</div>").appendTo(r);
	      cellWidthDiff = cellHeightDiff = 0;
	      $.each(h, function (n, val) {
	        cellWidthDiff += parseFloat(el.css(val)) || 0;
	      });
	      $.each(v, function (n, val) {
	        cellHeightDiff += parseFloat(el.css(val)) || 0;
	      });
	      r.remove();

	      absoluteColumnMinWidth = Math.max(headerColumnWidthDiff, cellWidthDiff);
	    }

	    function createCssRules() {
	      $style = $("<style type='text/css' rel='stylesheet' />").appendTo($("head"));
	      var rowHeight = (options.rowHeight - cellHeightDiff);
	      var rules = [
	        "." + uid + " .slick-header-column { left: 1000px; }",
	        "." + uid + " .slick-top-panel { height:" + options.topPanelHeight + "px; }",
	        "." + uid + " .slick-headerrow-columns { height:" + options.headerRowHeight + "px; }",
	        "." + uid + " .slick-cell { height:" + rowHeight + "px; }",
	        "." + uid + " .slick-row { height:" + options.rowHeight + "px; }"
	      ];

	      for (var i = 0; i < columns.length; i++) {
	        rules.push("." + uid + " .l" + i + " { }");
	        rules.push("." + uid + " .r" + i + " { }");
	      }

	      if ($style[0].styleSheet) { // IE
	        $style[0].styleSheet.cssText = rules.join(" ");
	      } else {
	        $style[0].appendChild(document.createTextNode(rules.join(" ")));
	      }
	    }

	    function getColumnCssRules(idx) {
	      if (!stylesheet) {
	        var sheets = document.styleSheets;
	        for (var i = 0; i < sheets.length; i++) {
	          if ((sheets[i].ownerNode || sheets[i].owningElement) == $style[0]) {
	            stylesheet = sheets[i];
	            break;
	          }
	        }

	        if (!stylesheet) {
	          throw new Error("Cannot find stylesheet.");
	        }

	        // find and cache column CSS rules
	        columnCssRulesL = [];
	        columnCssRulesR = [];
	        var cssRules = (stylesheet.cssRules || stylesheet.rules);
	        var matches, columnIdx;
	        for (var i = 0; i < cssRules.length; i++) {
	          var selector = cssRules[i].selectorText;
	          if (matches = /\.l\d+/.exec(selector)) {
	            columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);
	            columnCssRulesL[columnIdx] = cssRules[i];
	          } else if (matches = /\.r\d+/.exec(selector)) {
	            columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);
	            columnCssRulesR[columnIdx] = cssRules[i];
	          }
	        }
	      }

	      return {
	        "left": columnCssRulesL[idx],
	        "right": columnCssRulesR[idx]
	      };
	    }

	    function removeCssRules() {
	      $style.remove();
	      stylesheet = null;
	    }

	    function destroy() {
	      getEditorLock().cancelCurrentEdit();

	      trigger(self.onBeforeDestroy, {});

	      var i = plugins.length;
	      while(i--) {
	        unregisterPlugin(plugins[i]);
	      }

	      if (options.enableColumnReorder) {
	          $headers.filter(":ui-sortable").sortable("destroy");
	      }

	      unbindAncestorScrollEvents();
	      $container.unbind(".slickgrid");
	      removeCssRules();

	      $canvas.unbind("draginit dragstart dragend drag");
	      $container.empty().removeClass(uid);
	    }


	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // General

	    function trigger(evt, args, e) {
	      e = e || new Slick.EventData();
	      args = args || {};
	      args.grid = self;
	      return evt.notify(args, e, self);
	    }

	    function getEditorLock() {
	      return options.editorLock;
	    }

	    function getEditController() {
	      return editController;
	    }

	    function getColumnIndex(id) {
	      return columnsById[id];
	    }

	    function autosizeColumns() {
	      var i, c,
	          widths = [],
	          shrinkLeeway = 0,
	          total = 0,
	          prevTotal,
	          availWidth = viewportHasVScroll ? viewportW - scrollbarDimensions.width : viewportW;

	      for (i = 0; i < columns.length; i++) {
	        c = columns[i];
	        widths.push(c.width);
	        total += c.width;
	        if (c.resizable) {
	          shrinkLeeway += c.width - Math.max(c.minWidth, absoluteColumnMinWidth);
	        }
	      }

	      // shrink
	      prevTotal = total;
	      while (total > availWidth && shrinkLeeway) {
	        var shrinkProportion = (total - availWidth) / shrinkLeeway;
	        for (i = 0; i < columns.length && total > availWidth; i++) {
	          c = columns[i];
	          var width = widths[i];
	          if (!c.resizable || width <= c.minWidth || width <= absoluteColumnMinWidth) {
	            continue;
	          }
	          var absMinWidth = Math.max(c.minWidth, absoluteColumnMinWidth);
	          var shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;
	          shrinkSize = Math.min(shrinkSize, width - absMinWidth);
	          total -= shrinkSize;
	          shrinkLeeway -= shrinkSize;
	          widths[i] -= shrinkSize;
	        }
	        if (prevTotal == total) {  // avoid infinite loop
	          break;
	        }
	        prevTotal = total;
	      }

	      // grow
	      prevTotal = total;
	      while (total < availWidth) {
	        var growProportion = availWidth / total;
	        for (i = 0; i < columns.length && total < availWidth; i++) {
	          c = columns[i];
	          if (!c.resizable || c.maxWidth <= c.width) {
	            continue;
	          }
	          var growSize = Math.min(Math.floor(growProportion * c.width) - c.width, (c.maxWidth - c.width) || 1000000) || 1;
	          total += growSize;
	          widths[i] += growSize;
	        }
	        if (prevTotal == total) {  // avoid infinite loop
	          break;
	        }
	        prevTotal = total;
	      }

	      var reRender = false;
	      for (i = 0; i < columns.length; i++) {
	        if (columns[i].rerenderOnResize && columns[i].width != widths[i]) {
	          reRender = true;
	        }
	        columns[i].width = widths[i];
	      }

	      applyColumnHeaderWidths();
	      updateCanvasWidth(true);
	      if (reRender) {
	        invalidateAllRows();
	        render();
	      }
	    }

	    function applyColumnHeaderWidths() {
	      if (!initialized) { return; }
	      var h;
	      for (var i = 0, headers = $headers.children(), ii = headers.length; i < ii; i++) {
	        h = $(headers[i]);
	        if (h.width() !== columns[i].width - headerColumnWidthDiff) {
	          h.width(columns[i].width - headerColumnWidthDiff);
	        }
	      }

	      updateColumnCaches();
	    }

	    function applyColumnWidths() {
	      var x = 0, w, rule;
	      for (var i = 0; i < columns.length; i++) {
	        w = columns[i].width;

	        rule = getColumnCssRules(i);
	        rule.left.style.left = x + "px";
	        rule.right.style.right = (canvasWidth - x - w) + "px";

	        x += columns[i].width;
	      }
	    }

	    function setSortColumn(columnId, ascending) {
	      setSortColumns([{ columnId: columnId, sortAsc: ascending}]);
	    }

	    function setSortColumns(cols) {
	      sortColumns = cols;

	      var headerColumnEls = $headers.children();
	      headerColumnEls
	          .removeClass("slick-header-column-sorted")
	          .find(".slick-sort-indicator")
	              .removeClass("slick-sort-indicator-asc slick-sort-indicator-desc");

	      $.each(sortColumns, function(i, col) {
	        if (col.sortAsc == null) {
	          col.sortAsc = true;
	        }
	        var columnIndex = getColumnIndex(col.columnId);
	        if (columnIndex != null) {
	          headerColumnEls.eq(columnIndex)
	              .addClass("slick-header-column-sorted")
	              .find(".slick-sort-indicator")
	                  .addClass(col.sortAsc ? "slick-sort-indicator-asc" : "slick-sort-indicator-desc");
	        }
	      });
	    }

	    function getSortColumns() {
	      return sortColumns;
	    }

	    function handleSelectedRangesChanged(e, ranges) {
	      selectedRows = [];
	      var hash = {};
	      for (var i = 0; i < ranges.length; i++) {
	        for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {
	          if (!hash[j]) {  // prevent duplicates
	            selectedRows.push(j);
	            hash[j] = {};
	          }
	          for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {
	            if (canCellBeSelected(j, k)) {
	              hash[j][columns[k].id] = options.selectedCellCssClass;
	            }
	          }
	        }
	      }

	      setCellCssStyles(options.selectedCellCssClass, hash);

	      trigger(self.onSelectedRowsChanged, {rows: getSelectedRows()}, e);
	    }

	    function getColumns() {
	      return columns;
	    }

	    function updateColumnCaches() {
	      // Pre-calculate cell boundaries.
	      columnPosLeft = [];
	      columnPosRight = [];
	      var x = 0;
	      for (var i = 0, ii = columns.length; i < ii; i++) {
	        columnPosLeft[i] = x;
	        columnPosRight[i] = x + columns[i].width;
	        x += columns[i].width;
	      }
	    }

	    function setColumns(columnDefinitions) {
	      columns = columnDefinitions;

	      columnsById = {};
	      for (var i = 0; i < columns.length; i++) {
	        var m = columns[i] = $.extend({}, columnDefaults, columns[i]);
	        columnsById[m.id] = i;
	        if (m.minWidth && m.width < m.minWidth) {
	          m.width = m.minWidth;
	        }
	        if (m.maxWidth && m.width > m.maxWidth) {
	          m.width = m.maxWidth;
	        }
	      }

	      updateColumnCaches();

	      if (initialized) {
	        invalidateAllRows();
	        createColumnHeaders();
	        removeCssRules();
	        createCssRules();
	        resizeCanvas();
	        applyColumnWidths();
	        handleScroll();
	      }
	    }

	    function getOptions() {
	      return options;
	    }

	    function setOptions(args) {
	      if (!getEditorLock().commitCurrentEdit()) {
	        return;
	      }

	      makeActiveCellNormal();

	      if (options.enableAddRow !== args.enableAddRow) {
	        invalidateRow(getDataLength());
	      }

	      options = $.extend(options, args);
	      validateAndEnforceOptions();

	      $viewport.css("overflow-y", options.autoHeight ? "hidden" : "auto");
	      render();
	    }

	    function validateAndEnforceOptions() {
	      if (options.autoHeight) {
	        options.leaveSpaceForNewRows = false;
	      }
	    }

	    function setData(newData, scrollToTop) {
	      data = newData;
	      invalidateAllRows();
	      updateRowCount();
	      if (scrollToTop) {
	        scrollTo(0);
	      }
	    }

	    function getData() {
	      return data;
	    }

	    function getDataLength() {
	      if (data.getLength) {
	        return data.getLength();
	      } else {
	        return data.length;
	      }
	    }

	    function getDataItem(i) {
	      if (data.getItem) {
	        return data.getItem(i);
	      } else {
	        return data[i];
	      }
	    }

	    function getTopPanel() {
	      return $topPanel[0];
	    }

	    function setTopPanelVisibility(visible) {
	      if (options.showTopPanel != visible) {
	        options.showTopPanel = visible;
	        if (visible) {
	          $topPanelScroller.slideDown("fast", resizeCanvas);
	        } else {
	          $topPanelScroller.slideUp("fast", resizeCanvas);
	        }
	      }
	    }

	    function setHeaderRowVisibility(visible) {
	      if (options.showHeaderRow != visible) {
	        options.showHeaderRow = visible;
	        if (visible) {
	          $headerRowScroller.slideDown("fast", resizeCanvas);
	        } else {
	          $headerRowScroller.slideUp("fast", resizeCanvas);
	        }
	      }
	    }

	    function getContainerNode() {
	      return $container.get(0);
	    }

	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // Rendering / Scrolling

	    function getRowTop(row) {
	      return options.rowHeight * row - offset;
	    }

	    function getRowFromPosition(y) {
	      return Math.floor((y + offset) / options.rowHeight);
	    }

	    function scrollTo(y) {
	      y = Math.max(y, 0);
	      y = Math.min(y, th - viewportH + (viewportHasHScroll ? scrollbarDimensions.height : 0));

	      var oldOffset = offset;

	      page = Math.min(n - 1, Math.floor(y / ph));
	      offset = Math.round(page * cj);
	      var newScrollTop = y - offset;

	      if (offset != oldOffset) {
	        var range = getVisibleRange(newScrollTop);
	        cleanupRows(range);
	        updateRowPositions();
	      }

	      if (prevScrollTop != newScrollTop) {
	        vScrollDir = (prevScrollTop + oldOffset < newScrollTop + offset) ? 1 : -1;
	        $viewport[0].scrollTop = (lastRenderedScrollTop = scrollTop = prevScrollTop = newScrollTop);

	        trigger(self.onViewportChanged, {});
	      }
	    }

	    function defaultFormatter(row, cell, value, columnDef, dataContext) {
	      if (value == null) {
	        return "";
	      } else {
	        return (value + "").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
	      }
	    }

	    function getFormatter(row, column) {
	      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);

	      // look up by id, then index
	      var columnOverrides = rowMetadata &&
	          rowMetadata.columns &&
	          (rowMetadata.columns[column.id] || rowMetadata.columns[getColumnIndex(column.id)]);

	      return (columnOverrides && columnOverrides.formatter) ||
	          (rowMetadata && rowMetadata.formatter) ||
	          column.formatter ||
	          (options.formatterFactory && options.formatterFactory.getFormatter(column)) ||
	          options.defaultFormatter;
	    }

	    function getEditor(row, cell) {
	      var column = columns[cell];
	      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);
	      var columnMetadata = rowMetadata && rowMetadata.columns;

	      if (columnMetadata && columnMetadata[column.id] && columnMetadata[column.id].editor !== undefined) {
	        return columnMetadata[column.id].editor;
	      }
	      if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].editor !== undefined) {
	        return columnMetadata[cell].editor;
	      }

	      return column.editor || (options.editorFactory && options.editorFactory.getEditor(column));
	    }

	    function getDataItemValueForColumn(item, columnDef) {
	      if (options.dataItemColumnValueExtractor) {
	        return options.dataItemColumnValueExtractor(item, columnDef);
	      }
	      return item[columnDef.field];
	    }

	    function appendRowHtml(stringArray, row, range, dataLength) {
	      var d = getDataItem(row);
	      var dataLoading = row < dataLength && !d;
	      var rowCss = "slick-row" +
	          (dataLoading ? " loading" : "") +
	          (row === activeRow ? " active" : "") +
	          (row % 2 == 1 ? " odd" : " even");

	      var metadata = data.getItemMetadata && data.getItemMetadata(row);

	      if (metadata && metadata.cssClasses) {
	        rowCss += " " + metadata.cssClasses;
	      }

	      stringArray.push("<div class='ui-widget-content " + rowCss + "' style='top:" + getRowTop(row) + "px'>");

	      var colspan, m;
	      for (var i = 0, ii = columns.length; i < ii; i++) {
	        m = columns[i];
	        colspan = 1;
	        if (metadata && metadata.columns) {
	          var columnData = metadata.columns[m.id] || metadata.columns[i];
	          colspan = (columnData && columnData.colspan) || 1;
	          if (colspan === "*") {
	            colspan = ii - i;
	          }
	        }

	        // Do not render cells outside of the viewport.
	        if (columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {
	          if (columnPosLeft[i] > range.rightPx) {
	            // All columns to the right are outside the range.
	            break;
	          }

	          appendCellHtml(stringArray, row, i, colspan, d);
	        }

	        if (colspan > 1) {
	          i += (colspan - 1);
	        }
	      }

	      stringArray.push("</div>");
	    }

	    function appendCellHtml(stringArray, row, cell, colspan, item) {
	      var m = columns[cell];
	      var cellCss = "slick-cell l" + cell + " r" + Math.min(columns.length - 1, cell + colspan - 1) +
	          (m.cssClass ? " " + m.cssClass : "");
	      if (row === activeRow && cell === activeCell) {
	        cellCss += (" active");
	      }

	      // TODO:  merge them together in the setter
	      for (var key in cellCssClasses) {
	        if (cellCssClasses[key][row] && cellCssClasses[key][row][m.id]) {
	          cellCss += (" " + cellCssClasses[key][row][m.id]);
	        }
	      }

	      stringArray.push("<div class='" + cellCss + "'>");

	      // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)
	      if (item) {
	        var value = getDataItemValueForColumn(item, m);
	        stringArray.push(getFormatter(row, m)(row, cell, value, m, item));
	      }

	      stringArray.push("</div>");

	      rowsCache[row].cellRenderQueue.push(cell);
	      rowsCache[row].cellColSpans[cell] = colspan;
	    }


	    function cleanupRows(rangeToKeep) {
	      for (var i in rowsCache) {
	        if (((i = parseInt(i, 10)) !== activeRow) && (i < rangeToKeep.top || i > rangeToKeep.bottom)) {
	          removeRowFromCache(i);
	        }
	      }
	    }

	    function invalidate() {
	      updateRowCount();
	      invalidateAllRows();
	      render();
	    }

	    function invalidateAllRows() {
	      if (currentEditor) {
	        makeActiveCellNormal();
	      }
	      for (var row in rowsCache) {
	        removeRowFromCache(row);
	      }
	    }

	    function removeRowFromCache(row) {
	      var cacheEntry = rowsCache[row];
	      if (!cacheEntry) {
	        return;
	      }
	      $canvas[0].removeChild(cacheEntry.rowNode);
	      delete rowsCache[row];
	      delete postProcessedRows[row];
	      renderedRows--;
	      counter_rows_removed++;
	    }

	    function invalidateRows(rows) {
	      var i, rl;
	      if (!rows || !rows.length) {
	        return;
	      }
	      vScrollDir = 0;
	      for (i = 0, rl = rows.length; i < rl; i++) {
	        if (currentEditor && activeRow === rows[i]) {
	          makeActiveCellNormal();
	        }
	        if (rowsCache[rows[i]]) {
	          removeRowFromCache(rows[i]);
	        }
	      }
	    }

	    function invalidateRow(row) {
	      invalidateRows([row]);
	    }

	    function updateCell(row, cell) {
	      var cellNode = getCellNode(row, cell);
	      if (!cellNode) {
	        return;
	      }

	      var m = columns[cell], d = getDataItem(row);
	      if (currentEditor && activeRow === row && activeCell === cell) {
	        currentEditor.loadValue(d);
	      } else {
	        cellNode.innerHTML = d ? getFormatter(row, m)(row, cell, getDataItemValueForColumn(d, m), m, d) : "";
	        invalidatePostProcessingResults(row);
	      }
	    }

	    function updateRow(row) {
	      var cacheEntry = rowsCache[row];
	      if (!cacheEntry) {
	        return;
	      }

	      ensureCellNodesInRowsCache(row);

	      var d = getDataItem(row);

	      for (var columnIdx in cacheEntry.cellNodesByColumnIdx) {
	        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(columnIdx)) {
	          continue;
	        }

	        columnIdx = columnIdx | 0;
	        var m = columns[columnIdx],
	            node = cacheEntry.cellNodesByColumnIdx[columnIdx];

	        if (row === activeRow && columnIdx === activeCell && currentEditor) {
	          currentEditor.loadValue(d);
	        } else if (d) {
	          node.innerHTML = getFormatter(row, m)(row, columnIdx, getDataItemValueForColumn(d, m), m, d);
	        } else {
	          node.innerHTML = "";
	        }
	      }

	      invalidatePostProcessingResults(row);
	    }

	    function getViewportHeight() {
	      return parseFloat($.css($container[0], "height", true)) -
	          parseFloat($.css($container[0], "paddingTop", true)) -
	          parseFloat($.css($container[0], "paddingBottom", true)) -
	          parseFloat($.css($headerScroller[0], "height")) - getVBoxDelta($headerScroller) -
	          (options.showTopPanel ? options.topPanelHeight + getVBoxDelta($topPanelScroller) : 0) -
	          (options.showHeaderRow ? options.headerRowHeight + getVBoxDelta($headerRowScroller) : 0);
	    }

	    function resizeCanvas() {
	      if (!initialized) { return; }
	      if (options.autoHeight) {
	        viewportH = options.rowHeight * (getDataLength() + (options.enableAddRow ? 1 : 0));
	      } else {
	        viewportH = getViewportHeight();
	      }

	      numVisibleRows = Math.ceil(viewportH / options.rowHeight);
	      viewportW = parseFloat($.css($container[0], "width", true));
	      if (!options.autoHeight) {
	        $viewport.height(viewportH);
	      }

	      if (options.forceFitColumns) {
	        autosizeColumns();
	      }

	      updateRowCount();
	      handleScroll();
	      render();
	    }

	    function updateRowCount() {
	      var dataLength = getDataLength();
	      if (!initialized) { return; }
	      numberOfRows = dataLength +
	          (options.enableAddRow ? 1 : 0) +
	          (options.leaveSpaceForNewRows ? numVisibleRows - 1 : 0);

	      var oldViewportHasVScroll = viewportHasVScroll;
	      // with autoHeight, we do not need to accommodate the vertical scroll bar
	      viewportHasVScroll = !options.autoHeight && (numberOfRows * options.rowHeight > viewportH);

	      // remove the rows that are now outside of the data range
	      // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows
	      var l = options.enableAddRow ? dataLength : dataLength - 1;
	      for (var i in rowsCache) {
	        if (i >= l) {
	          removeRowFromCache(i);
	        }
	      }

	      if (activeCellNode && activeRow > l) {
	        resetActiveCell();
	      }

	      var oldH = h;
	      th = Math.max(options.rowHeight * numberOfRows, viewportH - scrollbarDimensions.height);
	      if (th < maxSupportedCssHeight) {
	        // just one page
	        h = ph = th;
	        n = 1;
	        cj = 0;
	      } else {
	        // break into pages
	        h = maxSupportedCssHeight;
	        ph = h / 100;
	        n = Math.floor(th / ph);
	        cj = (th - h) / (n - 1);
	      }

	      if (h !== oldH) {
	        $canvas.css("height", h);
	        scrollTop = $viewport[0].scrollTop;
	      }

	      var oldScrollTopInRange = (scrollTop + offset <= th - viewportH);

	      if (th == 0 || scrollTop == 0) {
	        page = offset = 0;
	      } else if (oldScrollTopInRange) {
	        // maintain virtual position
	        scrollTo(scrollTop + offset);
	      } else {
	        // scroll to bottom
	        scrollTo(th - viewportH);
	      }

	      if (h != oldH && options.autoHeight) {
	        resizeCanvas();
	      }

	      if (options.forceFitColumns && oldViewportHasVScroll != viewportHasVScroll) {
	        autosizeColumns();
	      }
	      updateCanvasWidth(false);
	    }

	    function getVisibleRange(viewportTop, viewportLeft) {
	      if (viewportTop == null) {
	        viewportTop = scrollTop;
	      }
	      if (viewportLeft == null) {
	        viewportLeft = scrollLeft;
	      }

	      return {
	        top: getRowFromPosition(viewportTop),
	        bottom: getRowFromPosition(viewportTop + viewportH) + 1,
	        leftPx: viewportLeft,
	        rightPx: viewportLeft + viewportW
	      };
	    }

	    function getRenderedRange(viewportTop, viewportLeft) {
	      var range = getVisibleRange(viewportTop, viewportLeft);
	      var buffer = Math.round(viewportH / options.rowHeight);
	      var minBuffer = 3;

	      if (vScrollDir == -1) {
	        range.top -= buffer;
	        range.bottom += minBuffer;
	      } else if (vScrollDir == 1) {
	        range.top -= minBuffer;
	        range.bottom += buffer;
	      } else {
	        range.top -= minBuffer;
	        range.bottom += minBuffer;
	      }

	      range.top = Math.max(0, range.top);
	      range.bottom = Math.min(options.enableAddRow ? getDataLength() : getDataLength() - 1, range.bottom);

	      range.leftPx -= viewportW;
	      range.rightPx += viewportW;

	      range.leftPx = Math.max(0, range.leftPx);
	      range.rightPx = Math.min(canvasWidth, range.rightPx);

	      return range;
	    }

	    function ensureCellNodesInRowsCache(row) {
	      var cacheEntry = rowsCache[row];
	      if (cacheEntry) {
	        if (cacheEntry.cellRenderQueue.length) {
	          var lastChild = cacheEntry.rowNode.lastChild;
	          while (cacheEntry.cellRenderQueue.length) {
	            var columnIdx = cacheEntry.cellRenderQueue.pop();
	            cacheEntry.cellNodesByColumnIdx[columnIdx] = lastChild;
	            lastChild = lastChild.previousSibling;
	          }
	        }
	      }
	    }

	    function cleanUpCells(range, row) {
	      var totalCellsRemoved = 0;
	      var cacheEntry = rowsCache[row];

	      // Remove cells outside the range.
	      var cellsToRemove = [];
	      for (var i in cacheEntry.cellNodesByColumnIdx) {
	        // I really hate it when people mess with Array.prototype.
	        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(i)) {
	          continue;
	        }

	        // This is a string, so it needs to be cast back to a number.
	        i = i | 0;

	        var colspan = cacheEntry.cellColSpans[i];
	        if (columnPosLeft[i] > range.rightPx ||
	          columnPosRight[Math.min(columns.length - 1, i + colspan - 1)] < range.leftPx) {
	          if (!(row == activeRow && i == activeCell)) {
	            cellsToRemove.push(i);
	          }
	        }
	      }

	      var cellToRemove;
	      while ((cellToRemove = cellsToRemove.pop()) != null) {
	        cacheEntry.rowNode.removeChild(cacheEntry.cellNodesByColumnIdx[cellToRemove]);
	        delete cacheEntry.cellColSpans[cellToRemove];
	        delete cacheEntry.cellNodesByColumnIdx[cellToRemove];
	        if (postProcessedRows[row]) {
	          delete postProcessedRows[row][cellToRemove];
	        }
	        totalCellsRemoved++;
	      }
	    }

	    function cleanUpAndRenderCells(range) {
	      var cacheEntry;
	      var stringArray = [];
	      var processedRows = [];
	      var cellsAdded;
	      var totalCellsAdded = 0;
	      var colspan;

	      for (var row = range.top, btm = range.bottom; row <= btm; row++) {
	        cacheEntry = rowsCache[row];
	        if (!cacheEntry) {
	          continue;
	        }

	        // cellRenderQueue populated in renderRows() needs to be cleared first
	        ensureCellNodesInRowsCache(row);

	        cleanUpCells(range, row);

	        // Render missing cells.
	        cellsAdded = 0;

	        var metadata = data.getItemMetadata && data.getItemMetadata(row);
	        metadata = metadata && metadata.columns;

	        var d = getDataItem(row);

	        // TODO:  shorten this loop (index? heuristics? binary search?)
	        for (var i = 0, ii = columns.length; i < ii; i++) {
	          // Cells to the right are outside the range.
	          if (columnPosLeft[i] > range.rightPx) {
	            break;
	          }

	          // Already rendered.
	          if ((colspan = cacheEntry.cellColSpans[i]) != null) {
	            i += (colspan > 1 ? colspan - 1 : 0);
	            continue;
	          }

	          colspan = 1;
	          if (metadata) {
	            var columnData = metadata[columns[i].id] || metadata[i];
	            colspan = (columnData && columnData.colspan) || 1;
	            if (colspan === "*") {
	              colspan = ii - i;
	            }
	          }

	          if (columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {
	            appendCellHtml(stringArray, row, i, colspan, d);
	            cellsAdded++;
	          }

	          i += (colspan > 1 ? colspan - 1 : 0);
	        }

	        if (cellsAdded) {
	          totalCellsAdded += cellsAdded;
	          processedRows.push(row);
	        }
	      }

	      if (!stringArray.length) {
	        return;
	      }

	      var x = document.createElement("div");
	      x.innerHTML = stringArray.join("");

	      var processedRow;
	      var node;
	      while ((processedRow = processedRows.pop()) != null) {
	        cacheEntry = rowsCache[processedRow];
	        var columnIdx;
	        while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {
	          node = x.lastChild;
	          cacheEntry.rowNode.appendChild(node);
	          cacheEntry.cellNodesByColumnIdx[columnIdx] = node;
	        }
	      }
	    }

	    function renderRows(range) {
	      var parentNode = $canvas[0],
	          stringArray = [],
	          rows = [],
	          needToReselectCell = false,
	          dataLength = getDataLength();

	      for (var i = range.top, ii = range.bottom; i <= ii; i++) {
	        if (rowsCache[i]) {
	          continue;
	        }
	        renderedRows++;
	        rows.push(i);

	        // Create an entry right away so that appendRowHtml() can
	        // start populatating it.
	        rowsCache[i] = {
	          "rowNode": null,

	          // ColSpans of rendered cells (by column idx).
	          // Can also be used for checking whether a cell has been rendered.
	          "cellColSpans": [],

	          // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().
	          "cellNodesByColumnIdx": [],

	          // Column indices of cell nodes that have been rendered, but not yet indexed in
	          // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the
	          // end of the row.
	          "cellRenderQueue": []
	        };

	        appendRowHtml(stringArray, i, range, dataLength);
	        if (activeCellNode && activeRow === i) {
	          needToReselectCell = true;
	        }
	        counter_rows_rendered++;
	      }

	      if (!rows.length) { return; }

	      var x = document.createElement("div");
	      x.innerHTML = stringArray.join("");

	      for (var i = 0, ii = rows.length; i < ii; i++) {
	        rowsCache[rows[i]].rowNode = parentNode.appendChild(x.firstChild);
	      }

	      if (needToReselectCell) {
	        activeCellNode = getCellNode(activeRow, activeCell);
	      }
	    }

	    function startPostProcessing() {
	      if (!options.enableAsyncPostRender) {
	        return;
	      }
	      clearTimeout(h_postrender);
	      h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);
	    }

	    function invalidatePostProcessingResults(row) {
	      delete postProcessedRows[row];
	      postProcessFromRow = Math.min(postProcessFromRow, row);
	      postProcessToRow = Math.max(postProcessToRow, row);
	      startPostProcessing();
	    }

	    function updateRowPositions() {
	      for (var row in rowsCache) {
	        rowsCache[row].rowNode.style.top = getRowTop(row) + "px";
	      }
	    }

	    function render() {
	      if (!initialized) { return; }
	      var visible = getVisibleRange();
	      var rendered = getRenderedRange();

	      // remove rows no longer in the viewport
	      cleanupRows(rendered);

	      // add new rows & missing cells in existing rows
	      if (lastRenderedScrollLeft != scrollLeft) {
	        cleanUpAndRenderCells(rendered);
	      }

	      // render missing rows
	      renderRows(rendered);

	      postProcessFromRow = visible.top;
	      postProcessToRow = Math.min(options.enableAddRow ? getDataLength() : getDataLength() - 1, visible.bottom);
	      startPostProcessing();

	      lastRenderedScrollTop = scrollTop;
	      lastRenderedScrollLeft = scrollLeft;
	      h_render = null;
	    }

	    function handleHeaderRowScroll() {
	      var scrollLeft = $headerRowScroller[0].scrollLeft;
	      if (scrollLeft != $viewport[0].scrollLeft) {
	        $viewport[0].scrollLeft = scrollLeft;
	      }
	    }

	    function handleScroll() {
	      scrollTop = $viewport[0].scrollTop;
	      scrollLeft = $viewport[0].scrollLeft;
	      var vScrollDist = Math.abs(scrollTop - prevScrollTop);
	      var hScrollDist = Math.abs(scrollLeft - prevScrollLeft);

	      if (hScrollDist) {
	        prevScrollLeft = scrollLeft;
	        $headerScroller[0].scrollLeft = scrollLeft;
	        $topPanelScroller[0].scrollLeft = scrollLeft;
	        $headerRowScroller[0].scrollLeft = scrollLeft;
	      }

	      if (vScrollDist) {
	        vScrollDir = prevScrollTop < scrollTop ? 1 : -1;
	        prevScrollTop = scrollTop;

	        // switch virtual pages if needed
	        if (vScrollDist < viewportH) {
	          scrollTo(scrollTop + offset);
	        } else {
	          var oldOffset = offset;
	          if (h == viewportH) {
	            page = 0;
	          } else {
	            page = Math.min(n - 1, Math.floor(scrollTop * ((th - viewportH) / (h - viewportH)) * (1 / ph)));
	          }
	          offset = Math.round(page * cj);
	          if (oldOffset != offset) {
	            invalidateAllRows();
	          }
	        }
	      }

	      if (hScrollDist || vScrollDist) {
	        if (h_render) {
	          clearTimeout(h_render);
	        }

	        if (Math.abs(lastRenderedScrollTop - scrollTop) > 20 ||
	            Math.abs(lastRenderedScrollLeft - scrollLeft) > 20) {
	          if (options.forceSyncScrolling || (
	              Math.abs(lastRenderedScrollTop - scrollTop) < viewportH &&
	              Math.abs(lastRenderedScrollLeft - scrollLeft) < viewportW)) {
	            render();
	          } else {
	            h_render = setTimeout(render, 50);
	          }

	          trigger(self.onViewportChanged, {});
	        }
	      }

	      trigger(self.onScroll, {scrollLeft: scrollLeft, scrollTop: scrollTop});
	    }

	    function asyncPostProcessRows() {
	      while (postProcessFromRow <= postProcessToRow) {
	        var row = (vScrollDir >= 0) ? postProcessFromRow++ : postProcessToRow--;
	        var cacheEntry = rowsCache[row];
	        if (!cacheEntry || row >= getDataLength()) {
	          continue;
	        }

	        if (!postProcessedRows[row]) {
	          postProcessedRows[row] = {};
	        }

	        ensureCellNodesInRowsCache(row);
	        for (var columnIdx in cacheEntry.cellNodesByColumnIdx) {
	          if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(columnIdx)) {
	            continue;
	          }

	          columnIdx = columnIdx | 0;

	          var m = columns[columnIdx];
	          if (m.asyncPostRender && !postProcessedRows[row][columnIdx]) {
	            var node = cacheEntry.cellNodesByColumnIdx[columnIdx];
	            if (node) {
	              m.asyncPostRender(node, row, getDataItem(row), m);
	            }
	            postProcessedRows[row][columnIdx] = true;
	          }
	        }

	        h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);
	        return;
	      }
	    }

	    function updateCellCssStylesOnRenderedRows(addedHash, removedHash) {
	      var node, columnId, addedRowHash, removedRowHash;
	      for (var row in rowsCache) {
	        removedRowHash = removedHash && removedHash[row];
	        addedRowHash = addedHash && addedHash[row];

	        if (removedRowHash) {
	          for (columnId in removedRowHash) {
	            if (!addedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {
	              node = getCellNode(row, getColumnIndex(columnId));
	              if (node) {
	                $(node).removeClass(removedRowHash[columnId]);
	              }
	            }
	          }
	        }

	        if (addedRowHash) {
	          for (columnId in addedRowHash) {
	            if (!removedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {
	              node = getCellNode(row, getColumnIndex(columnId));
	              if (node) {
	                $(node).addClass(addedRowHash[columnId]);
	              }
	            }
	          }
	        }
	      }
	    }

	    function addCellCssStyles(key, hash) {
	      if (cellCssClasses[key]) {
	        throw "addCellCssStyles: cell CSS hash with key '" + key + "' already exists.";
	      }

	      cellCssClasses[key] = hash;
	      updateCellCssStylesOnRenderedRows(hash, null);

	      trigger(self.onCellCssStylesChanged, { "key": key, "hash": hash });
	    }

	    function removeCellCssStyles(key) {
	      if (!cellCssClasses[key]) {
	        return;
	      }

	      updateCellCssStylesOnRenderedRows(null, cellCssClasses[key]);
	      delete cellCssClasses[key];

	      trigger(self.onCellCssStylesChanged, { "key": key, "hash": null });
	    }

	    function setCellCssStyles(key, hash) {
	      var prevHash = cellCssClasses[key];

	      cellCssClasses[key] = hash;
	      updateCellCssStylesOnRenderedRows(hash, prevHash);

	      trigger(self.onCellCssStylesChanged, { "key": key, "hash": hash });
	    }

	    function getCellCssStyles(key) {
	      return cellCssClasses[key];
	    }

	    function flashCell(row, cell, speed) {
	      speed = speed || 100;
	      if (rowsCache[row]) {
	        var $cell = $(getCellNode(row, cell));

	        function toggleCellClass(times) {
	          if (!times) {
	            return;
	          }
	          setTimeout(function () {
	                $cell.queue(function () {
	                  $cell.toggleClass(options.cellFlashingCssClass).dequeue();
	                  toggleCellClass(times - 1);
	                });
	              },
	              speed);
	        }

	        toggleCellClass(4);
	      }
	    }

	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // Interactivity

	    function handleDragInit(e, dd) {
	      var cell = getCellFromEvent(e);
	      if (!cell || !cellExists(cell.row, cell.cell)) {
	        return false;
	      }

	      var retval = trigger(self.onDragInit, dd, e);
	      if (e.isImmediatePropagationStopped()) {
	        return retval;
	      }

	      // if nobody claims to be handling drag'n'drop by stopping immediate propagation,
	      // cancel out of it
	      return false;
	    }

	    function handleDragStart(e, dd) {
	      var cell = getCellFromEvent(e);
	      if (!cell || !cellExists(cell.row, cell.cell)) {
	        return false;
	      }

	      var retval = trigger(self.onDragStart, dd, e);
	      if (e.isImmediatePropagationStopped()) {
	        return retval;
	      }

	      return false;
	    }

	    function handleDrag(e, dd) {
	      return trigger(self.onDrag, dd, e);
	    }

	    function handleDragEnd(e, dd) {
	      trigger(self.onDragEnd, dd, e);
	    }

	    function handleKeyDown(e) {
	      trigger(self.onKeyDown, {row: activeRow, cell: activeCell}, e);
	      var handled = e.isImmediatePropagationStopped();

	      if (!handled) {
	        if (!e.shiftKey && !e.altKey && !e.ctrlKey) {
	          if (e.which == 27) {
	            if (!getEditorLock().isActive()) {
	              return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)
	            }
	            cancelEditAndSetFocus();
	          } else if (e.which == 37) {
	            handled = navigateLeft();
	          } else if (e.which == 39) {
	            handled = navigateRight();
	          } else if (e.which == 38) {
	            handled = navigateUp();
	          } else if (e.which == 40) {
	            handled = navigateDown();
	          } else if (e.which == 9) {
	            handled = navigateNext();
	          } else if (e.which == 13) {
	            if (options.editable) {
	              if (currentEditor) {
	                // adding new row
	                if (activeRow === getDataLength()) {
	                  navigateDown();
	                } else {
	                  commitEditAndSetFocus();
	                }
	              } else {
	                if (getEditorLock().commitCurrentEdit()) {
	                  makeActiveCellEditable();
	                }
	              }
	            }
	            handled = true;
	          }
	        } else if (e.which == 9 && e.shiftKey && !e.ctrlKey && !e.altKey) {
	          handled = navigatePrev();
	        }
	      }

	      if (handled) {
	        // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it
	        e.stopPropagation();
	        e.preventDefault();
	        try {
	          e.originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)
	        }
	        // ignore exceptions - setting the original event's keycode throws access denied exception for "Ctrl"
	        // (hitting control key only, nothing else), "Shift" (maybe others)
	        catch (error) {
	        }
	      }
	    }

	    function handleClick(e) {
	      if (!currentEditor) {
	        // if this click resulted in some cell child node getting focus,
	        // don't steal it back - keyboard events will still bubble up
	        if (e.target != document.activeElement) {
	          setFocus();
	        }
	      }

	      var cell = getCellFromEvent(e);
	      if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {
	        return;
	      }

	      trigger(self.onClick, {row: cell.row, cell: cell.cell}, e);
	      if (e.isImmediatePropagationStopped()) {
	        return;
	      }

	      if ((activeCell != cell.cell || activeRow != cell.row) && canCellBeActive(cell.row, cell.cell)) {
	        if (!getEditorLock().isActive() || getEditorLock().commitCurrentEdit()) {
	          scrollRowIntoView(cell.row, false);
	          setActiveCellInternal(getCellNode(cell.row, cell.cell), (cell.row === getDataLength()) || options.autoEdit);
	        }
	      }
	    }

	    function handleContextMenu(e) {
	      var $cell = $(e.target).closest(".slick-cell", $canvas);
	      if ($cell.length === 0) {
	        return;
	      }

	      // are we editing this cell?
	      if (activeCellNode === $cell[0] && currentEditor !== null) {
	        return;
	      }

	      trigger(self.onContextMenu, {}, e);
	    }

	    function handleDblClick(e) {
	      var cell = getCellFromEvent(e);
	      if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {
	        return;
	      }

	      trigger(self.onDblClick, {row: cell.row, cell: cell.cell}, e);
	      if (e.isImmediatePropagationStopped()) {
	        return;
	      }

	      if (options.editable) {
	        gotoCell(cell.row, cell.cell, true);
	      }
	    }

	    function handleHeaderMouseEnter(e) {
	      trigger(self.onHeaderMouseEnter, {
	        "column": $(this).data("column")
	      }, e);
	    }

	    function handleHeaderMouseLeave(e) {
	      trigger(self.onHeaderMouseLeave, {
	        "column": $(this).data("column")
	      }, e);
	    }

	    function handleHeaderContextMenu(e) {
	      var $header = $(e.target).closest(".slick-header-column", ".slick-header-columns");
	      var column = $header && $header.data("column");
	      trigger(self.onHeaderContextMenu, {column: column}, e);
	    }

	    function handleHeaderClick(e) {
	      var $header = $(e.target).closest(".slick-header-column", ".slick-header-columns");
	      var column = $header && $header.data("column");
	      if (column) {
	        trigger(self.onHeaderClick, {column: column}, e);
	      }
	    }

	    function handleMouseEnter(e) {
	      trigger(self.onMouseEnter, {}, e);
	    }

	    function handleMouseLeave(e) {
	      trigger(self.onMouseLeave, {}, e);
	    }

	    function cellExists(row, cell) {
	      return !(row < 0 || row >= getDataLength() || cell < 0 || cell >= columns.length);
	    }

	    function getCellFromPoint(x, y) {
	      var row = getRowFromPosition(y);
	      var cell = 0;

	      var w = 0;
	      for (var i = 0; i < columns.length && w < x; i++) {
	        w += columns[i].width;
	        cell++;
	      }

	      if (cell < 0) {
	        cell = 0;
	      }

	      return {row: row, cell: cell - 1};
	    }

	    function getCellFromNode(cellNode) {
	      // read column number from .l<columnNumber> CSS class
	      var cls = /l\d+/.exec(cellNode.className);
	      if (!cls) {
	        throw "getCellFromNode: cannot get cell - " + cellNode.className;
	      }
	      return parseInt(cls[0].substr(1, cls[0].length - 1), 10);
	    }

	    function getRowFromNode(rowNode) {
	      for (var row in rowsCache) {
	        if (rowsCache[row].rowNode === rowNode) {
	          return row | 0;
	        }
	      }

	      return null;
	    }

	    function getCellFromEvent(e) {
	      var $cell = $(e.target).closest(".slick-cell", $canvas);
	      if (!$cell.length) {
	        return null;
	      }

	      var row = getRowFromNode($cell[0].parentNode);
	      var cell = getCellFromNode($cell[0]);

	      if (row == null || cell == null) {
	        return null;
	      } else {
	        return {
	          "row": row,
	          "cell": cell
	        };
	      }
	    }

	    function getCellNodeBox(row, cell) {
	      if (!cellExists(row, cell)) {
	        return null;
	      }

	      var y1 = getRowTop(row);
	      var y2 = y1 + options.rowHeight - 1;
	      var x1 = 0;
	      for (var i = 0; i < cell; i++) {
	        x1 += columns[i].width;
	      }
	      var x2 = x1 + columns[cell].width;

	      return {
	        top: y1,
	        left: x1,
	        bottom: y2,
	        right: x2
	      };
	    }

	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // Cell switching

	    function resetActiveCell() {
	      setActiveCellInternal(null, false);
	    }

	    function setFocus() {
	      if (tabbingDirection == -1) {
	        $focusSink[0].focus();
	      } else {
	        $focusSink2[0].focus();
	      }
	    }

	    function scrollCellIntoView(row, cell, doPaging) {
	      scrollRowIntoView(row, doPaging);

	      var colspan = getColspan(row, cell);
	      var left = columnPosLeft[cell],
	        right = columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)],
	        scrollRight = scrollLeft + viewportW;

	      if (left < scrollLeft) {
	        $viewport.scrollLeft(left);
	        handleScroll();
	        render();
	      } else if (right > scrollRight) {
	        $viewport.scrollLeft(Math.min(left, right - $viewport[0].clientWidth));
	        handleScroll();
	        render();
	      }
	    }

	    function setActiveCellInternal(newCell, editMode) {
	      if (activeCellNode !== null) {
	        makeActiveCellNormal();
	        $(activeCellNode).removeClass("active");
	        if (rowsCache[activeRow]) {
	          $(rowsCache[activeRow].rowNode).removeClass("active");
	        }
	      }

	      var activeCellChanged = (activeCellNode !== newCell);
	      activeCellNode = newCell;

	      if (activeCellNode != null) {
	        activeRow = getRowFromNode(activeCellNode.parentNode);
	        activeCell = activePosX = getCellFromNode(activeCellNode);

	        $(activeCellNode).addClass("active");
	        $(rowsCache[activeRow].rowNode).addClass("active");

	        if (options.editable && editMode && isCellPotentiallyEditable(activeRow, activeCell)) {
	          clearTimeout(h_editorLoader);

	          if (options.asyncEditorLoading) {
	            h_editorLoader = setTimeout(function () {
	              makeActiveCellEditable();
	            }, options.asyncEditorLoadDelay);
	          } else {
	            makeActiveCellEditable();
	          }
	        }
	      } else {
	        activeRow = activeCell = null;
	      }

	      if (activeCellChanged) {
	        trigger(self.onActiveCellChanged, getActiveCell());
	      }
	    }

	    function clearTextSelection() {
	      if (document.selection && document.selection.empty) {
	        try {
	          //IE fails here if selected element is not in dom
	          document.selection.empty();
	        } catch (e) { }
	      } else if (window.getSelection) {
	        var sel = window.getSelection();
	        if (sel && sel.removeAllRanges) {
	          sel.removeAllRanges();
	        }
	      }
	    }

	    function isCellPotentiallyEditable(row, cell) {
	      // is the data for this row loaded?
	      if (row < getDataLength() && !getDataItem(row)) {
	        return false;
	      }

	      // are we in the Add New row?  can we create new from this cell?
	      if (columns[cell].cannotTriggerInsert && row >= getDataLength()) {
	        return false;
	      }

	      // does this cell have an editor?
	      if (!getEditor(row, cell)) {
	        return false;
	      }

	      return true;
	    }

	    function makeActiveCellNormal() {
	      if (!currentEditor) {
	        return;
	      }
	      trigger(self.onBeforeCellEditorDestroy, {editor: currentEditor});
	      currentEditor.destroy();
	      currentEditor = null;

	      if (activeCellNode) {
	        var d = getDataItem(activeRow);
	        $(activeCellNode).removeClass("editable invalid");
	        if (d) {
	          var column = columns[activeCell];
	          var formatter = getFormatter(activeRow, column);
	          activeCellNode.innerHTML = formatter(activeRow, activeCell, getDataItemValueForColumn(d, column), column, d);
	          invalidatePostProcessingResults(activeRow);
	        }
	      }

	      // if there previously was text selected on a page (such as selected text in the edit cell just removed),
	      // IE can't set focus to anything else correctly
	      if (navigator.userAgent.toLowerCase().match(/msie/)) {
	        clearTextSelection();
	      }

	      getEditorLock().deactivate(editController);
	    }

	    function makeActiveCellEditable(editor) {
	      if (!activeCellNode) {
	        return;
	      }
	      if (!options.editable) {
	        throw "Grid : makeActiveCellEditable : should never get called when options.editable is false";
	      }

	      // cancel pending async call if there is one
	      clearTimeout(h_editorLoader);

	      if (!isCellPotentiallyEditable(activeRow, activeCell)) {
	        return;
	      }

	      var columnDef = columns[activeCell];
	      var item = getDataItem(activeRow);

	      if (trigger(self.onBeforeEditCell, {row: activeRow, cell: activeCell, item: item, column: columnDef}) === false) {
	        setFocus();
	        return;
	      }

	      getEditorLock().activate(editController);
	      $(activeCellNode).addClass("editable");

	      // don't clear the cell if a custom editor is passed through
	      if (!editor) {
	        activeCellNode.innerHTML = "";
	      }

	      currentEditor = new (editor || getEditor(activeRow, activeCell))({
	        grid: self,
	        gridPosition: absBox($container[0]),
	        position: absBox(activeCellNode),
	        container: activeCellNode,
	        column: columnDef,
	        item: item || {},
	        commitChanges: commitEditAndSetFocus,
	        cancelChanges: cancelEditAndSetFocus
	      });

	      if (item) {
	        currentEditor.loadValue(item);
	      }

	      serializedEditorValue = currentEditor.serializeValue();

	      if (currentEditor.position) {
	        handleActiveCellPositionChange();
	      }
	    }

	    function commitEditAndSetFocus() {
	      // if the commit fails, it would do so due to a validation error
	      // if so, do not steal the focus from the editor
	      if (getEditorLock().commitCurrentEdit()) {
	        setFocus();
	        if (options.autoEdit) {
	          navigateDown();
	        }
	      }
	    }

	    function cancelEditAndSetFocus() {
	      if (getEditorLock().cancelCurrentEdit()) {
	        setFocus();
	      }
	    }

	    function absBox(elem) {
	      var box = {
	        top: elem.offsetTop,
	        left: elem.offsetLeft,
	        bottom: 0,
	        right: 0,
	        width: $(elem).outerWidth(),
	        height: $(elem).outerHeight(),
	        visible: true};
	      box.bottom = box.top + box.height;
	      box.right = box.left + box.width;

	      // walk up the tree
	      var offsetParent = elem.offsetParent;
	      while ((elem = elem.parentNode) != document.body) {
	        if (box.visible && elem.scrollHeight != elem.offsetHeight && $(elem).css("overflowY") != "visible") {
	          box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;
	        }

	        if (box.visible && elem.scrollWidth != elem.offsetWidth && $(elem).css("overflowX") != "visible") {
	          box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;
	        }

	        box.left -= elem.scrollLeft;
	        box.top -= elem.scrollTop;

	        if (elem === offsetParent) {
	          box.left += elem.offsetLeft;
	          box.top += elem.offsetTop;
	          offsetParent = elem.offsetParent;
	        }

	        box.bottom = box.top + box.height;
	        box.right = box.left + box.width;
	      }

	      return box;
	    }

	    function getActiveCellPosition() {
	      return absBox(activeCellNode);
	    }

	    function getGridPosition() {
	      return absBox($container[0])
	    }

	    function handleActiveCellPositionChange() {
	      if (!activeCellNode) {
	        return;
	      }

	      trigger(self.onActiveCellPositionChanged, {});

	      if (currentEditor) {
	        var cellBox = getActiveCellPosition();
	        if (currentEditor.show && currentEditor.hide) {
	          if (!cellBox.visible) {
	            currentEditor.hide();
	          } else {
	            currentEditor.show();
	          }
	        }

	        if (currentEditor.position) {
	          currentEditor.position(cellBox);
	        }
	      }
	    }

	    function getCellEditor() {
	      return currentEditor;
	    }

	    function getActiveCell() {
	      if (!activeCellNode) {
	        return null;
	      } else {
	        return {row: activeRow, cell: activeCell};
	      }
	    }

	    function getActiveCellNode() {
	      return activeCellNode;
	    }

	    function scrollRowIntoView(row, doPaging) {
	      var rowAtTop = row * options.rowHeight;
	      var rowAtBottom = (row + 1) * options.rowHeight - viewportH + (viewportHasHScroll ? scrollbarDimensions.height : 0);

	      // need to page down?
	      if ((row + 1) * options.rowHeight > scrollTop + viewportH + offset) {
	        scrollTo(doPaging ? rowAtTop : rowAtBottom);
	        render();
	      }
	      // or page up?
	      else if (row * options.rowHeight < scrollTop + offset) {
	        scrollTo(doPaging ? rowAtBottom : rowAtTop);
	        render();
	      }
	    }

	    function scrollRowToTop(row) {
	      scrollTo(row * options.rowHeight);
	      render();
	    }

	    function getColspan(row, cell) {
	      var metadata = data.getItemMetadata && data.getItemMetadata(row);
	      if (!metadata || !metadata.columns) {
	        return 1;
	      }

	      var columnData = metadata.columns[columns[cell].id] || metadata.columns[cell];
	      var colspan = (columnData && columnData.colspan);
	      if (colspan === "*") {
	        colspan = columns.length - cell;
	      } else {
	        colspan = colspan || 1;
	      }

	      return colspan;
	    }

	    function findFirstFocusableCell(row) {
	      var cell = 0;
	      while (cell < columns.length) {
	        if (canCellBeActive(row, cell)) {
	          return cell;
	        }
	        cell += getColspan(row, cell);
	      }
	      return null;
	    }

	    function findLastFocusableCell(row) {
	      var cell = 0;
	      var lastFocusableCell = null;
	      while (cell < columns.length) {
	        if (canCellBeActive(row, cell)) {
	          lastFocusableCell = cell;
	        }
	        cell += getColspan(row, cell);
	      }
	      return lastFocusableCell;
	    }

	    function gotoRight(row, cell, posX) {
	      if (cell >= columns.length) {
	        return null;
	      }

	      do {
	        cell += getColspan(row, cell);
	      }
	      while (cell < columns.length && !canCellBeActive(row, cell));

	      if (cell < columns.length) {
	        return {
	          "row": row,
	          "cell": cell,
	          "posX": cell
	        };
	      }
	      return null;
	    }

	    function gotoLeft(row, cell, posX) {
	      if (cell <= 0) {
	        return null;
	      }

	      var firstFocusableCell = findFirstFocusableCell(row);
	      if (firstFocusableCell === null || firstFocusableCell >= cell) {
	        return null;
	      }

	      var prev = {
	        "row": row,
	        "cell": firstFocusableCell,
	        "posX": firstFocusableCell
	      };
	      var pos;
	      while (true) {
	        pos = gotoRight(prev.row, prev.cell, prev.posX);
	        if (!pos) {
	          return null;
	        }
	        if (pos.cell >= cell) {
	          return prev;
	        }
	        prev = pos;
	      }
	    }

	    function gotoDown(row, cell, posX) {
	      var prevCell;
	      while (true) {
	        if (++row >= getDataLength() + (options.enableAddRow ? 1 : 0)) {
	          return null;
	        }

	        prevCell = cell = 0;
	        while (cell <= posX) {
	          prevCell = cell;
	          cell += getColspan(row, cell);
	        }

	        if (canCellBeActive(row, prevCell)) {
	          return {
	            "row": row,
	            "cell": prevCell,
	            "posX": posX
	          };
	        }
	      }
	    }

	    function gotoUp(row, cell, posX) {
	      var prevCell;
	      while (true) {
	        if (--row < 0) {
	          return null;
	        }

	        prevCell = cell = 0;
	        while (cell <= posX) {
	          prevCell = cell;
	          cell += getColspan(row, cell);
	        }

	        if (canCellBeActive(row, prevCell)) {
	          return {
	            "row": row,
	            "cell": prevCell,
	            "posX": posX
	          };
	        }
	      }
	    }

	    function gotoNext(row, cell, posX) {
	      if (row == null && cell == null) {
	        row = cell = posX = 0;
	        if (canCellBeActive(row, cell)) {
	          return {
	            "row": row,
	            "cell": cell,
	            "posX": cell
	          };
	        }
	      }

	      var pos = gotoRight(row, cell, posX);
	      if (pos) {
	        return pos;
	      }

	      var firstFocusableCell = null;
	      while (++row < getDataLength() + (options.enableAddRow ? 1 : 0)) {
	        firstFocusableCell = findFirstFocusableCell(row);
	        if (firstFocusableCell !== null) {
	          return {
	            "row": row,
	            "cell": firstFocusableCell,
	            "posX": firstFocusableCell
	          };
	        }
	      }
	      return null;
	    }

	    function gotoPrev(row, cell, posX) {
	      if (row == null && cell == null) {
	        row = getDataLength() + (options.enableAddRow ? 1 : 0) - 1;
	        cell = posX = columns.length - 1;
	        if (canCellBeActive(row, cell)) {
	          return {
	            "row": row,
	            "cell": cell,
	            "posX": cell
	          };
	        }
	      }

	      var pos;
	      var lastSelectableCell;
	      while (!pos) {
	        pos = gotoLeft(row, cell, posX);
	        if (pos) {
	          break;
	        }
	        if (--row < 0) {
	          return null;
	        }

	        cell = 0;
	        lastSelectableCell = findLastFocusableCell(row);
	        if (lastSelectableCell !== null) {
	          pos = {
	            "row": row,
	            "cell": lastSelectableCell,
	            "posX": lastSelectableCell
	          };
	        }
	      }
	      return pos;
	    }

	    function navigateRight() {
	      return navigate("right");
	    }

	    function navigateLeft() {
	      return navigate("left");
	    }

	    function navigateDown() {
	      return navigate("down");
	    }

	    function navigateUp() {
	      return navigate("up");
	    }

	    function navigateNext() {
	      return navigate("next");
	    }

	    function navigatePrev() {
	      return navigate("prev");
	    }

	    /**
	     * @param {string} dir Navigation direction.
	     * @return {boolean} Whether navigation resulted in a change of active cell.
	     */
	    function navigate(dir) {
	      if (!options.enableCellNavigation) {
	        return false;
	      }

	      if (!activeCellNode && dir != "prev" && dir != "next") {
	        return false;
	      }

	      if (!getEditorLock().commitCurrentEdit()) {
	        return true;
	      }
	      setFocus();

	      var tabbingDirections = {
	        "up": -1,
	        "down": 1,
	        "left": -1,
	        "right": 1,
	        "prev": -1,
	        "next": 1
	      };
	      tabbingDirection = tabbingDirections[dir];

	      var stepFunctions = {
	        "up": gotoUp,
	        "down": gotoDown,
	        "left": gotoLeft,
	        "right": gotoRight,
	        "prev": gotoPrev,
	        "next": gotoNext
	      };
	      var stepFn = stepFunctions[dir];
	      var pos = stepFn(activeRow, activeCell, activePosX);
	      if (pos) {
	        var isAddNewRow = (pos.row == getDataLength());
	        scrollCellIntoView(pos.row, pos.cell, !isAddNewRow);
	        setActiveCellInternal(getCellNode(pos.row, pos.cell), isAddNewRow || options.autoEdit);
	        activePosX = pos.posX;
	        return true;
	      } else {
	        setActiveCellInternal(getCellNode(activeRow, activeCell), (activeRow == getDataLength()) || options.autoEdit);
	        return false;
	      }
	    }

	    function getCellNode(row, cell) {
	      if (rowsCache[row]) {
	        ensureCellNodesInRowsCache(row);
	        return rowsCache[row].cellNodesByColumnIdx[cell];
	      }
	      return null;
	    }

	    function setActiveCell(row, cell) {
	      if (!initialized) { return; }
	      if (row > getDataLength() || row < 0 || cell >= columns.length || cell < 0) {
	        return;
	      }

	      if (!options.enableCellNavigation) {
	        return;
	      }

	      scrollCellIntoView(row, cell, false);
	      setActiveCellInternal(getCellNode(row, cell), false);
	    }

	    function canCellBeActive(row, cell) {
	      if (!options.enableCellNavigation || row >= getDataLength() + (options.enableAddRow ? 1 : 0) ||
	          row < 0 || cell >= columns.length || cell < 0) {
	        return false;
	      }

	      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);
	      if (rowMetadata && typeof rowMetadata.focusable === "boolean") {
	        return rowMetadata.focusable;
	      }

	      var columnMetadata = rowMetadata && rowMetadata.columns;
	      if (columnMetadata && columnMetadata[columns[cell].id] && typeof columnMetadata[columns[cell].id].focusable === "boolean") {
	        return columnMetadata[columns[cell].id].focusable;
	      }
	      if (columnMetadata && columnMetadata[cell] && typeof columnMetadata[cell].focusable === "boolean") {
	        return columnMetadata[cell].focusable;
	      }

	      return columns[cell].focusable;
	    }

	    function canCellBeSelected(row, cell) {
	      if (row >= getDataLength() || row < 0 || cell >= columns.length || cell < 0) {
	        return false;
	      }

	      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);
	      if (rowMetadata && typeof rowMetadata.selectable === "boolean") {
	        return rowMetadata.selectable;
	      }

	      var columnMetadata = rowMetadata && rowMetadata.columns && (rowMetadata.columns[columns[cell].id] || rowMetadata.columns[cell]);
	      if (columnMetadata && typeof columnMetadata.selectable === "boolean") {
	        return columnMetadata.selectable;
	      }

	      return columns[cell].selectable;
	    }

	    function gotoCell(row, cell, forceEdit) {
	      if (!initialized) { return; }
	      if (!canCellBeActive(row, cell)) {
	        return;
	      }

	      if (!getEditorLock().commitCurrentEdit()) {
	        return;
	      }

	      scrollCellIntoView(row, cell, false);

	      var newCell = getCellNode(row, cell);

	      // if selecting the 'add new' row, start editing right away
	      setActiveCellInternal(newCell, forceEdit || (row === getDataLength()) || options.autoEdit);

	      // if no editor was created, set the focus back on the grid
	      if (!currentEditor) {
	        setFocus();
	      }
	    }


	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // IEditor implementation for the editor lock

	    function commitCurrentEdit() {
	      var item = getDataItem(activeRow);
	      var column = columns[activeCell];

	      if (currentEditor) {
	        if (currentEditor.isValueChanged()) {
	          var validationResults = currentEditor.validate();

	          if (validationResults.valid) {
	            if (activeRow < getDataLength()) {
	              var editCommand = {
	                row: activeRow,
	                cell: activeCell,
	                editor: currentEditor,
	                serializedValue: currentEditor.serializeValue(),
	                prevSerializedValue: serializedEditorValue,
	                execute: function () {
	                  this.editor.applyValue(item, this.serializedValue);
	                  updateRow(this.row);
	                },
	                undo: function () {
	                  this.editor.applyValue(item, this.prevSerializedValue);
	                  updateRow(this.row);
	                }
	              };

	              if (options.editCommandHandler) {
	                makeActiveCellNormal();
	                options.editCommandHandler(item, column, editCommand);
	              } else {
	                editCommand.execute();
	                makeActiveCellNormal();
	              }

	              trigger(self.onCellChange, {
	                row: activeRow,
	                cell: activeCell,
	                item: item
	              });
	            } else {
	              var newItem = {};
	              currentEditor.applyValue(newItem, currentEditor.serializeValue());
	              makeActiveCellNormal();
	              trigger(self.onAddNewRow, {item: newItem, column: column});
	            }

	            // check whether the lock has been re-acquired by event handlers
	            return !getEditorLock().isActive();
	          } else {
	            // Re-add the CSS class to trigger transitions, if any.
	            $(activeCellNode).removeClass("invalid");
	            $(activeCellNode).width();  // force layout
	            $(activeCellNode).addClass("invalid");

	            trigger(self.onValidationError, {
	              editor: currentEditor,
	              cellNode: activeCellNode,
	              validationResults: validationResults,
	              row: activeRow,
	              cell: activeCell,
	              column: column
	            });

	            currentEditor.focus();
	            return false;
	          }
	        }

	        makeActiveCellNormal();
	      }
	      return true;
	    }

	    function cancelCurrentEdit() {
	      makeActiveCellNormal();
	      return true;
	    }

	    function rowsToRanges(rows) {
	      var ranges = [];
	      var lastCell = columns.length - 1;
	      for (var i = 0; i < rows.length; i++) {
	        ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));
	      }
	      return ranges;
	    }

	    function getSelectedRows() {
	      if (!selectionModel) {
	        throw "Selection model is not set";
	      }
	      return selectedRows;
	    }

	    function setSelectedRows(rows) {
	      if (!selectionModel) {
	        throw "Selection model is not set";
	      }
	      selectionModel.setSelectedRanges(rowsToRanges(rows));
	    }


	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // Debug

	    this.debug = function () {
	      var s = "";

	      s += ("\n" + "counter_rows_rendered:  " + counter_rows_rendered);
	      s += ("\n" + "counter_rows_removed:  " + counter_rows_removed);
	      s += ("\n" + "renderedRows:  " + renderedRows);
	      s += ("\n" + "numVisibleRows:  " + numVisibleRows);
	      s += ("\n" + "maxSupportedCssHeight:  " + maxSupportedCssHeight);
	      s += ("\n" + "n(umber of pages):  " + n);
	      s += ("\n" + "(current) page:  " + page);
	      s += ("\n" + "page height (ph):  " + ph);
	      s += ("\n" + "vScrollDir:  " + vScrollDir);

	      alert(s);
	    };

	    // a debug helper to be able to access private members
	    this.eval = function (expr) {
	      return eval(expr);
	    };

	    //////////////////////////////////////////////////////////////////////////////////////////////
	    // Public API

	    $.extend(this, {
	      "slickGridVersion": "2.1",

	      // Events
	      "onScroll": new Slick.Event(),
	      "onSort": new Slick.Event(),
	      "onHeaderMouseEnter": new Slick.Event(),
	      "onHeaderMouseLeave": new Slick.Event(),
	      "onHeaderContextMenu": new Slick.Event(),
	      "onHeaderClick": new Slick.Event(),
	      "onHeaderCellRendered": new Slick.Event(),
	      "onBeforeHeaderCellDestroy": new Slick.Event(),
	      "onHeaderRowCellRendered": new Slick.Event(),
	      "onBeforeHeaderRowCellDestroy": new Slick.Event(),
	      "onMouseEnter": new Slick.Event(),
	      "onMouseLeave": new Slick.Event(),
	      "onClick": new Slick.Event(),
	      "onDblClick": new Slick.Event(),
	      "onContextMenu": new Slick.Event(),
	      "onKeyDown": new Slick.Event(),
	      "onAddNewRow": new Slick.Event(),
	      "onValidationError": new Slick.Event(),
	      "onViewportChanged": new Slick.Event(),
	      "onColumnsReordered": new Slick.Event(),
	      "onColumnsResized": new Slick.Event(),
	      "onCellChange": new Slick.Event(),
	      "onBeforeEditCell": new Slick.Event(),
	      "onBeforeCellEditorDestroy": new Slick.Event(),
	      "onBeforeDestroy": new Slick.Event(),
	      "onActiveCellChanged": new Slick.Event(),
	      "onActiveCellPositionChanged": new Slick.Event(),
	      "onDragInit": new Slick.Event(),
	      "onDragStart": new Slick.Event(),
	      "onDrag": new Slick.Event(),
	      "onDragEnd": new Slick.Event(),
	      "onSelectedRowsChanged": new Slick.Event(),
	      "onCellCssStylesChanged": new Slick.Event(),

	      // Methods
	      "registerPlugin": registerPlugin,
	      "unregisterPlugin": unregisterPlugin,
	      "getColumns": getColumns,
	      "setColumns": setColumns,
	      "getColumnIndex": getColumnIndex,
	      "updateColumnHeader": updateColumnHeader,
	      "setSortColumn": setSortColumn,
	      "setSortColumns": setSortColumns,
	      "getSortColumns": getSortColumns,
	      "autosizeColumns": autosizeColumns,
	      "getOptions": getOptions,
	      "setOptions": setOptions,
	      "getData": getData,
	      "getDataLength": getDataLength,
	      "getDataItem": getDataItem,
	      "setData": setData,
	      "getSelectionModel": getSelectionModel,
	      "setSelectionModel": setSelectionModel,
	      "getSelectedRows": getSelectedRows,
	      "setSelectedRows": setSelectedRows,
	      "getContainerNode": getContainerNode,

	      "render": render,
	      "invalidate": invalidate,
	      "invalidateRow": invalidateRow,
	      "invalidateRows": invalidateRows,
	      "invalidateAllRows": invalidateAllRows,
	      "updateCell": updateCell,
	      "updateRow": updateRow,
	      "getViewport": getVisibleRange,
	      "getRenderedRange": getRenderedRange,
	      "resizeCanvas": resizeCanvas,
	      "updateRowCount": updateRowCount,
	      "scrollRowIntoView": scrollRowIntoView,
	      "scrollRowToTop": scrollRowToTop,
	      "scrollCellIntoView": scrollCellIntoView,
	      "getCanvasNode": getCanvasNode,
	      "focus": setFocus,

	      "getCellFromPoint": getCellFromPoint,
	      "getCellFromEvent": getCellFromEvent,
	      "getActiveCell": getActiveCell,
	      "setActiveCell": setActiveCell,
	      "getActiveCellNode": getActiveCellNode,
	      "getActiveCellPosition": getActiveCellPosition,
	      "resetActiveCell": resetActiveCell,
	      "editActiveCell": makeActiveCellEditable,
	      "getCellEditor": getCellEditor,
	      "getCellNode": getCellNode,
	      "getCellNodeBox": getCellNodeBox,
	      "canCellBeSelected": canCellBeSelected,
	      "canCellBeActive": canCellBeActive,
	      "navigatePrev": navigatePrev,
	      "navigateNext": navigateNext,
	      "navigateUp": navigateUp,
	      "navigateDown": navigateDown,
	      "navigateLeft": navigateLeft,
	      "navigateRight": navigateRight,
	      "gotoCell": gotoCell,
	      "getTopPanel": getTopPanel,
	      "setTopPanelVisibility": setTopPanelVisibility,
	      "setHeaderRowVisibility": setHeaderRowVisibility,
	      "getHeaderRow": getHeaderRow,
	      "getHeaderRowColumn": getHeaderRowColumn,
	      "getGridPosition": getGridPosition,
	      "flashCell": flashCell,
	      "addCellCssStyles": addCellCssStyles,
	      "setCellCssStyles": setCellCssStyles,
	      "removeCellCssStyles": removeCellCssStyles,
	      "getCellCssStyles": getCellCssStyles,

	      "init": finishInitialization,
	      "destroy": destroy,

	      // IEditor implementation
	      "getEditorLock": getEditorLock,
	      "getEditController": getEditController
	    });

	    init();
	  }
	}(jQuery));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($) {
	  $.extend(true, window, {
	    Slick: {
	      Data: {
	        GroupItemMetadataProvider: GroupItemMetadataProvider
	      }
	    }
	  });


	  /***
	   * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.
	   * This metadata overrides the default behavior and formatting of those rows so that they appear and function
	   * correctly when processed by the grid.
	   *
	   * This class also acts as a grid plugin providing event handlers to expand & collapse groups.
	   * If "grid.registerPlugin(...)" is not called, expand & collapse will not work.
	   *
	   * @class GroupItemMetadataProvider
	   * @module Data
	   * @namespace Slick.Data
	   * @constructor
	   * @param options
	   */
	  function GroupItemMetadataProvider(options) {
	    var _grid;
	    var _defaults = {
	      groupCssClass: "slick-group",
	      groupTitleCssClass: "slick-group-title",
	      totalsCssClass: "slick-group-totals",
	      groupFocusable: true,
	      totalsFocusable: false,
	      toggleCssClass: "slick-group-toggle",
	      toggleExpandedCssClass: "expanded",
	      toggleCollapsedCssClass: "collapsed",
	      enableExpandCollapse: true
	    };

	    options = $.extend(true, {}, _defaults, options);


	    function defaultGroupCellFormatter(row, cell, value, columnDef, item) {
	      if (!options.enableExpandCollapse) {
	        return item.title;
	      }

	      var indentation = item.level * 15 + "px";

	      return "<span class='" + options.toggleCssClass + " " +
	          (item.collapsed ? options.toggleCollapsedCssClass : options.toggleExpandedCssClass) +
	          "' style='margin-left:" + indentation +"'>" +
	          "</span>" +
	          "<span class='" + options.groupTitleCssClass + "' level='" + item.level + "'>" +
	            item.title +
	          "</span>";
	    }

	    function defaultTotalsCellFormatter(row, cell, value, columnDef, item) {
	      return (columnDef.groupTotalsFormatter && columnDef.groupTotalsFormatter(item, columnDef)) || "";
	    }


	    function init(grid) {
	      _grid = grid;
	      _grid.onClick.subscribe(handleGridClick);
	      _grid.onKeyDown.subscribe(handleGridKeyDown);

	    }

	    function destroy() {
	      if (_grid) {
	        _grid.onClick.unsubscribe(handleGridClick);
	        _grid.onKeyDown.unsubscribe(handleGridKeyDown);
	      }
	    }

	    function handleGridClick(e, args) {
	      var item = this.getDataItem(args.row);
	      if (item && item instanceof Slick.Group && $(e.target).hasClass(options.toggleCssClass)) {
	        if (item.collapsed) {
	          this.getData().expandGroup(item.groupingKey);
	        } else {
	          this.getData().collapseGroup(item.groupingKey);
	        }

	        e.stopImmediatePropagation();
	        e.preventDefault();
	      }
	    }

	    // TODO:  add -/+ handling
	    function handleGridKeyDown(e, args) {
	      if (options.enableExpandCollapse && (e.which == $.ui.keyCode.SPACE)) {
	        var activeCell = this.getActiveCell();
	        if (activeCell) {
	          var item = this.getDataItem(activeCell.row);
	          if (item && item instanceof Slick.Group) {
	            if (item.collapsed) {
	              this.getData().expandGroup(item.groupingKey);
	            } else {
	              this.getData().collapseGroup(item.groupingKey);
	            }

	            e.stopImmediatePropagation();
	            e.preventDefault();
	          }
	        }
	      }
	    }

	    function getGroupRowMetadata(item) {
	      return {
	        selectable: false,
	        focusable: options.groupFocusable,
	        cssClasses: options.groupCssClass,
	        columns: {
	          0: {
	            colspan: "*",
	            formatter: defaultGroupCellFormatter,
	            editor: null
	          }
	        }
	      };
	    }

	    function getTotalsRowMetadata(item) {
	      return {
	        selectable: false,
	        focusable: options.totalsFocusable,
	        cssClasses: options.totalsCssClass,
	        formatter: defaultTotalsCellFormatter,
	        editor: null
	      };
	    }


	    return {
	      "init": init,
	      "destroy": destroy,
	      "getGroupRowMetadata": getGroupRowMetadata,
	      "getTotalsRowMetadata": getTotalsRowMetadata
	    };
	  }
	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($) {
	  // register namespace
	  $.extend(true, window, {
	    "Slick": {
	      "RowSelectionModel": RowSelectionModel
	    }
	  });

	  function RowSelectionModel(options) {
	    var _grid;
	    var _ranges = [];
	    var _self = this;
	    var _handler = new Slick.EventHandler();
	    var _inHandler;
	    var _options;
	    var _defaults = {
	      selectActiveRow: true
	    };

	    function init(grid) {
	      _options = $.extend(true, {}, _defaults, options);
	      _grid = grid;
	      _handler.subscribe(_grid.onActiveCellChanged,
	          wrapHandler(handleActiveCellChange));
	      _handler.subscribe(_grid.onKeyDown,
	          wrapHandler(handleKeyDown));
	      _handler.subscribe(_grid.onClick,
	          wrapHandler(handleClick));
	    }

	    function destroy() {
	      _handler.unsubscribeAll();
	    }

	    function wrapHandler(handler) {
	      return function () {
	        if (!_inHandler) {
	          _inHandler = true;
	          handler.apply(this, arguments);
	          _inHandler = false;
	        }
	      };
	    }

	    function rangesToRows(ranges) {
	      var rows = [];
	      for (var i = 0; i < ranges.length; i++) {
	        for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {
	          rows.push(j);
	        }
	      }
	      return rows;
	    }

	    function rowsToRanges(rows) {
	      var ranges = [];
	      var lastCell = _grid.getColumns().length - 1;
	      for (var i = 0; i < rows.length; i++) {
	        ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));
	      }
	      return ranges;
	    }

	    function getRowsRange(from, to) {
	      var i, rows = [];
	      for (i = from; i <= to; i++) {
	        rows.push(i);
	      }
	      for (i = to; i < from; i++) {
	        rows.push(i);
	      }
	      return rows;
	    }

	    function getSelectedRows() {
	      return rangesToRows(_ranges);
	    }

	    function setSelectedRows(rows) {
	      setSelectedRanges(rowsToRanges(rows));
	    }

	    function setSelectedRanges(ranges) {
	      _ranges = ranges;
	      _self.onSelectedRangesChanged.notify(_ranges);
	    }

	    function getSelectedRanges() {
	      return _ranges;
	    }

	    function handleActiveCellChange(e, data) {
	      if (_options.selectActiveRow && data.row != null) {
	        setSelectedRanges([new Slick.Range(data.row, 0, data.row, _grid.getColumns().length - 1)]);
	      }
	    }

	    function handleKeyDown(e) {
	      var activeRow = _grid.getActiveCell();
	      if (activeRow && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey && (e.which == 38 || e.which == 40)) {
	        var selectedRows = getSelectedRows();
	        selectedRows.sort(function (x, y) {
	          return x - y
	        });

	        if (!selectedRows.length) {
	          selectedRows = [activeRow.row];
	        }

	        var top = selectedRows[0];
	        var bottom = selectedRows[selectedRows.length - 1];
	        var active;

	        if (e.which == 40) {
	          active = activeRow.row < bottom || top == bottom ? ++bottom : ++top;
	        } else {
	          active = activeRow.row < bottom ? --bottom : --top;
	        }

	        if (active >= 0 && active < _grid.getDataLength()) {
	          _grid.scrollRowIntoView(active);
	          _ranges = rowsToRanges(getRowsRange(top, bottom));
	          setSelectedRanges(_ranges);
	        }

	        e.preventDefault();
	        e.stopPropagation();
	      }
	    }

	    function handleClick(e) {
	      var cell = _grid.getCellFromEvent(e);
	      if (!cell || !_grid.canCellBeActive(cell.row, cell.cell)) {
	        return false;
	      }

	      var selection = rangesToRows(_ranges);
	      var idx = $.inArray(cell.row, selection);

	      if (!e.ctrlKey && !e.shiftKey && !e.metaKey) {
	        return false;
	      }
	      else if (_grid.getOptions().multiSelect) {
	        if (idx === -1 && (e.ctrlKey || e.metaKey)) {
	          selection.push(cell.row);
	          _grid.setActiveCell(cell.row, cell.cell);
	        } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {
	          selection = $.grep(selection, function (o, i) {
	            return (o !== cell.row);
	          });
	          _grid.setActiveCell(cell.row, cell.cell);
	        } else if (selection.length && e.shiftKey) {
	          var last = selection.pop();
	          var from = Math.min(cell.row, last);
	          var to = Math.max(cell.row, last);
	          selection = [];
	          for (var i = from; i <= to; i++) {
	            if (i !== last) {
	              selection.push(i);
	            }
	          }
	          selection.push(last);
	          _grid.setActiveCell(cell.row, cell.cell);
	        }
	      }

	      _ranges = rowsToRanges(selection);
	      setSelectedRanges(_ranges);
	      e.stopImmediatePropagation();

	      return true;
	    }

	    $.extend(this, {
	      "getSelectedRows": getSelectedRows,
	      "setSelectedRows": setSelectedRows,

	      "getSelectedRanges": getSelectedRanges,
	      "setSelectedRanges": setSelectedRanges,

	      "init": init,
	      "destroy": destroy,

	      "onSelectedRangesChanged": new Slick.Event()
	    });
	  }
	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(process, _, global) {!function(){var t;Function&&Function.prototype&&Function.prototype.bind&&(/MSIE [678]/.test(navigator.userAgent)||!function e(t,n,i){function r(s,a){if(!n[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return require(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[s]={exports:{}};t[s][0].call(l.exports,function(e){var n=t[s][1][e];return r(n?n:e)},l,l.exports,e,t,n,i)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(e,n,i){(function(){"use strict";function e(t){return"function"==typeof t||"object"==typeof t&&null!==t}function i(t){return"function"==typeof t}function r(t){return"object"==typeof t&&null!==t}function o(){}function s(){return function(){process.nextTick(l)}}function a(){var t=0,e=new U(l),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function c(){var t=new MessageChannel;return t.port1.onmessage=l,function(){t.port2.postMessage(0)}}function u(){return function(){setTimeout(l,1)}}function l(){for(var t=0;M>t;t+=2){var e=q[t],n=q[t+1];e(n),q[t]=void 0,q[t+1]=void 0}M=0}function d(){}function h(){return new TypeError("You cannot resolve a promise with itself")}function f(){return new TypeError("A promises callback cannot return that same promise.")}function p(t){try{return t.then}catch(e){return V.error=e,V}}function m(t,e,n,i){try{t.call(e,n,i)}catch(r){return r}}function g(t,e,n){W(function(t){var i=!1,r=m(n,e,function(n){i||(i=!0,e!==n?w(t,n):_(t,n))},function(e){i||(i=!0,E(t,e))},"Settle: "+(t._label||" unknown promise"));!i&&r&&(i=!0,E(t,r))},t)}function v(t,e){e._state===z?_(t,e._result):t._state===B?E(t,e._result):A(e,void 0,function(e){w(t,e)},function(e){E(t,e)})}function y(t,e){if(e.constructor===t.constructor)v(t,e);else{var n=p(e);n===V?E(t,V.error):void 0===n?_(t,e):i(n)?g(t,e,n):_(t,e)}}function w(t,n){t===n?E(t,h()):e(n)?y(t,n):_(t,n)}function b(t){t._onerror&&t._onerror(t._result),T(t)}function _(t,e){t._state===F&&(t._result=e,t._state=z,0===t._subscribers.length||W(T,t))}function E(t,e){t._state===F&&(t._state=B,t._result=e,W(b,t))}function A(t,e,n,i){var r=t._subscribers,o=r.length;t._onerror=null,r[o]=e,r[o+z]=n,r[o+B]=i,0===o&&t._state&&W(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var i,r,o=t._result,s=0;s<e.length;s+=3)i=e[s],r=e[s+n],i?S(n,i,r,o):r(o);t._subscribers.length=0}}function x(){this.error=null}function I(t,e){try{return t(e)}catch(n){return G.error=n,G}}function S(t,e,n,r){var o,s,a,c,u=i(n);if(u){if(o=I(n,r),o===G?(c=!0,s=o.error,o=null):a=!0,e===o)return void E(e,f())}else o=r,a=!0;e._state!==F||(u&&a?w(e,o):c?E(e,s):t===z?_(e,o):t===B&&E(e,o))}function D(t,e){try{e(function(e){w(t,e)},function(e){E(t,e)})}catch(n){E(t,n)}}function N(t,e,n,i){this._instanceConstructor=t,this.promise=new t(d,i),this._abortOnReject=n,this._validateInput(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._init(),0===this.length?_(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&_(this.promise,this._result))):E(this.promise,this._validationError())}function C(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function P(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function R(t){this._id=X++,this._state=void 0,this._result=void 0,this._subscribers=[],d!==t&&(i(t)||C(),this instanceof R||P(),D(this,t))}var L;L=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var k,O=L,M=(Date.now||function(){return(new Date).getTime()},Object.create||function(t){if(arguments.length>1)throw new Error("Second argument not supported");if("object"!=typeof t)throw new TypeError("Argument must be an object");return o.prototype=t,new o},0),W=function(t,e){q[M]=t,q[M+1]=e,M+=2,2===M&&k()},H="undefined"!=typeof window?window:{},U=H.MutationObserver||H.WebKitMutationObserver,j="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,q=new Array(1e3);k="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?s():U?a():j?c():u();var F=void 0,z=1,B=2,V=new x,G=new x;N.prototype._validateInput=function(t){return O(t)},N.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},N.prototype._init=function(){this._result=new Array(this.length)};var $=N;N.prototype._enumerate=function(){for(var t=this.length,e=this.promise,n=this._input,i=0;e._state===F&&t>i;i++)this._eachEntry(n[i],i)},N.prototype._eachEntry=function(t,e){var n=this._instanceConstructor;r(t)?t.constructor===n&&t._state!==F?(t._onerror=null,this._settledAt(t._state,e,t._result)):this._willSettleAt(n.resolve(t),e):(this._remaining--,this._result[e]=this._makeResult(z,e,t))},N.prototype._settledAt=function(t,e,n){var i=this.promise;i._state===F&&(this._remaining--,this._abortOnReject&&t===B?E(i,n):this._result[e]=this._makeResult(t,e,n)),0===this._remaining&&_(i,this._result)},N.prototype._makeResult=function(t,e,n){return n},N.prototype._willSettleAt=function(t,e){var n=this;A(t,void 0,function(t){n._settledAt(z,e,t)},function(t){n._settledAt(B,e,t)})};var J=function(t,e){return new $(this,t,!0,e).promise},K=function(t,e){function n(t){w(o,t)}function i(t){E(o,t)}var r=this,o=new r(d,e);if(!O(t))return E(o,new TypeError("You must pass an array to race.")),o;for(var s=t.length,a=0;o._state===F&&s>a;a++)A(r.resolve(t[a]),void 0,n,i);return o},Y=function(t,e){var n=this;if(t&&"object"==typeof t&&t.constructor===n)return t;var i=new n(d,e);return w(i,t),i},Q=function(t,e){var n=this,i=new n(d,e);return E(i,t),i},X=0,Z=R;R.all=J,R.race=K,R.resolve=Y,R.reject=Q,R.prototype={constructor:R,then:function(t,e){var n=this,i=n._state;if(i===z&&!t||i===B&&!e)return this;var r=new this.constructor(d),o=n._result;if(i){var s=arguments[i-1];W(function(){S(i,r,s,o)})}else A(n,r,t,e);return r},"catch":function(t){return this.then(null,t)}};var tt=function(){var t;t="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var e="Promise"in t&&"resolve"in t.Promise&&"reject"in t.Promise&&"all"in t.Promise&&"race"in t.Promise&&function(){var e;return new t.Promise(function(t){e=t}),i(e)}();e||(t.Promise=Z)},et={Promise:Z,polyfill:tt};"function"==typeof t&&t.amd?t(function(){return et}):"undefined"!=typeof n&&n.exports?n.exports=et:"undefined"!=typeof this&&(this.ES6Promise=et)}).call(this)},{}],2:[function(t,e,n){function i(t,e){var n;return e=e||s,(n=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.msRequestAnimationFrame||e.oRequestAnimationFrame||function(){e.setTimeout(function(){t(+new Date)},1e3/60)})(t)}function r(t,e){return Math.sin(Math.PI/2*e)*t}function o(t,e,n,r,o){function s(){var c=+new Date,u=c-a,l=Math.min(u/n,1),d=r?r(e,l):e*l,h=1==l;t(d,h),h||i(s,o)}var a=+new Date;i(s)}var s=t(16);e.exports={animate:o,requestAnimationFrame:i,easeOut:r}},{16:16}],3:[function(t,e,n){function i(){return a.builtUrl(u)}function r(t){return"dark"===t?"dark":"light"}function o(t,e,n){var i,o;return n=r(n),i=s.isRtlLang(e)?"rtl":"ltr",o=[t,c.css,n,i,"css"].join("."),a.base()+"/css/"+o}var s=t(23),a=t(44),c=t(83),u="embed/timeline.css";e.exports={tweet:o.bind(null,"tweet"),timeline:i,video:o.bind(null,"video")}},{23:23,44:44,83:83}],4:[function(t,e,n){function i(t){return{success:!0,resp:t}}e.exports=i},{}],5:[function(t,e,n){function i(){return l+d++}function r(t,e,n,r){var l,d,h;return r=r||i(),l=s.fullPath(["callbacks",r]),d=o.createElement("script"),h=new a,e=c.aug({},e,{callback:l,suppress_response_codes:!0}),s.set(["callbacks",r],function(t){var e,i;e=n(t||!1),t=e.resp,i=e.success,i?h.resolve(t):h.reject(t),d.onload=d.onreadystatechange=null,d.parentNode&&d.parentNode.removeChild(d),s.unset(["callbacks",r])}),d.onerror=function(){h.reject(new Error("failed to fetch "+d.src))},d.src=u.url(t,e),d.async="async",o.body.appendChild(d),h.promise}var o=t(13),s=t(20),a=t(71),c=t(80),u=t(74),l="cb",d=0;e.exports={fetch:r}},{13:13,20:20,71:71,74:74,80:80}],6:[function(t,e,n){function i(t){var e,n;return e=t.headers&&t.headers.status,n=t&&!t.error&&200===e,!n&&t.headers&&t.headers.message&&r.warn(t.headers.message),{success:n,resp:t}}var r=t(68);e.exports=i},{68:68}],7:[function(t,e,n){function i(t){return 10>t?"0"+t:t}function r(t){function e(t,e){return n&&n[t]&&(t=n[t]),t.replace(/%\{([\w_]+)\}/g,function(t,n){return void 0!==e[n]?e[n]:t})}var n=t&&t.phrases,o=t&&t.months||c,s=t&&t.formats||u;this.timeAgo=function(t){var n,i=r.parseDate(t),a=+new Date,c=a-i;return i?isNaN(c)||2*l>c?e("now"):d>c?(n=Math.floor(c/l),e(s.abbr,{number:n,symbol:e(p,{abbr:e("s"),expanded:e(n>1?"seconds":"second")})})):h>c?(n=Math.floor(c/d),e(s.abbr,{number:n,symbol:e(p,{abbr:e("m"),expanded:e(n>1?"minutes":"minute")})})):f>c?(n=Math.floor(c/h),e(s.abbr,{number:n,symbol:e(p,{abbr:e("h"),expanded:e(n>1?"hours":"hour")})})):365*f>c?e(s.shortdate,{day:i.getDate(),month:e(o[i.getMonth()])}):e(s.longdate,{day:i.getDate(),month:e(o[i.getMonth()]),year:i.getFullYear().toString().slice(2)}):""},this.localTimeStamp=function(t){var n=r.parseDate(t),a=n&&n.getHours();return n?e(s.full,{day:n.getDate(),month:e(o[n.getMonth()]),year:n.getFullYear(),hours24:i(a),hours12:13>a?a?a:"12":a-12,minutes:i(n.getMinutes()),seconds:i(n.getSeconds()),amPm:e(12>a?"AM":"PM")}):""}}var o=/(\d{4})-?(\d{2})-?(\d{2})T(\d{2}):?(\d{2}):?(\d{2})(Z|[\+\-]\d{2}:?\d{2})/,s=/[a-z]{3,4} ([a-z]{3}) (\d{1,2}) (\d{1,2}):(\d{2}):(\d{2}) ([\+\-]\d{2}:?\d{2}) (\d{4})/i,a=/^\d+$/,c=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],u={abbr:"%{number}%{symbol}",shortdate:"%{day} %{month}",longdate:"%{day} %{month} %{year}",full:"%{hours12}:%{minutes} %{amPm} - %{day} %{month} %{year}"},l=1e3,d=60*l,h=60*d,f=24*h,p='<abbr title="%{expanded}">%{abbr}</abbr>';r.parseDate=function(t){var e,n,i=t||"",r=i.toString();return(e=function(){var t;return a.test(r)?parseInt(r,10):(t=r.match(s))?Date.UTC(t[7],c.indexOf(t[1]),t[2],t[3],t[4],t[5]):(t=r.match(o))?Date.UTC(t[1],t[2]-1,t[3],t[4],t[5],t[6]):void 0}())?(n=new Date(e),!isNaN(n.getTime())&&n):!1},e.exports=r},{}],8:[function(t,e,n){function i(t){return new RegExp("\\b"+t+"\\b","g")}function r(t,e){return t.classList?void t.classList.add(e):void(i(e).test(t.className)||(t.className+=" "+e))}function o(t,e){return t.classList?void t.classList.remove(e):void(t.className=t.className.replace(i(e)," "))}function s(t,e,n){return void 0===n&&t.classList&&t.classList.toggle?t.classList.toggle(e,n):(n?r(t,e):o(t,e),n)}function a(t,e,n){return t.classList&&c(t,e)?(o(t,e),void r(t,n)):void(t.className=t.className.replace(i(e),n))}function c(t,e){return t.classList?t.classList.contains(e):i(e).test(t.className)}e.exports={add:r,remove:o,replace:a,toggle:s,present:c}},{}],9:[function(t,e,n){function i(t){var e=t.getAttribute("data-twitter-event-id");return e?e:(t.setAttribute("data-twitter-event-id",++m),m)}function r(t,e,n){var i=0,r=t&&t.length||0;for(i=0;r>i;i++)t[i].call(e,n,e)}function o(t,e,n){for(var i=n||t.target||t.srcElement,s=i.className.split(" "),a=0,c=s.length;c>a;a++)r(e["."+s[a]],i,t);r(e[i.tagName],i,t),t.cease||i!==this&&o.call(this,t,e,i.parentElement||i.parentNode)}function s(t,e,n,i){function r(i){o.call(t,i,n[e])}a(t,r,e,i),t.addEventListener(e,r,!1)}function a(t,e,n,i){t.id&&(g[t.id]=g[t.id]||[],g[t.id].push({el:t,listener:e,type:n,rootId:i}))}function c(t){var e=g[t];e&&(e.forEach(function(t){t.el.removeEventListener(t.type,t.listener,!1),delete p[t.rootId]}),delete g[t])}function u(t,e,n,r){var o=i(t);p[o]=p[o]||{},p[o][e]||(p[o][e]={},s(t,e,p[o],o)),p[o][e][n]=p[o][e][n]||[],p[o][e][n].push(r)}function l(t,e,n){var r=i(e),s=p[r]&&p[r];o.call(e,{target:n},s[t])}function d(t){return f(t),h(t),!1}function h(t){t&&t.preventDefault?t.preventDefault():t.returnValue=!1}function f(t){t&&(t.cease=!0)&&t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}var p={},m=-1,g={};e.exports={stop:d,stopPropagation:f,preventDefault:h,delegate:u,simulate:l,removeDelegatesForWidget:c}},{}],10:[function(t,e,n){function i(t){var e=t.charAt(0);return"."===e?function(e){var n=e.className?e.className.split(/\s+/):[];return o.contains(n,t.slice(1))}:"#"===e?function(e){return e.id===t.slice(1)}:function(e){return e.tagName===t.toUpperCase()}}function r(t,e,n){var s;if(e)return n=n||e&&e.ownerDocument,s=o.isType("function",t)?t:i(t),e===n?s(e)?e:void 0:s(e)?e:r(s,e.parentNode,n)}var o=t(80);e.exports={closest:r}},{80:80}],11:[function(t,e,n){function i(t){return t=t||o,t.getSelection&&t.getSelection()}function r(t){var e=i(t);return e?e.toString():""}var o=t(16);e.exports={getSelection:i,getSelectedText:r}},{16:16}],12:[function(t,e,n){function i(t){return t&&1===t.nodeType?t.offsetWidth||i(t.parentNode):0}e.exports={effectiveWidth:i}},{}],13:[function(t,e,n){e.exports=document},{}],14:[function(t,e,n){e.exports=location},{}],15:[function(t,e,n){e.exports=navigator},{}],16:[function(t,e,n){e.exports=window},{}],17:[function(t,e,n){function i(t,e,n){e.ready=t.then.bind(t),n&&Array.isArray(e[n])&&(e[n].forEach(t.then.bind(t)),delete e[n])}e.exports={exposeReadyPromise:i}},{}],18:[function(t,e,n){function i(t){return a.isType("string",t)?t.split("."):a.isType("array",t)?t:[]}function r(t,e){var n=i(e),r=n.slice(0,-1);return r.reduce(function(t,e,n){if(t[e]=t[e]||{},!a.isObject(t[e]))throw new Error(r.slice(0,n+1).join(".")+" is already defined with a value.");return t[e]},t)}function o(t,e){e=e||s,e[t]=e[t]||{},Object.defineProperty(this,"base",{value:e[t]}),Object.defineProperty(this,"name",{value:t})}var s=t(16),a=t(80);a.aug(o.prototype,{get:function(t){var e=i(t);return e.reduce(function(t,e){return a.isObject(t)?t[e]:void 0},this.base)},set:function(t,e,n){var o=i(t),s=r(this.base,t),a=o.slice(-1);return n&&a in s?s[a]:s[a]=e},init:function(t,e){return this.set(t,e,!0)},unset:function(t){var e=i(t),n=this.get(e.slice(0,-1));n&&delete n[e.slice(-1)]},aug:function(t){var e=this.get(t),n=a.toRealArray(arguments).slice(1);if(e="undefined"!=typeof e?e:{},n.unshift(e),!n.every(a.isObject))throw new Error("Cannot augment non-object.");return this.set(t,a.aug.apply(null,n))},call:function(t){var e=this.get(t),n=a.toRealArray(arguments).slice(1);if(!a.isType("function",e))throw new Error("Function "+t+"does not exist.");return e.apply(null,n)},fullPath:function(t){var e=i(t);return e.unshift(this.name),e.join(".")}}),e.exports=o},{16:16,80:80}],19:[function(t,e,n){function i(t){var e,n,i,r=0;for(o={},t=t||s,e=t.getElementsByTagName("meta");n=e[r];r++)/^twitter:/.test(n.name)&&(i=n.name.replace(/^twitter:/,""),o[i]=n.content)}function r(t){return o[t]}var o,s=t(13);i(),e.exports={init:i,val:r}},{13:13}],20:[function(t,e,n){var i=t(18);e.exports=new i("__twttr")},{18:18}],21:[function(t,e,n){var i=t(18);e.exports=new i("twttr")},{18:18}],22:[function(t,e,n){e.exports=["hi","zh-cn","fr","zh-tw","msa","fil","fi","sv","pl","ja","ko","de","it","pt","es","ru","id","tr","da","no","nl","hu","fa","ar","ur","he","th","cs","uk","vi","ro","bn"]},{}],23:[function(t,e,n){function i(t){return t=String(t).toLowerCase(),r.contains(o,t)}var r=t(80),o=["ar","fa","he","ur"];e.exports={isRtlLang:i}},{80:80}],24:[function(t,e,n){function i(t){var e=~s.host.indexOf("poptip.com")?"https://poptip.com":s.href,n="original_referer="+e;return[t,n].join(-1==t.indexOf("?")?"?":"&")}function r(t){var e,n;t.altKey||t.metaKey||t.shiftKey||(e=c.closest(function(t){return"A"===t.tagName||"AREA"===t.tagName},t.target),e&&l.isIntentURL(e.href)&&(n=i(e.href),n=n.replace(/^http[:]/,"https:"),n=n.replace(/^\/\//,"https://"),u.open(n,e),a.preventDefault(t)))}function o(t){t.addEventListener("click",r,!1)}var s=t(14),a=t(9),c=t(10),u=t(53),l=t(76);e.exports={attachTo:o}},{10:10,14:14,53:53,76:76,9:9}],25:[function(t,e,n){function i(t){var e=[];return h.forIn(t,function(t,n){e.push(t+"="+n)}),e.join(",")}function r(){return f+d.generate()}function o(t,e){function n(t){return Math.round(t/2)}return t>e?{coordinate:0,size:e}:{coordinate:n(e)-n(t),size:t}}function s(t,e,n){var r,s;e=a.parse(e),n=n||{},r=o(e.width,n.width||p),e.left=r.coordinate,e.width=r.size,s=o(e.height,n.height||m),e.top=s.coordinate,e.height=s.size,this.win=t,this.features=i(e)}var a,c=t(16),u=t(69),l=t(76),d=t(78),h=t(80),f="intent_",p=c.screen.width,m=c.screen.height;a=(new u).defaults({width:550,height:520,personalbar:"0",toolbar:"0",location:"1",scrollbars:"1",resizable:"1"}),s.prototype.open=function(t){return l.isTwitterURL(t)?(this.name=r(),this.popup=this.win.open(t,this.name,this.features),this):void 0},s.open=function(t,e){var n=new s(c,e);return n.open(t)},e.exports=s},{16:16,69:69,76:76,78:78,80:80}],26:[function(t,e,n){function i(t){u[t]=+new Date}function r(t){return u[t]?+new Date-u[t]:null}function o(t,e,n,i,o){var a=r(e);a&&s(t,n,i,a,o)}function s(t,e,n,i,r){var o,s=void 0===r?l:r;100*Math.random()>s||(n=c.aug(n||{},{duration_ms:i}),o={page:e,component:"performance",action:t},a.clientEvent(o,n,!0))}var a=t(39),c=t(80),u={},l=1;e.exports={start:i,end:r,track:s,endAndTrack:o}},{39:39,80:80}],27:[function(t,e,n){function i(t){if(!t)throw new Error("JsonRpcClient requires a dispatcher");this.idIterator=0,this.dispatcher=t,this.idPrefix=String(+new Date)+a++}function r(t){var e={jsonrpc:s,method:t};return arguments.length>1&&(e.params=[].slice.call(arguments,1)),e}var o=t(72),s="2.0",a=0;i.prototype._generateId=function(){return this.idPrefix+this.idIterator++},i.prototype.notify=function(){this.dispatcher.send(r.apply(null,arguments))},i.prototype.request=function(){var t=r.apply(null,arguments);return t.id=this._generateId(),this.dispatcher.send(t).then(function(t){return"result"in t?t.result:o.reject(t.error)})},e.exports=i},{72:72}],28:[function(t,e,n){e.exports={PARSE_ERROR:{code:-32700,message:"Parse error"},INVALID_REQUEST:{code:-32600,message:"Invalid Request"},INVALID_PARAMS:{code:-32602,message:"Invalid params"},METHOD_NOT_FOUND:{code:-32601,message:"Method not found"},INTERNAL_ERROR:{code:-32603,message:"Internal error"}}},{}],29:[function(t,e,n){function i(t){this.registry=t||{}}function r(t){return h.isType("string",t)?JSON.parse(t):t}function o(t){var e,n,i;return h.isObject(t)?(e=t.jsonrpc===m,n=h.isType("string",t.method),i=!("id"in t)||s(t.id),e&&n&&i):!1}function s(t){var e,n,i;return e=h.isType("string",t),n=h.isType("number",t),i=null===t,e||n||i}function a(t){return h.isObject(t)&&!h.isType("function",t)}function c(t,e){return{jsonrpc:m,id:t,result:e}}function u(t,e){return{jsonrpc:m,id:s(t)?t:null,error:e}}function l(t){return f.all(t).then(function(t){return t=t.filter(function(t){return void 0!==t}),t.length?t:void 0})}var d=t(28),h=t(80),f=t(72),p=t(73),m="2.0";i.prototype._invoke=function(t,e){var n,i,r;n=this.registry[t.method],i=t.params||[],i=h.isType("array",i)?i:[i];try{r=n.apply(e.source||null,i)}catch(o){r=f.reject(o.message)}return p.isPromise(r)?r:f.resolve(r)},i.prototype._processRequest=function(t,e){function n(e){return c(t.id,e)}function i(){return u(t.id,d.INTERNAL_ERROR)}var r;return o(t)?(r="params"in t&&!a(t.params)?f.resolve(u(t.id,d.INVALID_PARAMS)):this.registry[t.method]?this._invoke(t,{source:e}).then(n,i):f.resolve(u(t.id,d.METHOD_NOT_FOUND)),null!=t.id?r:f.resolve()):f.resolve(u(t.id,d.INVALID_REQUEST))},i.prototype.attachReceiver=function(t){return t.attachTo(this),this},i.prototype.bind=function(t,e){return this.registry[t]=e,this},i.prototype.receive=function(t,e){var n,i,o,s=this;try{t=r(t)}catch(a){return f.resolve(u(null,d.PARSE_ERROR))}return e=e||null,n=h.isType("array",t),i=n?t:[t],o=i.map(function(t){return s._processRequest(t,e)}),n?l(o):o[0]},e.exports=i},{28:28,72:72,73:73,80:80}],30:[function(t,e,n){function i(t,e,n){var i;t&&t.postMessage&&(m?i=(n||"")+JSON.stringify(e):n?(i={},i[n]=e):i=e,t.postMessage(i,"*"))}function r(t){return f.isType("string",t)?t:"JSONRPC"}function o(t,e){return e?f.isType("string",t)&&0===t.indexOf(e)?t.substring(e.length):t[e]?t[e]:void 0:t}function s(t,e){var n=t.document;this.filter=r(e),this.server=null,this.isTwitterFrame=p.isTwitterURL(n.location.href),t.addEventListener("message",this._onMessage.bind(this),!1)}function a(t,e){this.pending={},this.target=t,this.isTwitterHost=p.isTwitterURL(u.href),this.filter=r(e),l.addEventListener("message",this._onMessage.bind(this),!1)}function c(t){return arguments.length>0&&(m=!!t),m}var u=t(14),l=t(16),d=t(71),h=t(63),f=t(80),p=t(76),m=h.ie9();f.aug(s.prototype,{_onMessage:function(t){var e,n=this;this.server&&(!this.isTwitterFrame||p.isTwitterURL(t.origin))&&(e=o(t.data,this.filter),e&&this.server.receive(e,t.source).then(function(e){e&&i(t.source,e,n.filter)}))},attachTo:function(t){this.server=t},detach:function(){this.server=null}}),f.aug(a.prototype,{_processResponse:function(t){var e=this.pending[t.id];e&&(e.resolve(t),delete this.pending[t.id])},_onMessage:function(t){var e;if((!this.isTwitterHost||p.isTwitterURL(t.origin))&&(e=o(t.data,this.filter))){if(f.isType("string",e))try{e=JSON.parse(e)}catch(n){return}e=f.isType("array",e)?e:[e],e.forEach(this._processResponse.bind(this))}},send:function(t){var e=new d;return t.id?this.pending[t.id]=e:e.resolve(),i(this.target,t,this.filter),e.promise}}),e.exports={Receiver:s,Dispatcher:a,_stringifyPayload:c}},{14:14,16:16,63:63,71:71,76:76,80:80}],31:[function(t,e,n){function i(t,e,n,i){var s,u=this;this.readyDeferred=new o,this.attrs=t||{},this.styles=e||{},this.appender=n||function(t){r.body.appendChild(t)},this.layout=i||function(t){return c.resolve(t())},this.frame=s=a(this.attrs,this.styles),s.onreadystatechange=s.onload=this.getCallback(this.onLoad),this.layout(function(){u.appender(s)})}var r=t(13),o=t(71),s=t(63),a=t(66),c=t(72),u=t(20),l=0;i.prototype.getCallback=function(t){var e=this,n=!1;return function(){n||(n=!0,t.call(e))}},i.prototype.registerCallback=function(t){var e="cb"+l++;return u.set(["sandbox",e],t),e},i.prototype.onLoad=function(){try{this.document=this.frame.contentWindow.document}catch(t){return void this.setDocDomain()}this.writeStandardsDoc(),this.readyDeferred.resolve(this)},i.prototype.ready=function(){return this.readyDeferred.promise},i.prototype.setDocDomain=function(){var t=this,e=a(this.attrs,this.styles),n=this.registerCallback(this.getCallback(this.onLoad));e.src=["javascript:",'document.write("");',"try { window.parent.document; }","catch (e) {",'document.domain="'+r.domain+'";',"}","window.parent."+u.fullPath(["sandbox",n])+"();"].join(""),this.layout(function(){t.frame.parentNode.removeChild(t.frame),t.frame=null,t.appender?t.appender(e):r.body.appendChild(e),t.frame=e})},i.prototype.writeStandardsDoc=function(){if(s.anyIE()&&!s.cspEnabled()){var t=["<!DOCTYPE html>","<html>","<head>","<scr","ipt>","try { window.parent.document; }",'catch (e) {document.domain="'+r.domain+'";}',"</scr","ipt>","</head>","<body></body>","</html>"].join("");this.document.write(t),this.document.close()}},e.exports=i},{13:13,20:20,63:63,66:66,71:71,72:72}],32:[function(t,e,n){function i(){var t,e;y={},s||(t=a.body.offsetHeight,e=a.body.offsetWidth,(t!=b||e!=w)&&(v.forEach(function(t){t.dispatchFrameResize(w,b)}),b=t,w=e))}function r(t){var e;return t.id?t.id:(e=t.getAttribute("data-twttr-id"))?e:(e="twttr-sandbox-"+g++,t.setAttribute("data-twttr-id",e),e)}function o(t,e){var n=this;l.apply(this,[t,e]),this._resizeHandlers=[],v=v.filter(function(t){var e=t._frame.parentElement;return e||f.async(function(){p.removeDelegatesForWidget(t._frame.id)}),e}),v.push(this),this._win.addEventListener("resize",function(){n.dispatchFrameResize()},!1)}var s,a=t(13),c=t(16),u=t(31),l=t(33),d=t(63),h=t(72),f=t(80),p=t(9),m=t(8),g=0,v=[],y={},w=0,b=0;c.addEventListener("resize",i,!1),o.prototype=new l,f.aug(o.prototype,{_addStyleSheet:function(t,e,n){function i(){var t=o._head.children[0];return t?o._head.insertBefore(s,t):o._head.appendChild(s)}function r(){return o._head.appendChild(s)}var o=this,s=this._doc.createElement("link");return s.type="text/css",s.rel="stylesheet",s.href=t,n&&(s.onload=n),this.layout(e?i:r)},dispatchFrameResize:function(){var t=this._frame.parentNode,e=r(t),n=y[e];s=!0,this._resizeHandlers.length&&(n||(n=y[e]={w:this._frame.offsetWidth,h:this._frame.offsetHeight}),(this._frameWidth!=n.w||this._frameHeight!=n.h)&&(this._frameWidth=n.w,this._frameHeight=n.h,this._resizeHandlers.forEach(function(t){t(n.w,n.h)}),c.setTimeout(function(){y={}},50)))},addClass:function(t){var e=this._doc.documentElement;return this.layout(function(){m.add(e,t)})},prependStyleSheet:function(t,e){return this._addStyleSheet(t,!0,e)},appendStyleSheet:function(t,e){return this._addStyleSheet(t,!1,e)},removeStyleSheet:function(t){var e,n=this;return e='link[rel="stylesheet"][href="'+t+'"]',this.layout(function(){var t=n._doc.querySelector(e);return t&&n._head.removeChild(t)})},appendCss:function(t){var e,n=this;return d.cspEnabled()?h.reject("CSP enabled; cannot embed inline styles."):(e=this._doc.createElement("style"),e.type="text/css",e.styleSheet?e.styleSheet.cssText=t:e.appendChild(this._doc.createTextNode(t)),this.layout(function(){return n._head.appendChild(e)}))},style:function(t,e){var n=this;return this.layout(function(){e&&(n._frame.style.cssText=""),f.forIn(t,function(t,e){n._frame.style[t]=e})})},onresize:function(t){this._resizeHandlers.push(t)},width:function(t){return void 0!==t&&(this._frame.style.width=t+"px"),d.ios()?Math.min(this._frame.parentNode.offsetWidth,this._frame.offsetWidth):this._frame.offsetWidth},height:function(t){return void 0!==t&&(this._frame.height=t),this._frame.offsetHeight},contentHeight:function(){return this._doc.body.firstChild.offsetHeight},hasContent:function(){return!!this._doc.body.firstChild},resizeToContent:function(){var t=this;return this.layout(function(){return t.height(t.contentHeight())})}}),o.createSandbox=function(t,e,n,i){var r=new u(t,e,n,i);return r.ready().then(function(t){return new o(t.frame,t.layout)})},e.exports=o},{13:13,16:16,31:31,33:33,63:63,72:72,8:8,80:80,9:9}],33:[function(t,e,n){function i(t,e){t&&(this._frame=t,this._win=t.contentWindow,this._doc=this._win.document,this._body=this._doc.body,this._head=this._body.parentNode.children[0],this.layout=e,this.root=this._doc.documentElement,this.root.className="SandboxRoot")}var r=t(31),o=t(80);o.aug(i.prototype,{createElement:function(t){return this._doc.createElement(t)},createDocumentFragment:function(){return this._doc.createDocumentFragment()},appendChild:function(t){var e=this;return this.layout(function(){return e._body.appendChild(t)})},setBaseTarget:function(t){var e=this,n=this._doc.createElement("base");return n.target=t,this.layout(function(){return e._head.appendChild(n)})},setTitle:function(t){t&&(this._frame.title=t)},element:function(){return this._frame},document:function(){return this._doc}}),i.createSandbox=function(t,e,n,o){var s=new r(t,e,n,o);return s.ready().then(function(t){return new i(t.frame,t.layout)})},e.exports=i},{31:31,80:80}],34:[function(t,e,n){function i(t,e){u[t.id]=e}function r(t){l[t.id]=t}function o(t){return u[t]}function s(t){var e=l[t];return e&&e.element}function a(t){return o(t)||s(t)}function c(){l={}}var u={},l={};e.exports={add:i,addClassic:r,getSandboxElement:a,resetClassic:c}},{}],35:[function(t,e,n){function i(){return l.formatGenericEventData("syndicated_impression",{})}function r(){c("tweet")}function o(){c("timeline")}function s(){c("video")}function a(){c("partnertweet")}function c(t){d.isHostPageSensitive()||h[t]||(h[t]=!0,u.scribe(l.formatClientEventNamespace({page:t,action:"impression"}),i(),l.AUDIENCE_ENDPOINT))}var u=t(39),l=t(40),d=t(75),h={};e.exports={scribeAudienceImpression:c,scribePartnerTweetAudienceImpression:a,scribeTweetAudienceImpression:r,scribeTimelineAudienceImpression:o,scribeVideoAudienceImpression:s}},{39:39,40:40,75:75}],36:[function(t,e,n){function i(t){return t?(t=Array.isArray(t)?t:[t],t.reduce(function(t,e){var n=e.getAttribute("data-tweet-id"),i=e.getAttribute("data-rendered-tweet-id")||n;return n===i?t[i]={item_type:r.TWEET}:n&&(t[i]={item_type:r.RETWEET,target_type:r.TWEET,target_id:n}),t},{})):{}}var r=t(38);e.exports=i},{38:38}],37:[function(t,e,n){function i(){return x?I.promise:(m.createSandbox({id:"rufous-sandbox"},{display:"none"}).then(function(t){h=t,l=c(),d=u(),I.resolve([l,d])}),x=!0,I.promise)}function r(t,e){var n,i,r;w.isObject(t)&&w.isObject(e)&&(r=y.flattenClientEventPayload(t,e),n=l.firstChild,n.value=+(+n.value||r.dnt||0),i=h.createElement("input"),i.type="hidden",i.name="l",i.value=y.stringify(r),l.appendChild(i))}function o(t,e,n){var i=!w.isObject(t),o=e?!w.isObject(e):!1;i||o||I.promise.then(function(){r(y.formatClientEventNamespace(t),y.formatClientEventData(e,n))})}function s(){return I.promise.then(function(){if(l.children.length<=2)return v.reject();var t=v.all([h.appendChild(l),h.appendChild(d)]).then(function(t){var e=t[0],n=t[1];return n.addEventListener("load",function(){a(e,n)(),b.get("events").trigger("logFlushed")}),e.submit(),t});return l=c(),d=u(),t})}function a(t,e){return function(){var n=t.parentNode;n&&(n.removeChild(t),n.removeChild(e))}}function c(){var t=h.createElement("form"),e=h.createElement("input"),n=h.createElement("input");return T++,t.action=y.CLIENT_EVENT_ENDPOINT,t.method="POST",t.target=E+T,t.id=A+T,e.type="hidden",e.name="dnt",e.value=p.enabled(),n.type="hidden",n.name="tfw_redirect",n.value=y.RUFOUS_REDIRECT,t.appendChild(e),t.appendChild(n),t}function u(){var t=E+T;return f({id:t,name:t,width:0,height:0,border:0},{display:"none"},h.document())}var l,d,h,f=t(66),p=t(62),m=t(33),g=t(71),v=t(72),y=t(40),w=t(80),b=t(21),_=Math.floor(1e3*Math.random())+"_",E="rufous-frame-"+_+"-",A="rufous-form-"+_+"-",T=0,x=!1,I=new g;e.exports={clientEvent:o,flush:s,init:i}},{21:21,33:33,40:40,62:62,66:66,71:71,72:72,80:80}],38:[function(t,e,n){e.exports={TWEET:0,RETWEET:10,CUSTOM_TIMELINE:17}},{}],39:[function(t,e,n){function i(t,e,n){return r(t,e,n,2)}function r(t,e,n,i){var r=!p.isObject(t),o=e?!p.isObject(e):!1;r||o||s(f.formatClientEventNamespace(t),f.formatClientEventData(e,n,i),f.CLIENT_EVENT_ENDPOINT)}function o(t,e,n,i){var o=f.extractTermsFromDOM(t.target||t.srcElement);o.action=i||"click",r(o,e,n)}function s(t,e,n){var i,r;n&&p.isObject(t)&&p.isObject(e)&&(i=f.flattenClientEventPayload(t,e),r={l:f.stringify(i)},i.dnt&&(r.dnt=1),l(h.url(n,r)))}function a(t,e,n,i){var r,o=!p.isObject(t),s=e?!p.isObject(e):!1;if(!o&&!s)return r=f.flattenClientEventPayload(f.formatClientEventNamespace(t),f.formatClientEventData(e,n,i)),c(r)}function c(t){return g.push(t),g}function u(){var t,e,n=h.url(f.CLIENT_EVENT_ENDPOINT,{dnt:0,l:""}),i=encodeURIComponent(n).length;return g.length>1&&a({page:"widgets_js",component:"scribe_pixel",action:"batch_log"},{}),t=g,g=[],e=t.reduce(function(e,n,r){var o,s,a=e.length,c=a&&e[a-1],u=r+1==t.length;return u&&n.event_namespace&&"batch_log"==n.event_namespace.action&&(n.message=["entries:"+r,"requests:"+a].join("/")),o=f.stringify(n),s=encodeURIComponent(o).length+3,i+s>m?e:((!c||c.urlLength+s>m)&&(c={urlLength:i,items:[]},e.push(c)),c.urlLength+=s,c.items.push(o),e)},[]),e.map(function(t){var e={l:t.items};return d.enabled()&&(e.dnt=1),l(h.url(f.CLIENT_EVENT_ENDPOINT,e))})}function l(t){var e=new Image;return e.src=t}var d=t(62),h=t(74),f=t(40),p=t(80),m=2083,g=[];e.exports={_enqueueRawObject:c,scribe:s,clientEvent:r,clientEvent2:i,enqueueClientEvent:a,flushClientEvents:u,interaction:o}},{40:40,62:62,74:74,80:80}],40:[function(t,e,n){function i(t,e){var n;return e=e||{},t&&t.nodeType===Node.ELEMENT_NODE?((n=t.getAttribute("data-scribe"))&&n.split(" ").forEach(function(t){var n=t.trim().split(":"),i=n[0],r=n[1];i&&r&&!e[i]&&(e[i]=r)}),i(t.parentNode,e)):e}function r(t){return d.aug({client:"tfw"},t||{})}function o(t,e,n){var i=t&&t.widget_origin||u.referrer;
	return t=s("tfw_client_event",t,i),t.client_version=p,t.format_version=void 0!==n?n:1,e||(t.widget_origin=i),t}function s(t,e,n){return e=e||{},d.aug({},e,{_category_:t,triggered_on:e.triggered_on||+new Date,dnt:l.enabled(n)})}function a(t,e){return d.aug({},e,{event_namespace:t})}function c(t){var e,n=Array.prototype.toJSON;return delete Array.prototype.toJSON,e=JSON.stringify(t),n&&(Array.prototype.toJSON=n),e}var u=t(13),l=t(62),d=t(80),h=t(82),f=t(20),p=h.version,m=f.get("endpoints.rufous")||"https://syndication.twitter.com/i/jot",g=f.get("endpoints.rufousAudience")||"https://syndication.twitter.com/i/jot/syndication",v=f.get("endpoints.rufousRedirect")||"https://platform.twitter.com/jot.html";e.exports={extractTermsFromDOM:i,flattenClientEventPayload:a,formatGenericEventData:s,formatClientEventData:o,formatClientEventNamespace:r,stringify:c,AUDIENCE_ENDPOINT:g,CLIENT_EVENT_ENDPOINT:m,RUFOUS_REDIRECT:v}},{13:13,20:20,62:62,80:80,82:82}],41:[function(t,e,n){function i(t,e,n,i){return t=t||[],n=n||{},function(){var r,o,c,l,d=Array.prototype.slice.apply(arguments,[0,t.length]),h=Array.prototype.slice.apply(arguments,[t.length]);return h.forEach(function(t){return t?1===t.nodeType?void(c=t):s.isType("function",t)?void(r=t):void(s.isType("object",t)&&(o=t)):void 0}),d.length!=t.length||0===h.length?(r&&s.async(function(){r(!1)}),a.reject("Not enough parameters")):c?(o=s.aug(o||{},n),o.targetEl=c,t.forEach(function(t){o[t]=d.shift()}),l=new e(o),u.doLayout(),l.render(),i&&i(),r&&l.completed().then(r,function(){r(!1)}),l.completed()):(r&&s.async(function(){r(!1)}),a.reject("No target specified"))}}function r(t){var e;t.linkColor=t.linkColor||t.previewParams.link_color,t.theme=t.theme||t.previewParams.theme,t.height=t.height||t.previewParams.height,e=new p(t),this.render=e.render.bind(e),this.completed=e.completed.bind(e)}var o=t(16),s=t(80),a=t(72),c=t(76),u=t(50),l=t(56),d=t(52),h=t(51),f=t(57),p=t(55),m=i(["url"],l,{type:"share"}),g=i(["hashtag"],l,{type:"hashtag"}),v=i(["screenName"],l,{type:"mention"}),y=i(["screenName"],d),w=i(["tweetId"],h,{},h.fetchAndRender),b=i(["tweetId"],f,{},f.fetchAndRender),_=i(["widgetId"],p),E=i(["previewParams"],r),A={createShareButton:m,createMentionButton:v,createHashtagButton:g,createFollowButton:y,createTweet:w,createVideo:b,createTweetEmbed:w,createTimeline:_};c.isTwitterURL(o.location.href)&&(A.createTimelinePreview=E),e.exports=A},{16:16,50:50,51:51,52:52,55:55,56:56,57:57,72:72,76:76,80:80}],42:[function(t,e,n){function i(t,e){var n=u.connect({src:t,iframe:{name:e,style:"position:absolute;top:-9999em;width:10px;height:10px"}});return l(n).expose({trigger:function(t,e,n){e=e||{};var i=e.region;delete e.region,h.get("events").trigger(t,{target:f.getSandboxElement(n),data:e,region:i,type:t})},initXPHub:function(){o(!0)}}),n}function r(t){return t?d.secureHubId:d.contextualHubId}function o(t){var e=c.base(t)+"/widgets/hub.37638732bcf6df3115558c59e29ab4be.html",n=r(t);if(!a.getElementById(n))return i(e,n)}function s(t,e){var n=u.connect({window:{width:550,height:450},src:t});l(n).expose({trigger:function(t,n){h.get("events").trigger(t,{target:e,region:"intent",type:t,data:n})}})}var a=t(13),c=t(44),u=t(91),l=t(90),d=t(81),h=t(21),f=t(34);e.exports={init:o,openIntent:s}},{13:13,21:21,34:34,44:44,81:81,90:90,91:91}],43:[function(t,e,n){function i(){return o!==o.top?r.request(d).then(function(t){s.rootDocumentLocation(t.url),t.dnt&&a.setOn()}):void 0}var r,o=t(16),s=t(60),a=t(62),c=t(29),u=t(27),l=t(30),d="twttr.private.requestArticleUrl",h="twttr.article";o===o.top?(new c).attachReceiver(new l.Receiver(o,h)).bind(d,function(){return{url:s.rootDocumentLocation(),dnt:a.enabled()}}):r=new u(new l.Dispatcher(o.top,h)),e.exports={requestArticleUrl:i}},{16:16,27:27,29:29,30:30,60:60,62:62}],44:[function(t,e,n){function i(t,e){var n,i=u[t];return"embed/timeline.css"===t&&c.contains(o.href,"localhost.twitter.com")?"/node_modules/syndication-templates/lib/css/index.css":(n=a.retina()?"2x":"default",e&&(n+=".rtl"),r()+"/"+i[n])}function r(t){var e=s.get("host");return l(t)+"://"+e}var o=t(14),s=t(20),a=t(63),c=t(80),u={"embed/timeline.css":{"default":"embed/timeline.b67ffafa652943d0ebac45e422e410f7.default.css","2x":"embed/timeline.b67ffafa652943d0ebac45e422e410f7.2x.css",gif:"embed/timeline.b67ffafa652943d0ebac45e422e410f7.gif.css","default.rtl":"embed/timeline.b67ffafa652943d0ebac45e422e410f7.default.rtl.css","2x.rtl":"embed/timeline.b67ffafa652943d0ebac45e422e410f7.2x.rtl.css","gif.rtl":"embed/timeline.b67ffafa652943d0ebac45e422e410f7.gif.rtl.css"}},l=function(){return/^http\:$/.test(o.protocol)?function(t){return t?"https":"http"}:function(){return"https"}}();e.exports={builtUrl:i,base:r}},{14:14,20:20,63:63,80:80}],45:[function(t,e,n){var i=t(14),r=t(20),o=t(80),s=t(5),a=t(4),c=t(6),u={},l=o.aug({tweets:"https://syndication.twitter.com/tweets.json",timeline:"https://cdn.syndication.twimg.com/widgets/timelines/",timelinePoll:"https://syndication.twitter.com/widgets/timelines/paged/",timelinePreview:"https://syndication.twitter.com/widgets/timelines/preview/",videos:"https://syndication.twitter.com/widgets/video/"},r.get("endpoints")||{});u.tweets=function(t){var e={ids:t.ids.join(","),lang:t.lang,new_html:!0};return s.fetch(l.tweets,e,a)},u.videos=function(t){return s.fetch(l.videos,{ids:t.ids.join(","),lang:t.lang},a)},u.timeline=function(t){var e="tl_"+t.id+"_"+t.instanceId,n=9e5,r=Math.floor(+new Date/n),a={lang:t.lang,t:r,domain:i.host,dnt:t.dnt,override_type:t.overrideType,override_id:t.overrideId,override_name:t.overrideName,override_owner_id:t.overrideOwnerId,override_owner_name:t.overrideOwnerName,with_replies:t.withReplies};return o.compact(a),s.fetch(l.timeline+t.id,a,c,e)},u.timelinePoll=function(t){var e=t.sinceId||t.maxId||t.maxPosition||t.minPosition,n="tlPoll_"+t.id+"_"+t.instanceId+"_"+e,r={lang:t.lang,since_id:t.sinceId,max_id:t.maxId,min_position:t.minPosition,max_position:t.maxPosition,domain:i.host,dnt:t.dnt,override_type:t.overrideType,override_id:t.overrideId,override_name:t.overrideName,override_owner_id:t.overrideOwnerId,override_owner_name:t.overrideOwnerName,with_replies:t.withReplies};return o.compact(r),s.fetch(l.timelinePoll+t.id,r,c,n)},u.timelinePreview=function(t){return s.fetch(l.timelinePreview,t.params,c)},e.exports=u},{14:14,20:20,4:4,5:5,6:6,80:80}],46:[function(t,e,n){function i(){var t=36e5,e=s.combined(o)._;return void 0!==r?r:(r=!1,e&&/^\d+$/.test(e)&&(r=+new Date-parseInt(e)<t),r)}var r,o=t(14),s=t(70);e.exports={isDynamicWidget:i}},{14:14,70:70}],47:[function(t,e,n){function i(t){var e=t.split(" ");this.url=decodeURIComponent(e[0].trim()),this.width=+e[1].replace(/w$/,"").trim()}function r(t,e,n){var r,o,s,a;if(t=p.devicePixelRatio?t*p.devicePixelRatio:t,o=e.split(",").map(function(t){return new i(t.trim())}),n)for(a=0;a<o.length;a++)o[a].url===n&&(r=o[a]);return s=o.reduce(function(e,n){return n.width<e.width&&n.width>=t?n:e},o[0]),r&&r.width>s.width?r:s}function o(t,e){var n,i=t.getAttribute("data-srcset"),o=t.src;i&&(n=r(e,i,o),t.src=n.url)}function s(t,e){e=void 0!==e?!!e:g.retina(),m.toRealArray(t.getElementsByTagName("IMG")).forEach(function(t){var n=t.getAttribute("data-src-1x")||t.getAttribute("src"),i=t.getAttribute("data-src-2x");e&&i?t.src=i:n&&(t.src=n)})}function a(t,e,n){t&&(m.toRealArray(t.querySelectorAll(".NaturalImage-image")).forEach(function(t){n(function(){o(t,e)})}),m.toRealArray(t.querySelectorAll(".CroppedImage-image")).forEach(function(t){n(function(){o(t,e/2)})}),m.toRealArray(t.querySelectorAll("img.autosized-media")).forEach(function(t){n(function(){o(t,e),t.removeAttribute("width"),t.removeAttribute("height")})}))}function c(t,e,n,i){t&&((g.ios()||g.android())&&m.toRealArray(t.querySelectorAll(".FilledIframe")).forEach(function(t){i(function(){d(t,{width:t.offsetWidth,height:t.offsetHeight})})}),m.toRealArray(t.querySelectorAll("iframe.autosized-media")).forEach(function(t){var r=l(t.getAttribute("data-width"),t.getAttribute("data-height"),y.effectiveWidth(t.parentElement)||e,n);i(function(){t.width=r.width,t.height=r.height,d(t,r)})}))}function u(t,e,n,i){a(t,e,i),c(t,e,n,i)}function l(t,e,n,i,r,o){return n=n||t,i=i||e,r=r||0,o=o||0,t>n&&(e*=n/t,t=n),e>i&&(t*=i/e,e=i),r>t&&(e*=r/t,t=r),o>e&&(t*=o/e,e=o),{width:Math.floor(t),height:Math.floor(e)}}function d(t,e){function n(){var t={name:"tfw:resize",dimensions:e};r.postMessage(t,"*")}var i,r,o,s,a;t&&(r=t.contentWindow,i=t.ownerDocument&&t.ownerDocument.defaultView,o=g.ios()||g.android(),s=v.isTwitterURL(t.src),a=r&&g.canPostMessage(r),o&&s&&a&&(n(),i&&i.addEventListener("message",function(t){"tfw:requestsize"===t.data&&n()},!1)))}function h(t,e,n,i){m.toRealArray(t.querySelectorAll(e)).forEach(function(t){var e=t.getAttribute("style")||t.getAttribute("data-style"),r=i.test(e)&&RegExp.$1;r&&(t.setAttribute("data-csp-fix",!0),t.style[n]=r)})}function f(t){g.cspEnabled()&&(h(t,".MediaCard-widthConstraint","maxWidth",w),h(t,".MediaCard-mediaContainer","paddingBottom",E),h(t,".CroppedImage-image","top",b),h(t,".CroppedImage-image","left",_))}var p=t(16),m=t(80),g=t(63),v=t(76),y=t(12),w=/max-width:\s*([\d\.]+px)/,b=/top:\s*(\-?[\d\.]+%)/,_=/left:\s*(\-?[\d\.]+%)/,E=/padding-bottom:\s*([\d\.]+%)/;e.exports={scaleDimensions:l,retinize:s,setSrcForImgs:a,sizeIframes:c,constrainMedia:u,fixMediaCardLayout:f,__setSrcFromSet:o}},{12:12,16:16,63:63,76:76,80:80}],48:[function(t,e,n){var i=t(74),r=t(76);e.exports=function(t,e){return function(n){var o,s,a="data-tw-params";if(n&&r.isTwitterURL(n.href)&&!n.getAttribute(a)){if(n.setAttribute(a,!0),"function"==typeof e){o=e.call(this,n);for(s in o)o.hasOwnProperty(s)&&(t[s]=o[s])}n.href=i.url(n.href,t)}}}},{74:74,76:76}],49:[function(t,e,n){function i(t){(new o).attachReceiver(new s.Receiver(r,"twttr.resize")).bind("twttr.private.resizeButton",function(e){var n=c(this),i=n&&n.id,r=a.asInt(e.width),o=a.asInt(e.height);i&&r&&o&&t(i,r,o)})}var r=t(16),o=t(29),s=t(30),a=t(77),c=t(65);e.exports=i},{16:16,29:29,30:30,65:65,77:77}],50:[function(t,e,n){function i(t){var e;t&&(t.ownerDocument?(this.srcEl=t,this.classAttr=t.className.split(" ")):(this.srcOb=t,this.classAttr=[]),e=this.params(),this.id=this.generateId(),this.setLanguage(),this.related=e.related||this.dataAttr("related"),this.partner=e.partner||this.dataAttr("partner")||y.val("partner"),this.styleAttr=[],this.targetEl=t.targetEl,g.asBoolean(e.dnt||this.dataAttr("dnt"))&&w.setOn(),this.add(this),this.completeDeferred=new d,this.completed().then(function(t){t&&t!=a.body&&E.get("events").trigger("rendered",{target:t})}))}function r(){S.forEach(function(t){t()}),i.doLayout()}function o(t){return t?t.lang?t.lang:o(t.parentNode):void 0}var s,a=t(13),c=t(16),u=t(44),l=t(26),d=t(71),h=t(66),f=t(67),p=t(72),m=t(74),g=t(77),v=t(80),y=t(19),w=t(62),b=t(68),_=t(60),E=t(21),A=t(22),T=t(34),x=0,I={},S=[],D=new f,N="data-twttr-rendered";v.aug(i.prototype,{setLanguage:function(t){var e;return t||(t=this.params().lang||this.dataAttr("lang")||o(this.srcEl)),(t=t&&t.toLowerCase())?v.contains(A,t)?this.lang=t:(e=t.replace(/[\-_].*/,""),v.contains(A,e)?this.lang=e:void(this.lang="en")):this.lang="en"},ringo:function(t,e,n){return n=n||/\{\{([\w_]+)\}\}/g,t.replace(n,function(t,n){return void 0!==e[n]?e[n]:t})},makeIframeSource:function(){if(this.iframeSource){var t=m.encode(this.widgetUrlParams());return[u.base(),"/",this.ringo(this.iframeSource,{lang:this.lang}),"#",t].join("")}},add:function(t){I[this.id]=t,T.addClassic(t)},create:function(t,e){var n,i=this;return e[N]=!0,n=h(v.aug({id:this.id,src:t,"class":this.classAttr.join(" ")},e),{position:"absolute",visibility:"hidden"},this.targetEl&&this.targetEl.ownerDocument),this.srcEl?this.layout(function(){return i.srcEl.parentNode.replaceChild(n,i.srcEl),n}):this.targetEl?this.layout(function(){return i.targetEl.appendChild(n),n}):p.reject("Did not append widget")},setInitialSize:function(t,e){var n=this,i=this.element;return i?void this.layout(function(){n.width=t,n.height=e,i.style.width=t+"px",i.style.height=e+"px",i.style.position="static",i.style.visibility="visible"}).then(function(){n.completeDeferred.resolve(i)}):!1},params:function(){var t,e;return this.srcOb?e=this.srcOb:(t=this.srcEl&&this.srcEl.href&&this.srcEl.href.split("?")[1],e=t?m.decode(t):{}),this.params=function(){return e},e},widgetUrlParams:function(){return{}},dataAttr:function(t){return this.srcEl&&this.srcEl.getAttribute("data-"+t)},attr:function(t){return this.srcEl&&this.srcEl.getAttribute(t)},layout:function(t){return D.enqueue(t)},generateId:function(){return this.srcEl&&this.srcEl.id||"twitter-widget-"+x++},completed:function(){return this.completeDeferred?this.completeDeferred.promise:void 0}}),i.afterLoad=function(t){S.push(t)},i.doLayout=function(){D.exec()},i.doLayoutAsync=function(){D.delayedExec()},i.init=function(t){s=t},i.reset=function(){I={},T.resetClassic()},i.findInstance=function(t){return t&&I[t]?I[t]:null},i.embed=function(t){var e=[],n=[],o=[];g.isArray(t)||(t=[t||a]),b.time("sandboxes"),t.forEach(function(t){v.forIn(s,function(n,i){var r=t.querySelectorAll(n);v.toRealArray(r).forEach(function(t){var n;t.getAttribute(N)||(t.setAttribute(N,"true"),n=new i(t),e.push(n),o.push(n.sandboxCreated))})})}),p.all(o).then(function(){b.timeEnd("sandboxes")}),i.doLayout(),e.forEach(function(t){n.push(t.completed()),t.render()}),p.all(n).then(function(t){t=t.filter(function(t){return t}),t.length&&(E.get("events").trigger("loaded",{widgets:t}),b.timeEnd("load"))}).then(i.trackRender),i.doLayoutAsync(),r()},i.trackRender=function(){l.endAndTrack("render","widgets-js-load","page",{widget_origin:_.rootDocumentLocation(),widget_frame:_.isFramed()&&_.currentDocumentLocation()})},c.setInterval(function(){i.doLayout()},500),e.exports=i},{13:13,16:16,19:19,21:21,22:22,26:26,34:34,44:44,60:60,62:62,66:66,67:67,68:68,71:71,72:72,74:74,77:77,80:80}],51:[function(t,e,n){function i(t,e){var n=t.querySelector("blockquote.subject"),i=t.querySelector("blockquote.reply"),r=n&&n.getAttribute("data-tweet-id"),o=i&&i.getAttribute("data-tweet-id"),s={},a={};r&&(s[r]={item_type:0},A.clientEvent({page:"tweet",section:"subject",component:"tweet",action:"results"},w.aug({},e,{item_ids:[r],item_details:s}),!0),E.scribeTweetAudienceImpression(),o&&(a[o]={item_type:0},A.clientEvent({page:"tweet",section:"conversation",component:"tweet",action:"results"},w.aug({},e,{item_ids:[o],item_details:a,associations:{4:{association_id:r,association_type:4}}}),!0)))}function r(t,e){var n={};t&&(n[t]={item_type:0},A.clientEvent({page:"tweet",section:"subject",component:"rawembedcode",action:"no_results"},{widget_origin:x.rootDocumentLocation(),widget_frame:x.isFramed()&&x.currentDocumentLocation(),message:e,item_ids:[t],item_details:n},!0),E.scribeTweetAudienceImpression())}function o(t,e,n,i){P[t]=P[t]||[],P[t].push({s:n,f:i,lang:e})}function s(t){if(t){var e,n,i;d.apply(this,[t]),e=this.params(),n=this.srcEl&&this.srcEl.getElementsByTagName("A"),i=n&&n[n.length-1],this.hideThread="none"==(e.conversation||this.dataAttr("conversation"))||w.contains(this.classAttr,"tw-hide-thread"),this.hideCard="hidden"==(e.cards||this.dataAttr("cards"))||w.contains(this.classAttr,"tw-hide-media"),"left"==(e.align||this.attr("align"))||w.contains(this.classAttr,"tw-align-left")?this.align="left":"right"==(e.align||this.attr("align"))||w.contains(this.classAttr,"tw-align-right")?this.align="right":("center"==(e.align||this.attr("align"))||w.contains(this.classAttr,"tw-align-center"))&&(this.align="center",this.containerWidth>this.dimensions.MIN_WIDTH*(1/.7)&&this.width>.7*this.containerWidth&&(this.width=.7*this.containerWidth)),this.narrow=e.narrow||this.width<=this.dimensions.NARROW_WIDTH,this.tweetId=e.tweetId||i&&b.status(i.href)}}var a=t(3),c=t(16),u=t(11),l=t(50),d=t(54),h=t(7),f=t(48),p=t(8),m=t(10),g=t(26),v=t(72),y=t(73),w=t(80),b=t(76),_=t(45),E=t(35),A=t(37),T=t(47),x=t(60),I=t(84),S=t(21),D=t(9),N=t(39),C="tweetembed",P={},R=[];s.prototype=new d,w.aug(s.prototype,{renderedClassNames:"twitter-tweet twitter-tweet-rendered",dimensions:{DEFAULT_HEIGHT:"0",DEFAULT_WIDTH:"500",NARROW_WIDTH:"350",maxHeight:"375",FULL_BLEED_PHOTO_MAX_HEIGHT:"600",MIN_WIDTH:"220",MIN_HEIGHT:"0",MARGIN:"10px 0",WIDE_MEDIA_PADDING:32,NARROW_MEDIA_PADDING:32,BORDERS:0},linkColorSelectors:["a","a:visited"],linkStateColorSelectors:["a:hover","a:focus","a:active"],bgColorSelectors:[],borderColorSelectors:[],styleSheetUrl:a.tweet,addSiteStylesPrefix:function(t){return t},onStyleSheetLoad:function(){var t=this;this.sandbox.hasContent()&&(l.doLayoutAsync(),this.sandbox.resizeToContent().then(function(e){t.height=e}))},scribeCardShown:function(t){var e,n;e={page:"tweet",component:"card",action:"shown"},n={card_details:{card_name:t.getAttribute("data-card-name")}},N.clientEvent2(e,n,!1)},loadCardCss:function(t){function e(){r&&(l.doLayoutAsync(),n.sandbox.resizeToContent().then(function(t){n.height=t}))}var n=this,i=t&&t.getAttribute("data-css"),r=!1;i&&(w.toRealArray(t.querySelectorAll("img")).forEach(function(t){t.addEventListener("load",e,!1)}),this.sandbox.prependStyleSheet(i,function(){p.add(t,"is-ready"),n.scribeCardShown(t),l.doLayoutAsync(),n.sandbox.resizeToContent().then(function(t){r=!0,n.height=t})}))},create:function(t){var e,n,r,o=this,s=this.sandbox.createElement("div");return s.innerHTML=t,(e=s.children[0]||!1)?("dark"==this.theme&&this.classAttr.push("thm-dark"),this.linkColor&&this.addSiteStyles(),p.present(e,"media-forward")&&(this.fullBleedPhoto=!0,this.dimensions.maxHeight=this.dimensions.FULL_BLEED_PHOTO_MAX_HEIGHT),n=e.querySelector(".GifPlayer"),n&&(this.gifPlayer=new I({rootEl:n,videoEl:n.querySelector(".GifPlayer-video"),playButtonEl:n.querySelector(".GifPlayer-playButton"),fallbackUrl:this.extractPermalinkUrl(this.getTweetElement(e))})),T.retinize(e),T.fixMediaCardLayout(e),e.id=this.id,e.className+=" "+this.classAttr.join(" "),e.lang=this.lang,this.sandbox.setTitle(e.getAttribute("data-iframe-title")||"Tweet"),this.loadCardCss(e.querySelector(".PrerenderedCard")),this.sandbox.appendChild(e).then(function(){o.renderedDeferred.resolve(o.sandbox)}),r=this.layout(function(){o.predefinedWidth=o.width,o.width=o.sandbox.width(o.width),o.collapseRegions()}),r.then(function(){o.constrainMedia(e,o.contentWidth(o.width)),o.setNarrow().then(function(){o.layout(function(){o.completeDeferred.resolve(o.sandbox.element())})})}),i(e,this.baseScribeData(),this.partner),e):void 0},render:function(){var t=this,e="",n=this.tweetId;return n?(this.hideCard&&(e+="c"),this.hideThread&&(e+="t"),e&&(n+="-"+e),this.rendered().then(function(e){var n=t.srcEl;n&&n.parentNode&&t.layout(function(){n&&n.parentNode&&n.parentNode.removeChild(n)}),"center"==t.align?e.style({margin:"7px auto",cssFloat:"none"}):t.align&&(t.width==t.dimensions.DEFAULT_WIDTH&&(t.predefinedWidth=t.width=t.dimensions.NARROW_WIDTH),e.style({cssFloat:t.align})),t.sandbox.resizeToContent().then(function(e){return t.height=e,l.doLayoutAsync(),t.sandbox.resizeToContent().then(function(e){t.height=e})}).then(function(){e.onresize(t.handleResize.bind(t))}),e.style({position:"static",visibility:"visible"}),l.doLayoutAsync()}),o(n,this.lang,function(e){t.ready().then(function(){t.element=t.create(e),t.readTimestampTranslations(),t.updateTimeStamps(),t.bindIntentHandlers(),t.bindUIHandlers(),t.bindPermalinkHandler(),l.doLayoutAsync()})},function(){r(t.tweetId,t.partner),t.completeDeferred.resolve(t.srcEl)}),R.push(this.completed()),this.completed().then(this.scribePerformance.bind(this)),this.completed()):(this.completeDeferred.resolve(this.srcEl),this.completed())},bindPermalinkHandler:function(){var t=this;D.delegate(this.element,"click","A",function(t){D.stopPropagation(t)}),D.delegate(this.element,"click",".twitter-tweet",function(e){var n=t.getTweetElement();u.getSelectedText(t.sandbox._win)||(t.openPermalink(n),t.scribePermalinkClick(n,e),D.stopPropagation(e))})},scribePermalinkClick:function(t,e){var n=this.createScribeData(t);N.interaction(e,n,!1)},getTweetElement:function(t){var e;return t=t||this.element,t?(e=t.querySelectorAll("blockquote.tweet"),e[e.length-1]):void 0},extractPermalinkUrl:function(t){var e=t&&t.cite;return b.isStatus(e)&&e},openPermalink:function(t){var e=this.extractPermalinkUrl(t);e&&c.open(e)},scribePerformance:function(){g.endAndTrack("render","widgets-js-load","tweet",this.baseScribeData())},addUrlParams:function(t){var e=this,n={related:this.related,partner:this.partner,original_referer:x.rootDocumentLocation(),tw_p:C};return this.addUrlParams=f(n,function(t){var n=m.closest(".tweet",t,e.element);return{tw_i:n.getAttribute("data-tweet-id")}}),this.addUrlParams(t)},baseScribeData:function(){return{widget_origin:x.rootDocumentLocation(),widget_frame:x.isFramed()&&x.currentDocumentLocation(),message:this.partner}},handleResize:function(t){var e=this;t!=this.width&&(this.width=t,this.setNarrow(),this.constrainMedia(this.element,this.contentWidth(t)),this.collapseRegions(),this.sandbox.resizeToContent().then(function(t){e.height=t,S.get("events").trigger("resize",{target:e.sandbox.element()})}),l.doLayoutAsync())},readTimestampTranslations:function(){var t=this.element,e="data-dt-",n=t.getAttribute(e+"months")||"";this.datetime=new h(w.compact({phrases:{AM:t.getAttribute(e+"am"),PM:t.getAttribute(e+"pm")},months:n.split("|"),formats:{full:t.getAttribute(e+"full")}}))},updateTimeStamps:function(){var t=this.element.querySelector(".long-permalink"),e=t.getAttribute("data-datetime"),n=e&&this.datetime.localTimeStamp(e),i=t.getElementsByTagName("TIME")[0];n&&(this.layout(function(){return i&&i.innerHTML?void(i.innerHTML=n):void(t.innerHTML=n)},"Update Timestamp"),l.doLayoutAsync())}}),s.fetchAndRender=function(){function t(t){w.forIn(t,function(t,e){var n=i[t];n.forEach(function(t){t.s&&t.s.call(this,e)}),delete i[t]}),l.doLayout(),w.forIn(i,function(t,e){e.forEach(function(e){e.f&&e.f.call(this,t)})}),l.doLayout()}var e,n,i=P,r=[];if(P={},i.keys)r=i.keys();else for(e in i)i.hasOwnProperty(e)&&r.push(e);r.length&&(A.init(),n=i[r[0]][0].lang,y.always(_.tweets({ids:r.sort(),lang:n}),t),v.all(R).then(function(){A.flush()}),R=[])},l.afterLoad(s.fetchAndRender),e.exports=s},{10:10,11:11,16:16,21:21,26:26,3:3,35:35,37:37,39:39,45:45,47:47,48:48,50:50,54:54,60:60,7:7,72:72,73:73,76:76,8:8,80:80,84:84,9:9}],52:[function(t,e,n){function i(t){if(t){var e,n,i,r;s.apply(this,[t]),e=this.params(),n=e.size||this.dataAttr("size"),i=e.showScreenName||this.dataAttr("show-screen-name"),r=e.count||this.dataAttr("count"),this.classAttr.push("twitter-follow-button"),this.showScreenName="false"!=i,this.showCount=!(e.showCount===!1||"false"==this.dataAttr("show-count")),"none"==r&&(this.showCount=!1),this.explicitWidth=e.width||this.dataAttr("width")||"",this.screenName=e.screen_name||e.screenName||a.screenName(this.attr("href")),this.preview=e.preview||this.dataAttr("preview")||"",this.align=e.align||this.dataAttr("align")||"",this.size="large"==n?"l":"m"}}var r=t(62),o=t(80),s=t(50),a=t(76),c=t(72);i.prototype=new s,o.aug(i.prototype,{iframeSource:"widgets/follow_button.36a0bf81ff285eb6cad31df608651a2f.{{lang}}.html",widgetUrlParams:function(){return o.compact({screen_name:this.screenName,lang:this.lang,show_count:this.showCount,show_screen_name:this.showScreenName,align:this.align,id:this.id,preview:this.preview,size:this.size,partner:this.partner,dnt:r.enabled(),_:+new Date})},render:function(){if(!this.screenName)return c.reject("Missing Screen Name");var t=this,e=this.makeIframeSource(),n=this.create(e,{title:"Twitter Follow Button"}).then(function(e){return t.element=e});return n}}),e.exports=i},{50:50,62:62,72:72,76:76,80:80}],53:[function(t,e,n){function i(t){u.open(t)}function r(e,n){var i=t(42);i.openIntent(e,n)}function o(t,e){c.isTwitterURL(t)&&(d.get("eventsHub")&&e?(h.add(a.generate(),e),r(t,e),l.get("events").trigger("click",{target:e,region:"intent",type:"click",data:{}})):i(t))}function s(t){this.srcEl=[],this.element=t}var a=t(78),c=t(76),u=t(25),l=t(21),d=t(20),h=t(34);s.open=o,e.exports=s},{20:20,21:21,25:25,34:34,42:42,76:76,78:78}],54:[function(t,e,n){function i(){s=r.VALID_COLOR.test(h.val("widgets:link-color"))&&RegExp.$1,c=r.VALID_COLOR.test(h.val("widgets:border-color"))&&RegExp.$1,a=h.val("widgets:theme")}function r(t){if(t){var e,n=this;this.readyDeferred=new A,this.renderedDeferred=new A,l.apply(this,[t]),e=this.params(),this.targetEl=this.srcEl&&this.srcEl.parentNode||e.targetEl||u.body,this.predefinedWidth=r.VALID_UNIT.test(e.width||this.attr("width"))&&RegExp.$1,this.layout(function(){return n.containerWidth=b.effectiveWidth(n.targetEl)}).then(function(t){var i=n.predefinedWidth||t||n.dimensions.DEFAULT_WIDTH;n.height=r.VALID_UNIT.test(e.height||n.attr("height"))&&RegExp.$1,n.width=Math.max(n.dimensions.MIN_WIDTH,Math.min(i,n.dimensions.DEFAULT_WIDTH))}),r.VALID_COLOR.test(e.linkColor||this.dataAttr("link-color"))?this.linkColor=RegExp.$1:this.linkColor=s,r.VALID_COLOR.test(e.borderColor||this.dataAttr("border-color"))?this.borderColor=RegExp.$1:this.borderColor=c,this.theme=e.theme||this.attr("data-theme")||a,this.theme=/(dark|light)/.test(this.theme)?this.theme:"",T.ie9()&&this.classAttr.push("ie9"),this.sandboxCreated=_.createSandbox({"class":this.renderedClassNames,id:this.id,allowfullscreen:""},{position:"absolute",visibility:"hidden"},function(t){n.modifyFrame&&(t=n.modifyFrame(t)),n.srcEl?n.targetEl.insertBefore(t,n.srcEl):n.targetEl.appendChild(t)},this.layout).then(function(t){n.setupSandbox(t),new g(t.element().contentWindow)}),this.rendered().then(function(t){n.applyVisibleSandboxStyles(t)})}}function o(t,e){return t+e}var s,a,c,u=t(13),l=t(50),d=t(53),h=t(19),f=t(47),p=t(39),m=t(36),g=t(86),v=t(8),y=t(10),w=t(9),b=t(12),_=t(32),E=t(58),A=t(71),T=t(63),x=t(72),I=t(76),S=t(77),D=t(80),N=t(73),C=[".timeline-header h1.summary",".timeline-header h1.summary a:link",".timeline-header h1.summary a:visited"];r.prototype=new l,D.aug(r.prototype,{dimensions:{},linkColorSelectors:[".customisable",".customisable:link",".customisable:visited"],linkStateColorSelectors:[".customisable:hover",".customisable:focus",".customisable:active",".customisable-highlight:hover",".customisable-highlight:focus","a:hover .customisable-highlight","a:focus .customisable-highlight"],bgColorSelectors:["a:hover .ic-mask","a:focus .ic-mask"],borderColorSelectors:[".customisable-border"],styleSheetUrl:function(){throw new Error("must set styleSheetUrl")},onStyleSheetLoad:function(){},setupSandbox:function(t){var e,n,i=this;this.sandbox=t,T.ios()&&v.add(this.sandbox.root,"env-ios"),T.touch()&&v.add(this.sandbox.root,"is-touch"),e=this.styleSheetUrl(this.lang,this.theme),n=this.onStyleSheetLoad.bind(this),N.some([i.applyInitialSandboxStyles(t),t.appendCss(".SandboxRoot { display:none }"),t.setBaseTarget("_blank"),t.appendStyleSheet(e,n)]).then(function(){i.readyDeferred.resolve(t)})},ready:function(){return this.readyDeferred.promise},rendered:function(){return this.renderedDeferred.promise},contentWidth:function(t){var e=this.dimensions,n=this.borderless?0:e.BORDERS,i=this.fullBleedPhoto?0:this.chromeless&&this.narrow?e.NARROW_MEDIA_PADDING_CL:this.chromeless?e.WIDE_MEDIA_PADDING_CL:this.narrow?e.NARROW_MEDIA_PADDING:e.WIDE_MEDIA_PADDING;return(t||this.width)-(i+n)},applyInitialSandboxStyles:function(t){var e=this;return t.style({border:"none",maxWidth:"100%",minWidth:e.dimensions.MIN_WIDTH+"px",margin:e.dimensions.MARGIN,padding:"0",display:"block",position:"absolute",visibility:"hidden"},!0)},applyVisibleSandboxStyles:function(t){return t.style({position:"static",visibility:"visible"})},addSiteStylesPrefix:function(t){return("dark"==this.theme?".thm-dark ":"")+t},addSiteStyles:function(){var t=[],e=this.addSiteStylesPrefix.bind(this);return this.headingStyle&&t.push(C.map(e).join(",")+"{"+this.headingStyle+"}"),this.linkColor&&(t.push(this.linkColorSelectors.map(e).join(",")+"{color:"+this.linkColor+"}"),t.push(this.bgColorSelectors.map(e).join(",")+"{background-color:"+this.linkColor+"}"),t.push(this.linkStateColorSelectors.map(e).join(",")+"{color:"+E.lighten(this.linkColor,.2)+"}")),this.borderColor&&t.push(this.borderColorSelectors.map(e).concat("dark"==this.theme?[".thm-dark.customisable-border"]:[]).join(",")+"{border-color:"+this.borderColor+"}"),t.length?this.sandbox.appendCss(t.join("")):void 0},setNarrow:function(){var t=this,e=this.narrow;return this.narrow=this.width<this.dimensions.NARROW_WIDTH,e!=this.narrow?this.layout(function(){v.toggle(t.sandbox.root,"env-narrow",t.narrow)}):x.resolve(this.narrow)},createScribeData:function(t){var e=D.aug({},this.baseScribeData(),{item_ids:[],item_details:this.extractTweetScribeDetails(t)});return D.forIn(e.item_details,function(t){e.item_ids.push(t)}),e},bindUIHandlers:function(){var t=this.element;w.delegate(t,"click",".MediaCard-dismissNsfw",function(){var e=y.closest(".MediaCard",this,t);v.remove(e,"is-nsfw")})},bindIntentHandlers:function(){function t(t){var i=y.closest(".tweet",this,n),r=e.createScribeData(i);p.interaction(t,r,!0)}var e=this,n=this.element;w.delegate(n,"click","A",t),w.delegate(n,"click","BUTTON",t),w.delegate(n,"click",".profile",function(){e.addUrlParams(this)}),w.delegate(n,"click",".follow-button",function(t){var n;t.altKey||t.metaKey||t.shiftKey||T.ios()||T.android()||S.asBoolean(this.getAttribute("data-age-gate"))||(n=I.intentForFollowURL(this.href,!0),n&&(d.open(n,e.sandbox.element()),w.preventDefault(t)))}),w.delegate(n,"click",".web-intent",function(t){e.addUrlParams(this),t.altKey||t.metaKey||t.shiftKey||(d.open(this.href,e.sandbox.element()),w.preventDefault(t))})},baseScribeData:function(){return{}},extractTweetScribeDetails:m,constrainMedia:function(t,e,n){return f.constrainMedia(t||this.element,e||this.contentWidth(),this.dimensions.maxHeight,n||this.layout)},collapseRegions:function(){var t=this;D.toRealArray(this.element.querySelectorAll(".collapsible-container")).forEach(function(e){var n,i,r=D.toRealArray(e.children),s=r.length&&e.offsetWidth,a=r.length&&r.map(function(t){return t.offsetWidth}),c=r.length;if(r.length)for(;c>0;){if(c--,n=a.reduce(o,0),!s||!n)return;if(s>n)return;i=r[c].getAttribute("data-collapsed-class"),i&&(v.add(t.element,i),a[c]=r[c].offsetWidth)}})}}),r.VALID_UNIT=/^([0-9]+)( ?px)?$/,r.VALID_COLOR=/^(#(?:[0-9a-f]{3}|[0-9a-f]{6}))$/i,i(),e.exports=r},{10:10,12:12,13:13,19:19,32:32,36:36,39:39,47:47,50:50,53:53,58:58,63:63,71:71,72:72,73:73,76:76,77:77,8:8,80:80,86:86,9:9}],55:[function(t,e,n){function i(t){if(t){var e,n,i,r,o,s,c,u;a.apply(this,[t]),e=this.params(),n=(e.chrome||this.dataAttr("chrome")||"").split(" "),this.preview=e.previewParams,this.widgetId=e.widgetId||this.dataAttr("widget-id"),this.instanceId=++B,this.cursors={maxPosition:0,minPosition:0},(r=e.screenName||this.dataAttr("screen-name"))||(o=e.userId||this.dataAttr("user-id"))?this.override={overrideType:"user",overrideId:o,overrideName:r,withReplies:y.asBoolean(e.showReplies||this.dataAttr("show-replies"))?"true":"false"}:(r=e.favoritesScreenName||this.dataAttr("favorites-screen-name"))||(o=e.favoritesUserId||this.dataAttr("favorites-user-id"))?this.override={overrideType:"favorites",overrideId:o,overrideName:r}:((r=e.listOwnerScreenName||this.dataAttr("list-owner-screen-name"))||(o=e.listOwnerId||this.dataAttr("list-owner-id")))&&((s=e.listId||this.dataAttr("list-id"))||(c=e.listSlug||this.dataAttr("list-slug")))?this.override={overrideType:"list",overrideOwnerId:o,overrideOwnerName:r,overrideId:s,overrideName:c}:(u=e.customTimelineId||this.dataAttr("custom-timeline-id"))?this.override={overrideType:"custom",overrideId:u}:this.override={},this.tweetLimit=y.asInt(e.tweetLimit||this.dataAttr("tweet-limit")),this.staticTimeline=this.tweetLimit>0,n.length&&(i=w.contains(n,"none"),this.chromeless=i||w.contains(n,"transparent"),this.headerless=i||w.contains(n,"noheader"),this.footerless=i||w.contains(n,"nofooter"),this.borderless=i||w.contains(n,"noborders"),this.noscrollbar=w.contains(n,"noscrollbar")),this.headingStyle=g.sanitize(e.headingStyle||this.dataAttr("heading-style"),void 0,!0),this.classAttr.push("twitter-timeline-rendered"),this.ariaPolite=e.ariaPolite||this.dataAttr("aria-polite")}}var r=t(16),o=t(3),s=t(50),a=t(54),c=t(7),u=t(2),l=t(26),d=t(45),h=t(47),f=t(35),p=t(37),m=t(48),g=t(59),v=t(63),y=t(77),w=t(80),b=t(9),_=t(8),E=t(10),A=t(62),T=t(60),x=t(21),I=t(20),S=t(38),D={
	CLIENT_SIDE_USER:0,CLIENT_SIDE_APP:2},N=".timeline",C=".new-tweets-bar",P=".timeline-header",R=".timeline-footer",L=".stream",k=".h-feed",O=".tweet",M=".detail-expander",W=".expand",H=".permalink",U=".no-more-pane",j="expanded",q="pending-scroll-in",F="pending-new-tweet-display",z="pending-new-tweet",B=0;i.prototype=new a,w.aug(i.prototype,{renderedClassNames:"twitter-timeline twitter-timeline-rendered",dimensions:{DEFAULT_HEIGHT:"600",DEFAULT_WIDTH:"520",NARROW_WIDTH:"320",maxHeight:"375",MIN_WIDTH:"180",MIN_HEIGHT:"200",MARGIN:"0",WIDE_MEDIA_PADDING:81,NARROW_MEDIA_PADDING:16,WIDE_MEDIA_PADDING_CL:60,NARROW_MEDIA_PADDING_CL:12,BORDERS:2},styleSheetUrl:o.timeline,create:function(t){var e,n,i,r,o=this,s=this.sandbox.createElement("div"),a=[];return s.innerHTML=t.body,(e=s.children[0]||!1)?(this.reconfigure(t.config),this.discardStaticOverflow(e),this.sandbox.setTitle(e.getAttribute("data-iframe-title")||"Timeline"),h.retinize(e),this.constrainMedia(e),this.searchQuery=e.getAttribute("data-search-query"),this.profileId=e.getAttribute("data-profile-id"),this.timelineType=e.getAttribute("data-timeline-type"),this.collectionId=e.getAttribute("data-collection-id"),r=this.getTweetDetails(s.querySelector(k)),w.forIn(r,function(t){a.push(t)}),i=this.baseScribeData(),i.item_ids=a,i.item_details=r,this.collectionId&&(i.item_ids.push(this.collectionId),i.item_details[this.collectionId]={item_type:S.CUSTOM_TIMELINE}),this.timelineType&&p.clientEvent({page:this.timelineType+"_timeline",component:"timeline",element:"initial",action:a.length?"results":"no_results"},i,!0),p.clientEvent({page:"timeline",component:"timeline",element:"initial",action:a.length?"results":"no_results"},i,!0),f.scribeTimelineAudienceImpression(),p.flush(),"assertive"==this.ariaPolite&&(n=e.querySelector(C),n.setAttribute("aria-polite","assertive")),e.id=this.id,e.className+=" "+this.classAttr.join(" "),e.lang=this.lang,this.ready().then(function(t){t.appendChild(e).then(function(){o.renderedDeferred.resolve(o.sandbox)}),t.style({display:"inline-block"}),o.layout(function(){o.srcEl&&o.srcEl.parentNode&&o.srcEl.parentNode.removeChild(o.srcEl),o.predefinedWidth=o.width,o.predefinedHeight=o.height,o.width=t.width(o.width),o.height=t.height(o.height)}).then(function(){o.setNarrow(),o.sandbox.onresize(o.handleResize.bind(o)),o.completeDeferred.resolve(o.sandbox.element())})}),e):void 0},render:function(){var t=this;return this.preview||this.widgetId?(this.staticTimeline?this.rendered().then(function(t){t.resizeToContent(),s.doLayoutAsync()}):this.rendered().then(function(){t.recalculateStreamHeight(),s.doLayoutAsync()}),this.preview?this.getPreviewTimeline():this.getTimeline(),this.completed().then(this.scribePerformance.bind(this)),this.completed()):(this.completeDeferred.reject(400),this.completed())},scribePerformance:function(){l.endAndTrack("render","widgets-js-load","timeline",this.baseScribeData())},getPreviewTimeline:function(){function t(t){n.ready().then(function(){n.element=n.create(t),n.readTranslations(),n.bindInteractions(),n.updateCursors(t.headers,{initial:!0}),s.doLayoutAsync()})}function e(t){return t&&t.headers?void n.completeDeferred.reject(t.headers.status):void n.completeDeferred.resolve(n.srcEl)}var n=this;d.timelinePreview({params:this.preview}).then(t,e)},getTimeline:function(){function t(t){n.ready().then(function(){n.element=n.create(t),n.readTranslations(),n.bindInteractions(),n.updateTimeStamps(),n.updateCursors(t.headers,{initial:!0}),t.headers.xPolling&&/\d/.test(t.headers.xPolling)&&(n.pollInterval=1e3*t.headers.xPolling),n.staticTimeline||n.schedulePolling(),s.doLayoutAsync()})}function e(t){return t&&t.headers?void n.completeDeferred.reject(t.headers.status):void n.completeDeferred.resolve(n.srcEl)}var n=this;p.init(),d.timeline(w.aug({id:this.widgetId,instanceId:this.instanceId,dnt:A.enabled(),lang:this.lang},this.override)).then(t,e)},reconfigure:function(t){this.lang=t.lang,this.theme||(this.theme=t.theme),"dark"==this.theme&&this.classAttr.push("thm-dark"),this.chromeless&&this.classAttr.push("var-chromeless"),this.borderless&&this.classAttr.push("var-borderless"),this.headerless&&this.classAttr.push("var-headerless"),this.footerless&&this.classAttr.push("var-footerless"),this.staticTimeline&&this.classAttr.push("var-static"),!this.linkColor&&t.linkColor&&a.VALID_COLOR.test(t.linkColor)&&(this.linkColor=RegExp.$1),!this.height&&a.VALID_UNIT.test(t.height)&&(this.height=RegExp.$1),this.height=Math.max(this.dimensions.MIN_HEIGHT,this.height?this.height:this.dimensions.DEFAULT_HEIGHT),this.preview&&this.classAttr.push("var-preview"),this.narrow=this.width<=this.dimensions.NARROW_WIDTH,this.narrow&&_.add(this.sandbox.root,"env-narrow"),this.addSiteStyles()},getTweetDetails:function(t){var e,n=this,i={};return e=t&&t.children||[],w.toRealArray(e).forEach(function(t){w.aug(i,n.extractTweetScribeDetails(t))}),i},baseScribeData:function(){return{widget_id:this.widgetId,widget_origin:T.rootDocumentLocation(),widget_frame:T.isFramed()&&T.currentDocumentLocation(),message:this.partner,query:this.searchQuery,profile_id:this.profileId}},bindInteractions:function(){var t=this,e=this.element,n=!0;this.bindIntentHandlers(),this.bindUIHandlers(),b.delegate(e,"click",".load-tweets",function(e){n&&(n=!1,t.forceLoad(),b.stop(e))}),b.delegate(e,"click",".display-sensitive-image",function(n){t.showNSFW(E.closest(O,this,e)),b.stop(n)}),b.delegate(e,"mouseover",N,function(){t.mouseOver=!0}),b.delegate(e,"mouseout",N,function(){t.mouseOver=!1}),b.delegate(e,"mouseover",C,function(){t.mouseOverNotifier=!0}),b.delegate(e,"mouseout",C,function(){t.mouseOverNotifier=!1,r.setTimeout(function(){t.hideNewTweetNotifier()},3e3)}),this.staticTimeline||(b.delegate(e,"click",W,function(n){n.altKey||n.metaKey||n.shiftKey||(t.toggleExpando(E.closest(O,this,e)),b.stop(n))}),b.delegate(e,"click","A",function(t){b.stopPropagation(t)}),b.delegate(e,"click",".with-expansion",function(e){t.toggleExpando(this),b.stop(e)}),b.delegate(e,"click",".load-more",function(){t.loadMore()}),b.delegate(e,"click",C,function(){t.scrollToTop(),t.hideNewTweetNotifier(!0)}))},scrollToTop:function(){var t=this.element.querySelector(L);t.scrollTop=0,t.focus()},update:function(){var t=this,e=this.element.querySelector(k),n=e&&e.children[0],i=n&&n.getAttribute("data-tweet-id");this.updateTimeStamps(),this.requestTweets(i,!0,function(e){e.childNodes.length>0&&t.insertNewTweets(e)})},loadMore:function(){var t=this,e=w.toRealArray(this.element.querySelectorAll(O)).pop(),n=e&&e.getAttribute("data-tweet-id");this.requestTweets(n,!1,function(e){var i=t.element.querySelector(U),r=e.childNodes[0];return i.style.cssText="",r&&r.getAttribute("data-tweet-id")==n&&e.removeChild(r),e.childNodes.length>0?void t.appendTweets(e):(_.add(t.element,"no-more"),void i.focus())})},forceLoad:function(){var t=this,e=!!this.element.querySelectorAll(k).length;this.requestTweets(1,!0,function(n){n.childNodes.length&&(t[e?"insertNewTweets":"appendTweets"](n),_.add(t.element,"has-tweets"))})},schedulePolling:function(t){var e=this;null!==this.pollInterval&&(t=I.get("timeline.pollInterval")||t||this.pollInterval||1e4,t>-1&&r.setTimeout(function(){e.isUpdating||e.update(),e.schedulePolling()},t))},updateCursors:function(t,e){(e||{}).initial?(this.cursors.maxPosition=t.maxPosition,this.cursors.minPosition=t.minPosition):(e||{}).newer?this.cursors.maxPosition=t.maxPosition||this.cursors.maxPosition:this.cursors.minPosition=t.minPosition||this.cursors.minPosition},requestTweets:function(t,e,n){function i(t){if(o.isUpdating=!1,t&&t.headers){if("404"==t.headers.status)return void(o.pollInterval=null);if("503"==t.headers.status)return void(o.pollInterval*=1.5)}}function r(t){var i,r,s=o.sandbox.createDocumentFragment(),a=o.sandbox.createElement("ol"),c=[];if(o.isUpdating=!1,o.updateCursors(t.headers,{newer:e}),t&&t.headers&&t.headers.xPolling&&/\d+/.test(t.headers.xPolling)&&(o.pollInterval=1e3*t.headers.xPolling),t&&void 0!==t.body){if(a.innerHTML=t.body,a.children[0]&&"LI"!=a.children[0].tagName)return;for(r=o.getTweetDetails(a),w.forIn(r,function(t){c.push(t)}),c.length&&(i=o.baseScribeData(),i.item_ids=c,i.item_details=r,i.event_initiator=e?D.CLIENT_SIDE_APP:D.CLIENT_SIDE_USER,o.timelineType&&p.clientEvent({page:o.timelineType+"_timeline",component:"timeline",element:"initial",action:c.length?"results":"no_results"},i,!0),p.clientEvent({page:"timeline",component:"timeline",element:e?"newer":"older",action:"results"},i,!0),p.flush()),h.retinize(a),o.constrainMedia(a);a.children[0];)s.appendChild(a.children[0]);n(s)}}var o=this,s={id:this.widgetId,instanceId:this.instanceId,screenName:this.widgetScreenName,userId:this.widgetUserId,withReplies:this.widgetShowReplies,dnt:A.enabled(),lang:this.lang};e&&this.cursors.maxPosition?s.minPosition=this.cursors.maxPosition:!e&&this.cursors.minPosition?s.maxPosition=this.cursors.minPosition:e?s.sinceId=t:s.maxId=t,d.timelinePoll(w.aug(s,this.override)).then(r,i)},insertNewTweets:function(t){var e,n=this,i=this.element.querySelector(L),o=i.querySelector(k),s=o.offsetHeight;return o.insertBefore(t,o.firstChild),e=o.offsetHeight-s,x.get("events").trigger("timelineUpdated",{target:this.sandbox.element(),region:"newer"}),i.scrollTop>40||this.mouseIsOver()?(i.scrollTop=i.scrollTop+e,this.updateTimeStamps(),void this.showNewTweetNotifier()):(_.remove(this.element,q),o.style.cssText="margin-top: -"+e+"px",r.setTimeout(function(){i.scrollTop=0,_.add(n.element,q),v.cssTransitions()?o.style.cssText="":u.animate(function(t){e>t?o.style.cssText="margin-top: -"+(e-t)+"px":o.style.cssText=""},e,500,u.easeOut)},500),this.updateTimeStamps(),void("custom"!=this.timelineType&&this.gcTweets(50)))},appendTweets:function(t){var e=this.element.querySelector(k);e.appendChild(t),this.updateTimeStamps(),x.get("events").trigger("timelineUpdated",{target:this.sandbox.element(),region:"older"})},gcTweets:function(t){var e,n=this.element.querySelector(k),i=n.children.length;for(t=t||50;i>t&&(e=n.children[i-1]);i--)n.removeChild(e)},showNewTweetNotifier:function(){var t=this,e=this.element.querySelector(C),n=e.children[0];e.style.cssText="",e.removeChild(n),e.appendChild(n),_.add(this.element,F),r.setTimeout(function(){_.add(t.element,z)},10),this.newNoticeDisplayTime=+new Date,r.setTimeout(function(){t.hideNewTweetNotifier()},5e3)},hideNewTweetNotifier:function(t){var e=this;(t||!this.mouseOverNotifier)&&(_.remove(this.element,z),r.setTimeout(function(){_.remove(e.element,F)},500))},discardStaticOverflow:function(t){var e,n=t.querySelector(k);if(this.staticTimeline)for(this.height=0;e=n.children[this.tweetLimit];)n.removeChild(e)},hideStreamScrollBar:function(){var t,e=this.element.querySelector(L),n=this.element.querySelector(k);e.style.width="",t=this.element.offsetWidth-n.offsetWidth,t>0&&(e.style.width=this.element.offsetWidth+t+"px")},readTranslations:function(){var t=this.element,e="data-dt-";this.datetime=new c(w.compact({phrases:{now:t.getAttribute(e+"now"),s:t.getAttribute(e+"s"),m:t.getAttribute(e+"m"),h:t.getAttribute(e+"h"),second:t.getAttribute(e+"second"),seconds:t.getAttribute(e+"seconds"),minute:t.getAttribute(e+"minute"),minutes:t.getAttribute(e+"minutes"),hour:t.getAttribute(e+"hour"),hours:t.getAttribute(e+"hours")},months:t.getAttribute(e+"months").split("|"),formats:{abbr:t.getAttribute(e+"abbr"),shortdate:t.getAttribute(e+"short"),longdate:t.getAttribute(e+"long")}}))},updateTimeStamps:function(){for(var t,e,n,i,r=this.element.querySelectorAll(H),o=0;t=r[o];o++)n=t.getAttribute("data-datetime"),i=n&&this.datetime.timeAgo(n,this.i18n),e=t.getElementsByTagName("TIME")[0],i&&(e&&e.innerHTML?e.innerHTML=i:t.innerHTML=i)},mouseIsOver:function(){return this.mouseOver},addUrlParams:function(t){var e=this,n={tw_w:this.widgetId,related:this.related,partner:this.partner,query:this.searchQuery,profile_id:this.profileId,original_referer:T.rootDocumentLocation(),tw_p:"embeddedtimeline"};return this.addUrlParams=m(n,function(t){var n=E.closest(O,t,e.element);return n&&{tw_i:n.getAttribute("data-tweet-id")}}),this.addUrlParams(t)},showNSFW:function(t){var e,n,i,r,o,s,a=t.querySelector(".nsfw"),c=0;a&&(n=h.scaleDimensions(a.getAttribute("data-width"),a.getAttribute("data-height"),this.contentWidth(),a.getAttribute("data-height")),e=!!(r=a.getAttribute("data-player")),e?o=this.sandbox.createElement("iframe"):(o=this.sandbox.createElement("img"),r=a.getAttribute(v.retina()?"data-image-2x":"data-image"),o.alt=a.getAttribute("data-alt"),s=this.sandbox.createElement("a"),s.href=a.getAttribute("data-href"),s.appendChild(o)),o.title=a.getAttribute("data-title"),o.src=r,o.width=n.width,o.height=n.height,i=E.closest(M,a,t),c=n.height-a.offsetHeight,a.parentNode.replaceChild(e?o:s,a))},toggleExpando:function(t){var e,n=this,i=t.querySelector(M),r=i&&i.children[0],o=r&&r.getAttribute("data-expanded-media"),a=t.querySelector(W),c=a&&a.getElementsByTagName("B")[0],u=c&&(c.innerText||c.textContent);if(c){if(this.layout(function(){c.innerHTML=a.getAttribute("data-toggled-text"),a.setAttribute("data-toggled-text",u)}),_.present(t,j))return this.layout(function(){_.remove(t,j)}),i?(this.layout(function(){i.style.cssText="",r.innerHTML=""}),void s.doLayout()):void s.doLayout();o&&(e=this.sandbox.createElement("DIV"),e.innerHTML=o,h.retinize(e),this.layout(function(){r.appendChild(e),n.constrainMedia(e,null,function(t){t()})})),i&&this.layout(function(){i.style.maxHeight="500px"}),this.layout(function(){_.add(t,j)}),s.doLayout()}},recalculateStreamHeight:function(t){var e=this,n=this.element.querySelector(P),i=this.element.querySelector(R),r=this.element.querySelector(L);this.layout(function(){var o=n.offsetHeight+(i?i.offsetHeight:0),s=t||e.sandbox.height();r.style.cssText="height:"+(s-o-2)+"px",e.noscrollbar&&e.hideStreamScrollBar()})},handleResize:function(t,e){var n=this,i=Math.min(this.dimensions.DEFAULT_WIDTH,Math.max(this.dimensions.MIN_WIDTH,Math.min(this.predefinedWidth||this.dimensions.DEFAULT_WIDTH,t)));(i!=this.width||e!=this.height)&&(this.width=i,this.height=e,this.setNarrow(),this.constrainMedia(this.element,this.contentWidth(i)),this.staticTimeline?this.layout(function(){n.height=n.element.offsetHeight,n.sandbox.height(n.height),x.get("events").trigger("resize",{target:n.sandbox.element()})}):(this.recalculateStreamHeight(e),x.get("events").trigger("resize",{target:this.sandbox.element()})),s.doLayoutAsync())}}),e.exports=i},{10:10,16:16,2:2,20:20,21:21,26:26,3:3,35:35,37:37,38:38,45:45,47:47,48:48,50:50,54:54,59:59,60:60,62:62,63:63,7:7,77:77,8:8,80:80,9:9}],56:[function(t,e,n){function i(t){s.apply(this,[t]);var e=this.params(),n=e.count||this.dataAttr("count"),i=e.size||this.dataAttr("size"),r=u.getScreenNameFromPage(),o=""+(e.shareWithRetweet||this.dataAttr("share-with-retweet")||a.val("share-with-retweet"));this.classAttr.push("twitter-tweet-button"),"hashtag"==e.type||c.contains(this.classAttr,"twitter-hashtag-button")?(this.type="hashtag",this.classAttr.push("twitter-hashtag-button")):"mention"==e.type||c.contains(this.classAttr,"twitter-mention-button")?(this.type="mention",this.classAttr.push("twitter-mention-button")):this.classAttr.push("twitter-share-button"),this.text=e.text||this.dataAttr("text"),this.text&&/\+/.test(this.text)&&!/ /.test(this.text)&&(this.text=this.text.replace(/\+/g," ")),this.counturl=e.counturl||this.dataAttr("counturl"),this.searchlink=e.searchlink||this.dataAttr("searchlink"),this.button_hashtag=l.hashTag(e.button_hashtag||e.hashtag||this.dataAttr("button-hashtag"),!1),this.size="large"==i?"l":"m",this.align=e.align||this.dataAttr("align")||"",this.via=e.via||this.dataAttr("via"),this.hashtags=e.hashtags||this.dataAttr("hashtags"),this.screen_name=l.screenName(e.screen_name||e.screenName||this.dataAttr("button-screen-name")),this.url=e.url||this.dataAttr("url"),this.type?(this.count="none",this.shareWithRetweet="never",r&&(this.related=this.related?r+","+this.related:r)):(this.text=this.text||h,this.url=this.url||u.getCanonicalURL()||f,this.count=c.contains(p,n)?n:"horizontal",this.via=this.via||r,o&&c.contains(m,o)&&(this.shareWithRetweet=o.replace("-","_")))}var r=t(13),o=t(14),s=t(50),a=t(19),c=t(80),u=t(79),l=t(76),d=t(62),h=r.title,f=o.href,p=["vertical","horizontal","none"],m=["never","publisher-first","publisher-only","author-first","author-only"];i.prototype=new s,c.aug(i.prototype,{iframeSource:"widgets/tweet_button.9b77a1cb4bd14da06dfa5e2f65422c91.{{lang}}.html",widgetUrlParams:function(){return c.compact({text:this.text,url:this.url,via:this.via,related:this.related,count:this.count,lang:this.lang,counturl:this.counturl,searchlink:this.searchlink,placeid:this.placeid,original_referer:o.href,id:this.id,size:this.size,type:this.type,screen_name:this.screen_name,share_with_retweet:this.shareWithRetweet,button_hashtag:this.button_hashtag,hashtags:this.hashtags,align:this.align,partner:this.partner,dnt:d.enabled(),_:+new Date})},render:function(){var t,e=this,n=this.makeIframeSource();return this.count&&this.classAttr.push("twitter-count-"+this.count),t=this.create(n,{title:"Twitter Tweet Button"}).then(function(t){return e.element=t})}}),e.exports=i},{13:13,14:14,19:19,50:50,62:62,76:76,79:79,80:80}],57:[function(t,e,n){function i(t,e,n,i){b[t]=b[t]||[],b[t].push({s:n,f:i,lang:e})}function r(t,e){var n={};n[t]={item_type:0},v.clientEvent({page:"video",component:"tweet",action:"results"},f.aug({},e,{item_ids:[t],item_details:n}),!0),g.scribeVideoAudienceImpression()}function o(t,e){var n={};n[t]={item_type:0},v.clientEvent({page:"video",component:"rawembedcode",action:"no_results"},{widget_origin:p.rootDocumentLocation(),widget_frame:p.isFramed()&&p.currentDocumentLocation(),message:e,item_ids:[t],item_details:n},!0),g.scribeVideoAudienceImpression()}function s(t){if(t){u.apply(this,[t]);var e=this.srcEl&&this.srcEl.getElementsByTagName("A"),n=e&&e[e.length-1],i=this.params();this.hideStatus="hidden"===(i.status||this.dataAttr("status")),this.tweetId=i.tweetId||n&&y.status(n.href)}}var a=t(3),c=t(50),u=t(54),l=t(7),d=t(72),h=t(73),f=t(80),p=t(60),m=t(45),g=t(35),v=t(37),y=t(76),w=t(13),b={},_=[];s.prototype=new u,f.aug(s.prototype,{renderedClassNames:"twitter-video twitter-video-rendered",videoPlayer:!0,dimensions:{DEFAULT_HEIGHT:"0",DEFAULT_WIDTH:"0",maxHeight:"500",MIN_WIDTH:"320",MIN_HEIGHT:"180",MARGIN:"10px 0",WIDE_MEDIA_PADDING:0,NARROW_MEDIA_PADDING:0,BORDERS:0},styleSheetUrl:a.video,applyVisibleSandboxStyles:function(t){return t.style({visibility:"visible"})},applyInitialSandboxStyles:function(t){return t.style({position:"absolute",top:0,left:0,width:"100%",height:"100%",visiblity:"hidden"})},modifyFrame:function(t){return this.constrainingWrapper=w.createElement("div"),this.constrainingWrapper.style.minWidth=this.dimensions.MIN_WIDTH+"px",this.constrainingWrapper.style.margin=this.dimensions.MARGIN,this.wrapper=w.createElement("div"),this.wrapper.style.position="relative",this.wrapper.style.height=0,this.constrainingWrapper.appendChild(this.wrapper),this.wrapper.appendChild(t),this.constrainingWrapper},create:function(t){var e,n,i=this,o=this.sandbox.createElement("div");if(o.innerHTML=t,e=o.children[0]){n=e.children[0],this.playerConfig=JSON.parse(e.getAttribute("data-player-config")),this.sandbox.setTitle(e.getAttribute("data-iframe-title")||"Video"),this.sandbox.appendChild(e).then(function(){i.renderedDeferred.resolve(i.sandbox),i.completeDeferred.resolve(i.sandbox.element())});var s=n.getAttribute("data-width"),a=n.getAttribute("data-height"),c=s/a,u=1/c*100+"%";return this.layout(function(){i.wrapper.style.paddingBottom=u,i.constrainingWrapper.style.maxWidth=parseInt(i.dimensions.maxHeight,10)*c+"px"}),r(this.tweetId,this.baseScribeData()),e}},render:function(){var t=this;return this.tweetId?(this.rendered().then(function(){var e=t.srcEl;e&&e.parentNode&&t.layout(function(){e.parentNode.removeChild(e)})}),i(this.tweetId,this.lang,function(e){t.ready().then(function(){t.element=t.create(e),t.readTimestampTranslations(),t.writePlayerConfig()})},function(){o(t.tweetId,t.partner),t.completeDeferred.resolve(t.srcEl)}),_.push(this.completed()),this.completed()):(this.completeDeferred.resolve(this.srcEl),this.completed())},baseScribeData:function(){return{widget_origin:p.rootDocumentLocation(),widget_frame:p.isFramed()&&p.currentDocumentLocation(),message:this.partner}},readTimestampTranslations:function(){var t=this.element,e="data-dt-",n=t.getAttribute(e+"months")||"";this.datetime=new l(f.compact({phrases:{AM:t.getAttribute(e+"am"),PM:t.getAttribute(e+"pm")},months:n.split("|"),formats:{full:t.getAttribute(e+"full")}}))},getTimestamp:function(){var t=this.element.getAttribute("data-datetime"),e=t&&this.datetime.localTimeStamp(t);return{local:e}},writePlayerConfig:function(){this.playerConfig.statusTimestamp=this.getTimestamp(),this.playerConfig.hideStatus=this.hideStatus,this.element.setAttribute("data-player-config",JSON.stringify(this.playerConfig))}}),s.fetchAndRender=function(){function t(t){f.forIn(t,function(t,n){var i=e[t];i.forEach(function(t){t.s&&t.s.call(this,n)}),delete e[t]}),f.forIn(e,function(t,e){e.forEach(function(e){e.f&&e.f.call(this,t)})})}var e=b,n=[];b={};for(var i in e)e.hasOwnProperty(i)&&n.push(i);n.length&&(h.always(m.videos({ids:n.sort(),lang:e[n[0]][0].lang}),t),d.all(_),_=[])},c.afterLoad(s.fetchAndRender),e.exports=s},{13:13,3:3,35:35,37:37,45:45,50:50,54:54,60:60,7:7,72:72,73:73,76:76,80:80}],58:[function(t,e,n){function i(t){return c.parseInt(t,16)}function r(t){return u.isType("string",t)?(t=t.replace(l,""),t+=3===t.length?t:""):null}function o(t,e){var n,o,s,a;return t=r(t),e=e||0,t?(n=0>e?0:255,e=0>e?-Math.max(e,-1):Math.min(e,1),o=i(t.substring(0,2)),s=i(t.substring(2,4)),a=i(t.substring(4,6)),"#"+(16777216+65536*(Math.round((n-o)*e)+o)+256*(Math.round((n-s)*e)+s)+(Math.round((n-a)*e)+a)).toString(16).slice(1)):void 0}function s(t,e){return o(t,-e)}function a(t,e){return o(t,e)}var c=t(16),u=t(80),l=/^#/;e.exports={darken:s,lighten:a}},{16:16,80:80}],59:[function(t,e,n){e.exports={sanitize:function(t,e,n){var i,r=/^[\w ,%\/"'\-_#]+$/,o=t&&t.split(";").map(function(t){return t.split(":").slice(0,2).map(function(t){return t.trim()})}),s=0,a=[],c=n?"!important":"";for(e=e||/^(font|text\-|letter\-|color|line\-)[\w\-]*$/;o&&(i=o[s]);s++)i[0].match(e)&&i[1].match(r)&&a.push(i.join(":")+c);return a.join(";")}}},{}],60:[function(t,e,n){function i(t){return t&&c.isType("string",t)&&(u=t),u}function r(){return l}function o(){return u!==l}var s=t(14),a=t(79),c=t(80),u=a.getCanonicalURL()||s.href,l=u;e.exports={isFramed:o,rootDocumentLocation:i,currentDocumentLocation:r}},{14:14,79:79,80:80}],61:[function(t,e,n){function i(){u=1;for(var t=0,e=l.length;e>t;t++)l[t]()}var r,o,s,a=t(13),c=t(16),u=0,l=[],d=!1,h=a.createElement("a");/^loade|c/.test(a.readyState)&&(u=1),a.addEventListener&&a.addEventListener("DOMContentLoaded",o=function(){a.removeEventListener("DOMContentLoaded",o,d),i()},d),h.doScroll&&a.attachEvent("onreadystatechange",r=function(){/^c/.test(a.readyState)&&(a.detachEvent("onreadystatechange",r),i())}),s=h.doScroll?function(t){c.self!=c.top?u?t():l.push(t):!function(){try{h.doScroll("left")}catch(e){return setTimeout(function(){s(t)},50)}t()}()}:function(t){u?t():l.push(t)},e.exports=s},{13:13,16:16}],62:[function(t,e,n){function i(){h=!0}function r(t,e){return h?!0:l.asBoolean(d.val("dnt"))?!0:!a||1!=a.doNotTrack&&1!=a.msDoNotTrack?u.isUrlSensitive(e||s.host)?!0:c.isFramed()&&u.isUrlSensitive(c.rootDocumentLocation())?!0:(t=f.test(t||o.referrer)&&RegExp.$1,t&&u.isUrlSensitive(t)?!0:!1):!0}var o=t(13),s=t(14),a=t(15),c=t(60),u=t(75),l=t(77),d=t(19),h=!1,f=/https?:\/\/([^\/]+).*/i;e.exports={setOn:i,enabled:r}},{13:13,14:14,15:15,19:19,60:60,75:75,77:77}],63:[function(t,e,n){function i(t){return t=t||g,t.devicePixelRatio?t.devicePixelRatio>=1.5:t.matchMedia?t.matchMedia("only screen and (min-resolution: 144dpi)").matches:!1}function r(t){return t=t||A,/(Trident|MSIE \d)/.test(t)}function o(t){return t=t||A,/MSIE 9/.test(t)}function s(t){return t=t||A,/(iPad|iPhone|iPod)/.test(t)}function a(t){return t=t||A,/^Mozilla\/5\.0 \(Linux; (U; )?Android/.test(t)}function c(){return T}function u(t,e){return t=t||g,e=e||A,t.postMessage&&!(r(e)&&t.opener)}function l(t){t=t||m;try{return!!t.plugins["Shockwave Flash"]||!!new ActiveXObject("ShockwaveFlash.ShockwaveFlash")}catch(e){return!1}}function d(t,e,n){return t=t||g,e=e||m,n=n||A,"ontouchstart"in t||/Opera Mini/.test(n)||e.msMaxTouchPoints>0}function h(){var t=p.body.style;return void 0!==t.transition||void 0!==t.webkitTransition||void 0!==t.mozTransition||void 0!==t.oTransition||void 0!==t.msTransition}function f(){return!!(g.Promise&&g.Promise.resolve&&g.Promise.reject&&g.Promise.all&&g.Promise.race&&function(){var t;return new g.Promise(function(e){t=e}),b.isType("function",t)}())}var p=t(13),m=t(15),g=t(16),v=t(61),y=t(68),w=t(77),b=t(80),_=t(19),E=t(20),A=m.userAgent,T=!1,x=!1,I="twitter-csp-test";E.set("verifyCSP",function(t){var e=p.getElementById(I);x=!0,T=!!t,e&&e.parentNode.removeChild(e)}),v(function(){var t;return w.asBoolean(_.val("widgets:csp"))?T=!0:(t=p.createElement("script"),t.id=I,t.text=E.fullPath("verifyCSP")+"(false);",p.body.appendChild(t),void g.setTimeout(function(){x||(y.warn('TWITTER: Content Security Policy restrictions may be applied to your site. Add <meta name="twitter:widgets:csp" content="on"> to supress this warning.'),y.warn("TWITTER: Please note: Not all embedded timeline and embedded Tweet functionality is supported when CSP is applied."))},5e3))}),e.exports={retina:i,anyIE:r,ie9:o,ios:s,android:a,cspEnabled:c,flashEnabled:l,canPostMessage:u,touch:d,cssTransitions:h,hasPromiseSupport:f}},{13:13,15:15,16:16,19:19,20:20,61:61,68:68,77:77,80:80}],64:[function(t,e,n){var i=t(80),r={bind:function(t,e){return this._handlers=this._handlers||{},this._handlers[t]=this._handlers[t]||[],this._handlers[t].push(e)},unbind:function(t,e){if(this._handlers[t])if(e){var n=this._handlers[t].indexOf(e);n>=0&&this._handlers[t].splice(n,1)}else this._handlers[t]=[]},trigger:function(t,e){var n=this._handlers&&this._handlers[t];e=e||{},e.type=t,n&&n.forEach(function(t){i.async(t.bind(this,e))})}};e.exports={Emitter:r}},{80:80}],65:[function(t,e,n){function i(t){for(var e,n=r.getElementsByTagName("iframe"),i=0;e=n[i];i++)if(e.contentWindow===t)return e}var r=t(13);e.exports=i},{13:13}],66:[function(t,e,n){var i=t(13),r=t(80);e.exports=function(t,e,n){var o;if(n=n||i,t=t||{},e=e||{},t.name){try{o=n.createElement('<iframe name="'+t.name+'"></iframe>')}catch(s){o=n.createElement("iframe"),o.name=t.name}delete t.name}else o=n.createElement("iframe");return t.id&&(o.id=t.id,delete t.id),o.allowtransparency="true",o.scrolling="no",o.setAttribute("frameBorder",0),o.setAttribute("allowTransparency",!0),r.forIn(t,function(t,e){o.setAttribute(t,e)}),r.forIn(e,function(t,e){o.style[t]=e}),o}},{13:13,80:80}],67:[function(t,e,n){function i(){}var r,o=t(16),s=t(71),a=[];i.prototype.enqueue=function(t,e){var n=new s;return a.push({action:t,deferred:n,note:e}),n.promise},i.prototype.exec=function(){var t,e=a;if(e.length)for(a=[];e.length;)t=e.shift(),t&&t.action?t.deferred.resolve(t.action()):t.deferred.reject()},i.prototype.delayedExec=function(){r&&o.clearTimeout(r),r=o.setTimeout(this.exec,100)},e.exports=i},{16:16,71:71}],68:[function(t,e,n){function i(){u("info",h.toRealArray(arguments))}function r(){u("warn",h.toRealArray(arguments))}function o(){u("error",h.toRealArray(arguments))}function s(t){m&&(p[t]=c())}function a(t){var e;m&&(p[t]?(e=c(),i("_twitter",t,e-p[t])):o("timeEnd() called before time() for id: ",t))}function c(){return d.performance&&+d.performance.now()||+new Date}function u(t,e){if(d[f]&&d[f][t])switch(e.length){case 1:d[f][t](e[0]);break;case 2:d[f][t](e[0],e[1]);break;case 3:d[f][t](e[0],e[1],e[2]);break;case 4:d[f][t](e[0],e[1],e[2],e[3]);break;case 5:d[f][t](e[0],e[1],e[2],e[3],e[4]);break;default:0!==e.length&&d[f].warn&&d[f].warn("too many params passed to logger."+t)}}var l=t(14),d=t(16),h=t(80),f=["con","sole"].join(""),p={},m=h.contains(l.href,"tw_debug=true");e.exports={info:i,warn:r,error:o,time:s,timeEnd:a}},{14:14,16:16,80:80}],69:[function(t,e,n){function i(t){return function(e){return o.hasValue(e[t])}}function r(){this.assertions=[],this._defaults={}}var o=t(77),s=t(80);r.prototype.assert=function(t,e){return this.assertions.push({fn:t,msg:e||"assertion failed"}),this},r.prototype.defaults=function(t){return this._defaults=t||this._defaults,this},r.prototype.require=function(t){var e=this;return t=Array.isArray(t)?t:s.toRealArray(arguments),t.forEach(function(t){e.assert(i(t),"required: "+t)}),this},r.prototype.parse=function(t){var e,n;if(e=s.aug({},this._defaults,t||{}),n=this.assertions.reduce(function(t,n){return n.fn(e)||t.push(n.msg),t},[]),n.length>0)throw new Error(n.join("\n"));return e},e.exports=r},{77:77,80:80}],70:[function(t,e,n){var i,r,o,s=t(74);i=function(t){var e=t.search.substr(1);return s.decode(e)},r=function(t){var e=t.href,n=e.indexOf("#"),i=0>n?"":e.substring(n+1);return s.decode(i)},o=function(t){var e,n={},o=i(t),s=r(t);for(e in o)o.hasOwnProperty(e)&&(n[e]=o[e]);for(e in s)s.hasOwnProperty(e)&&(n[e]=s[e]);return n},e.exports={combined:o,fromQuery:i,fromFragment:r}},{74:74}],71:[function(t,e,n){function i(){var t=this;this.promise=new r(function(e,n){t.resolve=e,t.reject=n})}var r=t(72);e.exports=i},{72:72}],72:[function(t,e,n){var i=t(1).Promise,r=t(16),o=t(63);e.exports=o.hasPromiseSupport()?r.Promise:i},{1:1,16:16,63:63}],73:[function(t,e,n){function i(t,e){return t.then(e,e)}function r(t){var e;return t=t||[],e=t.length,t=t.filter(o),e?e!==t.length?s.reject("non-Promise passed to .some"):new s(function(e,n){function i(){r+=1,r===t.length&&n()}var r=0;t.forEach(function(t){t.then(e,i)})}):s.reject("no promises passed to .some")}function o(t){return t instanceof s}var s=t(72);e.exports={always:i,some:r,isPromise:o}},{72:72}],74:[function(t,e,n){function i(t){return encodeURIComponent(t).replace(/\+/g,"%2B").replace(/'/g,"%27")}function r(t){return decodeURIComponent(t)}function o(t){var e=[];return l.forIn(t,function(t,n){var r=i(t);l.isType("array",n)||(n=[n]),n.forEach(function(t){u.hasValue(t)&&e.push(r+"="+i(t))})}),e.sort().join("&")}function s(t){var e,n={};return t?(e=t.split("&"),e.forEach(function(t){var e=t.split("="),i=r(e[0]),o=r(e[1]);return 2==e.length?l.isType("array",n[i])?void n[i].push(o):i in n?(n[i]=[n[i]],void n[i].push(o)):void(n[i]=o):void 0}),n):{}}function a(t,e){var n=o(e);return n.length>0?l.contains(t,"?")?t+"&"+o(e):t+"?"+o(e):t}function c(t){var e=t&&t.split("?");return 2==e.length?s(e[1]):{}}var u=t(77),l=t(80);e.exports={url:a,decodeURL:c,decode:s,encode:o,encodePart:i,decodePart:r}},{77:77,80:80}],75:[function(t,e,n){function i(t){return t in a?a[t]:a[t]=s.test(t)}function r(){return i(o.host)}var o=t(14),s=/^[^#?]*\.(gov|mil)(:\d+)?([#?].*)?$/i,a={};e.exports={isUrlSensitive:i,isHostPageSensitive:r}},{14:14}],76:[function(t,e,n){function i(t){return"string"==typeof t&&m.test(t)&&RegExp.$1.length<=20}function r(t){return i(t)?RegExp.$1:void 0}function o(t,e){var n=p.decodeURL(t);return e=e||!1,n.screen_name=r(t),n.screen_name?p.url("https://twitter.com/intent/"+(e?"follow":"user"),n):void 0}function s(t){return o(t,!0)}function a(t){return"string"==typeof t&&w.test(t)}function c(t,e){return e=void 0===e?!0:e,a(t)?(e?"#":"")+RegExp.$1:void 0}function u(t){return"string"==typeof t&&g.test(t)}function l(t){return u(t)&&RegExp.$1}function d(t){return v.test(t)}function h(t){return y.test(t)}function f(t){return b.test(t)}var p=t(74),m=/(?:^|(?:https?\:)?\/\/(?:www\.)?twitter\.com(?:\:\d+)?(?:\/intent\/(?:follow|user)\/?\?screen_name=|(?:\/#!)?\/))@?([\w]+)(?:\?|&|$)/i,g=/(?:^|(?:https?\:)?\/\/(?:www\.)?twitter\.com(?:\:\d+)?\/(?:#!\/)?[\w_]+\/status(?:es)?\/)(\d+)/i,v=/^http(s?):\/\/(\w+\.)*twitter\.com([\:\/]|$)/i,y=/^http(s?):\/\/pbs\.twimg\.com\//,w=/^#?([^.,<>!\s\/#\-\(\)\'\"]+)$/,b=/twitter\.com(\:\d{2,4})?\/intent\/(\w+)/;e.exports={isHashTag:a,hashTag:c,isScreenName:i,screenName:r,isStatus:u,
	status:l,intentForProfileURL:o,intentForFollowURL:s,isTwitterURL:d,isTwimgURL:h,isIntentURL:f,regexen:{profile:m}}},{74:74}],77:[function(t,e,n){function i(t){return void 0!==t&&null!==t&&""!==t}function r(t){return s(t)&&t%1===0}function o(t){return s(t)&&!r(t)}function s(t){return i(t)&&!isNaN(t)}function a(t){return i(t)&&"array"==p.toType(t)}function c(t){return p.contains(g,t)}function u(t){return p.contains(m,t)}function l(t){return i(t)?u(t)?!0:c(t)?!1:!!t:!1}function d(t){return s(t)?t:void 0}function h(t){return o(t)?t:void 0}function f(t){return r(t)?t:void 0}var p=t(80),m=[!0,1,"1","on","ON","true","TRUE","yes","YES"],g=[!1,0,"0","off","OFF","false","FALSE","no","NO"];e.exports={hasValue:i,isInt:r,isFloat:o,isNumber:s,isArray:a,isTruthValue:u,isFalseValue:c,asInt:f,asFloat:h,asNumber:d,asBoolean:l}},{80:80}],78:[function(t,e,n){function i(){return String(+new Date)+Math.floor(1e5*Math.random())+r++}var r=0;e.exports={generate:i}},{}],79:[function(t,e,n){function i(t,e){var n,i;return e=e||a,/^https?:\/\//.test(t)?t:/^\/\//.test(t)?e.protocol+t:(n=e.host+(e.port.length?":"+e.port:""),0!==t.indexOf("/")&&(i=e.pathname.split("/"),i.pop(),i.push(t),t="/"+i.join("/")),[e.protocol,"//",n,t].join(""))}function r(){for(var t,e=s.getElementsByTagName("link"),n=0;t=e[n];n++)if("canonical"==t.rel)return i(t.href)}function o(){for(var t,e,n,i=s.getElementsByTagName("a"),r=s.getElementsByTagName("link"),o=[i,r],a=0,u=0,l=/\bme\b/;t=o[a];a++)for(u=0;e=t[u];u++)if(l.test(e.rel)&&(n=c.screenName(e.href)))return n}var s=t(13),a=t(14),c=t(76);e.exports={absolutize:i,getCanonicalURL:r,getScreenNameFromPage:o}},{13:13,14:14,76:76}],80:[function(t,e,n){function i(t){return d(arguments).slice(1).forEach(function(e){o(e,function(e,n){t[e]=n})}),t}function r(t){return o(t,function(e,n){c(n)&&(r(n),u(n)&&delete t[e]),(void 0===n||null===n||""===n)&&delete t[e]}),t}function o(t,e){for(var n in t)(!t.hasOwnProperty||t.hasOwnProperty(n))&&e(n,t[n]);return t}function s(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function a(t,e){return t==s(e)}function c(t){return t===Object(t)}function u(t){if(!c(t))return!1;if(Object.keys)return!Object.keys(t).length;for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function l(t,e){f.setTimeout(function(){t.call(e||null)},0)}function d(t){return Array.prototype.slice.call(t)}function h(t,e){return t&&t.indexOf?t.indexOf(e)>-1:!1}var f=t(16);e.exports={aug:i,async:l,compact:r,contains:h,forIn:o,isObject:c,isEmptyObject:u,toType:s,isType:a,toRealArray:d}},{16:16}],81:[function(t,e,n){function i(){if(o)return o;if(u.isDynamicWidget()){var t,e=0,n=c.parent.frames.length;try{if(o=c.parent.frames[h])return o}catch(i){}if(l.anyIE())for(;n>e;e++)try{if(t=c.parent.frames[e],t&&"function"==typeof t.openIntent)return o=t}catch(i){}}}function r(){var t,e,n,o,a,l,d={};if("function"===(typeof arguments[0]).toLowerCase()?d.success=arguments[0]:d=arguments[0],t=d.success||function(){},e=d.timeout||function(){},n=d.nohub||function(){},o=d.complete||function(){},a=void 0!==d.attempt?d.attempt:m,!u.isDynamicWidget()||s)return n(),o(),!1;l=i(),a--;try{if(l&&l.trigger)return t(l),void o()}catch(h){}return 0>=a?(s=!0,e(),void o()):+new Date-f>p*m?(s=!0,void n()):void c.setTimeout(function(){r({success:t,timeout:e,nohub:n,attempt:a,complete:o})},p)}var o,s,a=t(14),c=t(16),u=t(46),l=t(63),d="twttrHubFrameSecure",h="http:"==a.protocol?"twttrHubFrame":d,f=+new Date,p=100,m=20;e.exports={withHub:r,contextualHubId:h,secureHubId:d}},{14:14,16:16,46:46,63:63}],82:[function(t,e,n){e.exports={version:"6df2df2af40e4876413ef5749c1c4217bdf335a5:1436313965148"}},{}],83:[function(t,e,n){e.exports={css:"bdd2a0d299634c64db074e7c7b24c394"}},{}],84:[function(t,e,n){function i(t){t=r.parse(t),this.rootEl=t.rootEl,this.videoEl=t.videoEl,this.playButtonEl=t.playButtonEl,this.fallbackUrl=t.fallbackUrl,this.player=new u({videoEl:this.videoEl,loop:!0,autoplay:!1}),this._attachClickListener()}var r,o=t(8),s=t(9),a=t(16),c=t(69),u=t(85);r=(new c).require("rootEl","videoEl","playButtonEl").defaults({fallbackUrl:null}),i.prototype._attachClickListener=function(){function t(t){s.stopPropagation(t),e._togglePlayer()}var e=this;this.videoEl.addEventListener("click",t,!1),this.playButtonEl.addEventListener("click",t,!1)},i.prototype._togglePlayer=function(){return this.player.hasPlayableSource()?(this.player.toggle(),void o.toggle(this.rootEl,"is-playing",!this.player.isPaused())):void(this.fallbackUrl&&a.open(this.fallbackUrl))},e.exports=i},{16:16,69:69,8:8,85:85,9:9}],85:[function(t,e,n){function i(t){var e;t=r.parse(t),this.videoEl=t.videoEl,"loop"in t&&(this.videoEl.loop=t.loop),"autoplay"in t&&(this.videoEl.autoplay=t.autoplay),"poster"in t&&(this.videoEl.poster=t.poster),e=a.toRealArray(this.videoEl.querySelectorAll("source")),this.sourceTypes=e.map(function(t){return t.type})}var r,o=t(13),s=t(69),a=t(80);r=(new s).require("videoEl"),i.prototype.isPaused=function(){return this.videoEl.paused},i.prototype.play=function(){return this.videoEl.play(),this},i.prototype.pause=function(){return this.videoEl.pause(),this},i.prototype.toggle=function(){return this.videoEl.paused?this.play():this.pause()},i.prototype.addSource=function(t,e){var n=o.createElement("source");return n.src=t,n.type=e,this.sourceTypes.push(e),this.videoEl.appendChild(n),this},i.prototype.hasPlayableSource=function(){var t=this.videoEl;return t.canPlayType?this.sourceTypes.reduce(function(e,n){return e||!!t.canPlayType(n).replace("no","")},!1):!1},i.prototype.setDimensions=function(t,e){return this.videoEl.width=t,this.videoEl.height=e,this},e.exports=i},{13:13,69:69,80:80}],86:[function(t,e,n){function i(t,e){return t&&t.getAttribute?t.getAttribute("data-"+e):void 0}function r(t,e){return{element:t.element||v,action:t.action||y,page:o(e)?"video":void 0}}function o(t){return d.closest(".embedded-video",t)}function s(t){var e=d.closest(".tweet",t),n=!e&&d.closest(".EmbeddedTweet",t);return n&&(e=n.querySelector(".tweet.subject")),e}function a(t){return JSON.parse(i(o(t),"player-config"))}function c(t,e){var n,r,a,c=o(e);return c?n=l.aug({item_type:m,card_type:g,id:i(c,"tweet-id"),card_name:i(c,"card-name"),publisher_id:i(c,"publisher-id"),content_id:i(c,"content-id")},t.itemData||{}):(r=d.closest(".cards-multimedia",e),a=s(e),n=l.aug({item_type:m,card_type:g,id:i(a,"tweet-id"),card_name:i(r,"card-name"),publisher_id:i(r,"publisher-id"),content_id:i(r,"video-content-id")},t.itemData||{})),{items:[n]}}function u(t){var e=this;this.global=t,this.server=(new h).attachReceiver(new p.Receiver(t,"")).bind("scribe",function(t){e.scribe(t,this)}).bind("requestPlayerConfig",function(){return e.requestPlayerConfig(this)})}var l=t(80),d=t(10),h=t(29),f=t(39),p=t(30),m=0,g=6,v="amplify_player",y="undefined";u.prototype.findIframeByWindow=function(t){for(var e=this.global.document.getElementsByTagName("iframe"),n=e.length,i=0;n>i;i++)if(e[i].contentWindow==t)return e[i]},u.prototype.requestPlayerConfig=function(t){var e=this.findIframeByWindow(t);if(e)return a(e)},u.prototype.scribe=function(t,e){var n,i,o,s;n=t&&t.customScribe,i=this.findIframeByWindow(e),n&&i&&(o=r(n,i),s=c(n,i),f.clientEvent2(o,s,!0))},e.exports=u},{10:10,29:29,30:30,39:39,80:80}],87:[function(t,e,n){!function(){var e=t(13),n=t(43),i=t(61),r=t(68),o=t(26),s=t(50),a=t(52),c=t(56),u=t(51),l=t(55),d=t(57),h=t(41),f=t(64),p=t(42),m=t(24),g=t(21),v=t(20),y=t(17),w=t(71),b=t(49);if(v.init("host","platform.twitter.com"),o.start("widgets-js-load"),n.requestArticleUrl(),b(function(t,e,n){var i=t&&s.findInstance(t);i&&i.setInitialSize(e,n)}),v.get("widgets.loaded"))return g.call("widgets.load"),!1;if(v.get("widgets.init"))return!1;v.set("widgets.init",!0),g.set("init",!0);var _=new w;y.exposeReadyPromise(_.promise,g.base,"_e"),g.set("events",{bind:function(t,e){_.promise.then(function(n){n.events.bind(t,e)})}}),i(function(){function t(){v.set("eventsHub",p.init()),p.init(!0)}var n,i={"a.twitter-share-button":c,"a.twitter-mention-button":c,"a.twitter-hashtag-button":c,"a.twitter-follow-button":a,"blockquote.twitter-tweet":u,"a.twitter-timeline":l,"div.twitter-timeline":l,"blockquote.twitter-video":d},o=v.get("eventsHub")?g.get("events"):{};g.aug("widgets",h,{load:function(t){r.time("load"),s.init(i),s.embed(t),v.set("widgets.loaded",!0)}}),g.aug("events",o,f.Emitter),n=g.get("events.bind"),g.set("events.bind",function(e,i){t(),this.bind=n,this.bind(e,i)}),_.resolve(g.base),m.attachTo(e),g.call("widgets.load")})}()},{13:13,17:17,20:20,21:21,24:24,26:26,41:41,42:42,43:43,49:49,50:50,51:51,52:52,55:55,56:56,57:57,61:61,64:64,68:68,71:71}],88:[function(t,e,n){function i(){}var r=t(80),o=t(64);r.aug(i.prototype,o.Emitter,{transportMethod:"",init:function(){},send:function(t){var e;this._ready?this._performSend(t):e=this.bind("ready",function(){this.unbind("ready",e),this._performSend(t)})},ready:function(){this.trigger("ready",this),this._ready=!0},isReady:function(){return!!this._ready},receive:function(t){this.trigger("message",t)}}),e.exports={Connection:i}},{64:64,80:80}],89:[function(t,e,n){function i(t,e){var n=e||Math.floor(100*Math.random()),i=['<object id="xdflashshim'+n+'" name="xdflashshim'+n+'"','type="application/x-shockwave-flash" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"','width="1" height="1" style="position:absolute;left:-9999px;top:-9999px;">','<param name="movie" value="'+t+"&debug="+r.__XDDEBUG__+'">','<param name="wmode" value="window">','<param name="allowscriptaccess" value="always">',"</object>"].join(" ");return i}var r=t(16);e.exports={object:i}},{16:16}],90:[function(t,e,n){function i(t){return(JSON.parse||JSON.decode)(t)}function r(t){this.con=t}function o(){this.id=o.id++}var s=t(80),a=t(64);s.aug(r.prototype,{expose:function(t){this.con.bind("message",this._handleRequest(t))},call:function(t){var e,n=this;return this._requests||(this._requests={},this.con.bind("message",function(t){var e;try{t=i(t)}catch(r){return}t.callback&&"number"==typeof t.id&&(e=n._requests[t.id])&&(t.error?e.trigger("error",t):e.trigger("success",t),delete n._requests[t.id])})),e=new o,this._requests[e.id]=e,e.send(this.con,t,Array.prototype.slice.call(arguments,1))},_handleRequest:function(t){var e=this;return function(n){var r,o;try{n=i(n)}catch(s){return}n.callback||"number"==typeof n.id&&"function"==typeof t[n.method]&&(o=e._responseCallbacks(n.id),r=t[n.method].apply(t,n.params.concat(o)),"undefined"!=typeof r&&o[0](r))}},_responseCallbacks:function(t){var e=this.con;return[function(n){e.send(JSON.stringify({id:t,result:n,callback:!0}))},function n(i){e.send(JSON.stringify({id:t,error:n,callback:i}))}]}}),o.id=0,s.aug(o.prototype,a.Emitter,{send:function(t,e,n){return t.send(JSON.stringify({id:this.id,method:e,params:n})),this},success:function(t){return this.bind("success",t),this},error:function(t){return this.bind("error",t),this}}),e.exports=function(t){return new r(t)}},{64:64,80:80}],91:[function(t,e,n){function i(){}function r(t){this.transportMethod="PostMessage",this.options=t,this._createChild()}function o(t){this.transportMethod="Flash",this.options=t,this.token=Math.random().toString(16).substring(2),this._setup()}function s(t){this.transportMethod="Fallback",this.options=t,this._createChild()}var a,c=t(13),u=t(16),l=t(88),d=t(80),h=t(63),f=t(25),p="__ready__",m=0;i.prototype=new l.Connection,d.aug(i.prototype,{_createChild:function(){this.options.window?this._createWindow():this._createIframe()},_createIframe:function(){function t(){o.child=e.contentWindow,o._ready||o.init()}var e,n,i,r,o=this,s={allowTransparency:!0,frameBorder:"0",scrolling:"no",tabIndex:"0",name:this._name()},l=d.aug(d.aug({},s),this.options.iframe);u.postMessage?(a||(a=c.createElement("iframe")),e=a.cloneNode(!1)):e=c.createElement('<iframe name="'+l.name+'">'),e.id=l.name,d.forIn(l,function(t,n){"style"!=t&&e.setAttribute(t,n)}),r=e.getAttribute("style"),r&&"undefined"!=typeof r.cssText?r.cssText=l.style:e.style.cssText=l.style,e.addEventListener("load",t,!1),e.src=this._source(),(n=this.options.appendTo)?n.appendChild(e):(i=this.options.replace)?(n=i.parentNode,n&&n.replaceChild(e,i)):c.body.insertBefore(e,c.body.firstChild)},_createWindow:function(){var t=f.open(this._source()).popup;t&&t.focus(),this.child=t,this.init()},_source:function(){return this.options.src},_name:function(){var t="_xd_"+m++;return u.parent&&u.parent!=u&&u.name&&(t=u.name+t),t}}),r.prototype=new i,d.aug(r.prototype,{init:function(){function t(t){t.source===e.child&&(e._ready||t.data!==p?e.receive(t.data):e.ready())}var e=this;u.addEventListener("message",t,!1)},_performSend:function(t){this.child.postMessage(t,this.options.src)}}),o.prototype=new i,d.aug(o.prototype,{_setup:function(){var e=this,n=t(89);u["__xdcb"+e.token]={receive:function(t){e._ready||t!==p?e.receive(t):e.ready()},loaded:function(){}};var i=c.createElement("div");i.innerHTML=n.object("https://platform.twitter.com/xd/ft.swf?&token="+e.token+"&parent=true&callback=__xdcb"+e.token+"&xdomain="+e._host(),e.token),c.body.insertBefore(i,c.body.firstChild),e.proxy=i.firstChild,e._createChild()},init:function(){},_performSend:function(t){this.proxy.send(t)},_host:function(){return this.options.src.replace(/https?:\/\//,"").split(/(:|\/)/)[0]},_source:function(){return this.options.src+(this.options.src.match(/\?/)?"&":"?")+"xd_token="+u.escape(this.token)}}),s.prototype=new i,d.aug(s.prototype,{init:function(){},_performSend:function(){}}),e.exports={connect:function(t){return!h.canPostMessage()||h.anyIE()&&t.window?h.anyIE()&&h.flashEnabled()?new o(t):new s(t):new r(t)}}},{13:13,16:16,25:25,63:63,80:80,88:88,89:89}]},{},[87]))}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81), __webpack_require__(63), (function() { return this; }())))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($, _) {var api = __webpack_require__(120);
	var core = __webpack_require__(121);

	// FullContact API
	$(document).ready(function () {

	  //  Visitor Open Event
	  $(document).on('LiveHelp.OpenVisitorIntegration', function (event, data) {
	    var visitor = $('#visitor-details');
	    var email = data.Email;

	    if (email !== undefined && email.length > 0 && core.config.session !== false && core.config.session.length > 0) {

	      var headers = { 'Accept': 'application/json', 'Authentication': core.config.session };
	      var apiPath = 'plugins/fullcontact/api/index.php/person/' + email;

	      // Email
	      visitor.find('#email').attr('href', 'mailto:' + email).text(email);
	      visitor.find('.section.email').show();

	      $.ajax({
	        url: (core.address.length > 0) ? core.address + apiPath : core.directoryPath + apiPath,
	        type: 'GET',
	        headers: headers,
	        dataType: 'json',
	        success: function (data) {
	          // Reset Social Icons
	          visitor.find('.social.icons .icon').removeClass('active');

	          // Social Bio
	          var profile = _.findWhere(data.socialProfiles, { type: 'linkedin' });
	          if (profile !== undefined && profile.bio !== undefined) {
	            visitor.find('.bio').text(profile.bio).removeClass('hidden');
	          }

	          // Location
	          var country = visitor.find('#country');
	          var location = country.text();

	          if (location === core.locale.unavailable && data.demographics.locationGeneral) {
	            country.text(data.demographics.locationGeneral);
	          }

	          // Website
	          if (data.contactInfo !== undefined && data.contactInfo.websites !== undefined && data.contactInfo.websites.length > 0) {
	            var website = data.contactInfo.websites[0].url;
	            visitor.find('#website').attr('href', website).text(website.replace(/http:\/\/|https:\/\//g, ''));
	            visitor.find('.section.website').show();
	          }

	          var social = visitor.find('.social.icons .icon a');
	          $.each(social, function (key, value) {
	            var element = $(value);
	            var type = $(value).attr('data-type');
	            var profile = _.findWhere(data.socialProfiles, { type: type });

	            if (profile !== undefined) {
	              element.attr('href', profile.url);
	              element.parent().addClass('active');
	            }
	          });
	        },
	        error: function () {
	          console.log('FullContact API Error');
	          visitor.find('.bio, .section.website').addClass('hidden');
	          visitor.find('.section.social.icons .icon.active').removeClass('active');
	        }
	      });

	    } else {
	      visitor.find('.bio, .section.email, .section.website').addClass('hidden');
	      visitor.find('.section.social.icons .icon.active').removeClass('active');
	    }
	  });

	  // Initialise Visitor
	  $(document).on('LiveHelp.InitialiseVisitor', function (event, visitor) {

	    // Load Visitor
	    api.apiRequest({
	      url: api.apiEndpoint.visitor,
	      data: { 'ID': visitor },
	      success: function (data) {
	        // Visitor JSON
	        if (data.Visitor !== null && data.Visitor !== undefined) {
	          // Save Visitor
	          var visitor = data.Visitor;
	          var exists = _.find(core.chattingvisitors, function (elem) { return parseInt(elem.ID, 10) === visitor.ID; });

	          if (!exists) {
	            core.chattingvisitors.push(visitor);
	          } else {
	            exists = visitor;
	          }

	          // Open Visitor
	          $(document).trigger('LiveHelp.OpenVisitor', visitor);
	        }
	      },
	      error: function (jqXHR, textStatus, errorThrown) {
	      }
	    });
	  });

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62), __webpack_require__(63)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var core = __webpack_require__(121);

	// Third Party Libraries
	var $ = __webpack_require__(62);

	// Initialise Storage

	var storage = new _storage2.default();

	// Variables
	exports.apiPath = 'xml/WebService.php?';
	exports.apiEndpoint = {
	  visitors: 'Visitors',
	  visitor: 'Visitor',
	  chats: 'Chats',
	  responses: 'Responses',
	  resetpassword: 'ResetPassword',
	  operators: 'Operators',
	  statistics: 'Statistics',
	  settings: 'Settings',
	  history: 'History',
	  departments: 'Departments',
	  users: 'Users',
	  send: 'Send',
	  emailchat: 'EmailChat',
	  login: 'Login'
	};
	exports.apiAuthVersion = 4;

	exports.apiRequest = function (options) {
	  // Authorization Token / Headers
	  var data = options.data !== undefined ? options.data : {};
	  var headers = { 'Accept': 'application/json' };

	  // Sign In / Saved Session
	  var autoLogin = storage.get('session');
	  if (autoLogin.length > 0) {
	    $.extend(data, { 'Session': autoLogin });
	  }

	  if (core.config.session !== false && core.config.session.length > 0 && this.apiAuthVersion > 4) {
	    $.extend(headers, { 'Authentication': 'Token signature="' + core.config.session + '", version="5"' });
	  }

	  if (this.apiAuthVersion < 5) {
	    $.extend(data, {
	      'Version': '4.0',
	      'Format': 'json'
	    });
	    if (options.url !== this.apiEndpoint.login && core.config.session !== false && core.config.session.length > 0) {
	      $.extend(data, { 'Session': core.config.session });
	    }
	  }

	  var globalAjax = true;
	  if (options.url === this.apiEndpoint.chats || options.url === this.apiEndpoint.send || options.url === this.apiEndpoint.visitor || options.url === this.apiEndpoint.visitors || options.url === this.apiEndpoint.users) {
	    globalAjax = false;
	  }

	  return $.ajax({
	    url: core.address.length > 0 ? core.address + this.apiPath + options.url : core.directoryPath + this.apiPath + options.url,
	    data: data,
	    type: 'POST',
	    global: globalAjax,
	    headers: headers,
	    timeout: options.timeout,
	    dataType: 'json',
	    success: options.success,
	    error: options.error
	  });
	};

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _getIterator2 = __webpack_require__(1);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*global Slick:true*/

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var _ = __webpack_require__(63);

	// Initialise Storage

	var storage = new _storage2.default();

	var api = __webpack_require__(120);
	var chats = __webpack_require__(122);
	var MD5 = __webpack_require__(146);

	__webpack_require__(111);
	__webpack_require__(148);

	exports.intercom = typeof Intercom !== 'undefined' ? Intercom.getInstance() : false; // eslint-disable-line no-undef
	exports.messageSound = false;
	exports.pendingSound = false;
	exports.cache = false;
	exports.tour = false;
	exports.gravatar = false;
	exports.messagesAjax = true;
	exports.tags = [];

	exports.ucwords = function (str) {
	  if (typeof str === 'string') {
	    return str.replace(/^([a-z])|\s+([a-z])/g, function ($1) {
	      return $1.toUpperCase();
	    });
	  } else {
	    return str;
	  }
	};

	exports.signInError = function (xhr, textStatus, thrownError, element) {
	  var text = '';
	  var login = $('.login, .inputs');
	  var error = $('.login .signin .signin.error .text');
	  var security = $('.login .signin div.twofactor.signin');
	  var backup = $('.login .signin div.twofactor.disable');

	  login.find('.logo').removeClass('loading');
	  login.find('.ball-clip-rotate').hide();
	  login.find('.signin.btn').show();

	  if (backup.is(':visible')) {
	    error = backup.find('.signin.error .text');
	    if (element !== undefined) {
	      error = element;
	    }
	  } else if (security.is(':visible')) {
	    text = 'Invalid Security Code';
	    error = security.find('.error .text');
	  } else {
	    if (!xhr) {
	      text = 'Connection Error';
	    } else if (xhr.status === 503 && xhr.statusText === 'License Invalid') {
	      text = 'License Invalid';
	      this.cache = true;
	    } else if (xhr.getResponseHeader('X-Disabled') === '*') {
	      text = 'Account Disabled';
	    } else if (xhr.status === 403 && xhr.statusText === 'Access Forbidden') {
	      text = 'Incorrect Username / Password';
	    } else if (xhr.statusText === 'timeout') {
	      text = 'Connection Timeout';
	    } else {
	      text = 'Connection Error';
	    }
	  }

	  this.signInErrorCallback('Sign In Error', text, error);
	};

	exports.signInErrorCallback = function showSignInError(title, text, element) {
	  var login = $('.login, .inputs');
	  var error = element !== undefined ? element : $('.login .signin .signin.error .text');

	  if (error.length > 0) {
	    error.text(text);
	  }

	  if (error.parent().is('.backup.error')) {
	    login.find('.signin.error').hide();
	  } else {
	    login.find('.backup.error').hide();
	  }
	  error.parent().fadeIn();

	  $('.loading.content').hide();
	  login.show().find('.inputs, .logo').effect('shake', { times: 3, distance: 10 }, 150);
	  error = true;
	};

	exports.signOut = function () {

	  // Notification
	  $(document).trigger('LiveHelp.SignOut');

	  // Sign Out
	  this.changeStatus('SignOut', $(this).text(), this.config.operator.id);

	  // Remove Visitors
	  $('.chat-list .visitor, .chat-stack .chat').remove();

	  // Hide Loading
	  $('.loading, .settings.container, .notification').hide();

	  // Hide Content / Show Login
	  $('.content').filter(':not(.loading)').animate({ opacity: 0 }, 250);
	  $('.login').show().fadeIn();
	};

	exports.changeStatus = function (status, text, id) {
	  // Update Status
	  var that = this;
	  this.updateUsers(status, id, function () {
	    $(document).trigger('LiveHelp.RefreshAccounts', status);

	    // Sign Out
	    if (status === 'SignOut') {
	      // Reset Authentication
	      that.config.session = '';
	      storage.set('protocol', '');
	      storage.set('server', '');
	      storage.set('session', '');
	      storage.set('accounts', []);
	      storage.set('operator', {});

	      // Refresh
	      that.signOutCallback();
	    }
	  });

	  var statusmode = false;
	  switch (status) {
	    case 'SignOut':
	    case 'Hidden':
	    case 'Offline':
	      text = 'Offline';
	      statusmode = 0;
	      break;
	    case 'Online':
	      text = 'Online';
	      statusmode = 1;
	      break;
	    case 'BRB':
	      text = 'Be Right Back';
	      statusmode = 2;
	      break;
	    case 'Away':
	      text = 'Away';
	      statusmode = 3;
	      break;
	  }

	  if (id === undefined && statusmode !== false) {
	    this.config.operator.status = statusmode;
	  }

	  $(document).trigger('LiveHelp.StatusChanged', status);

	  if (text !== undefined) {
	    $('.operator .dropdown-toggle .status').text(text);
	  }
	  $('.operator .mode').removeClass('online offline hidden brb away').addClass(status.toLowerCase());
	};

	exports.updateUsersSuccess = function (data, action, id, complete) {
	  // Update Interface
	  chats.updateUsersInterface(data.Users, action, id);

	  $(document).trigger('LiveHelp.UpdateUsersCompleted');

	  // Callback
	  if (complete) {
	    complete();
	  }
	};

	exports.usersTimer = false;
	exports.updateUsers = function (action, id, complete) {
	  var core = __webpack_require__(121);

	  if (core.config.session.length > 0) {

	    // Validate Action / ID
	    var post = {};
	    if (action !== undefined) {
	      $.extend(post, { 'Action': action });
	    }
	    if (id !== undefined) {
	      $.extend(post, { 'ID': id });
	    }

	    // Clear Timer
	    window.clearTimeout(core.usersTimer);

	    // Users AJAX
	    api.apiRequest({
	      url: api.apiEndpoint.users,
	      data: post,
	      timeout: 15000,
	      success: function success(data) {
	        var core = __webpack_require__(121);
	        core.updateUsersSuccess(data, action, id, complete);
	      },
	      error: function error() {
	        if (core.websockets === false) {
	          core.usersTimer = window.setTimeout(core.updateUsers, 10000);

	          if (complete) {
	            complete();
	          }
	        }
	      }
	    });
	  }

	  $(document).trigger('LiveHelp.UpdateUsersComplete');
	};

	exports.previousMenu = 'home';
	exports.previousMenuEnabled = true;

	exports.switchMenu = function (type) {
	  var route = false;

	  // Close Smilies
	  $('.chat-stack .smilies.button').close(true);

	  // Switch Menu
	  switch (type) {
	    case 'home':
	      this.openHome();
	      this.previousMenu = type;
	      route = type;
	      break;
	    case 'statistics':
	      $(document).trigger('LiveHelp.OpenStatistics');
	      this.previousMenu = type;
	      route = type;
	      break;
	    case 'history':
	      $(document).trigger('LiveHelp.OpenHistory');
	      this.previousMenu = type;
	      route = type;
	      break;
	    case 'responses':
	      $(document).trigger('LiveHelp.OpenResponses');
	      route = type;
	      break;
	    case 'accounts':
	      $(document).trigger('LiveHelp.OpenAccounts');
	      route = type;
	      break;
	    case 'settings':
	      $(document).trigger('LiveHelp.OpenSettings');
	      var current = $('.settings.dropdown .settingsmenu .selectedLava').attr('id');
	      if (current !== undefined && current.length > 0) {
	        route = 'settings/' + current;
	      } else {
	        route = type;
	      }
	      break;
	    case 'integrations':
	      route = this.openIntegrations();
	      break;
	  }

	  if (type !== 'home') {
	    $(document).trigger('LiveHelp.CloseVisitor');
	  }

	  $(document).trigger('LiveHelp.MenuChanged', type);

	  // Deselect Chat
	  $('.chat-list .visitor.selected').removeClass('selected');
	  $('.chat-stack .chat.focussed').removeClass('focussed');

	  // Route
	  if (route !== false && route.length > 0) {
	    storage.set('route', route);
	    this.router.setRoute(route);

	    $(document).trigger('LiveHelp.RouteChanged');
	  }
	};

	exports.switchPreviousMenu = function () {
	  // Reset Route
	  storage.set('route', '');

	  // Select Previous Menu
	  if (this.previousMenu.length > 0 && this.previousMenuEnabled) {
	    this.router.setRoute(this.previousMenu);
	    $(document).trigger('LiveHelp.RouteChanged');
	  }
	};

	exports.visitors = [];

	exports.openHome = function () {
	  // Show Visitors
	  $('.chat-stack, .history.container, .statistics.container, .accounts.slider, .responses.slider, .settings.container').hide();
	  $('.visitors-grid .slick-viewport').removeClass('no-scroll');

	  $(document).trigger('LiveHelp.OpenHome');

	  if (this.selectedVisitor) {
	    $(document).trigger('LiveHelp.OpenVisitor', this.selectedVisitor);
	  }

	  // Check # Visitors
	  if (this.visitors !== undefined && this.visitors.length > 0 && $('.worldmap').css('display') == 'none') {
	    $('.visitors-empty').hide();
	    $('.visitors-grid, .visitors-menu').show();
	    $('.visitors-list.button').addClass('selected');
	    $('.visitors-map.button').removeClass('selected');
	  } else {
	    $('.visitors-empty').show();
	  }
	};

	exports.openIntegrations = function () {
	  $(document).trigger('LiveHelp.OpenSettings', 'integrations');
	  return 'settings/integrations';
	};

	exports.operatorImage = function (id, email, image, size, round, override) {
	  var settings = { size: size };
	  var defaultimage = this.address + 'images/User.png';
	  var hash = MD5(email).toString();

	  if (id !== undefined && id !== false) {
	    settings.id = id;
	  }
	  if (round !== undefined && round !== false) {
	    settings.round = true;
	  }
	  if (override !== undefined && override !== false) {
	    settings.override = true;
	  }

	  if (image && image.indexOf('data:image/png;base64,') > -1) {
	    return image;
	  } else {
	    return 'https://secure.gravatar.com/avatar/' + hash + '?s=' + size + '&r=g&d=' + defaultimage;
	  }
	};

	exports.pad = function (value) {
	  return value < 10 ? '0' + value : value;
	};

	exports.getUTCOffset = function () {
	  var date = new Date();
	  var sign = date.getTimezoneOffset() > 0 ? '-' : '+';
	  var offset = Math.abs(date.getTimezoneOffset());
	  var hours = this.pad(Math.floor(offset / 60));
	  var minutes = this.pad(offset % 60);
	  return sign + hours + minutes;
	};

	exports.zeroFill = function (number, width) {
	  width -= number.toString().length;
	  if (width > 0) {
	    return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
	  }
	  return number;
	};

	exports.escapeHtml = function (text) {
	  var result = '';
	  var map = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    '\'': '&#039;'
	  };

	  if (typeof text === 'string') {
	    result = text.replace(/[&<>"']/g, function (m) {
	      return map[m];
	    });
	  }
	  return result;
	};

	exports.htmlSmilies = function (message) {

	  function replaceSmilie(subject, smilie) {
	    if (subject.match(smilie.regex)) {
	      return replaceSmilie(subject.replace(smilie.regex, ' <span title="' + smilie.css + '" class="sprite-admin ' + smilie.css + ' Smilie"></span> '), smilie);
	    } else {
	      return subject;
	    }
	  }

	  var smilies = [{ regex: /^:D$|^:D | :D | :D$/g, css: 'Laugh Small' }, { regex: /^:\)$|^:\) | :\) | :\)$/g, css: 'Smile Small' }, { regex: /^:\($|^:\( | :\( | :\($/g, css: 'Sad Small' }, { regex: /^\$\)$|^\$\) | \$\) | \$\)$/g, css: 'Money Small' }, { regex: /^&gt;:O$|^&gt;:O |^>:O | &gt;:O | >:O | &gt;:O$| >:O$/g, css: 'Angry Small' }, { regex: /^:P$|^:P | :P | :P$/g, css: 'Impish Small' }, { regex: /^:\\$|^:\\ | :\\ | :\\$/g, css: 'Sweat Small' }, { regex: /^8\)$|^8\) | 8\) | 8\)$/g, css: 'Cool Small' }, { regex: /^&gt;:L$|^&gt;:L |^>:L | &gt;:L | >:L | &gt;:L$| >:L$/g, css: 'Frown Small' }, { regex: /^;\)$|^;\) | ;\) | ;\)$/g, css: 'Wink Small' }, { regex: /^:O$|^:O | :O | :O$/g, css: 'Surprise Small' }, { regex: /^8-\)$|^8-\) | 8-\) | 8-\)$/g, css: 'Woo Small' }, { regex: /^8-O$|^8-O | 8-O | 8-O$/g, css: 'Shock Small' }, { regex: /^xD$|^xD | xD | xD$/g, css: 'Hysterical Small' }, { regex: /^:-\*$|^:-\* | :-\* | :-\*$/g, css: 'Kissed Small' }, { regex: /^:S$|^:S | :S | :S$/g, css: 'Dizzy Small' }, { regex: /^\+O\)$|^\+O\) | \+O\) | \+O\)$/g, css: 'Celebrate Small' }, { regex: /^&lt;3$|^<3$|^&lt;3 |^<3 | &lt;3 | <3 | &lt;3$| <3$/g, css: 'Adore Small' }, { regex: /^zzZ$|^zzZ | zzZ | zzZ$/g, css: 'Sleep Small' }, { regex: /^:X$|^:X | :X | :X$/g, css: 'Stop Small' }, { regex: /^X-\($|^X-\( | X-\( | X-\($/g, css: 'Tired Small' }];

	  for (var i = 0; i < smilies.length; i++) {
	    var smilie = smilies[i];
	    message = $.trim(message);
	    message = replaceSmilie(message, smilie);
	  }
	  return $.trim(message);
	};

	exports.emailChat = function (id, email) {
	  // Email Chat AJAX
	  api.apiRequest({
	    url: api.apiEndpoint.emailchat,
	    data: { 'ID': id, 'Email': email },
	    success: function success() {
	      // TODO Email Chat Result
	    }
	  });
	};

	exports.closeChatClosingCallback = function () {
	  // Show Dialog
	  if (false) {
	    // eslint-disable-line no-undef
	    // TODO Add Native Mac Dialogs
	    var remote = require('electron').remote;
	    var dialog = remote.dialog;
	    dialog.showMessageBox(remote.getCurrentWindow(), { type: 'error', title: 'Close Chat', message: 'Are you sure you want to close this chat?', buttons: ['Okay', 'Cancel'] }, function (response) {
	      if (!response) {
	        chats.closeChat();
	      }
	    });
	  } else {
	    var confirm = $('.chat-stack .confirm-close.dialog');
	    confirm.find('.progressring').css('opacity', 0).hide();
	    confirm.find('.buttons').show();
	    confirm.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	  }
	};

	exports.closeChat = function () {
	  // Closing Event
	  this.closeChatClosingCallback();
	};

	exports.activechats = [];
	exports.blockedchats = [];

	exports.blockChat = function () {
	  var id = $('.chat-list .visitor.selected').data('id');
	  var chat = $('.chat-stack .chat[data-id=' + id + ']');

	  if (chat !== null) {
	    // Show Dialog
	    var dialog = $('.chat-stack .dialog');
	    dialog.find('.progressring img').attr('src', 'images/ProgressRing.gif');
	    dialog.find('.title').text('Blocking Chat Session');
	    dialog.find('.description').text('One moment while the chat session is blocked.');
	    dialog.show().animate({ bottom: '1px' }, 250);

	    // Block Chat AJAX
	    this.updateUsers('Block', id, function () {
	      // Hide Dialog
	      dialog.find('.progressring img').attr('src', 'images/Block.png');
	      dialog.find('.unblock').fadeIn();
	      dialog.find('.title').text('Chat Session Blocked');
	      dialog.find('.description').text('The chat session is blocked and inactive.');

	      var chat = null;
	      var exists = false;
	      var chats = [];

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = (0, _getIterator3.default)(this.activechats), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var message = _step.value;

	          if (message.id === id) {
	            chat = message;
	          } else {
	            chats.push(message);
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      this.activechats = chats;

	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = (0, _getIterator3.default)(this.blockedchats), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var blocked = _step2.value;

	          if (blocked.id === id) {
	            exists = true;
	            return;
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      if (!exists) {
	        // Blocked Chat
	        if ($.inArray(id, this.blockedchats) === -1) {
	          this.blockedchats.push(chat);
	        }
	      }
	    });
	  }
	};

	exports.unblockChat = function (id, dialog) {

	  // Update Dialog
	  dialog.find('.progressring img').attr('src', 'images/ProgressRing.gif');
	  dialog.find('.title').text('Unblocking Chat Session');
	  dialog.find('.description').text('One moment while the chat session is unblocked.');

	  // Unlock Chat AJAX
	  this.updateUsers('Unblock', id, function () {

	    // Hide Dialog
	    dialog.find('.progressring img').fadeOut();
	    dialog.find('.title').text('Chat Session Unblocked');
	    dialog.find('.description').text('The chat session is nunblocked and can now request Live Chat.');
	    dialog.animate({ bottom: '1px' }, 250, function () {
	      dialog.find('.unblock').hide();
	      dialog.hide();
	    });

	    // Remove Blocked Chat
	    this.blockedchats = _.reject(this.blockedchats, function (chat) {
	      return chat.id === id;
	    });
	  });
	};

	exports.checkBlocked = function (id) {
	  var blocked = false;
	  var dialog = $('.chat-stack .closing-chat.dialog');

	  var _iteratorNormalCompletion3 = true;
	  var _didIteratorError3 = false;
	  var _iteratorError3 = undefined;

	  try {
	    for (var _iterator3 = (0, _getIterator3.default)(this.blockedchats), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	      var value = _step3.value;

	      if (value.id === id) {
	        blocked = true;
	        return;
	      }
	    }
	  } catch (err) {
	    _didIteratorError3 = true;
	    _iteratorError3 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion3 && _iterator3.return) {
	        _iterator3.return();
	      }
	    } finally {
	      if (_didIteratorError3) {
	        throw _iteratorError3;
	      }
	    }
	  }

	  if (!blocked) {
	    // Hide Dialog
	    dialog.animate({ bottom: '-145px' }, 250, function () {
	      dialog.find('.unblock').hide();
	      dialog.find('.progressring img').attr('src', 'images/ProgressRing.gif');
	      dialog.hide();
	    });
	  } else {
	    // Show Dialog
	    dialog.find('.progressring img').attr('src', 'images/Block.png');
	    dialog.find('.title').text('Chat Session Blocked');
	    dialog.find('.description').text('The chat session is blocked and inactive.');
	    dialog.find('.unblock').show();
	    dialog.show().animate({ bottom: '1px' }, 250);
	  }
	};

	exports.capitaliseFirstLetter = function (string) {
	  return string.charAt(0).toUpperCase() + string.slice(1);
	};

	exports.strtolower = function (str) {
	  if (typeof str === 'string') {
	    return str.toLowerCase();
	  }
	  return str;
	};

	exports.options = {
	  location: 'index.php',
	  messages: { from: true, photo: true }
	};

	exports.signOutCallback = function () {
	  document.location.href = this.options.location;
	};

	exports.address = '';
	exports.selectedVisitor = false;
	exports.websockets = false;
	exports.settings = {};
	exports.locale = {
	  unavailable: 'Unavailable',
	  pendingchat: 'Pending Chat',
	  pendingchatdescription: '{name} is pending to chat'
	};
	exports.config = {
	  session: '',
	  operator: {}
	};
	exports.dropdown = true;
	exports.notification = true;
	exports.protocol = 'http://';
	exports.server = '';
	exports.directoryPathName = '/livehelp/';
	exports.overrideNotifications = false;
	exports.directoryPath = document.location.pathname.substring(0, document.location.pathname.indexOf(exports.directoryPathName) + 10);
	exports.defaultUserImage = exports.directoryPath + 'images/Placeholder.png';
	exports.chattingvisitors = [];
	exports.router = false;
	exports.historyGrid = false;
	exports.zclip = true;
	exports.chatPath = 'chat.php';
	exports.billing = false;
	exports.visitorsColumns = [{ id: 'browser', name: '', field: 'UserAgent', width: 50, resizable: false, formatter: Slick.Formatters.Browser }, { id: 'hostname', name: 'User', field: 'Hostname', width: 200, sortable: true, formatter: Slick.Formatters.Hostname }, { id: 'location', name: '', field: 'Country', width: 20, sortable: true, formatter: Slick.Formatters.Location }, { id: 'pages', name: '# Pages', field: 'PagePath', width: 30, sortable: true, formatter: Slick.Formatters.Pages }, { id: 'page', name: 'Current Page / Referrer', field: 'CurrentPage', width: 290, sortable: true, formatter: Slick.Formatters.Page }, { id: 'pagetime', name: 'Page Time', field: 'TimeOnPage', width: 65, sortable: true, formatter: Slick.Formatters.Seconds }, { id: 'sitetime', name: 'Session Time', field: 'TimeOnSite', width: 65, sortable: true, formatter: Slick.Formatters.Seconds }];
	exports.accounts = [];

	// Override Document Ready
	exports.initialiseDocumentReady = function () {};

	exports.checkHTML5NotificationsPermission = function () {
	  var accepted = false;
	  if (window.webkitNotifications !== undefined) {
	    if (window.webkitNotifications.checkPermission() === 0) {
	      accepted = true;
	    }
	  } else if ('Notification' in window) {
	    if (Notification.permission === 'granted') {
	      // Accepted
	      accepted = true;
	    }
	  }

	  if (accepted) {
	    $('.html5-notifications input').removeAttr('disabled');
	  } else {
	    $('.html5-notifications input').attr('disabled', 'disabled');
	  }
	  storage.set('html5-notifications', accepted);

	  return accepted;
	};

	exports.playMessageSound = function (alert, last) {
	  if (alert && this.messageSound) {

	    // Play Sound
	    var onlinealerts = storage.get('onlinealerts');
	    if (onlinealerts && this.config.operator.status === 1 || !onlinealerts) {
	      this.messageSound.play();
	      $(document).trigger('LiveHelp.PlayMessageSound', last);
	    }

	    alert = false;
	  }
	};

	exports.operatorGravatar = function (image, email) {
	  if (image && image.indexOf('https://') === -1 && image.indexOf('data:image/png;base64,') === -1) {
	    image = 'data:image/png;base64,' + image;
	  }

	  if (image === undefined || !image.length) {
	    var path = window.location.pathname;
	    var defaultimage = this.server.length > 0 ? this.protocol + this.server + this.defaultUserImage : window.location.protocol + '//' + window.location.host + path.replace(path.substring(path.indexOf(this.directoryPath + '/admin/')), this.defaultUserImage);
	    var hash = MD5(email).toString();

	    image = 'https://secure.gravatar.com/avatar/' + hash + '?s=100&r=g&d=' + defaultimage;
	  }
	  return image;
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _promise = __webpack_require__(123);

	var _promise2 = _interopRequireDefault(_promise);

	var _keys = __webpack_require__(141);

	var _keys2 = _interopRequireDefault(_keys);

	var _getIterator2 = __webpack_require__(1);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*global Handlebar:true*/

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var jQuery = $;
	var _ = __webpack_require__(63);

	// Initialise Storage

	var storage = new _storage2.default();

	var api = __webpack_require__(120);
	var core = __webpack_require__(121);
	var convert = __webpack_require__(145);
	var moment = __webpack_require__(66);
	var MD5 = __webpack_require__(146);

	exports.users = {};
	exports.loaded = false;
	exports.notificationIcon = 'images/Icon64x64.png';
	exports.viewed = [];
	exports.showOfflineOperators = false;
	exports.chatMessages = [], exports.channelMessages = [];
	exports.notifications = [];
	exports.acceptChatStyles = { 'background': '#e2e2e2' };
	exports.scrollAlertEnabled = false;
	exports.notificationUsers = [];
	exports.autoScroll = false;

	exports.chattingVisitorClickCallback = function (event, autoOpen, message, trigger) {
	  var visitor = this instanceof jQuery ? this : $(this);
	  var id = visitor.data('id');
	  var user = visitor.data('user');
	  var operator = visitor.data('operator') !== undefined ? visitor.data('operator') : false;

	  if (user.Status !== undefined && operator.id !== parseInt(user.ID, 10) || user.Status === undefined) {
	    var chats = __webpack_require__(122);
	    chats.openChat(id, user, autoOpen, operator, message, trigger);
	  }
	};

	exports.saveMessage = function (id, focussing, autoOpen) {

	  var stored = this.chatMessages;
	  var type = 'chat';

	  if (typeof id === 'string') {
	    stored = this.channelMessages;
	    type = 'channel';
	  }

	  // Save Message
	  var chat = _.findWhere(stored, { id: id });
	  var text = $('.messages.input #message');
	  var previousChat = $('.chat-stack .' + type + '.focussed');
	  var prev = $(previousChat).data('id');
	  var operator = $(previousChat).data('operator') ? $(previousChat).data('operator') : false;
	  var cursor = 0;

	  // Update Existing Item
	  if (prev !== null && prev !== undefined) {
	    stored = _.reject(stored, function (chat) {
	      return chat.id == prev;
	    });
	    stored.push({ id: prev, operator: operator, message: text.val(), cursor: text.getCursorPosition() });

	    if (type == 'chat') {
	      this.chatMessages = stored;
	    } else {
	      this.channelMessages = stored;
	    }
	  }

	  stored = this.chatMessages;
	  if (typeof focussing === 'string') {
	    stored = this.channelMessages;
	    type = 'channel';
	  }

	  chat = _.findWhere(stored, { id: focussing });
	  if (chat !== undefined && focussing !== prev) {
	    // Display Saved Message
	    text.val(chat.message);

	    if (chat.cursor !== undefined) {
	      cursor = chat.cursor;
	      text.selectRange(cursor);
	    }
	  } else if (autoOpen === false && this.selectedChat !== id || type === 'channel') {
	    text.val('');
	  }
	};

	// Open Chat
	exports.openChat = function (id, user, autoOpen, operator, message, trigger, callback) {

	  operator = operator !== undefined ? operator : false;
	  if (typeof user === 'string') {
	    user = JSON.parse(user);
	  }
	  var visitor = $('.chat-list .visitor[data-id="' + id + '"][data-operator=' + operator + ']');

	  // Selection
	  autoOpen = autoOpen === undefined || !autoOpen ? false : true;
	  if (visitor.length > 0 && autoOpen === false) {
	    $('.chat-list').find('.visitor.selected, .visitor.previous').removeClass('selected previous');
	    visitor.addClass('selected');
	    storage.set('selected-chat', { id: id, operator: operator });
	  }

	  // Open Chat Event
	  if (visitor.length > 0 && message === undefined && trigger === undefined) {
	    $(document).trigger('LiveHelp.OpenChat', { id: id, operator: operator });
	  }

	  // Close History
	  $(document).trigger('LiveHelp.CloseHistory');

	  // Save Message
	  var channel = $('.chat-stack .channel.focussed');
	  var previous = channel.length > 0 ? channel.data('id') : false;

	  if (!autoOpen) {
	    this.saveMessage(previous, id, autoOpen);
	  }

	  // Viewed Chat
	  var viewedchat = _.find(this.viewed, function (chat) {
	    return chat.id === id && chat.operator == operator;
	  });
	  var count = user !== undefined ? parseInt(user.Messages, 10) : 0;

	  if (viewedchat !== undefined && count > 0) {
	    viewedchat.count = count;
	    storage.set('viewed', this.viewed);
	  }

	  var stack = $('.chat-stack');
	  var html = Handlebar.templates.chat({ id: id, styles: autoOpen === false ? 'chat focussed' : 'chat', operator: operator });
	  var path = window.location.pathname;
	  var defaultImage = core.server.length > 0 ? core.protocol + core.server + core.defaultUserImage : encodeURIComponent(window.location.protocol + '//' + window.location.host + path.replace(path.substring(path.indexOf(core.directoryPath + '/admin/')), core.defaultUserImage));

	  // Add New Chat
	  if (stack.length && !stack.find('.chat[data-id=' + id + '][data-operator=' + operator + ']').length) {

	    $(html).prependTo(stack).find('.scroll').on('scroll', this.debouncedSaveChatScroll);
	    if (core.websockets !== false) {
	      this.updateMessages(callback);
	    } else {
	      // Open Chat Callback
	      if (callback) {
	        callback();
	      }
	    }
	  } else {

	    // Open Chat Callback
	    if (callback) {
	      callback();
	    }
	  }

	  // Focus Chat
	  if (autoOpen === false) {

	    var input = $('.messages.input');
	    if (operator) {
	      input.addClass('operator').removeClass('guest');
	    } else {
	      input.addClass('guest').removeClass('operator');
	    }

	    stack.find('.chat.focussed, .channel.focussed, .chat:not(.chat[data-id="' + id + '"][data-operator=' + operator + '])').removeClass('focussed').hide();
	    stack.find('#message').show();
	    stack.find('.chat[data-id="' + id + '"][data-operator=' + operator + ']').addClass('focussed').show();
	    this.selectedChat = id;

	    var list = $('.list');
	    list.find('.visitor, .channel').removeClass('selected previous');
	    list.find('.visitor[data-id="' + id + '"][data-operator=' + operator + ']').addClass('selected previous');

	    stack.find('.chat.unfocussed, .channel.unfocussed').removeClass('unfocussed');

	    // Scroll
	    this.scrollToBottom(id, operator, true, false);
	  }

	  // Open Chat Stack
	  var chat = stack.find('.chat[data-id=' + id + '][data-operator=' + operator + ']');
	  var name = 'Guest';
	  var hash = '';

	  // Remove Message Alert
	  if (!chat.find('.scrollalert').is(':visible') && chat.is('.focussed')) {
	    this.resetMessageAlert(visitor);
	  }

	  if (user !== undefined) {
	    if (user.Firstname !== undefined) {
	      name = core.ucwords(user.Firstname);
	    } else {
	      name = core.ucwords(user.Name);
	    }
	    hash = MD5(user.Email).toString();
	  }
	  var title = user !== undefined && user.Email.length > 0 ? name + ' - ' + user.Email : name;
	  var userImage = core.gravatar ? 'https://secure.gravatar.com/avatar/' + hash + '?s=50&r=g&d=' + defaultImage : defaultImage;

	  // Scroll Event
	  chat.find('.scroll').chatScrollHandler();

	  // Title
	  if (operator) {
	    var account = false;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	      for (var _iterator = (0, _getIterator3.default)(core.accounts), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var value = _step.value;

	        if (parseInt(value.ID, 10) === user.ID) {
	          account = value;
	          break;
	        }
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }

	    if (account !== false && account.Firstname !== undefined && account.Lastname !== undefined) {
	      title = core.ucwords(account.Firstname + ' ' + account.Lastname);
	    } else if (user.Firstname !== undefined) {
	      title = core.ucwords(user.Firstname);
	    }
	  }

	  // Operator Image
	  if (account !== false && user !== undefined) {
	    userImage = core.operatorImage(id, user.Email, user.Image, 30, true);
	  }

	  var email = chat.find('.status .email');
	  if (user !== undefined) {
	    email.attr('href', 'mailto:' + user.Email).text(user.Email).show();
	  } else {
	    email.hide();
	  }

	  chat.find('.status .name').text(name).show();
	  chat.find('.inputs').show();
	  chat.find('.title span.title').text(title);
	  chat.find('.header .title span.image').css('background-image', 'url("' + userImage + '")');
	  chat.data('closed', false);

	  if (autoOpen === false) {
	    // Hide Containers
	    $('.visitors-grid .slick-viewport').addClass('no-scroll');
	    $('.statistics.container, .history.container, .responses.slider, .accounts.slider, .settings.container').hide();

	    // Show Chat
	    if (!stack.is(':visible')) {
	      chat.click();
	      stack.show();
	    } else {
	      if (chat.is('.focussed')) {
	        stack.find('#message').focus();
	      } else {
	        chat.click();
	      }
	    }

	    // Open Visitor Details
	    user = visitor.data('user');

	    if (user) {
	      var visit = user.Visitor && user.Visitor.length > 0 && !isNaN(user.Visitor) ? parseInt(user.Visitor, 10) : -1;
	      var override = false;

	      if (user.Visitor && user.Visitor.length > 0 && user.Visitor.slice(0, 8) === 'visitor:') {
	        visit = user.Visitor.slice(user.Visitor.lastIndexOf(':') + 1, user.Visitor.length);
	        override = true;
	      }

	      if (visit > 0 || override) {
	        var visitorexists = _.find(core.visitors, function (visitor) {
	          return visitor.ID == id;
	        });
	        if (visitorexists !== undefined) {
	          $(document).trigger('LiveHelp.OpenVisitor', visitorexists);
	        } else {
	          $(document).trigger('LiveHelp.InitialiseVisitor', visit);
	        }
	      } else {
	        var visitordata = {
	          'ID': user.Hash !== undefined ? user.Hash : user.ID,
	          'Username': user.Name,
	          'Email': user.Email,
	          'Department': user.Department,
	          'Active': user.Active,
	          'Status': parseInt(user.Status, 10)
	        };

	        $(document).trigger('LiveHelp.OpenVisitor', visitordata);
	      }
	    }
	  }

	  // Update Typing
	  var typingstatus = stack.find('.typing');
	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;

	  try {
	    for (var _iterator2 = (0, _getIterator3.default)(core.activechats), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      value = _step2.value;

	      if (value.id !== undefined && value.id == id && value.typing) {
	        typingstatus.show();
	        break;
	      } else {
	        typingstatus.hide();
	      }
	    }

	    // Close Smilies
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }

	  stack.find('.smilies.button').close();

	  // Check Blocked Chat
	  core.checkBlocked(id);

	  // Clear Message Alert
	  visitor = $('.visitor[data-id=' + id + '][data-operator=' + operator + ']');

	  var alert = visitor.find('.message-alert');
	  var messages = parseInt(visitor.data('messages'), 10) + parseInt(alert.text(), 10);

	  visitor.data('messages', messages);
	};

	// Close Chat
	exports.closeChats = function () {
	  var stack = $('.chat-stack');
	  var height = stack.height();

	  // Close Smilies
	  $('.chat-stack .smilies.button').close();

	  // Close Chats
	  stack.animate({ top: -height, bottom: 30 + height }, 250);
	  return false;
	};

	// Pending Notification
	exports.showPendingNotification = function (users) {
	  var alert = $('.notification');
	  var title = core.locale.pendingchat;
	  var notify = '';
	  var name = '';
	  var server = '';

	  if (users.length > 1) {
	    title = 'Pending Chats';
	    notify = users.length + ' visitors are pending to chat';
	  } else if (users.length === 1) {
	    name = core.ucwords(users[0].Name.toLowerCase());
	    server = users[0].Server;
	    if (server.length > 0) {
	      if (core.locale.pendingchatdescription !== undefined) {
	        notify = core.locale.pendingchatdescription.replace('{name}', name);
	      } else {
	        notify = name + ' is pending to chat at ' + server;
	      }
	    } else {
	      if (core.locale.pendingchatdescription !== undefined) {
	        notify = core.locale.pendingchatdescription.replace('{name}', name);
	      } else {
	        notify = name + ' is pending to chat';
	      }
	    }
	  }

	  alert.off('click');
	  alert.on('click', function () {
	    if (users.length === 1) {
	      var id = typeof users[0].ID === 'number' ? parseInt(users[0].ID, 10) : users[0].ID;
	      if (id > 0) {
	        var chats = __webpack_require__(122);
	        chats.acceptChat(id);
	      }
	    }
	  });

	  // Show Notification
	  if (notify.length > 0) {
	    if (alert.find('.icon ChatNotification').length === -1) {
	      alert.find('.icon').addClass('sprite ChatNotification');
	    }
	    alert.find('.notify').text(notify);
	    this.showNotification({ title: title, text: notify, users: users, active: false });
	  }
	};

	exports.loadedTimestamp = moment().unix();

	// Notification
	exports.showNotification = function (obj) {

	  var shown = false;
	  if (obj.users !== false) {
	    var _iteratorNormalCompletion3 = true;
	    var _didIteratorError3 = false;
	    var _iteratorError3 = undefined;

	    try {
	      for (var _iterator3 = (0, _getIterator3.default)(obj.users), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	        var value = _step3.value;

	        var id = parseInt(value.ID, 10);
	        var exists = false;

	        var _iteratorNormalCompletion4 = true;
	        var _didIteratorError4 = false;
	        var _iteratorError4 = undefined;

	        try {
	          for (var _iterator4 = (0, _getIterator3.default)(this.notificationUsers), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	            var user = _step4.value;

	            if (id === user) {
	              exists = true;
	              break;
	            }
	          }
	        } catch (err) {
	          _didIteratorError4 = true;
	          _iteratorError4 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion4 && _iterator4.return) {
	              _iterator4.return();
	            }
	          } finally {
	            if (_didIteratorError4) {
	              throw _iteratorError4;
	            }
	          }
	        }

	        if (!exists) {
	          this.notificationUsers.push(id);
	        } else {
	          shown = true;
	        }
	      }
	    } catch (err) {
	      _didIteratorError3 = true;
	      _iteratorError3 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	          _iterator3.return();
	        }
	      } finally {
	        if (_didIteratorError3) {
	          throw _iteratorError3;
	        }
	      }
	    }
	  }

	  if (!shown) {
	    if (core.notification && obj.title === core.locale.pendingchat) {
	      var notify = $('.notification');
	      notify.animate({ top: -20 }, 250, 'easeInOutBack');
	      notify.find('.notify', obj.text);
	    } else {
	      // Display Notification
	      if (obj.data && obj.data.timestamp) {
	        var timestamp = obj.data.timestamp;
	        if (obj.chat) {
	          var visitor = $('.chat-list .chatting.list .visitor[data-id=' + obj.chat + ']');
	          if (timestamp > this.loadedTimestamp && !window.document.hasFocus()) {
	            this.displayNotification(false, false, obj.title, obj.text, visitor);
	          }
	        }
	      }
	    }
	    $(document).trigger('LiveHelp.Notification', obj);
	  }
	};

	exports.closeNotification = function () {
	  this.notificationUsers = [];
	  var alert = $('.notification');
	  var top = parseInt(alert.css('top'), 10);

	  if (top >= -20) {
	    alert.animate({ top: -80 }, 500, 'easeInOutBack');
	  }
	};

	exports.clearNotification = function (id) {
	  var remove = -1;
	  var key = 0;
	  var _iteratorNormalCompletion5 = true;
	  var _didIteratorError5 = false;
	  var _iteratorError5 = undefined;

	  try {
	    for (var _iterator5 = (0, _getIterator3.default)(this.notifications), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	      var value = _step5.value;

	      if (id === value.id) {
	        remove = key;
	        if (value.notification.cancel) {
	          value.notification.cancel();
	        }
	        if (value.notification.close) {
	          value.notification.close();
	        }
	        break;
	      }
	      key = key++;
	    }
	  } catch (err) {
	    _didIteratorError5 = true;
	    _iteratorError5 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion5 && _iterator5.return) {
	        _iterator5.return();
	      }
	    } finally {
	      if (_didIteratorError5) {
	        throw _iteratorError5;
	      }
	    }
	  }

	  if (typeof this.notifications[remove] !== 'undefined') {
	    this.notifications.splice(remove, 1);
	  }
	};

	exports.acceptOpenChatCallback = function (id, value) {
	  this.openChat(id, value);
	};

	exports.updateUsersInterface = function (data, action, id, complete) {
	  // Users JSON
	  if (data !== undefined) {

	    // Users Event
	    $(document).trigger('LiveHelp.UsersCompleted', { newUsers: data, previousUsers: this.users });

	    this.users = data;

	    // Remove Chatting Users
	    var operators = $('.operators .visitor');
	    var chatting = $('.chatting .visitor, .other-chatting .visitor');
	    var pending = $('.pending .visitor');
	    var section = $('.operators.list');
	    var chatid = id;
	    var empty = $('.chat-list .empty');
	    var that = this;
	    var element;
	    var exists;

	    // Operators
	    if (this.showOfflineOperators === false) {
	      var staff = 0;
	      $.each(operators, function (key, value) {
	        element = $(value);
	        exists = false;

	        id = element.data('id');
	        var _iteratorNormalCompletion6 = true;
	        var _didIteratorError6 = false;
	        var _iteratorError6 = undefined;

	        try {
	          for (var _iterator6 = (0, _getIterator3.default)(that.users.Staff.User), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	            value = _step6.value;

	            if (parseInt(value.ID, 10) === id && parseInt(value.Status, 10) === 1) {
	              exists = true;
	              staff++;
	            }
	          }

	          /*
	          // Remove Chat
	          // TODO Update Customer Status Indicator
	          if (!exists) {
	            //
	          }
	          */
	        } catch (err) {
	          _didIteratorError6 = true;
	          _iteratorError6 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion6 && _iterator6.return) {
	              _iterator6.return();
	            }
	          } finally {
	            if (_didIteratorError6) {
	              throw _iteratorError6;
	            }
	          }
	        }
	      });

	      // Clear Operators
	      if (staff === 0) {
	        that.clearUsers(section);
	      }
	    }

	    // Check Accepted
	    var _iteratorNormalCompletion7 = true;
	    var _didIteratorError7 = false;
	    var _iteratorError7 = undefined;

	    try {
	      for (var _iterator7 = (0, _getIterator3.default)(this.users.Online.User), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	        var online = _step7.value;

	        if (action === 'Accept' && (typeof online.ID === 'number' && chatid === parseInt(online.ID, 10) || typeof online.ID === 'string' && online.ID.length == 36 && chatid === online.ID) && parseInt(online.Active, 10) === core.config.operator.id) {
	          this.openChat(chatid, online);
	        }
	      }

	      // Chatting
	    } catch (err) {
	      _didIteratorError7 = true;
	      _iteratorError7 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion7 && _iterator7.return) {
	          _iterator7.return();
	        }
	      } finally {
	        if (_didIteratorError7) {
	          throw _iteratorError7;
	        }
	      }
	    }

	    section = $('.chatting.list');
	    var demo = section.find('.visitor[data-id=-1]');
	    if (chatting.length > 0) {
	      var chats = 0;

	      $.each(chatting, function (key, value) {
	        element = $(value);
	        id = element.data('id');
	        exists = false;
	        var _iteratorNormalCompletion8 = true;
	        var _didIteratorError8 = false;
	        var _iteratorError8 = undefined;

	        try {
	          for (var _iterator8 = (0, _getIterator3.default)(that.users.Online.User), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	            var online = _step8.value;

	            if (typeof online.ID === 'number' && parseInt(online.ID, 10) === id || typeof online.ID === 'string' && online.ID === id) {
	              exists = true;
	            }
	            chats++;
	          }
	        } catch (err) {
	          _didIteratorError8 = true;
	          _iteratorError8 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion8 && _iterator8.return) {
	              _iterator8.return();
	            }
	          } finally {
	            if (_didIteratorError8) {
	              throw _iteratorError8;
	            }
	          }
	        }

	        if (!exists && !element.is('.visitor[data-id=-1]')) {
	          // Remove Chat
	          // TODO Update Customer Status Indicator
	          element.remove();
	        }
	      });

	      if (chats === 0 && !demo.length) {
	        this.clearUsers(section);
	      }
	    } else if (core.tour !== false && !demo.length) {
	      this.clearUsers(section);
	    }

	    // Pending / Transferred Notification
	    if (this.users.Pending.User.length > 0) {
	      this.showPendingNotification(this.users.Pending.User);
	    } else {
	      this.closeNotification();
	    }

	    // Pending / Transferred
	    section = $('.pending.list');
	    if (pending.length > 0) {
	      $.each(pending, function (key, value) {
	        var total = that.users.Pending.User.length + that.users.Transferred.User.length;
	        element = $(value);
	        id = element.data('id');
	        exists = false;
	        var _iteratorNormalCompletion9 = true;
	        var _didIteratorError9 = false;
	        var _iteratorError9 = undefined;

	        try {
	          for (var _iterator9 = (0, _getIterator3.default)(that.users.Pending.User), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	            var pendingUser = _step9.value;

	            if (typeof pendingUser.ID === 'number' && parseInt(pendingUser.ID, 10) === id || typeof pendingUser.ID === 'string' && pendingUser.ID === id) {
	              exists = true;
	              break;
	            }
	          }
	        } catch (err) {
	          _didIteratorError9 = true;
	          _iteratorError9 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion9 && _iterator9.return) {
	              _iterator9.return();
	            }
	          } finally {
	            if (_didIteratorError9) {
	              throw _iteratorError9;
	            }
	          }
	        }

	        var _iteratorNormalCompletion10 = true;
	        var _didIteratorError10 = false;
	        var _iteratorError10 = undefined;

	        try {
	          for (var _iterator10 = (0, _getIterator3.default)(that.users.Transferred.User), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	            var transferredUser = _step10.value;

	            if (typeof transferredUser.ID === 'number' && parseInt(transferredUser.ID, 10) === id || typeof transferredUser.ID === 'string' && transferredUser.ID === id) {
	              exists = true;
	              break;
	            }
	          }

	          /*
	          // Remove Chat
	          // TODO Update Customer Status Indicator
	          if (!exists) {
	            //
	          }
	          */
	        } catch (err) {
	          _didIteratorError10 = true;
	          _iteratorError10 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion10 && _iterator10.return) {
	              _iterator10.return();
	            }
	          } finally {
	            if (_didIteratorError10) {
	              throw _iteratorError10;
	            }
	          }
	        }

	        if (total === 0) {
	          that.clearUsers(section);
	        }
	      });
	    } else {
	      this.clearUsers(section);
	    }

	    // Add Visitors
	    var sections = { Online: this.users.Online, Pending: this.users.Pending, Transferred: this.users.Transferred };
	    if (this.showOfflineOperators === false) {
	      sections.Staff = this.users.Staff;
	    }

	    var _iteratorNormalCompletion11 = true;
	    var _didIteratorError11 = false;
	    var _iteratorError11 = undefined;

	    try {
	      for (var _iterator11 = (0, _getIterator3.default)((0, _keys2.default)(sections)), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	        var key = _step11.value;

	        var user = sections[key];
	        if (user != null && user.User !== undefined) {
	          this.updateUser(key, user.User);
	        }
	      }
	    } catch (err) {
	      _didIteratorError11 = true;
	      _iteratorError11 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion11 && _iterator11.return) {
	          _iterator11.return();
	        }
	      } finally {
	        if (_didIteratorError11) {
	          throw _iteratorError11;
	        }
	      }
	    }
	  }

	  // Sort
	  this.sortOperators();

	  // Selected Chat
	  var route = storage.get('route');
	  if (!route.length || route === 'home') {}
	  // TODO Change the proper chat routing
	  //this.updateSelectedChat();


	  // Check Empty
	  var teamTotal = this.users.Staff.User.length;
	  if (teamTotal) {
	    var _iteratorNormalCompletion12 = true;
	    var _didIteratorError12 = false;
	    var _iteratorError12 = undefined;

	    try {
	      for (var _iterator12 = (0, _getIterator3.default)(this.users.Staff.User), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
	        staff = _step12.value;

	        if (parseInt(staff.ID, 10) === core.config.operator.id) {
	          teamTotal = teamTotal - 1;
	          break;
	        }
	      }
	    } catch (err) {
	      _didIteratorError12 = true;
	      _iteratorError12 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion12 && _iterator12.return) {
	          _iterator12.return();
	        }
	      } finally {
	        if (_didIteratorError12) {
	          throw _iteratorError12;
	        }
	      }
	    }
	  }

	  if (!teamTotal && !this.users.Online.User.length && !this.users.Pending.User.length && !this.users.Transferred.User.length) {
	    empty.show();
	  } else {
	    empty.hide();
	  }

	  if (complete) {
	    complete();
	  }

	  if (core.websockets === false) {
	    core.usersTimer = window.setTimeout(function () {
	      var core = __webpack_require__(121);
	      core.updateUsers();
	    }, 10000);
	  }
	};

	exports.debouncedSaveChatScroll = _.debounce(function () {
	  var scroll = $(this);
	  var chat = scroll.closest('.chat');
	  var id = chat.data('id');
	  var operator = chat.data('operator');
	  var chats = __webpack_require__(122);
	  var viewedchat = _.find(chats.viewed, function (chat) {
	    return chat.id === id && chat.operator == operator;
	  });

	  if (viewedchat !== undefined) {
	    viewedchat.scroll = scroll.scrollTop();
	    storage.set('viewed', chats.viewed);
	  } else {
	    chats.viewed.push({
	      id: id,
	      operator: operator,
	      message: 0,
	      viewed: 0,
	      scroll: scroll.scrollTop()
	    });
	    storage.set('viewed', chats.viewed);
	  }
	}, 300);

	exports.sections = {};
	exports.sectionHeight = function (section) {
	  var height = 74;
	  if (section.is('.chatting')) {
	    height = this.sections.chatting.height;
	  } else if (section.is('.other-chatting')) {
	    height = this.sections.other.height;
	  } else if (section.is('.pending')) {
	    height = this.sections.pending.height;
	  } else if (section.is('.operators')) {
	    height = this.sections.operators.height;
	  }
	  return height;
	};

	exports.updateSelectedChat = function () {
	  // Selected User
	  var chats = $('.chat-list');
	  if (!chats.find('.visitor.selected').length) {
	    var selected = storage.get('selected-chat');
	    var route = storage.get('route');
	    var focussed = route.indexOf('setting') > -1 || route === 'accounts' || route === 'responses';

	    if (!focussed) {
	      var visitor = false;
	      var channel = false;

	      if (selected !== undefined) {
	        visitor = chats.find('.visitor[data-id=' + selected.id + '][data-operator=' + selected.operator + ']');
	      } else {
	        visitor = chats.find('.channel.everyone');
	        channel = true;
	      }
	      if (visitor !== false && visitor.length > 0) {
	        visitor.addClass('selected');

	        if (!visitor.attr('data-operator')) {
	          visitor.click();

	          if (!channel) {
	            this.chattingVisitorClickCallback.call(visitor, {}, undefined, undefined, true);
	          }
	        }
	      }
	    }
	  }
	};

	exports.adjustSections = function (element, section, name, height) {
	  if (!this.sections.none.enabled && !this.sections.none.height) {
	    if (section === 'Staff') {
	      var heading = $('.chat-list-heading.' + name);
	      var existingheight = element.data('height');

	      height = $('.' + name + '.list').find('.visitor').length * height;
	      if (height > 0 && height !== existingheight) {
	        heading.show();
	      } else {
	        heading.hide();
	      }
	    }
	  }
	};

	exports.updateUser = function (section, users, complete) {
	  var html = '';
	  var exists = false;
	  var staff = false;
	  var path = window.location.pathname;
	  var element = null;
	  var chatting = $('.chatting.list');
	  var heading = false;
	  var height = 0;
	  var alert = false;
	  var existingheight = 0;

	  if (section === 'Online') {
	    element = this.sections.other.element;
	  } else if (section === 'Pending' || section === 'Transferred') {
	    element = this.sections.pending.element;
	    alert = true;
	  } else if (section === 'Staff') {
	    element = this.sections.operators.element;
	    users = _.reject(users, function (element) {
	      return parseInt(element.ID, 10) === core.config.operator.id;
	    });
	    staff = true;
	  }

	  if (element !== null) {
	    if (users.length > 0) {

	      if (section === 'Pending') {
	        heading = $('.chat-list .chat-list-heading.pending');
	        if (users.length) {
	          heading.show();
	        } else {
	          heading.hide();
	        }
	      } else if (section === 'Online') {
	        var onlinechats = _.filter(users, function (user) {
	          return parseInt(user.Active, 10) === core.config.operator.id;
	        });
	        heading = $('.chat-list .chat-list-heading.chatting');
	        if (onlinechats.length) {
	          heading.show();
	        } else {
	          heading.hide();
	        }

	        var otherchats = _.filter(users, function (user) {
	          return parseInt(user.Active, 10) !== core.config.operator.id;
	        });
	        heading = $('.chat-list .chat-list-heading.other-chatting');
	        if (otherchats.length) {
	          heading.show();
	        } else {
	          heading.hide();
	        }
	      }

	      var _iteratorNormalCompletion13 = true;
	      var _didIteratorError13 = false;
	      var _iteratorError13 = undefined;

	      try {
	        for (var _iterator13 = (0, _getIterator3.default)(users), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	          var visitor = _step13.value;

	          html = '';
	          if (section === 'Online') {
	            var active = parseInt(visitor.Active, 10);
	            if (active === core.config.operator.id || core.settings.LoginDetails !== undefined && !core.settings.LoginDetails.Enabled && active !== core.config.operator.id) {
	              element = this.sections.chatting.element;
	            } else {
	              element = this.sections.other.element;
	            }
	          }

	          var stack = $('.chat-stack');
	          exists = false;
	          $.each(element.find('.visitor'), function (key, chat) {
	            var id = typeof visitor.ID !== 'number' ? parseInt(visitor.ID, 10) : visitor.ID;

	            if (id === $(chat).data('id')) {
	              exists = true;

	              // Messages
	              if (section === 'Online') {
	                var messages = parseInt(visitor.Messages, 10);
	                var current = $(chat).data('messages');
	                var count = messages - current;
	                var top = stack.position().top;
	                var open = stack.find('.chat[data-id=' + id + ']').length;
	                var visible = top < 0 || open === 0 ? false : true;

	                var viewedchat = _.find(this.viewed, function (chat) {
	                  return chat.id === id && chat.operator === false;
	                });
	                if (viewedchat !== undefined) {
	                  viewedchat.message = 0;
	                  if (viewedchat.count !== undefined) {
	                    if (messages > viewedchat.count) {
	                      count = messages - viewedchat.count;
	                    } else {
	                      count = 0;
	                    }
	                  }
	                  storage.set('viewed', this.viewed);
	                }

	                if (count > 0 && !visible && viewedchat !== undefined && viewedchat.count !== undefined && viewedchat.count < messages) {
	                  $(chat).find('.message-alert').text(count).fadeIn();
	                }
	              }
	              return false;
	            }
	          });

	          if (!exists) {
	            var name = core.ucwords(visitor.Name.toLowerCase());
	            if (staff) {
	              var accounts = storage.get('accounts');
	              var department = visitor.Department;
	              var access = visitor.Access !== undefined ? convert.accessLevel(visitor.Access) : '';
	              var status = parseInt(visitor.Status, 10);
	              var operatoraccount = false;

	              var id = typeof visitor.ID !== 'number' ? parseInt(visitor.ID, 10) : visitor.ID;
	              if (visitor.Firstname !== undefined && !visitor.Firstname.length || visitor.Image !== undefined && !visitor.Image.length || visitor.Image === undefined) {
	                var _iteratorNormalCompletion14 = true;
	                var _didIteratorError14 = false;
	                var _iteratorError14 = undefined;

	                try {
	                  for (var _iterator14 = (0, _getIterator3.default)(accounts), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
	                    var account = _step14.value;

	                    if (parseInt(account.ID, 10) === parseInt(visitor.ID, 10)) {
	                      operatoraccount = account;
	                      name = account.Firstname;
	                      department = account.Department;
	                      access = convert.accessLevel(account.Privilege);
	                      if (account.Image && account.Image.length) {
	                        visitor.Image = account.Image;
	                      }
	                      break;
	                    }
	                  }
	                } catch (err) {
	                  _didIteratorError14 = true;
	                  _iteratorError14 = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
	                      _iterator14.return();
	                    }
	                  } finally {
	                    if (_didIteratorError14) {
	                      throw _iteratorError14;
	                    }
	                  }
	                }
	              } else {
	                name = visitor.Firstname;
	              }

	              account = this.addOperator(id, name, department, access, status, operatoraccount);
	              if (account) {
	                html = Handlebar.templates.operator(account);
	              }
	            } else {

	              var size = window.devicePixelRatio > 1 ? 192 : 96;
	              var defaultimage = core.server.length > 0 ? core.protocol + core.server + core.defaultUserImage : encodeURIComponent(window.location.protocol + '//' + window.location.host + path.replace(path.substring(path.indexOf(core.directoryPath + 'admin/')), core.directoryPath + 'images/UserSmall.png'));

	              visitor.id = typeof visitor.ID !== 'number' ? parseInt(visitor.ID, 10) : visitor.ID;
	              visitor.name = name;
	              visitor.department = visitor.Department;
	              visitor.server = visitor.Server;
	              visitor.hash = visitor.Hash;
	              visitor.image = 'https://secure.gravatar.com/avatar/' + MD5(visitor.Email).toString() + '?s=' + size + '&r=g&d=' + defaultimage;
	              html = Handlebar.templates.user(visitor);

	              // Add Chat
	              if (stack.length && !stack.find('.chat[data-id=' + visitor.id + '][data-operator=false]').length) {
	                var chathtml = Handlebar.templates.chat({ id: visitor.id, styles: 'chat', operator: false });

	                var chat = $(chathtml).prependTo(stack);
	                chat.find('.scroll').on('scroll', this.debouncedSaveChatScroll);

	                // TODO Add webpack support to cloudsockets.io plugin
	                if (typeof addEmailAPIRequest !== 'undefined') {
	                  addEmailAPIRequest(chat, visitor.Email, name, visitor.image); // eslint-disable-line no-undef
	                }
	              }

	              // Notifications
	              if (section === 'Pending' || section === 'Transferred') {
	                // Display Notification
	                this.displayNotification(visitor, section, name);
	              } else if (section === 'Online') {
	                // Remove Notification
	                var _iteratorNormalCompletion15 = true;
	                var _didIteratorError15 = false;
	                var _iteratorError15 = undefined;

	                try {
	                  for (var _iterator15 = (0, _getIterator3.default)(this.notifications), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
	                    var notify = _step15.value;

	                    if (notify.id === id) {
	                      if (notify.notification.cancel) {
	                        notify.notification.cancel();
	                      }
	                      if (notify.notification.close) {
	                        notify.notification.close();
	                      }
	                      break;
	                    }
	                  }
	                } catch (err) {
	                  _didIteratorError15 = true;
	                  _iteratorError15 = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion15 && _iterator15.return) {
	                      _iterator15.return();
	                    }
	                  } finally {
	                    if (_didIteratorError15) {
	                      throw _iteratorError15;
	                    }
	                  }
	                }
	              }
	            }

	            // Pending / Transferred
	            if (alert && core.pendingSound) {
	              var onlinealerts = storage.get('onlinealerts');
	              if (onlinealerts && core.config.operator.status === 1 || !onlinealerts) {
	                core.pendingSound.play();
	              }
	            }
	          }
	          if (html.length > 0) {
	            element.find('.no-visitor').hide();

	            var user = false;
	            if (this.loaded) {
	              user = $(html).prependTo(element);
	            } else {
	              user = $(html).appendTo(element);
	            }

	            if (core.dropdown) {

	              var menu = user.find('.dropdown-toggle.options');
	              var options = user.find('.dropdown-menu.options');

	              menu.dropdown();
	              menu.on('click', function () {

	                menu = $(this);
	                var top = menu.offset().top + menu.outerHeight();
	                var visitors = $('.chat-list .visitor');

	                options = menu.closest('.visitor').find('.dropdown-menu.options');
	                options.css('top', top + 'px');
	                options.css('left', menu.offset().left + 'px');

	                // Offline Email
	                options.find('.EmailChatOffline').text('Email Chat - ' + core.settings.Email);

	                // Visitors Email
	                $.each(visitors, function (key, value) {
	                  var element = $(value);
	                  var email = element.data('user').Email;
	                  var link = element.find('.EmailChatVisitor');

	                  if (email.length > 0) {
	                    link.text('Email Chat - ' + email).data('email', email).show();
	                  } else {
	                    link.parent().hide();
	                  }
	                });
	              });

	              options.find('.Close').click(function () {
	                // Close Chat
	                core.closeChat();
	              });

	              options.find('.Block').click(function () {
	                // Block Chat
	                core.blockChat();
	              });

	              options.find('.EmailChatOffline').click(function () {
	                var id = $(this).closest('.visitor').data('user').ID;
	                core.emailChat(id, '');
	              });

	              options.find('.EmailChatVisitor').click(function () {
	                var id = $(this).closest('.visitor').data('user').ID;
	                core.emailChat(id, $(this).data('email'));
	              });
	            }

	            var imageCallback = function imageCallback(element, image) {
	              return function () {
	                $(this).remove();
	                element.css('background-image', 'url(' + image + ')');
	              };
	            };

	            // Default Image
	            var image = user.find('.image');
	            $('<img/>').attr('src', visitor.image).one('load', imageCallback(image, visitor.image)).one('error', imageCallback(image, defaultimage));

	            if (user !== false) {
	              $(user).data('user', visitor);
	            }

	            if (staff) {
	              // Added Operator
	              if (visitor && user.Status !== undefined && core.config.operator.id !== parseInt(user.ID, 10) || user.Status === undefined) {
	                var chats = __webpack_require__(122);
	                chats.openChat(id, visitor, true, true);
	              }
	            }
	          }

	          // Adjust Height
	          height = element.find('.visitor').length * this.sectionHeight(element);
	          existingheight = element.data('height');
	          if (height > 0 && height !== existingheight) {
	            if (element.is('.operators')) {
	              height = height + 30;
	            }
	            if (element.is(':hidden')) {
	              element.show();
	            }
	            element.data('height', height);
	            element.animate({ height: height }, 250, 'easeOutBack');
	          }
	        }

	        // Adjust Operators Heading
	      } catch (err) {
	        _didIteratorError13 = true;
	        _iteratorError13 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion13 && _iterator13.return) {
	            _iterator13.return();
	          }
	        } finally {
	          if (_didIteratorError13) {
	            throw _iteratorError13;
	          }
	        }
	      }

	      this.adjustSections(element, section, 'operators', this.sections.operators.height);

	      // Adjust Other Chatting Heading
	      this.adjustSections(element, section, 'other-chatting', this.sections.other.height);

	      // Adjust Chatting Height
	      height = chatting.find('.visitor').length * this.sections.chatting.height;
	      existingheight = chatting.data('height');
	      heading = $('.chat-list-heading.chatting');
	      if (height > 0 && height !== existingheight) {
	        chatting.data('height', height);
	        if (chatting.height() > 0) {
	          chatting.animate({ height: height }, 250, 'easeOutBack');
	          heading.show();
	        } else {
	          heading.hide();
	        }
	      }
	    } else {
	      if (section != 'Pending' && section != 'Transferred') {
	        this.clearUsers(element);
	        if (section === 'Online' && !chatting.find('.visitor[data-id=-1]').length) {
	          this.clearUsers(chatting);
	        }
	      }

	      // Remove Notifications
	      if (section === 'Pending' || section === 'Transferred') {
	        var _iteratorNormalCompletion16 = true;
	        var _didIteratorError16 = false;
	        var _iteratorError16 = undefined;

	        try {
	          for (var _iterator16 = (0, _getIterator3.default)(this.notifications), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
	            notify = _step16.value;

	            if (notify.section === section) {
	              if (notify.notification.cancel) {
	                notify.notification.cancel();
	              }
	              if (notify.notification.close) {
	                notify.notification.close();
	              }
	            }
	          }
	        } catch (err) {
	          _didIteratorError16 = true;
	          _iteratorError16 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion16 && _iterator16.return) {
	              _iterator16.return();
	            }
	          } finally {
	            if (_didIteratorError16) {
	              throw _iteratorError16;
	            }
	          }
	        }
	      }
	    }
	  }

	  if (complete) {
	    complete();
	  }
	  this.loaded = true;
	};

	exports.displayNotification = function (visitor, section, title, message, chat) {

	  // Stored Notifications
	  var html5notify = storage.get('html5-notifications');
	  var exists = false;
	  if (visitor) {
	    var _iteratorNormalCompletion17 = true;
	    var _didIteratorError17 = false;
	    var _iteratorError17 = undefined;

	    try {
	      for (var _iterator17 = (0, _getIterator3.default)(this.notifications), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
	        var value = _step17.value;

	        if (value.id === visitor.id) {
	          exists = true;
	          break;
	        }
	      }
	    } catch (err) {
	      _didIteratorError17 = true;
	      _iteratorError17 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion17 && _iterator17.return) {
	          _iterator17.return();
	        }
	      } finally {
	        if (_didIteratorError17) {
	          throw _iteratorError17;
	        }
	      }
	    }
	  }

	  if (!exists && !core.overrideNotifications && html5notify && core.checkHTML5NotificationsPermission()) {
	    var title = section ? section + ' Chat Request' : title;
	    var text = title + ' is waiting to chat';

	    if (visitor && visitor.Department.length > 0) {
	      text += ' (' + visitor.Department + ')';
	    } else {
	      text = message;
	    }

	    var notification = false;
	    if (window.webkitNotifications !== undefined) {
	      notification = window.webkitNotifications.createNotification(this.notificationIcon, title, text);
	    } else if ('Notification' in window) {
	      notification = new Notification(title, { icon: this.notificationIcon, body: text });
	    }

	    if (notification !== false) {
	      this.notifications.push({ id: visitor.id, section: section, notification: notification });
	      if (chat) {
	        notification.onclick = function () {
	          chat.click();
	          notification.close();
	        };
	      } else {
	        notification.onclick = function () {
	          var id;
	          var chats = __webpack_require__(122);
	          var _iteratorNormalCompletion18 = true;
	          var _didIteratorError18 = false;
	          var _iteratorError18 = undefined;

	          try {
	            for (var _iterator18 = (0, _getIterator3.default)(chats.notifications), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
	              var value = _step18.value;

	              id = value.id;
	              if (id > 0) {
	                chats.acceptChat(id);
	              }
	            }
	          } catch (err) {
	            _didIteratorError18 = true;
	            _iteratorError18 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion18 && _iterator18.return) {
	                _iterator18.return();
	              }
	            } finally {
	              if (_didIteratorError18) {
	                throw _iteratorError18;
	              }
	            }
	          }
	        };
	      }

	      if (typeof notification.show === 'function') {
	        notification.show();
	      }
	    }
	  }
	};

	exports.clearUsers = function (element) {

	  var height = this.sectionHeight(element);
	  var section = element.attr('id');
	  var heading = $('.chat-list-heading.' + section);

	  if (height > 0) {
	    element.find('.visitor').remove();
	    if (this.sections.none.enabled) {
	      element.find('.no-visitor').show();
	      element.height(this.sections.none.height);
	      element.data('height', this.sections.none.height);
	    } else {
	      if (element.is('.chatting') && !this.sections.none.enabled) {
	        element.parent().find('.chat-list-heading.pending').hide();
	      }
	      element.find('.no-visitor').hide();
	      element.height(0);
	      element.data('height', 0);
	      heading.hide();
	    }
	  } else if (element.is(':visible')) {
	    element.hide();
	  }
	};

	exports.removeUser = function (section, element) {

	  // Remove Chatting Visitor
	  element.remove();

	  var height = this.sectionHeight(section);

	  // Adjust Height
	  height = section.find('.visitor').length * height;
	  if (height > 0) {
	    if (section.height() > 0) {
	      section.animate({ height: height }, 250, 'easeOutBack');
	    }
	    section.data('height', height);
	  }
	};

	exports.acceptChat = function (id, event, complete) {
	  var chat = $('.pending .visitor[data-id=' + id + ']');
	  var data = { visitor: id };

	  if (chat && chat.length > 0) {
	    var name = chat.find('.details.name');
	    var user = name.text();

	    // Data
	    id = typeof chat.data('id') === 'number' ? parseInt(chat.data('id'), 10) : chat.data('id');
	    data = { id: id, name: name };

	    // Clear Notification
	    this.clearNotification(id);

	    // Dark Theme
	    if ($('.dashboard.content.dark').length) {
	      this.acceptChatStyles.background = '#4e5561';
	    }

	    chat.css(this.acceptChatStyles);
	    chat.find('.image').hide();
	    chat.find('.loader-inner').show();
	    name.text('Accepting Chat').css('left', '8px');
	    chat.find('.details.department').text('with ' + user);
	    chat.find('.image').css({ 'opacity': 0.5, 'border': 'none', 'box-shadow': 'none' });
	    chat.find('.details.accesslevel').html('&nbsp;');
	    chat.delay(3000).fadeOut(function () {
	      $(this).remove();
	    });

	    if (typeof id === 'number' && id > 0 || typeof id === 'string' && id.length == 36) {
	      core.updateUsers('Accept', id, function () {
	        if (typeof complete === 'function') {
	          complete();
	        }
	        $('.chatting, .other-chatting, .operators').find('.visitor[data-id!=' + id + ']').removeClass('selected previous');
	        $('.chatting, .other-chatting').find('.visitor[data-id=' + id + ']').addClass('selected');
	      });
	    }
	  }

	  if (event === undefined) {
	    $(document).trigger('LiveHelp.AcceptChat', data);
	  }
	};

	exports.addOperator = function (id, name, department, access, status, account, offline) {
	  var data = {};
	  var exists = $('.operators.list .visitor[data-id=' + id + ']').length;

	  if (id !== core.config.operator.id && !exists) {
	    // Operator Chats
	    var _iteratorNormalCompletion19 = true;
	    var _didIteratorError19 = false;
	    var _iteratorError19 = undefined;

	    try {
	      for (var _iterator19 = (0, _getIterator3.default)(core.activechats), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
	        var value = _step19.value;

	        if (id === value.id && value.type > 0) {
	          (function () {
	            var updateTime = function updateTime() {

	              var visitors = $('.pending.list .visitor, .transferred.list .visitor');
	              var _iteratorNormalCompletion21 = true;
	              var _didIteratorError21 = false;
	              var _iteratorError21 = undefined;

	              try {
	                for (var _iterator21 = (0, _getIterator3.default)(visitors), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
	                  var visitor = _step21.value;

	                  visitor = $(visitor);
	                  var datetime = moment(visitor.attr('data-datetime'));
	                  var seconds = moment().diff(datetime, 'seconds') % 60;
	                  var minutes = moment().diff(datetime, 'minutes');
	                  var output = minutes > 0 ? minutes + 'm' : seconds + 's';

	                  if (!isNaN(minutes) && !isNaN(seconds)) {
	                    visitor.find('.time').text(output);
	                  }
	                }
	              } catch (err) {
	                _didIteratorError21 = true;
	                _iteratorError21 = err;
	              } finally {
	                try {
	                  if (!_iteratorNormalCompletion21 && _iterator21.return) {
	                    _iterator21.return();
	                  }
	                } finally {
	                  if (_didIteratorError21) {
	                    throw _iteratorError21;
	                  }
	                }
	              }

	              window.setTimeout(updateTime, 1000);
	            };
	            updateTime();
	          })();
	          break;
	        }
	      }

	      // Accounts
	    } catch (err) {
	      _didIteratorError19 = true;
	      _iteratorError19 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion19 && _iterator19.return) {
	          _iterator19.return();
	        }
	      } finally {
	        if (_didIteratorError19) {
	          throw _iteratorError19;
	        }
	      }
	    }

	    if (!account) {
	      if (!core.accounts.length) {
	        core.accounts = storage.get('accounts');
	      }
	      if (core.accounts.length) {
	        var _iteratorNormalCompletion20 = true;
	        var _didIteratorError20 = false;
	        var _iteratorError20 = undefined;

	        try {
	          for (var _iterator20 = (0, _getIterator3.default)(core.accounts), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
	            account = _step20.value;

	            if (parseInt(account.ID, 10) === id) {
	              account = account;
	              break;
	            }
	          }
	        } catch (err) {
	          _didIteratorError20 = true;
	          _iteratorError20 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion20 && _iterator20.return) {
	              _iterator20.return();
	            }
	          } finally {
	            if (_didIteratorError20) {
	              throw _iteratorError20;
	            }
	          }
	        }
	      }
	    }

	    // Image
	    var image = core.operatorImage(id, account.Email, account.Image, 40);

	    if ((status === 1 || status === 2 || status === 3) && offline === undefined || offline !== undefined) {
	      if (account !== false && account.Image !== undefined && account.Image.indexOf('https://') > -1) {
	        image = account.Image.replace('.png', '-100px.png');
	      } else {
	        var path = window.location.pathname;
	        var defaultimage = core.server.length > 0 ? core.protocol + core.server + core.defaultUserImage : window.location.protocol + '//' + window.location.host + path.replace(path.substring(path.indexOf(core.directoryPath + '/admin/')), core.defaultUserImage);
	        var hash = MD5(account.Email).toString();

	        image = 'https://secure.gravatar.com/avatar/' + hash + '?s=100&r=g&d=' + defaultimage;
	      }

	      var statusmode = 'offline';
	      switch (status) {
	        case 1:
	          statusmode = 'online';
	          break;
	        case 2:
	          statusmode = 'brb';
	          break;
	        case 3:
	          statusmode = 'away';
	          break;
	      }

	      data.id = id;
	      data.firstname = account.Firstname;
	      data.statusmode = statusmode;
	      data.image = image;
	      data.name = name;
	      data.department = department;
	      data.access = access;
	      return data;
	    }
	  }
	  return false;
	};

	exports.sortOperators = function () {

	  // Sort Status Mode
	  var order = { online: 1, brb: 2, away: 3, offline: 4 };
	  $('.operators.list').find('.visitor').sort(function (a, b) {
	    return order[$(a).data('status')] - order[$(b).data('status')];
	  }).each(function (_, account) {
	    $(account).parent().append(account);
	  });

	  // Sort Name
	  var operators = ['online', 'brb', 'away', 'offline'];
	  $.each(operators, function (key, section) {
	    $('.operators.list .visitor[data-status="' + section + '"]').sort(function (a, b) {
	      return $(a).data('name').localeCompare($(b).data('name'));
	    }).each(function (_, account) {
	      $(account).parent().append(account);
	    });
	  });
	};

	exports.updateMessageAlert = function (id, operator, messages, previous) {
	  var notify = $('.chat-list .visitor[data-id="' + id + '"][data-operator="' + operator + '"] .message-alert');
	  var chat = $('.chat[data-id="' + id + '"][data-operator=' + operator + ']');

	  messages = messages !== undefined ? parseInt(messages, 10) : 1;

	  // Scroll Alert
	  if (this.scrollAlertEnabled) {
	    var scroll = chat.find('.scroll');
	    var bottom = scroll.length > 0 ? scroll[0].scrollTop + scroll.height() : 0;
	    var last = chat.find('.messages .message.left:not(.typing):last');
	    var text = parseInt(notify.text(), 10);
	    var total = isNaN(text) ? messages : text + messages;
	    var element = 0;

	    if (scroll.length > 0) {
	      element = last.length > 0 ? scroll[0].scrollTop + last.position().top : scroll[0].scrollTop;
	    }

	    if (previous > 0) {
	      if (bottom < element) {
	        // Scroll Alert
	        var scrolltext = total > 1 ? total + ' New Messages' : total + ' New Message';
	        chat.find('.scrollalert a').text(scrolltext).parent().show();
	      }

	      if (!chat.is('.focussed') || chat.is('.focussed') && bottom < element) {
	        this.setMessageAlert(id, operator, total);
	      }
	    }

	    // Viewed Chat Messages
	    var _iteratorNormalCompletion22 = true;
	    var _didIteratorError22 = false;
	    var _iteratorError22 = undefined;

	    try {
	      for (var _iterator22 = (0, _getIterator3.default)(core.activechats), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
	        var activechat = _step22.value;

	        var viewedchat = _.find(this.viewed, function (chat) {
	          return chat.id === activechat.id && chat.operator === (activechat.type === 1 ? true : false);
	        });
	        if (viewedchat !== undefined) {
	          if (chat.is('.focussed') && bottom >= element) {
	            viewedchat.viewed = activechat.message;
	          }
	          viewedchat.message = activechat.message;
	        } else {
	          this.viewed.push({ id: activechat.id, operator: activechat.type === 1 ? true : false, message: activechat.message, viewed: activechat.message });
	        }
	      }
	    } catch (err) {
	      _didIteratorError22 = true;
	      _iteratorError22 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion22 && _iterator22.return) {
	          _iterator22.return();
	        }
	      } finally {
	        if (_didIteratorError22) {
	          throw _iteratorError22;
	        }
	      }
	    }

	    storage.set('viewed', this.viewed);
	  } else if (!chat.is('.focussed')) {
	    if (messages > 0) {
	      messages = parseInt(notify.text(), 10) + messages;
	      this.setMessageAlert(id, operator, messages, previous);
	    } else {
	      notify.hide();
	    }
	  }
	};

	exports.setMessageAlert = function (id, operator, messages, last) {

	  var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
	  if (typeof id === 'string' && !uuidRegex.test(id)) {
	    id = parseInt(id, 10);
	  }

	  if (messages > 0) {
	    var alerts = storage.get('alerts');
	    alerts = alerts !== undefined && alerts instanceof Array ? storage.get('alerts') : [];

	    var chat = _.find(alerts, function (chat) {
	      return chat.id === id && chat.operator == operator;
	    });
	    if (chat !== undefined) {
	      if (last !== undefined) {
	        if (chat.last !== false && typeof chat.last === 'number') {
	          var unread = $('.chat-stack .chat[data-id=' + id + '][data-operator=' + operator + '] .message.left:not(.typing)').filter(function () {
	            return $(this).data('id') > chat.last;
	          });
	          messages = unread.length;
	        }
	        last = _.min(unread, function (message) {
	          return $(message).data('id');
	        });
	        if ((chat.last === undefined || chat.last === false) && !_.isEmpty(last)) {
	          chat.last = $(last).data('id');
	        }
	      }
	      chat.alert = messages;
	    } else {
	      var alert = { id: id, operator: operator, alert: messages, last: false };

	      chat = $('.chat[data-id=' + id + '][data-operator=' + operator + '] .messages');
	      if (!chat.length) {
	        var visitor = $('.chat-list .visitor[data-id=' + id + '][data-operator=' + operator + ']');
	        if (visitor.length > 0) {
	          this.chattingVisitorClickCallback.call(visitor, {}, true, undefined, true);
	        }
	      }

	      var latest = $('.chat[data-id=' + id + '][data-operator=' + operator + ']').find('.message.left:not(.typing), .message.right:not(.typing)');
	      latest = $(latest[latest.length - messages - 1]).data('id');
	      if (latest !== undefined && typeof latest === 'number') {
	        alert.last = latest;
	      }

	      alerts.push(alert);
	    }

	    if (messages > 0) {
	      var notify = $('.chat-list .visitor[data-id="' + id + '"][data-operator="' + operator + '"] .message-alert');
	      notify.text(messages).show();
	      notify.parent().find('.name').addClass('highlight');

	      var total = _.reduce($('.chat-list .visitor .message-alert'), function (memo, num) {
	        return memo + parseInt($(num).text(), 10);
	      }, 0);
	      $(document).trigger('LiveHelp.MessageAlert', total);
	    }

	    storage.set('alerts', alerts);
	  }
	};

	exports.showMessageAlerts = function () {
	  var alerts = storage.get('alerts');
	  alerts = alerts !== undefined && alerts instanceof Array ? storage.get('alerts') : [];
	  var _iteratorNormalCompletion23 = true;
	  var _didIteratorError23 = false;
	  var _iteratorError23 = undefined;

	  try {
	    for (var _iterator23 = (0, _getIterator3.default)(alerts), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
	      var value = _step23.value;

	      var chat = $('.chat-stack .chat[data-id="' + value.id + '"][data-operator="' + value.operator + '"]');
	      var notify = chat.find('.message-alert');

	      if (!chat.length) {
	        var visitor = $('.chat-list .visitor[data-id=' + value.id + '][data-operator=' + value.operator + ']');
	        if (visitor.length > 0) {
	          this.chattingVisitorClickCallback.call(visitor, {}, true, undefined, true);
	        }
	      }

	      notify.text(value.alert).show();
	      notify.parent().find('.name').addClass('highlight');
	    }
	  } catch (err) {
	    _didIteratorError23 = true;
	    _iteratorError23 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion23 && _iterator23.return) {
	        _iterator23.return();
	      }
	    } finally {
	      if (_didIteratorError23) {
	        throw _iteratorError23;
	      }
	    }
	  }
	};

	exports.resetMessageAlert = function (element, pubsub) {
	  if (element.length > 0) {
	    var id = element.data('id');
	    var operator = element.data('operator');
	    var notify = element.find('.message-alert');
	    var messages = 0;
	    var alerts = storage.get('alerts');

	    notify.fadeOut(function () {
	      notify.text(messages);

	      var total = _.reduce($('.chat-list .visitor .message-alert'), function (memo, num) {
	        return memo + parseInt($(num).text(), 10);
	      }, 0);
	      $(document).trigger('LiveHelp.MessageAlert', total);
	    });
	    notify.parent().find('.name').removeClass('highlight');

	    alerts = alerts !== undefined && alerts instanceof Array ? storage.get('alerts') : [];
	    if (!operator) {
	      alerts = _.reject(alerts, function (chat) {
	        return chat.id === id && chat.operator === operator;
	      });
	    } else {
	      var chat = _.find(alerts, function (chat) {
	        return chat.id === id && chat.operator === operator;
	      });
	      if (chat !== undefined) {
	        chat.alert = 0;
	      }

	      var unread = $('.chat-stack .chat[data-id=' + id + '][data-operator=' + operator + '] .message.left:not(.typing)');
	      var last = _.max(unread, function (message) {
	        var id = $(message).data('id');
	        if (typeof id === 'number') {
	          return id;
	        } else {
	          return -1;
	        }
	      });

	      if (!_.isEmpty(last) && chat !== undefined) {
	        last = $(last).data('id');
	        if (last !== undefined && last !== false && (chat.last === false || typeof last === 'number' && chat.last < last)) {
	          chat.last = last;
	        }
	      }
	    }
	    storage.set('alerts', alerts);

	    if ($('.chat-stack .chat[data-id=' + id + '][data-operator=' + operator + ']').is('.focussed')) {
	      var viewedchat = _.find(this.viewed, function (chat) {
	        return chat.id === id && chat.operator == operator;
	      });
	      if (viewedchat !== undefined) {
	        viewedchat.viewed = viewedchat.message;
	        storage.set('viewed', this.viewed);
	      }
	    }

	    if (id > 0 && pubsub === undefined && core.intercom !== false) {
	      core.intercom.emit('message-alert', { id: id, operator: operator });
	    }
	  }
	};

	exports.scrollToBottom = function (id, operator, force, channel) {
	  var chat = false;
	  if (channel !== undefined && channel !== false) {
	    chat = $('.chat-stack .channel.' + channel);
	  } else {
	    chat = $('.chat-stack .chat[data-id=' + id + '][data-operator=' + operator + ']');
	  }

	  if (chat !== false && chat.length > 0) {
	    var scroll = chat.find('.scroll');
	    var end = scroll.find('div.end');
	    var override = chat.data('initalised');
	    var bottom = scroll.length > 0 ? scroll[0].scrollTop + scroll.height() : 0;
	    var last = chat.find('.messages .message.last:parent');
	    var element = 0;
	    var typing = chat.find('.messages .flex.typing:parent:visible');

	    if (typing.length > 0) {
	      last = typing;
	    }

	    if (scroll.length > 0) {
	      element = override !== undefined && last.length > 0 ? scroll[0].scrollTop + last.position().top : scroll[0].scrollTop;
	    }

	    if (last.length > 0) {
	      force = bottom >= element ? true : force;
	    }

	    if (this.autoScroll || override === undefined || force !== undefined) {
	      scroll.scrollTo(end);
	      chat.data('initalised', true);
	    }
	  }
	};

	exports.addChat = function (id, type, closed) {
	  var exists = false;
	  var blocked = false;

	  var _iteratorNormalCompletion24 = true;
	  var _didIteratorError24 = false;
	  var _iteratorError24 = undefined;

	  try {
	    for (var _iterator24 = (0, _getIterator3.default)(core.activechats), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
	      var chat = _step24.value;

	      if (chat.id === id) {
	        exists = true;
	        return;
	      }
	    }
	  } catch (err) {
	    _didIteratorError24 = true;
	    _iteratorError24 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion24 && _iterator24.return) {
	        _iterator24.return();
	      }
	    } finally {
	      if (_didIteratorError24) {
	        throw _iteratorError24;
	      }
	    }
	  }

	  var _iteratorNormalCompletion25 = true;
	  var _didIteratorError25 = false;
	  var _iteratorError25 = undefined;

	  try {
	    for (var _iterator25 = (0, _getIterator3.default)(core.blockedchats), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
	      chat = _step25.value;

	      if (chat.id === id) {
	        blocked = true;
	        return;
	      }
	    }
	  } catch (err) {
	    _didIteratorError25 = true;
	    _iteratorError25 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion25 && _iterator25.return) {
	        _iterator25.return();
	      }
	    } finally {
	      if (_didIteratorError25) {
	        throw _iteratorError25;
	      }
	    }
	  }

	  if (!exists && !blocked && !closed) {
	    type = type ? 1 : 0;
	    core.activechats.push({ id: id, typing: 0, type: type, message: 0, date: new Date() });
	  }
	};

	exports.messagesTimer = false;

	exports.refreshMessages = function () {
	  if (core.websockets === false) {
	    var chats = __webpack_require__(122);
	    chats.messagesTimer = window.setTimeout(function () {
	      chats.updateMessages();
	    }, 2000);
	  }
	};

	// Messages
	exports.updateMessages = function (callback, _error) {
	  if (core.config.session.length > 0 && core.messagesAjax) {
	    var stack = $('.chat-stack');
	    var chats = stack.find('.chat[data-id]');
	    var that = this;

	    $.each(chats, function (key, value) {
	      var chat = $(value);
	      var id = chat.data('id');
	      var closed = chat.data('closed');
	      var operator = chat.data('operator');
	      var type = operator !== false ? 1 : 0;

	      that.addChat(id, type, closed);
	    });

	    if (core.activechats.length > 0) {
	      var data = '';

	      var _iteratorNormalCompletion26 = true;
	      var _didIteratorError26 = false;
	      var _iteratorError26 = undefined;

	      try {
	        for (var _iterator26 = (0, _getIterator3.default)(core.activechats), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
	          var chat = _step26.value;

	          if (data.length > 0) {
	            data += '|';
	          }
	          data += chat.id + ',' + chat.typing + ',' + chat.type + ',' + chat.message; // ID,Typing,Type,Message|ID,Typing,Type,Message
	        }
	      } catch (err) {
	        _didIteratorError26 = true;
	        _iteratorError26 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion26 && _iterator26.return) {
	            _iterator26.return();
	          }
	        } finally {
	          if (_didIteratorError26) {
	            throw _iteratorError26;
	          }
	        }
	      }

	      var post = { 'Data': data };

	      api.apiRequest({
	        url: api.apiEndpoint.chats,
	        data: post,
	        timeout: 15000,
	        success: function success(data) {

	          var alert = false;
	          var lastmessage = {};
	          var tweets = [];
	          var chats = __webpack_require__(122);

	          // Messages JSON
	          if (data.MultipleMessages !== undefined && data.MultipleMessages.Messages !== undefined) {
	            var _iteratorNormalCompletion27 = true;
	            var _didIteratorError27 = false;
	            var _iteratorError27 = undefined;

	            try {

	              for (var _iterator27 = (0, _getIterator3.default)(data.MultipleMessages.Messages), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
	                var messages = _step27.value;

	                if (messages !== undefined) {

	                  var op = parseInt(messages.ChatType, 10) ? true : false;

	                  var id = typeof messages.ID === 'string' && messages.ID.length == 36 ? messages.ID : parseInt(messages.ID, 10);
	                  var status = parseInt(messages.Status, 10);
	                  var typing = messages.Typing;
	                  var chat = $('.chat-stack .chat[data-id=' + id + '][data-operator="' + op + '"]');
	                  var total = 0;
	                  var last = false;

	                  chat.find('.message.last').removeClass('last');
	                  chat.find('.message:not(.typing):last').addClass('last');

	                  var _iteratorNormalCompletion28 = true;
	                  var _didIteratorError28 = false;
	                  var _iteratorError28 = undefined;

	                  try {
	                    for (var _iterator28 = (0, _getIterator3.default)(core.activechats), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
	                      var value = _step28.value;

	                      if (value.id !== undefined && value.id == id) {
	                        // Current Typing
	                        value.typing = typing;
	                        chats.updateTyping(value.id, value.typing);
	                        break;
	                      }
	                    }
	                  } catch (err) {
	                    _didIteratorError28 = true;
	                    _iteratorError28 = err;
	                  } finally {
	                    try {
	                      if (!_iteratorNormalCompletion28 && _iterator28.return) {
	                        _iterator28.return();
	                      }
	                    } finally {
	                      if (_didIteratorError28) {
	                        throw _iteratorError28;
	                      }
	                    }
	                  }

	                  var html = '';
	                  var email = false;
	                  if (messages.Message !== undefined && messages.Message.length > 0) {
	                    var _iteratorNormalCompletion29 = true;
	                    var _didIteratorError29 = false;
	                    var _iteratorError29 = undefined;

	                    try {
	                      for (var _iterator29 = (0, _getIterator3.default)(messages.Message), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
	                        value = _step29.value;

	                        var messageid = parseInt(value.ID, 10);
	                        var content = value.Content;
	                        var date = new moment(value.Datetime);
	                        var from = value.From !== undefined ? parseInt(value.From, 10) : undefined;

	                        email = value.Email;
	                        status = parseInt(value.Status, 10);

	                        var username = value.Username !== undefined ? value.Username : '';
	                        if (op !== false && value.Name !== undefined) {
	                          username = value.Name;
	                        }

	                        var message = chats.messageHTML(messageid, status, content, date, from, username, undefined, email, id, op, total);
	                        if (message !== false) {
	                          html += message.html;
	                          total = message.total;
	                          lastmessage = message.alert;
	                          if (message.tweets.length > 0) {
	                            tweets = tweets.concat(message.tweets);
	                          }

	                          var active = $('.chat-list .chatting.list .visitor[data-id=' + id + ']').length || $('.chat-stack .chat[data-id=' + id + '] .messages .message.right[data-from=' + core.config.operator.id + ']').length ? true : false;
	                          if (message.data.status > -1) {
	                            chats.showNotification({ title: message.data.username, text: message.data.text, users: false, data: message.data, chat: id, active: active });
	                          }
	                        }

	                        last = messageid;
	                      }
	                    } catch (err) {
	                      _didIteratorError29 = true;
	                      _iteratorError29 = err;
	                    } finally {
	                      try {
	                        if (!_iteratorNormalCompletion29 && _iterator29.return) {
	                          _iterator29.return();
	                        }
	                      } finally {
	                        if (_didIteratorError29) {
	                          throw _iteratorError29;
	                        }
	                      }
	                    }
	                  }

	                  // Display Messages
	                  var newAlert = chats.displayMessages(id, op, chat, html, status, total, last, false, false, tweets, email);
	                  if (newAlert !== undefined) {
	                    alert = newAlert;
	                  }
	                }
	              }
	            } catch (err) {
	              _didIteratorError27 = true;
	              _iteratorError27 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion27 && _iterator27.return) {
	                  _iterator27.return();
	                }
	              } finally {
	                if (_didIteratorError27) {
	                  throw _iteratorError27;
	                }
	              }
	            }
	          }

	          if (callback) {
	            callback();
	          }

	          // New Message Sound
	          core.playMessageSound(alert, lastmessage);

	          if (!$.isEmptyObject(lastmessage)) {
	            $(document).trigger('LiveHelp.MessagesUpdated');
	          }

	          // Refresh Messages
	          chats.refreshMessages();
	        },
	        error: function error(xhr, ajaxOptions, thrownError) {
	          var chats = __webpack_require__(122);
	          chats.refreshMessages();

	          if (_error) {
	            _error(xhr, ajaxOptions, thrownError);
	          }
	        }
	      });
	    } else {
	      __webpack_require__(122).refreshMessages();

	      if (callback) {
	        callback();
	      }
	    }
	  } else {
	    __webpack_require__(122).refreshMessages();

	    if (callback) {
	      callback();
	    }
	  }
	};

	exports.displayMessages = function (id, op, chat, html, status, total, last, scroll, channel, tweets, email) {
	  var _this = this;

	  var closed = chat.data('closed');
	  var alert = undefined;
	  var visitor = $('.chat-list .visitor[data-id=' + id + '][data-operator=' + op + ']');

	  if (channel !== undefined && channel !== false) {
	    visitor = $('.chat-list .channel.' + channel);
	  }

	  // Chat Ended
	  /*
	  if (status === -1 && !closed && chat.data('operator') === false) {
	     // Close Chat
	    html = '<div style="margin-left:20px; text-align: center">Chat Closed</div>';
	    chat.data('closed', true);
	     // Remove Chat
	    if (id !== false) {
	      chats = [];
	      for (var chat of core.activechats) {
	        if (chat.id !== id) {
	          chats.push(chat);
	          return;
	        }
	      }
	      core.activechats = chats;
	    }
	  }
	  */

	  if (html.length > 0 && !closed) {
	    var typing = chat.find('.messages .flex.typing');
	    if (typing.length > 0) {
	      $(html).insertBefore(typing);
	    } else {
	      if (chat.length === 0) {
	        if (visitor.length > 0) {
	          this.chattingVisitorClickCallback.call(visitor, {}, true, true);
	          chat = $('.chat-stack .chat[data-id=' + id + '][data-operator=' + op + ']');
	        }
	      }

	      $(html).appendTo(chat.find('.messages'));
	    }

	    // Default Image
	    if (email !== false) {

	      if (email === undefined) {
	        var user = visitor.data('user');
	        if (user !== undefined) {
	          email = user.Email;
	        }
	      }

	      var images = chat.find('.avatar.guest');
	      var size = window.devicePixelRatio > 1 ? 192 : 96;
	      var path = window.location.pathname;
	      var defaultimage = core.server.length > 0 ? core.protocol + core.server + core.defaultUserImage : encodeURIComponent(window.location.protocol + '//' + window.location.host + path.replace(path.substring(path.indexOf(core.directoryPath + 'admin/')), core.directoryPath + 'images/UserSmall.png'));
	      var image = 'https://secure.gravatar.com/avatar/' + MD5(email).toString() + '?s=' + size + '&r=g&d=' + defaultimage;

	      var imageCallback = function imageCallback(element, image) {
	        return function () {
	          $(this).remove();
	          element.css('background-image', 'url(' + image + ')');
	        };
	      };

	      if (!op) {
	        $('<img/>').attr('src', image).one('load', imageCallback(images, image)).one('error', imageCallback(images, defaultimage));
	      }
	    }

	    // Tweets
	    if (tweets !== false && tweets.length > 0) {
	      var _iteratorNormalCompletion30 = true;
	      var _didIteratorError30 = false;
	      var _iteratorError30 = undefined;

	      try {
	        for (var _iterator30 = (0, _getIterator3.default)(tweets), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
	          var value = _step30.value;

	          var element = $('.message .content[data-twitter=' + value + ']');
	          var embedded = element.find('.twitter-tweet').length;

	          if (element.length > 0 && !embedded) {
	            twttr.widgets.createTweet(value, element.get(0), { theme: 'light' }); // eslint-disable-line no-undef
	          }
	        }
	      } catch (err) {
	        _didIteratorError30 = true;
	        _iteratorError30 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion30 && _iterator30.return) {
	            _iterator30.return();
	          }
	        } finally {
	          if (_didIteratorError30) {
	            throw _iteratorError30;
	          }
	        }
	      }
	    }

	    // Update Last Message
	    var _iteratorNormalCompletion31 = true;
	    var _didIteratorError31 = false;
	    var _iteratorError31 = undefined;

	    try {
	      for (var _iterator31 = (0, _getIterator3.default)(core.activechats), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
	        var activechat = _step31.value;

	        if (activechat.id === id) {
	          activechat.message = last;
	          break;
	        }
	      }

	      // Scroll / Sound Alert
	    } catch (err) {
	      _didIteratorError31 = true;
	      _iteratorError31 = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion31 && _iterator31.return) {
	          _iterator31.return();
	        }
	      } finally {
	        if (_didIteratorError31) {
	          throw _iteratorError31;
	        }
	      }
	    }

	    var delayScroll = function delayScroll() {
	      return new _promise2.default(function (resolve) {
	        setTimeout(resolve, 150);
	      });
	    };
	    delayScroll().then(function () {
	      _this.scrollToBottom(id, op, scroll, channel);
	    });

	    if (total > 0 && id !== false) {
	      alert = true;
	      this.updateMessageAlert(id, op, total, last);
	    }

	    // Update Last Message
	    var previous = parseInt(visitor.data('messages'), 10);
	    if (last > 0 && visitor.length > 0 && id > previous) {
	      visitor.data('messages', last);
	    }
	  }

	  return alert;
	};

	var chats = [];

	exports.messageHTML = function (messageid, status, content, datetime, from, username, firstname, email, id, op, total, uuid) {
	  var chat = $('.chat-stack .chat[data-id=' + id + '][data-operator="' + op + '"]');
	  var html = '';
	  var tweets = [];
	  var alert = {};
	  var size = window.devicePixelRatio > 1 ? 192 : 96;
	  var message = { id: messageid, text: content, timestamp: datetime.unix(), time: datetime !== false ? datetime.local().format('h:mm A') : false, status: status };

	  if (status > 0) {
	    message.content = $('<div>').text(content).html();
	  } else {
	    message.content = core.escapeHtml(content);
	  }

	  message.username = core.escapeHtml(username);
	  message.type = message.status === 8 ? 'internal' : 'text';
	  email = core.escapeHtml(email);

	  var tweetRegex = /^(http|https):\/\/twitter.com\/([^\/"\s]*)\/status\/([^\/"\s]*)\/*$/g;
	  var matchesTweet = tweetRegex.exec(message.content);

	  // Image
	  var imageRegEx = /^(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[A-Z0-9+&@#\/%=~_|](\.jpg|.jpeg|\.gif|\.png)$/img;
	  if (status === 3) {
	    var match = imageRegEx.exec(message.content);
	    if (match !== null) {
	      message.content = '<img src="' + match[0] + '" />';
	    }
	  } else {

	    if (matchesTweet && matchesTweet.length > 2) {
	      message.tweet = matchesTweet[3];
	      tweets.push(message.tweet);
	      message.content = '';
	      message.type = 'tweet';
	    } else {
	      message.content = message.content.replace(/(?!.*(?:\.jpe?g|\.gif|\.png)$)((?:(?:http(?:s?))|(?:ftp)):\/\/[^\s|<|>|'|"]*)/img, '<a href="$1" target="_blank">$1</a>');

	      match = imageRegEx.exec(message.content);
	      if (match !== null) {
	        message.content = message.content.replace(imageRegEx, '<img src="$&"/><div class="source">Source: <a href="$&" target="_blank">$&</a></div>');
	        message.type = 'image';
	      }
	    }
	  }

	  message.content = message.content.replace(/(\r\n|\r|\n)/g, '<br/>');
	  if (core.settings.Smilies !== 0) {
	    message.content = core.htmlSmilies(message.content);
	  }

	  // Operator-Operator Chat
	  status = message.status;
	  if (op !== false && from > 0) {
	    if (core.config.operator.id !== from) {
	      status = 0;
	    } else {
	      status = 1;
	    }
	  }

	  message.alignment = status > 0 ? 'right' : 'left';

	  var image = false;
	  if (status >= 0) {

	    var account = false;
	    if (status > 0 || op && status >= 0) {
	      core.accounts = storage.get('accounts');
	      if (core.accounts.length) {
	        var _iteratorNormalCompletion32 = true;
	        var _didIteratorError32 = false;
	        var _iteratorError32 = undefined;

	        try {
	          for (var _iterator32 = (0, _getIterator3.default)(core.accounts), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
	            var value = _step32.value;

	            value.ID = parseInt(value.ID, 10);
	            if (from !== undefined && value.ID === from || from === undefined && value.Username === username) {
	              account = value;
	              if (value.Image !== undefined && value.Image.indexOf('http') > -1) {
	                email = false;
	              } else {
	                email = value.Email;
	              }
	              if (value.Image !== undefined && value.Image.length) {
	                image = value.Image;
	              }
	              if (from === undefined) {
	                from = value.ID;
	              }
	              if (!message.from) {
	                message.from = from;
	              }
	              break;
	            }
	          }
	        } catch (err) {
	          _didIteratorError32 = true;
	          _iteratorError32 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion32 && _iterator32.return) {
	              _iterator32.return();
	            }
	          } finally {
	            if (_didIteratorError32) {
	              throw _iteratorError32;
	            }
	          }
	        }
	      }

	      if (message.from && message.from !== core.config.operator.id) {
	        message.type = 'other';
	      }

	      if (op && status === 0) {
	        total++;
	        alert = { id: id, username: username, message: message.content };
	      }
	    } else {
	      message.tagsmenu = this.processTagsMenu(messageid, message.content);
	      total++;
	      alert = { id: id, username: username, message: message.content };
	      message.tags = this.processTags(messageid, message.content);
	    }

	    if (core.options.messages.photo) {
	      if (from !== undefined) {
	        message.avatar = core.operatorImage(from, email, image, size);
	      }
	      if (account !== false && account.Image !== undefined && (account.Image.indexOf('https://') > -1 || account.Image.indexOf('data:image/png;base64,') > -1)) {
	        message.avatar = account.Image;
	      } else if (status === 0 && op === false) {
	        var user = $('.chatting .visitor[data-id=' + id + '], .other-chatting .visitor[data-id=' + id + ']').data('user');
	        if (user !== undefined) {
	          email = user.Email;
	        }
	        message.avatar = 'https://secure.gravatar.com/avatar/' + MD5(email).toString() + '?s=' + size + '&r=g&d=404';
	      }
	    }

	    if (firstname !== undefined && firstname.length > 0) {
	      message.username = core.capitaliseFirstLetter(firstname);
	    } else {
	      if (account !== false && account.Firstname !== undefined) {
	        message.username = core.capitaliseFirstLetter(account.Firstname);
	      }
	    }

	    if (core.options.messages.from) {
	      message.username += ' ';
	    }

	    var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;
	    if (uuidRegex.test(messageid)) {
	      message.sending = true;
	    }

	    match = _.find(chats, function (chat) {
	      return chat.id === id;
	    });
	    if (!match) {
	      var add = {};
	      add.id = id;
	      add.consecutive = false;
	      add.internal = false;
	      add.count = 0;
	      chats.push(add);
	    }

	    if ((typeof message.id === 'number' && message.id >= -1 || typeof message.id === 'string' && message.id.length === 36) && status > 0 && status !== 5) {
	      update = _.find(chats, function (chat) {
	        return chat.id === id;
	      });
	      if (update) {
	        if (!update.consecutive && status !== 8 || status !== 8 && update.internal) {
	          message.grouped = 'grouped';
	        }
	        if (status === 8) {
	          if (!update.internal) {
	            message.grouped = 'grouped';
	            update.internal = true;
	          } else {
	            update.consecutive = true;
	          }
	        } else {
	          update.consecutive = true;
	        }
	        update.count = update.count + 1;
	      }
	    } else {
	      var update = _.find(chats, function (chat) {
	        return chat.id === id;
	      });
	      if (update) {
	        if (update.consecutive || update.internal || !update.count) {
	          message.grouped = 'grouped';
	        }
	        update.consecutive = false;
	        update.internal = false;
	        update.count = update.count + 1;
	      }
	      message.css = 'guest';
	    }

	    message.styles = $.grep([message.alignment, message.grouped, message.type], Boolean).join(' ');

	    if (message.status === 8) {
	      message.time = 'Internal Message ' + message.time;
	    }

	    html += Handlebar.templates.message(message);
	  } else if (status === -2) {
	    html += '<div class="visitor alert" data-id="' + message.id + '" data-datetime="' + message.timestamp + '"><img src="' + core.operatorImage(false, email, false, 20, false, true) + '"/>' + core.capitaliseFirstLetter(message.content) + '</div>';
	  } else if (status === -3) {
	    var element = false;
	    var section = $('#visitor-details .section.rating');

	    var rating = parseInt(message.content.substring(message.content.length - 1), 10);
	    switch (rating) {
	      case 3:
	        element = section.find('.good');
	        break;
	      case 2:
	        element = section.find('.neutral');
	        break;
	      case 1:
	        element = section.find('.poor');
	        break;
	    }

	    if (element) {
	      section.find('.rating').removeClass('selected');
	      element.addClass('selected');
	      section.show();
	    }
	    chat.attr('data-rating', rating);

	    html += '<div class="rating" data-id="' + message.id + '" data-datetime="' + message.timestamp + '">' + message.content + '</div>';
	  }

	  var selector = '.messages blockquote[data-id="' + message.id + '"], .messages div[data-id="' + message.id + '"]';
	  if (uuid !== undefined) {
	    selector += ', .messages blockquote[data-id="' + uuid + '"], .messages div[data-id="' + uuid + '"]';
	  }

	  if (chat.find(selector).length === 0) {
	    return { html: html, data: message, total: total, alert: alert, tweets: tweets };
	  } else {
	    return false;
	  }
	};

	exports.updateTyping = function (chat, typing) {
	  // eslint-disable-line no-unused-vars

	  var id = -1; // eslint-disable-line no-unused-vars
	  var focussed = $('.chat-stack .chat.focussed');
	  if (focussed.length) {
	    id = parseInt(focussed.data('id'), 10);
	    var typingstatus = focussed.find('.typing');
	    var name = focussed.find('.status .name').text();
	    if (name.length) {
	      typingstatus.text(name + ' is typing');
	    }
	    if (chat == id && (typing == 1 || typing == 3)) {
	      typingstatus.show();
	    } else {
	      typingstatus.hide();
	    }
	  }
	};

	exports.processTagsMenu = function (id, message) {
	  var words = message.split(' ');
	  var html = '';
	  var menu = false;

	  var _iteratorNormalCompletion33 = true;
	  var _didIteratorError33 = false;
	  var _iteratorError33 = undefined;

	  try {
	    for (var _iterator33 = (0, _getIterator3.default)(words), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
	      var value = _step33.value;

	      value = value.replace(/[;?.\-,!]/ig, '');
	      if ($.inArray(value.toLowerCase(), core.tags) > -1) {
	        menu = true;
	      }
	    }
	  } catch (err) {
	    _didIteratorError33 = true;
	    _iteratorError33 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion33 && _iterator33.return) {
	        _iterator33.return();
	      }
	    } finally {
	      if (_didIteratorError33) {
	        throw _iteratorError33;
	      }
	    }
	  }

	  if (menu) {
	    html = '<div class="responses-menu" data-message="' + id + '"><div class="close"></div><div class="responses text heading">Text</div><div class="responses-text"></div><div class="responses hyperlink heading">Hyperlink</div><div class="responses-hyperlink"></div><div class="responses image heading">Image</div><div class="responses-image"></div><div class="responses push heading">PUSH</div><div class="responses-push"></div><div class="responses javascript heading">JavaScript</div><div class="responses-javascript"></div></div>';
	  }
	  return html;
	};

	exports.processTags = function (id, message) {
	  var words = message.split(' ');
	  var html = '<span class="icon"></span>';
	  var tagged = [];
	  var added = false;

	  var _iteratorNormalCompletion34 = true;
	  var _didIteratorError34 = false;
	  var _iteratorError34 = undefined;

	  try {
	    for (var _iterator34 = (0, _getIterator3.default)(words), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
	      var value = _step34.value;

	      value = value.replace(/[;?.\-,!]/ig, '');
	      if ($.inArray(value.toLowerCase(), core.tags) > -1 && $.inArray(value.toLowerCase(), tagged) === -1) {
	        html += '<span class="tag" data-message="' + id + '"><span class="text">' + value + '</span></span>';
	        tagged.push(value.toLowerCase());
	        added = true;
	      }
	    }
	  } catch (err) {
	    _didIteratorError34 = true;
	    _iteratorError34 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion34 && _iterator34.return) {
	        _iterator34.return();
	      }
	    } finally {
	      if (_didIteratorError34) {
	        throw _iteratorError34;
	      }
	    }
	  }

	  if (!added) {
	    html = '';
	  }

	  return html;
	};

	exports.toggleEmptyChats = function () {
	  var empty = $('.chat-list .empty');

	  // Empty Chats
	  if (!$('.chat-list .visitor').length) {
	    empty.show();
	  } else {
	    empty.hide();
	  }
	};

	exports.closeChatCompletedCallback = function (id, chats) {
	  // Hide Dialog
	  var dialog = $('.chat-stack .confirm-close.dialog');
	  dialog.animate({ bottom: '-90px' }, 250, function () {
	    $(this).hide();
	  });

	  var selector = '[data-id=' + id + '][data-operator=false]';
	  if (chats.length > 1) {
	    chats.filter(selector).remove();
	  } else {
	    chats.remove();
	    this.closeChats();
	  }

	  $('.chat-list .visitor' + selector).remove();
	  $('.chat-stack').hide();
	  $(document).trigger('LiveHelp.CloseVisitor');

	  this.toggleEmptyChats();
	};

	exports.closeChat = function () {
	  var id = $('.chat-list .visitor.selected').data('id');
	  var chat = $('.chat-stack .chat[data-id=' + id + ']');

	  if (chat !== null) {
	    // Confirm Close
	    var dialog = $('.chat-stack .confirm-close.dialog');
	    dialog.find('.buttons').hide();
	    dialog.find('.progressring').css('opacity', 1).show();

	    // Close Tour Chat
	    if (id < 0) {
	      var section = $('.chatting.list');
	      var element = section.find('.visitor[data-id=-1]');
	      var count = section.find('.visitor').length;

	      if (count > 1) {
	        this.removeUser(section, element);
	      } else {
	        this.clearUsers(section);
	      }

	      this.closeChatCompletedCallback();
	      return;
	    }

	    // Close Chat AJAX
	    core.updateUsers('Close', id, function () {

	      // Close Chat Callback
	      var chats = __webpack_require__(122);
	      chats.closeChatCompletedCallback(id, $('.chat-stack .chat'));

	      // Remove Chat
	      chats = [];
	      var _iteratorNormalCompletion35 = true;
	      var _didIteratorError35 = false;
	      var _iteratorError35 = undefined;

	      try {
	        for (var _iterator35 = (0, _getIterator3.default)(core.activechats), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
	          var message = _step35.value;

	          if (message.id !== id) {
	            chats.push(message);
	            return;
	          }
	        }
	      } catch (err) {
	        _didIteratorError35 = true;
	        _iteratorError35 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion35 && _iterator35.return) {
	            _iterator35.return();
	          }
	        } finally {
	          if (_didIteratorError35) {
	            throw _iteratorError35;
	          }
	        }
	      }

	      core.activechats = chats;

	      $(document).trigger('LiveHelp.CloseChatCompleted');
	    });
	  }
	};

	// Document Ready
	$(document).ready(function () {

	  // Internal Messaging
	  $(document).on('change', '.chat .internal .checkbox', function () {
	    var checked = $(this).is(':checked'),
	        input = $('.chat-stack .messages.input');

	    if (checked) {
	      input.addClass('internal');
	    } else {
	      input.removeClass('internal');
	    }
	    input.find('#message').focus();
	  });
	});

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(124), __esModule: true };

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(125);
	__webpack_require__(49);
	__webpack_require__(3);
	__webpack_require__(126);
	module.exports = __webpack_require__(16).Promise;

/***/ },
/* 125 */
/***/ function(module, exports) {

	

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(13)
	  , global             = __webpack_require__(15)
	  , ctx                = __webpack_require__(17)
	  , classof            = __webpack_require__(53)
	  , $export            = __webpack_require__(14)
	  , isObject           = __webpack_require__(22)
	  , anObject           = __webpack_require__(21)
	  , aFunction          = __webpack_require__(18)
	  , anInstance         = __webpack_require__(127)
	  , forOf              = __webpack_require__(128)
	  , setProto           = __webpack_require__(131).set
	  , speciesConstructor = __webpack_require__(134)
	  , task               = __webpack_require__(135).set
	  , microtask          = __webpack_require__(137)
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;

	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(46)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();

	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};

	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(138)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(45)($Promise, PROMISE);
	__webpack_require__(139)(PROMISE);
	Wrapper = __webpack_require__(16)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(140)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 127 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(17)
	  , call        = __webpack_require__(129)
	  , isArrayIter = __webpack_require__(130)
	  , anObject    = __webpack_require__(21)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(52);
	module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    call(iterator, f, step.value, entries);
	  }
	};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(21);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(7)
	  , ITERATOR   = __webpack_require__(46)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(22)
	  , anObject = __webpack_require__(21);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(17)(Function.call, __webpack_require__(132).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(133)
	  , createDesc     = __webpack_require__(28)
	  , toIObject      = __webpack_require__(8)
	  , toPrimitive    = __webpack_require__(27)
	  , has            = __webpack_require__(30)
	  , IE8_DOM_DEFINE = __webpack_require__(23)
	  , gOPD           = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(24) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 133 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(21)
	  , aFunction = __webpack_require__(18)
	  , SPECIES   = __webpack_require__(46)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(17)
	  , invoke             = __webpack_require__(136)
	  , html               = __webpack_require__(44)
	  , cel                = __webpack_require__(26)
	  , global             = __webpack_require__(15)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(10)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 136 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(15)
	  , macrotask = __webpack_require__(135).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(10)(process) == 'process'
	  , head, last, notify;

	var flush = function(){
	  var parent, fn;
	  if(isNode && (parent = process.domain))parent.exit();
	  while(head){
	    fn = head.fn;
	    fn(); // <- currently we use it only for Promise - try / catch not required
	    head = head.next;
	  } last = undefined;
	  if(parent)parent.enter();
	};

	// Node.js
	if(isNode){
	  notify = function(){
	    process.nextTick(flush);
	  };
	// browsers with MutationObserver
	} else if(Observer){
	  var toggle = true
	    , node   = document.createTextNode('');
	  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	  notify = function(){
	    node.data = toggle = !toggle;
	  };
	// environments with maybe non-completely correct, but existent Promise
	} else if(Promise && Promise.resolve){
	  notify = function(){
	    Promise.resolve().then(flush);
	  };
	// for other environments - macrotask based on:
	// - setImmediate
	// - MessageChannel
	// - window.postMessag
	// - onreadystatechange
	// - setTimeout
	} else {
	  notify = function(){
	    // strange IE + webpack dev server bug - use .call(global)
	    macrotask.call(global, flush);
	  };
	}

	module.exports = function(fn){
	  var task = {fn: fn, next: undefined};
	  if(last)last.next = task;
	  if(!head){
	    head = task;
	    notify();
	  } last = task;
	};

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(19);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(15)
	  , core        = __webpack_require__(16)
	  , dP          = __webpack_require__(20)
	  , DESCRIPTORS = __webpack_require__(24)
	  , SPECIES     = __webpack_require__(46)('species');

	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(46)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(142), __esModule: true };

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(143);
	module.exports = __webpack_require__(16).Object.keys;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(48)
	  , $keys    = __webpack_require__(34);

	__webpack_require__(144)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(14)
	  , core    = __webpack_require__(16)
	  , fails   = __webpack_require__(25);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var core = __webpack_require__(121);

	exports.hostname = function (value) {
	  var hostname = value.Hostname;
	  return hostname;
	};

	exports.browserIcon = function (value, small) {
	  var browser = 'Chrome';
	  var image = '';
	  var css = 'chrome';
	  var size = 48;

	  if (value.indexOf('Chatstack') !== -1) {
	    browser = 'Chatstack';
	    css = 'chatstack';
	  } else if (value.indexOf('MSIE') !== -1 || value.indexOf('Trident') !== -1) {
	    browser = 'InternetExplorer';
	    css = 'ie';
	  } else if (value.indexOf('Edge') !== -1) {
	    browser = 'Edge';
	    css = 'edge';
	  } else if (value.indexOf('Chrome') !== -1) {
	    browser = 'Chrome';
	    css = 'chrome';
	  } else if (value.indexOf('Safari') !== -1) {
	    browser = 'Safari';
	    css = 'safari';
	  } else if (value.indexOf('Opera') !== -1) {
	    browser = 'Opera';
	    css = 'opera';
	  } else if (value.indexOf('Firefox') !== -1) {
	    browser = 'Firefox';
	    css = 'firefox';
	  }

	  if (small) {
	    image = './images/' + browser + 'Small.png';
	    size = 16;
	    css = css + ' browser small vector ';
	  } else {
	    image = './images/' + browser + '.png';
	  }
	  css += 'browser small';
	  return { image: image, css: css, size: size };
	};

	exports.referrer = function (referrer) {
	  var regEx = /^http[s]{0,1}:\/\/(?:[^.]+[\\.])*google(?:(?:.[a-z]{2,3}){1,2})[\/](?:search|url|imgres|aclk)(?:\?|.*&)q=([^&]*)/i;
	  var keywords = regEx.exec(referrer);
	  if (keywords !== null) {
	    if (keywords[1].length > 0) {
	      referrer = 'Google Search (Keywords: ' + keywords[1] + ')';
	    } else {
	      referrer = 'Google Search';
	    }
	  }
	  return referrer;
	};

	exports.countryIcon = function (value) {
	  var countries = { 'Ascension Island': 'ac',
	    'Andorra': 'ad',
	    'United Arab Emirates': 'ae',
	    'Afghanistan': 'af',
	    'Antigua And Barbuda': 'ag',
	    'Anguilla': 'ai',
	    'Albania': 'al',
	    'Armenia': 'am',
	    'Netherlands Antilles': 'an',
	    'Angola': 'ao',
	    'Antarctica': 'aq',
	    'Argentina': 'ar',
	    'American Samoa': 'as',
	    'Austria': 'at',
	    'Australia': 'au',
	    'Aruba': 'aw',
	    'Aland Islands': 'ax',
	    'Azerbaijan': 'az',
	    'Bosnia And Herzegovina': 'ba',
	    'Barbados': 'bb',
	    'Bangladesh': 'bd',
	    'Belgium': 'be',
	    'Burkina Faso': 'bf',
	    'Bulgaria': 'bg',
	    'Bahrain': 'bh',
	    'Burundi': 'bi',
	    'Benin': 'bj',
	    'Bermuda': 'bm',
	    'Brunei Darussalam': 'bn',
	    'Bolivia': 'bo',
	    'Brazil': 'br',
	    'Bahamas': 'bs',
	    'Bhutan': 'bt',
	    'Bouvet Island': 'bv',
	    'Botswana': 'bw',
	    'Belarus': 'by',
	    'Belize': 'bz',
	    'Canada': 'ca',
	    'Cocos (keeling) Islands': 'cc',
	    'Congo, The Democratic Republic of The': 'cd',
	    'Central African Republic': 'cf',
	    'Congo, Republic of The': 'cg',
	    'Switzerland': 'ch',
	    'Cote D\'ivoire': 'ci',
	    'Cook Islands': 'ck',
	    'Chile': 'cl',
	    'Cameroon': 'cm',
	    'China': 'cn',
	    'Colombia': 'co',
	    'Costa Rica': 'cr',
	    'Cuba': 'cu',
	    'Cape Verde': 'cv',
	    'Christmas Island': 'cx',
	    'Cyprus': 'cy',
	    'Czech Republic': 'cz',
	    'Germany': 'de',
	    'Djibouti': 'dj',
	    'Denmark': 'dk',
	    'Dominica': 'dm',
	    'Dominican Republic': 'do',
	    'Algeria': 'dz',
	    'Ecuador': 'ec',
	    'Estonia': 'ee',
	    'Egypt': 'eg',
	    'Western Sahara': 'eh',
	    'Eritrea': 'er',
	    'Spain': 'es',
	    'Ethiopia': 'et',
	    'Europe': 'eu',
	    'Finland': 'fi',
	    'Fiji': 'fj',
	    'Falkland Islands ( Malvinas )': 'fk',
	    'Micronesia, Federated States of': 'fm',
	    'Faroe Islands': 'fo',
	    'France': 'fr',
	    'Gabon': 'ga',
	    'Grenada': 'gd',
	    'Georgia': 'ge',
	    'French Guiana': 'gf',
	    'Ghana': 'gh',
	    'Gibraltar': 'gi',
	    'Greenland': 'gl',
	    'Gambia': 'gm',
	    'Guinea': 'gn',
	    'Guadeloupe': 'gp',
	    'Equatorial Guinea': 'gq',
	    'Greece': 'gr',
	    'South Georgia And The South Sandwich Islands': 'gs',
	    'Guatemala': 'gt',
	    'Guam': 'gu',
	    'Guinea-bissau': 'gw',
	    'Guyana': 'gy',
	    'Hong Kong': 'hk',
	    'Heard Island And Mcdonald Islands': 'hm',
	    'Honduras': 'hn',
	    'Croatia': 'hr',
	    'Haiti': 'ht',
	    'Hungary': 'hu',
	    'Indonesia': 'id',
	    'Ireland, Republic of': 'ie',
	    'Ireland': 'ie',
	    'Israel': 'il',
	    'India': 'in',
	    'British Indian Ocean Territory': 'io',
	    'Iraq': 'iq',
	    'Iran, Islamic Republic of': 'ir',
	    'Iceland': 'is',
	    'Italy': 'it',
	    'Jamaica': 'jm',
	    'Jordan': 'jo',
	    'Japan': 'jp',
	    'Kenya': 'ke',
	    'Kyrgyzstan': 'kg',
	    'Cambodia': 'kh',
	    'Kiribati': 'ki',
	    'Comoros': 'km',
	    'Saint Kitts And Nevis': 'kn',
	    'Korea, Democratic People\'s Republic of': 'kp',
	    'Korea, Republic of': 'kr',
	    'Kuwait': 'kw',
	    'Cayman Islands': 'ky',
	    'Kazakhstan': 'kz',
	    'Lao People\'s Democratic Republic': 'la',
	    'Lebanon': 'lb',
	    'Saint Lucia': 'lc',
	    'Liechtenstein': 'li',
	    'Sri Lanka': 'lk',
	    'Liberia': 'lr',
	    'Lesotho': 'ls',
	    'Lithuania': 'lt',
	    'Luxembourg': 'lu',
	    'Latvia': 'lv',
	    'Libyan Arab Jamahiriya': 'ly',
	    'Morocco': 'ma',
	    'Monaco': 'mc',
	    'Moldova, Republic of': 'md',
	    'Montenegro, Republic of': 'me',
	    'Madagascar': 'mg',
	    'Marshall Islands': 'mh',
	    'Macedonia': 'mk',
	    'Macedonia, Republic of': 'mk',
	    'Mali': 'ml',
	    'Myanmar': 'mm',
	    'Mongolia': 'mn',
	    'Macau': 'mo',
	    'Northern Mariana Islands': 'mp',
	    'Martinique': 'mq',
	    'Mauritania': 'mr',
	    'Montserrat': 'ms',
	    'Malta': 'mt',
	    'Mauritius': 'mu',
	    'Maldives': 'mv',
	    'Malawi': 'mw',
	    'Mexico': 'mx',
	    'Malaysia': 'my',
	    'Mozambique': 'mz',
	    'Namibia': 'na',
	    'New Caledonia': 'nc',
	    'Niger': 'ne',
	    'Norfolk Island': 'nf',
	    'Nigeria': 'ng',
	    'Nicaragua': 'ni',
	    'Netherlands': 'nl',
	    'Norway': 'no',
	    'Nepal': 'np',
	    'Nauru': 'nr',
	    'Niue': 'nu',
	    'New Zealand': 'nz',
	    'Oman': 'om',
	    'Panama': 'pa',
	    'Peru': 'pe',
	    'French Polynesia': 'pf',
	    'Papua New Guinea': 'pg',
	    'Philippines': 'ph',
	    'Pakistan': 'pk',
	    'Poland': 'pl',
	    'Saint Pierre And Miquelon': 'pm',
	    'Pitcairn': 'pn',
	    'Puerto Rico': 'pr',
	    'Palestinian Territory, Occupied': 'ps',
	    'Palestinian Territory': 'ps',
	    'Portugal': 'pt',
	    'Palau': 'pw',
	    'Paraguay': 'py',
	    'Qatar': 'qa',
	    'Reunion': 're',
	    'Romania': 'ro',
	    'Serbia': 'rs',
	    'Serbia, Republic of': 'rs',
	    'Russian Federation': 'ru',
	    'Rwanda': 'rw',
	    'Saudi Arabia': 'sa',
	    'Solomon Islands': 'sb',
	    'Seychelles': 'sc',
	    'Sudan': 'sd',
	    'Sweden': 'se',
	    'Singapore': 'sg',
	    'Saint Helena': 'sh',
	    'Slovenia': 'si',
	    'Svalbard And Jan Mayen': 'sj',
	    'Slovakia': 'sk',
	    'Sierra Leone': 'sl',
	    'San Marino': 'sm',
	    'Senegal': 'sn',
	    'Somalia': 'so',
	    'Suriname': 'sr',
	    'Sao Tome And Principe': 'st',
	    'El Salvador': 'sv',
	    'Syrian Arab Republic': 'sy',
	    'Swaziland': 'sz',
	    'Turks And Caicos Islands': 'tc',
	    'Chad': 'td',
	    'French Southern Territories': 'tf',
	    'Togo': 'tg',
	    'Thailand': 'th',
	    'Tajikistan': 'tj',
	    'Tokelau': 'tk',
	    'Timor - Leste ( East Timor )': 'tl',
	    'Turkmenistan': 'tm',
	    'Tunisia': 'tn',
	    'Tonga': 'to',
	    'Turkey': 'tr',
	    'Trinidad And Tobago': 'tt',
	    'Tuvalu': 'tv',
	    'Taiwan': 'tw',
	    'Taiwan, Province of China': 'tw',
	    'Tanzania, United Republic of': 'tz',
	    'Ukraine': 'ua',
	    'Uganda': 'ug',
	    'United Kingdom': 'uk',
	    'United States Minor Outlying Islands': 'um',
	    'United States': 'us',
	    'Uruguay': 'uy',
	    'Uzbekistan': 'uz',
	    'Holy See ( Atican City State )': 'va',
	    'Saint Vincent And The Grenadines': 'vc',
	    'Venezuela': 've',
	    'Virgin Islands, British': 'vg',
	    'Virgin Islands, United States': 'vi',
	    'Vietnam': 'vn',
	    'Vanuatu': 'vu',
	    'Wallis And Futuna': 'wf',
	    'Samoa': 'ws',
	    'Yemen': 'ye',
	    'Mayotte': 'yt',
	    'South Africa': 'za',
	    'Zambia': 'zm',
	    'Zimbabwe': 'zw' };

	  // TODO Remove Demo / Test
	  //value = 'United Kingdom';

	  var country = countries[value];
	  var location = value;

	  if (country === undefined || country === 'Unavailable') {
	    location = '';
	  } else {
	    if (country !== undefined) {
	      location = 'country ' + country;
	    }
	  }

	  return location;
	};

	exports.country = function (value) {
	  var location = 'Unavailable';

	  // TODO Remove Demo / Test
	  //value.Country = 'United Kingdom';

	  if (value.Country !== null && value.Country.length > 0) {
	    location = value.Country;

	    if (value.State !== null && value.State.length > 0) {
	      if (value.City.length > 0) {
	        location = value.City + ', ' + value.State + ', ' + value.Country;
	      } else {
	        location = value.State + ', ' + value.Country;
	      }
	    } else {
	      if (value.City !== null && value.City.length > 0) {
	        location = value.City + ', ' + value.Country;
	      }
	    }
	  }
	  return location;
	};

	exports.accessLevel = function (access) {
	  var privilege = parseInt(access, 10);
	  switch (privilege) {
	    case -1:
	    case 0:
	      access = 'Full Administrator';
	      break;
	    case 1:
	      access = 'Department Administrator';
	      break;
	    case 2:
	      access = 'Limited Administrator';
	      break;
	    case 3:
	      access = 'Sales / Support Staff';
	      break;
	    case 4:
	      access = 'Guest';
	      break;
	  }
	  return access;
	};

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory(__webpack_require__(147));
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define(["./core"], factory);
		}
		else {
			// Global (browser)
			factory(root.CryptoJS);
		}
	}(this, function (CryptoJS) {

		(function (Math) {
		    // Shortcuts
		    var C = CryptoJS;
		    var C_lib = C.lib;
		    var WordArray = C_lib.WordArray;
		    var Hasher = C_lib.Hasher;
		    var C_algo = C.algo;

		    // Constants table
		    var T = [];

		    // Compute constants
		    (function () {
		        for (var i = 0; i < 64; i++) {
		            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
		        }
		    }());

		    /**
		     * MD5 hash algorithm.
		     */
		    var MD5 = C_algo.MD5 = Hasher.extend({
		        _doReset: function () {
		            this._hash = new WordArray.init([
		                0x67452301, 0xefcdab89,
		                0x98badcfe, 0x10325476
		            ]);
		        },

		        _doProcessBlock: function (M, offset) {
		            // Swap endian
		            for (var i = 0; i < 16; i++) {
		                // Shortcuts
		                var offset_i = offset + i;
		                var M_offset_i = M[offset_i];

		                M[offset_i] = (
		                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
		                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
		                );
		            }

		            // Shortcuts
		            var H = this._hash.words;

		            var M_offset_0  = M[offset + 0];
		            var M_offset_1  = M[offset + 1];
		            var M_offset_2  = M[offset + 2];
		            var M_offset_3  = M[offset + 3];
		            var M_offset_4  = M[offset + 4];
		            var M_offset_5  = M[offset + 5];
		            var M_offset_6  = M[offset + 6];
		            var M_offset_7  = M[offset + 7];
		            var M_offset_8  = M[offset + 8];
		            var M_offset_9  = M[offset + 9];
		            var M_offset_10 = M[offset + 10];
		            var M_offset_11 = M[offset + 11];
		            var M_offset_12 = M[offset + 12];
		            var M_offset_13 = M[offset + 13];
		            var M_offset_14 = M[offset + 14];
		            var M_offset_15 = M[offset + 15];

		            // Working varialbes
		            var a = H[0];
		            var b = H[1];
		            var c = H[2];
		            var d = H[3];

		            // Computation
		            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
		            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
		            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
		            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
		            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
		            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
		            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
		            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
		            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
		            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
		            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
		            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
		            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
		            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
		            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
		            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

		            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
		            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
		            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
		            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
		            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
		            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
		            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
		            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
		            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
		            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
		            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
		            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
		            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
		            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
		            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
		            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

		            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
		            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
		            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
		            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
		            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
		            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
		            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
		            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
		            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
		            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
		            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
		            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
		            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
		            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
		            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
		            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

		            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
		            d = II(d, a, b, c, M_offset_7,  10, T[49]);
		            c = II(c, d, a, b, M_offset_14, 15, T[50]);
		            b = II(b, c, d, a, M_offset_5,  21, T[51]);
		            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
		            d = II(d, a, b, c, M_offset_3,  10, T[53]);
		            c = II(c, d, a, b, M_offset_10, 15, T[54]);
		            b = II(b, c, d, a, M_offset_1,  21, T[55]);
		            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
		            d = II(d, a, b, c, M_offset_15, 10, T[57]);
		            c = II(c, d, a, b, M_offset_6,  15, T[58]);
		            b = II(b, c, d, a, M_offset_13, 21, T[59]);
		            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
		            d = II(d, a, b, c, M_offset_11, 10, T[61]);
		            c = II(c, d, a, b, M_offset_2,  15, T[62]);
		            b = II(b, c, d, a, M_offset_9,  21, T[63]);

		            // Intermediate hash value
		            H[0] = (H[0] + a) | 0;
		            H[1] = (H[1] + b) | 0;
		            H[2] = (H[2] + c) | 0;
		            H[3] = (H[3] + d) | 0;
		        },

		        _doFinalize: function () {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;

		            var nBitsTotal = this._nDataBytes * 8;
		            var nBitsLeft = data.sigBytes * 8;

		            // Add padding
		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

		            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
		            var nBitsTotalL = nBitsTotal;
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
		                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
		            );
		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
		                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
		                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
		            );

		            data.sigBytes = (dataWords.length + 1) * 4;

		            // Hash final blocks
		            this._process();

		            // Shortcuts
		            var hash = this._hash;
		            var H = hash.words;

		            // Swap endian
		            for (var i = 0; i < 4; i++) {
		                // Shortcut
		                var H_i = H[i];

		                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
		                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
		            }

		            // Return final computed hash
		            return hash;
		        },

		        clone: function () {
		            var clone = Hasher.clone.call(this);
		            clone._hash = this._hash.clone();

		            return clone;
		        }
		    });

		    function FF(a, b, c, d, x, s, t) {
		        var n = a + ((b & c) | (~b & d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function GG(a, b, c, d, x, s, t) {
		        var n = a + ((b & d) | (c & ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function HH(a, b, c, d, x, s, t) {
		        var n = a + (b ^ c ^ d) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    function II(a, b, c, d, x, s, t) {
		        var n = a + (c ^ (b | ~d)) + x + t;
		        return ((n << s) | (n >>> (32 - s))) + b;
		    }

		    /**
		     * Shortcut function to the hasher's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     *
		     * @return {WordArray} The hash.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hash = CryptoJS.MD5('message');
		     *     var hash = CryptoJS.MD5(wordArray);
		     */
		    C.MD5 = Hasher._createHelper(MD5);

		    /**
		     * Shortcut function to the HMAC's object interface.
		     *
		     * @param {WordArray|string} message The message to hash.
		     * @param {WordArray|string} key The secret key.
		     *
		     * @return {WordArray} The HMAC.
		     *
		     * @static
		     *
		     * @example
		     *
		     *     var hmac = CryptoJS.HmacMD5(message, key);
		     */
		    C.HmacMD5 = Hasher._createHmacHelper(MD5);
		}(Math));


		return CryptoJS.MD5;

	}));

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	;(function (root, factory) {
		if (true) {
			// CommonJS
			module.exports = exports = factory();
		}
		else if (typeof define === "function" && define.amd) {
			// AMD
			define([], factory);
		}
		else {
			// Global (browser)
			root.CryptoJS = factory();
		}
	}(this, function () {

		/**
		 * CryptoJS core components.
		 */
		var CryptoJS = CryptoJS || (function (Math, undefined) {
		    /**
		     * CryptoJS namespace.
		     */
		    var C = {};

		    /**
		     * Library namespace.
		     */
		    var C_lib = C.lib = {};

		    /**
		     * Base object for prototypal inheritance.
		     */
		    var Base = C_lib.Base = (function () {
		        function F() {}

		        return {
		            /**
		             * Creates a new object that inherits from this object.
		             *
		             * @param {Object} overrides Properties to copy into the new object.
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         field: 'value',
		             *
		             *         method: function () {
		             *         }
		             *     });
		             */
		            extend: function (overrides) {
		                // Spawn
		                F.prototype = this;
		                var subtype = new F();

		                // Augment
		                if (overrides) {
		                    subtype.mixIn(overrides);
		                }

		                // Create default initializer
		                if (!subtype.hasOwnProperty('init')) {
		                    subtype.init = function () {
		                        subtype.$super.init.apply(this, arguments);
		                    };
		                }

		                // Initializer's prototype is the subtype object
		                subtype.init.prototype = subtype;

		                // Reference supertype
		                subtype.$super = this;

		                return subtype;
		            },

		            /**
		             * Extends this object and runs the init method.
		             * Arguments to create() will be passed to init().
		             *
		             * @return {Object} The new object.
		             *
		             * @static
		             *
		             * @example
		             *
		             *     var instance = MyType.create();
		             */
		            create: function () {
		                var instance = this.extend();
		                instance.init.apply(instance, arguments);

		                return instance;
		            },

		            /**
		             * Initializes a newly created object.
		             * Override this method to add some logic when your objects are created.
		             *
		             * @example
		             *
		             *     var MyType = CryptoJS.lib.Base.extend({
		             *         init: function () {
		             *             // ...
		             *         }
		             *     });
		             */
		            init: function () {
		            },

		            /**
		             * Copies properties into this object.
		             *
		             * @param {Object} properties The properties to mix in.
		             *
		             * @example
		             *
		             *     MyType.mixIn({
		             *         field: 'value'
		             *     });
		             */
		            mixIn: function (properties) {
		                for (var propertyName in properties) {
		                    if (properties.hasOwnProperty(propertyName)) {
		                        this[propertyName] = properties[propertyName];
		                    }
		                }

		                // IE won't copy toString using the loop above
		                if (properties.hasOwnProperty('toString')) {
		                    this.toString = properties.toString;
		                }
		            },

		            /**
		             * Creates a copy of this object.
		             *
		             * @return {Object} The clone.
		             *
		             * @example
		             *
		             *     var clone = instance.clone();
		             */
		            clone: function () {
		                return this.init.prototype.extend(this);
		            }
		        };
		    }());

		    /**
		     * An array of 32-bit words.
		     *
		     * @property {Array} words The array of 32-bit words.
		     * @property {number} sigBytes The number of significant bytes in this word array.
		     */
		    var WordArray = C_lib.WordArray = Base.extend({
		        /**
		         * Initializes a newly created word array.
		         *
		         * @param {Array} words (Optional) An array of 32-bit words.
		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.create();
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
		         */
		        init: function (words, sigBytes) {
		            words = this.words = words || [];

		            if (sigBytes != undefined) {
		                this.sigBytes = sigBytes;
		            } else {
		                this.sigBytes = words.length * 4;
		            }
		        },

		        /**
		         * Converts this word array to a string.
		         *
		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
		         *
		         * @return {string} The stringified word array.
		         *
		         * @example
		         *
		         *     var string = wordArray + '';
		         *     var string = wordArray.toString();
		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
		         */
		        toString: function (encoder) {
		            return (encoder || Hex).stringify(this);
		        },

		        /**
		         * Concatenates a word array to this word array.
		         *
		         * @param {WordArray} wordArray The word array to append.
		         *
		         * @return {WordArray} This word array.
		         *
		         * @example
		         *
		         *     wordArray1.concat(wordArray2);
		         */
		        concat: function (wordArray) {
		            // Shortcuts
		            var thisWords = this.words;
		            var thatWords = wordArray.words;
		            var thisSigBytes = this.sigBytes;
		            var thatSigBytes = wordArray.sigBytes;

		            // Clamp excess bits
		            this.clamp();

		            // Concat
		            if (thisSigBytes % 4) {
		                // Copy one byte at a time
		                for (var i = 0; i < thatSigBytes; i++) {
		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
		                }
		            } else {
		                // Copy one word at a time
		                for (var i = 0; i < thatSigBytes; i += 4) {
		                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
		                }
		            }
		            this.sigBytes += thatSigBytes;

		            // Chainable
		            return this;
		        },

		        /**
		         * Removes insignificant bits.
		         *
		         * @example
		         *
		         *     wordArray.clamp();
		         */
		        clamp: function () {
		            // Shortcuts
		            var words = this.words;
		            var sigBytes = this.sigBytes;

		            // Clamp
		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
		            words.length = Math.ceil(sigBytes / 4);
		        },

		        /**
		         * Creates a copy of this word array.
		         *
		         * @return {WordArray} The clone.
		         *
		         * @example
		         *
		         *     var clone = wordArray.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone.words = this.words.slice(0);

		            return clone;
		        },

		        /**
		         * Creates a word array filled with random bytes.
		         *
		         * @param {number} nBytes The number of random bytes to generate.
		         *
		         * @return {WordArray} The random word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
		         */
		        random: function (nBytes) {
		            var words = [];

		            var r = (function (m_w) {
		                var m_w = m_w;
		                var m_z = 0x3ade68b1;
		                var mask = 0xffffffff;

		                return function () {
		                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
		                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
		                    var result = ((m_z << 0x10) + m_w) & mask;
		                    result /= 0x100000000;
		                    result += 0.5;
		                    return result * (Math.random() > .5 ? 1 : -1);
		                }
		            });

		            for (var i = 0, rcache; i < nBytes; i += 4) {
		                var _r = r((rcache || Math.random()) * 0x100000000);

		                rcache = _r() * 0x3ade67b7;
		                words.push((_r() * 0x100000000) | 0);
		            }

		            return new WordArray.init(words, nBytes);
		        }
		    });

		    /**
		     * Encoder namespace.
		     */
		    var C_enc = C.enc = {};

		    /**
		     * Hex encoding strategy.
		     */
		    var Hex = C_enc.Hex = {
		        /**
		         * Converts a word array to a hex string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The hex string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var hexChars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                hexChars.push((bite >>> 4).toString(16));
		                hexChars.push((bite & 0x0f).toString(16));
		            }

		            return hexChars.join('');
		        },

		        /**
		         * Converts a hex string to a word array.
		         *
		         * @param {string} hexStr The hex string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
		         */
		        parse: function (hexStr) {
		            // Shortcut
		            var hexStrLength = hexStr.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < hexStrLength; i += 2) {
		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
		            }

		            return new WordArray.init(words, hexStrLength / 2);
		        }
		    };

		    /**
		     * Latin1 encoding strategy.
		     */
		    var Latin1 = C_enc.Latin1 = {
		        /**
		         * Converts a word array to a Latin1 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The Latin1 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            // Shortcuts
		            var words = wordArray.words;
		            var sigBytes = wordArray.sigBytes;

		            // Convert
		            var latin1Chars = [];
		            for (var i = 0; i < sigBytes; i++) {
		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
		                latin1Chars.push(String.fromCharCode(bite));
		            }

		            return latin1Chars.join('');
		        },

		        /**
		         * Converts a Latin1 string to a word array.
		         *
		         * @param {string} latin1Str The Latin1 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
		         */
		        parse: function (latin1Str) {
		            // Shortcut
		            var latin1StrLength = latin1Str.length;

		            // Convert
		            var words = [];
		            for (var i = 0; i < latin1StrLength; i++) {
		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
		            }

		            return new WordArray.init(words, latin1StrLength);
		        }
		    };

		    /**
		     * UTF-8 encoding strategy.
		     */
		    var Utf8 = C_enc.Utf8 = {
		        /**
		         * Converts a word array to a UTF-8 string.
		         *
		         * @param {WordArray} wordArray The word array.
		         *
		         * @return {string} The UTF-8 string.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
		         */
		        stringify: function (wordArray) {
		            try {
		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
		            } catch (e) {
		                throw new Error('Malformed UTF-8 data');
		            }
		        },

		        /**
		         * Converts a UTF-8 string to a word array.
		         *
		         * @param {string} utf8Str The UTF-8 string.
		         *
		         * @return {WordArray} The word array.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
		         */
		        parse: function (utf8Str) {
		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
		        }
		    };

		    /**
		     * Abstract buffered block algorithm template.
		     *
		     * The property blockSize must be implemented in a concrete subtype.
		     *
		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
		     */
		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
		        /**
		         * Resets this block algorithm's data buffer to its initial state.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm.reset();
		         */
		        reset: function () {
		            // Initial values
		            this._data = new WordArray.init();
		            this._nDataBytes = 0;
		        },

		        /**
		         * Adds new data to this block algorithm's buffer.
		         *
		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
		         *
		         * @example
		         *
		         *     bufferedBlockAlgorithm._append('data');
		         *     bufferedBlockAlgorithm._append(wordArray);
		         */
		        _append: function (data) {
		            // Convert string to WordArray, else assume WordArray already
		            if (typeof data == 'string') {
		                data = Utf8.parse(data);
		            }

		            // Append
		            this._data.concat(data);
		            this._nDataBytes += data.sigBytes;
		        },

		        /**
		         * Processes available data blocks.
		         *
		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
		         *
		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
		         *
		         * @return {WordArray} The processed data.
		         *
		         * @example
		         *
		         *     var processedData = bufferedBlockAlgorithm._process();
		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
		         */
		        _process: function (doFlush) {
		            // Shortcuts
		            var data = this._data;
		            var dataWords = data.words;
		            var dataSigBytes = data.sigBytes;
		            var blockSize = this.blockSize;
		            var blockSizeBytes = blockSize * 4;

		            // Count blocks ready
		            var nBlocksReady = dataSigBytes / blockSizeBytes;
		            if (doFlush) {
		                // Round up to include partial blocks
		                nBlocksReady = Math.ceil(nBlocksReady);
		            } else {
		                // Round down to include only full blocks,
		                // less the number of blocks that must remain in the buffer
		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
		            }

		            // Count words ready
		            var nWordsReady = nBlocksReady * blockSize;

		            // Count bytes ready
		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

		            // Process blocks
		            if (nWordsReady) {
		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
		                    // Perform concrete-algorithm logic
		                    this._doProcessBlock(dataWords, offset);
		                }

		                // Remove processed words
		                var processedWords = dataWords.splice(0, nWordsReady);
		                data.sigBytes -= nBytesReady;
		            }

		            // Return processed words
		            return new WordArray.init(processedWords, nBytesReady);
		        },

		        /**
		         * Creates a copy of this object.
		         *
		         * @return {Object} The clone.
		         *
		         * @example
		         *
		         *     var clone = bufferedBlockAlgorithm.clone();
		         */
		        clone: function () {
		            var clone = Base.clone.call(this);
		            clone._data = this._data.clone();

		            return clone;
		        },

		        _minBufferSize: 0
		    });

		    /**
		     * Abstract hasher template.
		     *
		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
		     */
		    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
		        /**
		         * Configuration options.
		         */
		        cfg: Base.extend(),

		        /**
		         * Initializes a newly created hasher.
		         *
		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
		         *
		         * @example
		         *
		         *     var hasher = CryptoJS.algo.SHA256.create();
		         */
		        init: function (cfg) {
		            // Apply config defaults
		            this.cfg = this.cfg.extend(cfg);

		            // Set initial values
		            this.reset();
		        },

		        /**
		         * Resets this hasher to its initial state.
		         *
		         * @example
		         *
		         *     hasher.reset();
		         */
		        reset: function () {
		            // Reset data buffer
		            BufferedBlockAlgorithm.reset.call(this);

		            // Perform concrete-hasher logic
		            this._doReset();
		        },

		        /**
		         * Updates this hasher with a message.
		         *
		         * @param {WordArray|string} messageUpdate The message to append.
		         *
		         * @return {Hasher} This hasher.
		         *
		         * @example
		         *
		         *     hasher.update('message');
		         *     hasher.update(wordArray);
		         */
		        update: function (messageUpdate) {
		            // Append
		            this._append(messageUpdate);

		            // Update the hash
		            this._process();

		            // Chainable
		            return this;
		        },

		        /**
		         * Finalizes the hash computation.
		         * Note that the finalize operation is effectively a destructive, read-once operation.
		         *
		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
		         *
		         * @return {WordArray} The hash.
		         *
		         * @example
		         *
		         *     var hash = hasher.finalize();
		         *     var hash = hasher.finalize('message');
		         *     var hash = hasher.finalize(wordArray);
		         */
		        finalize: function (messageUpdate) {
		            // Final message update
		            if (messageUpdate) {
		                this._append(messageUpdate);
		            }

		            // Perform concrete-hasher logic
		            var hash = this._doFinalize();

		            return hash;
		        },

		        blockSize: 512/32,

		        /**
		         * Creates a shortcut function to a hasher's object interface.
		         *
		         * @param {Hasher} hasher The hasher to create a helper for.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
		         */
		        _createHelper: function (hasher) {
		            return function (message, cfg) {
		                return new hasher.init(cfg).finalize(message);
		            };
		        },

		        /**
		         * Creates a shortcut function to the HMAC's object interface.
		         *
		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
		         *
		         * @return {Function} The shortcut function.
		         *
		         * @static
		         *
		         * @example
		         *
		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
		         */
		        _createHmacHelper: function (hasher) {
		            return function (message, key) {
		                return new C_algo.HMAC.init(hasher, key).finalize(message);
		            };
		        }
		    });

		    /**
		     * Algorithm namespace.
		     */
		    var C_algo = C.algo = {};

		    return C;
		}(Math));


		return CryptoJS;

	}));

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/***
	 * Contains basic SlickGrid formatters.
	 * @module Formatters
	 * @namespace Slick
	 */

	(function ($) {

	  var core = __webpack_require__(121),
	    convert = __webpack_require__(145),
	    moment = __webpack_require__(66),
	    MD5 = __webpack_require__(146);

	  $.extend(true, window, {
	    "Slick": {
	      "Formatters": {
	        "Hostname": HostnameFormatter,
	        "Browser": BrowserFormatter,
	        "Location": LocationFormatter,
	        "Pages": PagesFormatter,
	        "Page": PageFormatter,
	        "Seconds": SecondsFormatter,
	        "Date": DateFormatter
	      }
	    }
	  });

	  function HostnameFormatter(row, cell, value, columnDef, dataContext) {
	    var hostname = convert.hostname(dataContext);

	    var name = '';
	    if (dataContext.Username) {
	      name = core.ucwords(dataContext.Username);
	      if (false) { // eslint-disable-line no-undef
	        if ($('body').is('.demo')) { // eslint-disable-line no-undef
	          var faker = require('faker');
	          if (name !== null && name.length > 0) {
	            name = faker.name.firstName();
	          }
	          hostname = faker.internet.ip() + '-' + faker.internet.domainWord() + '.' + faker.internet.domainSuffix();
	        }
	      }
	    }

	    if (name.length) {
	      name = "<span class='name'>" + name + "</span>";
	      var company = '';
	      if (dataContext.Company) {
	        company = "<span class='company'> - " + dataContext.Company + "</span>";
	      }
	      name = "<div class='user'>" + name + company + "</div>";
	    }

	    var css = 'hostname';
	    if (!name.length) {
	      css += ' inline';
	    }
	    hostname = "<div class='" + css + "'>" + hostname + "</div>";

	    return name + hostname;
	  }

	  function BrowserFormatter(row, cell, value, columnDef, dataContext) {
	    var avatar = 'http://livehelp.stardevelop.dev/latest/livehelp/images/Placeholder.png';
	    if (dataContext.Email) {
	      var hash = MD5(dataContext.Email).toString();
	      var size = (window.devicePixelRatio > 1) ? 64 : 32;
	      avatar = 'https://secure.gravatar.com/avatar/' + hash + '?s=' + size + '&r=g&d=' + avatar;
	    }

	    /*
	    var status = 'Browsing';
	    if (dataContext.UserAgent.indexOf('Chatstack') > -1) {
	      status = 'Active';
	    } else if (value < 0) {
	      status = 'Chat Ended';
	    } else if (value > 0) {
	      status = 'Chatting';
	    } else {
	      status = 'Browsing';
	    }
	    return "<div class='chatstatus'>" + status + "</div>";
	    */

	    var image = '<span class="image" style="background-image: url(&quot;' + avatar + '&quot;); background-color: transparent;"></span>';
	    return image;
	  }

	  function LocationFormatter(row, cell, value, columnDef, dataContext) {
	    var location = convert.country(dataContext),
	      image = convert.countryIcon(value);

	    if (location !== undefined) {
	      image = "<div class='location'><div class='" + image + "' style='display:inline-block' title='" + location + "'></div></div>";
	    }

	    var browser = convert.browserIcon(dataContext.UserAgent, true);
	    browsericon = "<div class='" + browser.css + "'></div>";

	    return browsericon + image;
	  }

	  function PagesFormatter(row, cell, value, columnDef, dataContext) {
	    var pages = value.split(';').length;
	    return "<div class='pages'>" + pages + "</div>";
	  }

	  function PageFormatter(row, cell, value, columnDef, dataContext) {
	    var referrer = convert.referrer(dataContext.Referrer);
	    return "<div class='currentpage'>" + value + "</div><div class='referrer'>" + referrer + "</div>";
	  }

	  function zeroFill(number, width) {
	    width -= number.toString().length;
	    if (width > 0) {
	      return new Array(width + (/\./.test(number) ? 2 : 1) ).join('0') + number;
	    }
	    return number;
	  }

	  function SecondsFormatter(row, cell, value, columnDef, dataContext) {
	    var hours = 0,
	      minutes = 0,
	      seconds = 0;

	    seconds = parseInt(value, 10);
	    minutes = seconds / 60;
	    hours = parseInt(minutes / 60, 10);
	    seconds = parseInt(seconds % 60, 10);
	    minutes = parseInt(minutes % 60, 10);

	    var days = parseInt(hours / 24, 10);
	    var time = days + ' days';
	    if (hours < 5) {
	      time = zeroFill(hours, 2) + ':' + zeroFill(minutes, 2) + ':' + zeroFill(seconds, 2);
	    }  else if (hours < 24) {
	      time = hours + ' hours';
	    }
	    return "<div class='time'>" + time + "</div>";
	  }

	  function DateFormatter(row, cell, value, columnDef, dataContext) {
	    var date = moment(value, "YYYY-MM-DD hh:mm:ss").toDate();
	    return moment(date).format('dddd MMM D YYYY') + '<br/>' + moment(date).format('h:mm:ss A');
	  }

	})(jQuery);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($, _) {$(document).ready(function() {

		var lang = {
			enabletwofactortitle: 'Enable two-step verification',
			enabletwofactordescription: 'Whenever you sign in to your account, you\'ll need to enter both your password and also a security code generated on your mobile device.',
			downloadtwofactortitle: 'Download app and scan the barcode',
			downloadtwofactordescription: 'Download the free Google Authenticator or Microsoft Authenticator app, and add a new account. Then scan this barcode to setup your account and continue.',
			entertwofactortitle: 'Enter the security code',
			entertwofactordecription: 'Please enter the security code that was generated by your mobile application.',
			disabletwofactortitle: 'Disable two-step verification',
			disabletwofactordescription: 'This will disable the two-step verification for this account.  In the future, only a password will be required to login.  Enter the code generated on your mobile device to confirm.',
			completedtwofactortitle: 'Two-step verification enabled',
			completedtwofactordescription: 'From now on, whenever you sign in to your account, you\'ll need to enter both your password and also a security code from your mobile device.',
			completedtwofactordisabledtitle: 'Two-step verification disabled',
			completedtwofactordisableddescription: 'From now on, whenever you sign in to your account, you\'ll need to enter only your password.',
			backupcodetwofactortitle: 'Safely store your backup code',
			backupcodetwofactordescription: 'If you lose or reset your mobile device you will need your backup code to access your account.  Store your backup code in a safe place.'
		}

		var dialog = '<div class="twofactor-dialog"> \
		<div style="position:absolute; top:10px"> \
			<div class="image"> \
				<img src="./images/Security.png" /> \
			</div> \
			<div class="title" style="font-size: 24px; font-weight: 100; margin: 20px 0 10px 20px">' + lang.enabletwofactortitle + '</div> \
			<div class="description" style="font-size: 16px; font-weight: 100; margin: 0 20px">' + lang.enabletwofactordescription + '</div> \
			<div class="barcode"></div> \
			<div class="backup"> \
				<pre class="code"></pre> \
			</div> \
			<div class="error"> \
				<span class="text">Invalid Security Code</span> \
			</div> \
			<div class="security"><label for="security">Security Code</label><input id="security" name="security" type="password" tabindex="1" /></div> \
		</div> \
		<div style="position:absolute; bottom:15px; right:15px" class="buttons right"> \
			<div class="back-button sprite BackButton" style="position: relative; margin:3px; display: none" title="Back"></div> \
			<div class="continue-button sprite ContinueButton" style="position: relative; margin:3px; display: inline-block" title="Continue"></div> \
			<div class="cancel-button sprite CancelButton" style="position: relative; margin:3px; display: inline-block" title="Cancel"></div> \
			<div class="accept-button sprite AcceptButton" style="position: relative; margin:3px" title="Done"></div> \
		</div> \
	</div>';

		var element = $('.accounts.slider');
		if (element.find('.twofactor-dialog').length === 0) {
			$(dialog).appendTo(element);
		}

		var confirm = element.find('.twofactor-dialog'),
			factor = {secret: false, code: false},
			disabled = false;

		element.on('click', '.twofactor.value .btn', function () {

			disabled = (element.find('.twofactor.value .btn').text() == 'Disable');

			if (disabled) {
				confirm.find('.image').hide();
				confirm.find('.title').text(lang.disabletwofactortitle);
				confirm.find('.description').text(lang.disabletwofactordescription);
				confirm.find('.security').show();
				confirm.height(275);
			} else {
				confirm.find('.image').hide();
				confirm.find('.title').text(lang.enabletwofactortitle);
				confirm.find('.description').text(lang.enabletwofactordescription);
				confirm.find('.security').hide();
				confirm.height(200);
			}

			confirm.animate({bottom: 0}, 250, 'easeInOutBack', function () {
				if (disabled) {
					confirm.find('.security input').focus();
				}
			});
		});

		var securityinput = confirm.find('.security input');
		securityinput.on('keypress', _.debounce(function () {
			if (disabled && securityinput.val().length == 6) {
				highlightContinue(100);
			}
			confirm.find('.error').hide();
		}, 250));

		confirm.on('click', '.cancel-button', function () {
			confirm.animate({bottom: -confirm.height()}, 250, 'easeInOutBack');
		})

		confirm.on('click', '.back-button', function () {
			if (confirm.find('.security').is(':visible')) {
				confirm.find('.title').text(lang.downloadtwofactortitle);
				confirm.find('.description').text(lang.downloadtwofactordescription);
				confirm.find('.security').hide();
				confirm.find('.barcode').show();
				confirm.animate({height: '425px'}, 250, 'easeInOutBack');
			} else if (confirm.find('.barcode').is(':visible')) {
				factor.secret = false;
				confirm.find('.title').text(lang.enabletwofactortitle);
				confirm.find('.description').text(lang.enabletwofactordescription);
				confirm.find('.back-button, .barcode, .security').hide();
				confirm.find('.cancel-button').show();
				confirm.animate({height: '200px'}, 250, 'easeInOutBack');
			}
		})

		function randomSecret(length) {
			var result = '',
				chars = '234567QWERTYUIOPASDFGHJKLZXCVBNM';

			for (var i = length; i > 0; --i) {
				result += chars[Math.round(Math.random() * (chars.length - 1))];
			}
			return result;
		}

		function updateAccountTwoFactor(enabled, complete) {

			var title = lang.completedtwofactortitle,
				desc = lang.completedtwofactordescription;

			if (!enabled) {
				title = lang.completedtwofactordisabledtitle;
				desc = lang.completedtwofactordisableddescription;
			}

			if (complete) {
				confirm.find('.back-button, .continue-button, .cancel-button, .security').hide();
				confirm.find('.image, .accept-button').show();
				confirm.find('.title').text(title);
				confirm.find('.description').text(desc);
				confirm.animate({height: '200px'}, 250, 'easeInOutBack');
			}
		}

		function validateCode() {
			var account = {
					Session: session,
					ID: $('#AccountID').val(),
					Data: JSON.stringify(factor),
					Format: 'json',
					Version: '4.0'
				};

			apiRequest({
				url: apiEndpoint.operators,
				data: account,
				success: function (data) {
					// Accounts JSON
					if (data.success !== undefined && data.success == true && data.id !== undefined && data.id > 0) {
						var accounts = storage.get('accounts'),
							account = _.find(accounts, function (account) { return parseInt(account.ID, 10) === data.id });

						account.TwoFactor = data.success;
						storeAccounts(accounts);

						$(document).trigger('LiveHelp.AccountsUpdated', [accounts]);

						var twofactorstatus = element.find('.twofactor.value');
						if (data.backup !== undefined && data.backup.length > 0) {
							twofactorstatus.find('.status').text('Enabled');
							twofactorstatus.find('.btn').text('Disable');

							confirm.animate({height: '250px'}, 250, 'easeInOutBack');

							confirm.find('.back-button, .cancel-button, .security').hide();

							var backup = confirm.find('.backup');
							backup.find('.code').text(data.backup);
							backup.show();

							confirm.find('.title').text(lang.backupcodetwofactortitle);
							confirm.find('.description').text(lang.backupcodetwofactordescription);

							updateAccountTwoFactor(true, false);
						} else {
							twofactorstatus.find('.status').text('Disabled');
							twofactorstatus.find('.btn').text('Enable');
							updateAccountTwoFactor(false, true);
						}

					}
					confirm.find('.security input').val('');
				},
				error: function (jqXHR, textStatus, errorThrown) {
					// Show Error
					success = false;
					confirm.find('.error').fadeIn();
					confirm.find('.security input').val('');
				}
			});
		}

		function highlightContinue(timeout) {
			setTimeout(function () {
				var button = confirm.find('.continue-button');
				button.removeClass('ContinueButton').addClass('ContinueButtonHighlight');
				button.pulse({ opacity: [0.5, 1.0] }, 500, 120);
			}, timeout);
		}

		confirm.on('click', '.accept-button', function () {
			confirm.find('.security, .accept-button').hide();
			confirm.find('.continue-button').show();
			confirm.animate({bottom: -confirm.height()}, 250, 'easeInOutBack');
		});

		confirm.on('click', '.continue-button', function () {

			if (element.find('.twofactor.value .btn').text() == 'Enable') {
				if (factor.secret == false) {
					// Secret
					factor.secret = randomSecret(16);

					var canvas = document.createElement('canvas'),
						account = storage.get('account'),
						firstname = account.Firstname,
						lastname = account.Lastname,
						text = 'otpauth://totp/Helloify: ' + firstname + ' ' + lastname + '?secret=' + factor.secret,
						type = 9,
						size = 4;

					confirm.find('.image').hide();
					confirm.find('.title').text(lang.downloadtwofactortitle);
					confirm.find('.description').text(lang.downloadtwofactordescription);
					confirm.find('.cancel-button').hide();
					confirm.find('.back-button').css('display', 'inline-block');

					/*if (G_vmlCanvasManager) { // IE and excanvas
						canvas = G_vmlCanvasManager.initElement(canvas);
					}*/

					var ctx = canvas.getContext('2d');
					var barcode = new QRCode(type, QRErrorCorrectLevel.H);
					barcode.addData(text);
					barcode.make();

					canvas.setAttribute('width', barcode.getModuleCount() * size);
					canvas.setAttribute('height', barcode.getModuleCount() * size);

					confirm.animate({height: '425px'}, 250, 'easeInOutBack');
					if (confirm.find('.barcode canvas').length === 0) {
						confirm.find('.barcode').append(canvas);
					} else {
						confirm.find('.barcode').show();
					}

					if (canvas.getContext) {
						for (var r = 0; r < barcode.getModuleCount(); r++) {
							for (var c = 0; c < barcode.getModuleCount(); c++) {
								if (barcode.isDark(r, c) ) {
									ctx.fillStyle = 'rgb(51, 51, 51)';
								} else {
									ctx.fillStyle = 'rgb(229, 229, 229)';
								}
								ctx.fillRect (c * size, r * size, size, size);
							}
						}

					}

					highlightContinue(10000);

				} else if (factor.secret.length > 0 && factor.code == false && !confirm.find('.security').is(':visible')) {

					confirm.find('.title').text(lang.entertwofactortitle);
					confirm.find('.description').text(lang.entertwofactordescription);
					confirm.find('.barcode').hide();

					confirm.find('.security').show().find('input').focus();

					confirm.animate({height: '250px'}, 250, 'easeInOutBack');

				} else if (factor.secret.length > 0 && confirm.find('.security input').val().length > 0) {

					// Validate Secret and Code
					factor.code = confirm.find('.security input').val();
					validateCode();

				}

			} else if (confirm.find('.backup').is(':visible')) {

				// Completed
				confirm.find('.backup').hide().find('.code').text('');
				updateAccountTwoFactor(true, true);

			} else {
				// Validate Secret and Code
				factor.secret = false;
				factor.code = confirm.find('.security input').val();
				validateCode();
			}

		})

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62), __webpack_require__(63)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _getPrototypeOf = __webpack_require__(151);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(57);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(58);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(154);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(166);

	var _inherits3 = _interopRequireDefault(_inherits2);

	__webpack_require__(173);

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(333);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _App = __webpack_require__(334);

	var _App2 = _interopRequireDefault(_App);

	var _Chart = __webpack_require__(388);

	var _Chart2 = _interopRequireDefault(_Chart);

	var _Meter = __webpack_require__(390);

	var _Meter2 = _interopRequireDefault(_Meter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Statistics Styles


	var api = __webpack_require__(120);

	// React

	var core = __webpack_require__(121);
	var moment = __webpack_require__(66);

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var _ = __webpack_require__(63);

	var VisitorsChart = _react2.default.createClass({
	  displayName: 'VisitorsChart',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      { className: 'charts container visitors' },
	      _react2.default.createElement(
	        'div',
	        { id: 'chat-chart' },
	        _react2.default.createElement(_Chart2.default, { series: [{
	            'label': 'visitors',
	            'values': this.props.visitors.data,
	            'colorIndex': 'graph-3'
	          }, {
	            'label': 'chats',
	            'values': this.props.chats.data,
	            'colorIndex': 'graph-1'
	          }], type: 'area', smooth: false, points: true, legend: { hoverOnly: true }, xAxis: this.props.visitors.xAxis })
	      )
	    );
	  }
	});

	var WeekdayChart = _react2.default.createClass({
	  displayName: 'WeekdayChart',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      { className: 'weekday container' },
	      _react2.default.createElement(
	        'div',
	        { className: 'chart-container' },
	        _react2.default.createElement(
	          'div',
	          { id: 'weekday-chart', className: 'weekday chart' },
	          _react2.default.createElement(
	            'div',
	            { className: 'average-chats heading', 'data-lang-key': 'averagechatsday' },
	            'Average Chats / Day'
	          ),
	          _react2.default.createElement(_Chart2.default, { series: [{
	              'label': 'chats',
	              'values': this.props.data.values,
	              'colorIndex': 'graph-5'
	            }], type: 'area', smooth: true, points: false, legend: { hoverOnly: true }, xAxis: this.props.data.xAxis })
	        ),
	        _react2.default.createElement(
	          'div',
	          { id: 'weekday-empty' },
	          _react2.default.createElement(
	            'div',
	            null,
	            'Chat Average Unavailable'
	          )
	        )
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'section' },
	        _react2.default.createElement('div', { className: 'sprite ChatTime' }),
	        _react2.default.createElement(
	          'div',
	          { className: 'data' },
	          _react2.default.createElement(
	            'div',
	            { className: 'average label', 'data-lang-key': 'averagechattime' },
	            'Average Chat Time:'
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'average value averagechattime' },
	            this.props.chattime
	          )
	        )
	      )
	    );
	  }
	});

	/*
	<Meter type="spiral" series={[
	  {"label": "Poor", "value": this.state.poor, "colorIndex": "error"},
	  {"label": "Neutral", "value": this.state.neutral, "colorIndex": "warning"},
	  {"label": "Great", "value": this.state.great, "colorIndex": "ok"}
	]} max={100} units="%" />
	*/
	var RatingChart = _react2.default.createClass({
	  displayName: 'RatingChart',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      { className: 'rating container' },
	      _react2.default.createElement(
	        'div',
	        { id: 'rating-chart', className: 'chart-container' },
	        _react2.default.createElement(
	          'div',
	          { className: 'chat-rating heading', 'data-lang-key': 'chatratingfeedback' },
	          'Customer Satisfaction'
	        ),
	        _react2.default.createElement(_Meter2.default, { type: 'circle', series: [{ 'label': 'Great', 'value': this.props.data.good, 'colorIndex': 'ok' }], units: '%' }),
	        _react2.default.createElement(_Meter2.default, { type: 'circle', series: [{ 'label': 'Neutral', 'value': this.props.data.neutral, 'colorIndex': 'warning' }], units: '%' }),
	        _react2.default.createElement(_Meter2.default, { type: 'circle', series: [{ 'label': 'Poor', 'value': this.props.data.poor, 'colorIndex': 'error' }], units: '%' }),
	        _react2.default.createElement(
	          'div',
	          { className: 'happiness heading', 'data-lang-key': 'happinessscore' },
	          'Happiness Score'
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'happiness container' },
	          _react2.default.createElement(
	            'span',
	            { className: 'score' },
	            this.props.data.score
	          )
	        )
	      )
	    );
	  }
	});

	var Statistics = _react2.default.createClass({
	  displayName: 'Statistics',
	  getInitialState: function getInitialState() {
	    return {
	      visitors: {
	        data: [[0, 43], [1, 31], [2, 20], [3, 25], [4, 30], [5, 28], [6, 42], [7, 33], [8, 45], [9, 34], [10, 43], [11, 31], [12, 37], [13, 30], [14, 25], [15, 38], [16, 46], [17, 33], [18, 45], [19, 34], [20, 43], [21, 31], [22, 37], [23, 30], [24, 15], [25, 28], [26, 40], [27, 33]],
	        xAxes: [{ 'label': '1', 'value': 0 }, { 'label': '2', 'value': 1 }, { 'label': '3', 'value': 2 }, { 'label': '4', 'value': 3 }, { 'label': '5', 'value': 4 }, { 'label': '6', 'value': 5 }, { 'label': '7', 'value': 6 }, { 'label': '8', 'value': 7 }, { 'label': '9', 'value': 8 }, { 'label': '10', 'value': 9 }, { 'label': '11', 'value': 10 }, { 'label': '12', 'value': 11 }, { 'label': '13', 'value': 12 }, { 'label': '14', 'value': 13 }, { 'label': '15', 'value': 14 }, { 'label': '16', 'value': 15 }, { 'label': '17', 'value': 16 }, { 'label': '18', 'value': 17 }, { 'label': '19', 'value': 18 }, { 'label': '20', 'value': 19 }, { 'label': '21', 'value': 20 }, { 'label': '22', 'value': 21 }, { 'label': '23', 'value': 22 }, { 'label': '24', 'value': 23 }, { 'label': '25', 'value': 24 }, { 'label': '26', 'value': 25 }, { 'label': '27', 'value': 26 }, { 'label': '28', 'value': 27 }]
	      },
	      chats: {
	        data: [[0, 4], [1, 3], [2, 2], [3, 5], [4, 3], [5, 8], [6, 3], [7, 6], [8, 5], [9, 7], [10, 5], [11, 8], [12, 9], [13, 5], [14, 12], [15, 8], [16, 5], [17, 9], [18, 4], [19, 6], [20, 3], [21, 1], [22, 7], [23, 3], [24, 2], [25, 3], [26, 5], [27, 8]],
	        xAxes: [{ 'label': '1', 'value': 0 }, { 'label': '2', 'value': 1 }, { 'label': '3', 'value': 2 }, { 'label': '4', 'value': 3 }, { 'label': '5', 'value': 4 }, { 'label': '6', 'value': 5 }, { 'label': '7', 'value': 6 }, { 'label': '8', 'value': 7 }, { 'label': '9', 'value': 8 }, { 'label': '10', 'value': 9 }, { 'label': '11', 'value': 10 }, { 'label': '12', 'value': 11 }, { 'label': '13', 'value': 12 }, { 'label': '14', 'value': 13 }, { 'label': '15', 'value': 14 }, { 'label': '16', 'value': 15 }, { 'label': '17', 'value': 16 }, { 'label': '18', 'value': 17 }, { 'label': '19', 'value': 18 }, { 'label': '20', 'value': 19 }, { 'label': '21', 'value': 20 }, { 'label': '22', 'value': 21 }, { 'label': '23', 'value': 22 }, { 'label': '24', 'value': 23 }, { 'label': '25', 'value': 24 }, { 'label': '26', 'value': 25 }, { 'label': '27', 'value': 26 }, { 'label': '28', 'value': 27 }]
	      },
	      weekday: {
	        values: [[0, 1], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0]],
	        xAxis: [{ 'label': 'Sun', 'value': 0 }, { 'label': 'Mon', 'value': 1 }, { 'label': 'Tue', 'value': 2 }, { 'label': 'Wed', 'value': 3 }, { 'label': 'Thu', 'value': 4 }, { 'label': 'Fri', 'value': 5 }, { 'label': 'Sat', 'value': 6 }]
	      },
	      average: {
	        rating: core.locale.unavailable,
	        chattime: core.locale.unavailable
	      },
	      rating: { poor: 5, neutral: 8, good: 87, score: 96 }
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    if (core.config.session.length > 0) {

	      // Web Service / Data
	      var post = { 'Timezone': core.getUTCOffset() };

	      // Statistics AJAX / Charts
	      this.serverRequest = api.apiRequest({
	        url: api.apiEndpoint.statistics,
	        data: post,
	        success: function (data) {
	          // Statistics JSON
	          if (data.Statistics !== null && data.Statistics !== undefined) {
	            var i = 0;
	            var visitorChartData = { data: [], xAxis: [] };
	            var chatChartData = { data: [], xAxis: [] };
	            var chats = data.Statistics.Chats;
	            var visitors = data.Statistics.Visitors;
	            var duration = data.Statistics.Duration;
	            var rating = data.Statistics.Rating;
	            var firstDate;
	            var chatdata = [];

	            // Visitors
	            if (visitors !== null && visitors !== undefined) {

	              firstDate = new moment(visitors.Date).add('d', 1).toDate();

	              if (visitors !== null) {

	                if (chats == null) {
	                  chats = {};
	                }

	                if (chats.Data === undefined) {
	                  chats.Data = new Array(30 + 1).join('0').split('').map(parseFloat);
	                }

	                visitors.Data = visitors.Data.reverse();

	                var day = false;
	                var visitordata = [];
	                var xAxis = [];

	                for (i = 0; i < 30; i++) {

	                  visitordata.push([i, visitors.Data[i]]);
	                  chatdata.push([i, chats.Data[i]]);

	                  day = new moment(firstDate).add('day', i).format('D MMM');
	                  xAxis.push({ label: day, value: i });
	                }

	                visitorChartData = {
	                  data: visitordata,
	                  xAxis: xAxis
	                };

	                chatChartData = {
	                  data: chatdata,
	                  xAxis: xAxis
	                };
	              }
	            }

	            // Chats
	            chats = data.Statistics.Chats;

	            $(document).trigger('LiveHelp.ShowHistoryChart');

	            // Rating
	            var weekdayChartValues = [];
	            chats.Weekday.forEach(function (data, index) {
	              weekdayChartValues.push([index, data.Average]);
	            });

	            var weekdayChartData = { values: weekdayChartValues, xAxis: [{ 'label': 'Sun', 'value': 0 }, { 'label': 'Mon', 'value': 1 }, { 'label': 'Tue', 'value': 2 }, { 'label': 'Wed', 'value': 3 }, { 'label': 'Thu', 'value': 4 }, { 'label': 'Fri', 'value': 5 }, { 'label': 'Sat', 'value': 6 }] };

	            // Duration
	            var total = 0;
	            var averagechattime = core.locale.unavailable;

	            if (duration !== null && duration !== undefined && duration.Data !== undefined) {
	              $.each(duration.Data, function (key, time) {
	                total += time;
	              });

	              var time = parseInt(total / duration.Data.length, 10);
	              var hours = Math.floor(time / 3600);
	              var minutes = Math.floor((time - hours * 3600) / 60);
	              var seconds = time - hours * 3600 - minutes * 60 + ' seconds';

	              hours = hours > 0 ? hours + ' hours ' : '';
	              minutes = minutes + ' minutes ';

	              time = hours + minutes + seconds;
	              averagechattime = time;
	            }

	            // Rating
	            var ratingdata = {};
	            if (rating !== null && rating !== undefined) {

	              if (core.settings.Version.Server >= 5.2 || !rating.Excellent) {
	                total = rating.Good + rating.Neutral + rating.Poor;
	              } else {
	                total = rating.Excellent + rating.Good + rating.Poor + rating.VeryPoor;
	                rating.Poor = rating.Poor + rating.VeryPoor;
	                rating.Neutral = rating.Good;
	                rating.Good = rating.Excellent;
	              }

	              if ($('body').is('.demo')) {
	                total = 100;
	                rating.Poor = 2;
	                rating.Neutral = 8;
	                rating.Good = 90;
	              }

	              ratingdata = {
	                good: rating.Good > 0 ? Math.round(rating.Good / total * 100) : 0,
	                neutral: rating.Neutral > 0 ? Math.round(rating.Neutral / total * 100) : 0,
	                poor: rating.Poor > 0 ? Math.round(rating.Poor / total * 100) : 0,
	                unrated: rating.Unrated > 0 ? Math.round(rating.Unrated / total * 100) : 0
	              };

	              // Score
	              ratingdata.score = ratingdata.good + ratingdata.neutral;
	            }
	          }

	          this.setState({
	            visitors: visitorChartData,
	            chats: chatChartData,
	            weekday: weekdayChartData,
	            average: {
	              chattime: averagechattime
	            },
	            rating: ratingdata
	          });
	        }.bind(this)
	      });
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this.serverRequest) {
	      this.serverRequest.abort();
	    }
	  },
	  render: function render() {
	    return _react2.default.createElement(
	      _App2.default,
	      { centered: false, inline: true },
	      _react2.default.createElement(RatingChart, { data: this.state.rating }),
	      _react2.default.createElement(WeekdayChart, { data: this.state.weekday, rating: this.state.average.rating, chattime: this.state.average.chattime }),
	      _react2.default.createElement(VisitorsChart, { visitors: this.state.visitors, chats: this.state.chats })
	    );
	  }
	});

	var StatisticsContainer = function (_Component) {
	  (0, _inherits3.default)(StatisticsContainer, _Component);

	  function StatisticsContainer() {
	    (0, _classCallCheck3.default)(this, StatisticsContainer);
	    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(StatisticsContainer).apply(this, arguments));
	  }

	  (0, _createClass3.default)(StatisticsContainer, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(Statistics, null);
	    }
	  }]);
	  return StatisticsContainer;
	}(_react.Component);

	var initializeStatistics = _.once(function () {
	  var element = document.getElementById('statistics');
	  _reactDom2.default.render(_react2.default.createElement(StatisticsContainer), element);
	});

	function showStatisticsCharts() {
	  if ($('.statistics.container').is(':visible')) {
	    initializeStatistics();
	  }
	}

	function openStatistics() {
	  $('.visitors-grid .slick-viewport').addClass('no-scroll');
	  $('.history.container, .responses.slider, .accounts.slider, .settings.container, .chat-stack').hide();
	  $('.statistics.container').show();

	  showStatisticsCharts();

	  $(document).trigger('LiveHelp.ShowHistoryChart');
	  $(document).trigger('LiveHelp.CloseHistory');
	}

	// Document Ready
	$(document).ready(function () {

	  // Resize Charts
	  $(window).resize(function () {
	    $(document).trigger('LiveHelp.UpdateCharts');
	  });

	  $(document).on('LiveHelp.OpenStatistics', function () {
	    openStatistics();
	  });

	  $(document).on('LiveHelp.SignInCompleted', function () {
	    // Statistics Chart
	    showStatisticsCharts();
	  });

	  $(document).on('LiveHelp.UpdateCharts', function () {
	    // Update Charts
	    showStatisticsCharts();
	  });
	});

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(152), __esModule: true };

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(153);
	module.exports = __webpack_require__(16).Object.getPrototypeOf;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(48)
	  , $getPrototypeOf = __webpack_require__(47);

	__webpack_require__(144)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _typeof2 = __webpack_require__(155);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _iterator = __webpack_require__(54);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _symbol = __webpack_require__(156);

	var _symbol2 = _interopRequireDefault(_symbol);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(157), __esModule: true };

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(158);
	__webpack_require__(125);
	module.exports = __webpack_require__(16).Symbol;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(15)
	  , core           = __webpack_require__(16)
	  , has            = __webpack_require__(30)
	  , DESCRIPTORS    = __webpack_require__(24)
	  , $export        = __webpack_require__(14)
	  , redefine       = __webpack_require__(29)
	  , META           = __webpack_require__(159).KEY
	  , $fails         = __webpack_require__(25)
	  , shared         = __webpack_require__(41)
	  , setToStringTag = __webpack_require__(45)
	  , uid            = __webpack_require__(42)
	  , wks            = __webpack_require__(46)
	  , keyOf          = __webpack_require__(160)
	  , enumKeys       = __webpack_require__(161)
	  , isArray        = __webpack_require__(163)
	  , anObject       = __webpack_require__(21)
	  , toIObject      = __webpack_require__(8)
	  , toPrimitive    = __webpack_require__(27)
	  , createDesc     = __webpack_require__(28)
	  , _create        = __webpack_require__(32)
	  , gOPNExt        = __webpack_require__(164)
	  , $GOPD          = __webpack_require__(132)
	  , $DP            = __webpack_require__(20)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , setter         = false
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    }
	  });
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D){
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	};
	var $stringify = function stringify(it){
	  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	  var args = [it]
	    , i    = 1
	    , replacer, $replacer;
	  while(arguments.length > i)args.push(arguments[i++]);
	  replacer = args[1];
	  if(typeof replacer == 'function')$replacer = replacer;
	  if($replacer || !isArray(replacer))replacer = function(key, value){
	    if($replacer)value = $replacer.call(this, key, value);
	    if(!isSymbol(value))return value;
	  };
	  args[1] = replacer;
	  return _stringify.apply($JSON, args);
	};
	var BUGGY_JSON = $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	});

	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(165).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(133).f  = $propertyIsEnumerable
	  __webpack_require__(162).f = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(13)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	for(var symbols = (
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; ){
	  var key     = symbols[i++]
	    , Wrapper = core.Symbol
	    , sym     = wks(key);
	  if(!(key in Wrapper))dP(Wrapper, key, {value: USE_NATIVE ? sym : wrap(sym)});
	};

	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	if(!QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild)setter = true;

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || BUGGY_JSON), 'JSON', {stringify: $stringify});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(19)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(42)('meta')
	  , isObject = __webpack_require__(22)
	  , has      = __webpack_require__(30)
	  , setDesc  = __webpack_require__(20).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(25)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(34)
	  , toIObject = __webpack_require__(8);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(34)
	  , gOPS    = __webpack_require__(162)
	  , pIE     = __webpack_require__(133);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 162 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(10);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(8)
	  , gOPN      = __webpack_require__(165).f
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(35)
	  , hiddenKeys = __webpack_require__(43).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _setPrototypeOf = __webpack_require__(167);

	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

	var _create = __webpack_require__(170);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(155);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(168), __esModule: true };

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(169);
	module.exports = __webpack_require__(16).Object.setPrototypeOf;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(14);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(131).set});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(171), __esModule: true };

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(172);
	var $Object = __webpack_require__(16).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(14)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(32)});

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(174);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(176)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js?outputStyle=expanded&includePaths[]=%2FUsers%2Flukeronalds%2FSites%2Flivehelp.stardevelop.dev%2Flatest%2Flivehelp%2Fnode_modules&includePaths[]=%2FUsers%2Flukeronalds%2FSites%2Flivehelp.stardevelop.dev%2Flatest%2Flivehelp%2Fnode_modules%2Fgrommet%2Fnode_modules!./statistics.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js?outputStyle=expanded&includePaths[]=%2FUsers%2Flukeronalds%2FSites%2Flivehelp.stardevelop.dev%2Flatest%2Flivehelp%2Fnode_modules&includePaths[]=%2FUsers%2Flukeronalds%2FSites%2Flivehelp.stardevelop.dev%2Flatest%2Flivehelp%2Fnode_modules%2Fgrommet%2Fnode_modules!./statistics.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(175)();
	// imports


	// module
	exports.push([module.id, "@charset \"UTF-8\";\n/*!\n * inuitcss, by @csswizardry\n *\n * github.com/inuitcss | inuitcss.com\n */\n@font-face {\n  font-family: 'Source Sans Pro';\n  font-style: normal;\n  font-weight: 300;\n  src: local(\"Source Sans Pro Light\"), local(\"SourceSansPro-Light\"), url(\"https://fonts.gstatic.com/s/sourcesanspro/v9/toadOcfmlt9b38dHJxOBGPS42wKzre0cxmO5m5GyTsY.ttf\") format(\"truetype\");\n}\n\n@font-face {\n  font-family: 'Source Sans Pro';\n  font-style: normal;\n  font-weight: 400;\n  src: local(\"Source Sans Pro\"), local(\"SourceSansPro-Regular\"), url(\"https://fonts.gstatic.com/s/sourcesanspro/v9/ODelI1aHBYDBqgeIAH2zlEY6Fu39Tt9XkmtSosaMoEA.ttf\") format(\"truetype\");\n}\n\n@font-face {\n  font-family: 'Source Sans Pro';\n  font-style: normal;\n  font-weight: 700;\n  src: local(\"Source Sans Pro Bold\"), local(\"SourceSansPro-Bold\"), url(\"https://fonts.gstatic.com/s/sourcesanspro/v9/toadOcfmlt9b38dHJxOBGLlcMrNrsnL9dgADnXgYJjs.ttf\") format(\"truetype\");\n}\n\n@font-face {\n  font-family: 'Source Sans Pro';\n  font-style: italic;\n  font-weight: 400;\n  src: local(\"Source Sans Pro Italic\"), local(\"SourceSansPro-It\"), url(\"https://fonts.gstatic.com/s/sourcesanspro/v9/M2Jd71oPJhLKp0zdtTvoMzpKUtbt71woJ25xl7KOGD0.ttf\") format(\"truetype\");\n}\n\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\nhtml {\n  font-family: sans-serif;\n  /* 1 */\n  -ms-text-size-adjust: 100%;\n  /* 2 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n}\n\n/**\n * Remove default margin.\n */\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  /* 1 */\n  vertical-align: baseline;\n  /* 2 */\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n[hidden],\ntemplate {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n/**\n * Remove the gray background color from active links in IE 10.\n */\na {\n  background-color: transparent;\n}\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\na:active,\na:hover {\n  outline: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\nb,\nstrong {\n  font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari and Chrome.\n */\ndfn {\n  font-style: italic;\n}\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\nmark {\n  background: #ff0;\n  color: #000;\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n/* Embedded content\n   ========================================================================== */\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\nimg {\n  border: 0;\n}\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\n\n/**\n * Contain overflow in all browsers.\n */\npre {\n  overflow: auto;\n}\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* Forms\n   ========================================================================== */\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n  margin: 0;\n  /* 3 */\n}\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\nbutton {\n  overflow: visible;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\nbutton,\nselect {\n  text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  /* 2 */\n  cursor: pointer;\n  /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\ninput {\n  line-height: normal;\n}\n\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  box-sizing: content-box;\n  /* 2 */\n}\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Define consistent border, margin, and padding.\n */\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\nlegend {\n  border: 0;\n  /* 1 */\n  padding: 0;\n  /* 2 */\n}\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\noptgroup {\n  font-weight: bold;\n}\n\n/* Tables\n   ========================================================================== */\n/**\n * Remove most spacing between table cells.\n */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\n\n/*------------------------------------*    #RESET\n\\*------------------------------------*/\n/**\n * As well as using normalize.css, it is often advantageous to remove all\n * margins from certain elements.\n */\nbody,\nh1, h2, h3, h4, h5, h6,\np, blockquote, pre,\ndl, dd, ol, ul,\nform, fieldset, legend,\nfigure,\ntable, th, td, caption,\nhr {\n  margin: 0;\n  padding: 0;\n}\n\n/**\n * Give a help cursor to elements that give extra info on `:hover`.\n */\nabbr[title],\ndfn[title] {\n  cursor: help;\n}\n\n/**\n * Remove underlines from potentially troublesome elements.\n */\nu,\nins {\n  text-decoration: none;\n}\n\n/**\n * Apply faux underlines to inserted text via `border-bottom`.\n */\nins {\n  border-bottom: 1px solid;\n}\n\n/*------------------------------------*    #BOX-SIZING\n\\*------------------------------------*/\n/**\n * Set the global `box-sizing` state to `border-box`.\n *\n * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice\n * paulirish.com/2012/box-sizing-border-box-ftw\n */\nhtml {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n*, *:before, *:after {\n  -webkit-box-sizing: inherit;\n  -moz-box-sizing: inherit;\n  box-sizing: inherit;\n}\n\n/*------------------------------------*    #SHARED\n\\*------------------------------------*/\n/**\n * Where `margin-bottom` is concerned,this value will be the same as the\n * base line-height. This allows us to keep a consistent vertical rhythm.\n * As per: csswizardry.com/2012/06/single-direction-margin-declarations\n */\nh1, h2, h3, h4, h5, h6,\nul, ol, dl,\nblockquote, p, address,\nhr,\ntable,\nfieldset, figure,\npre {\n  margin-bottom: 24px;\n  margin-bottom: 1.5rem;\n}\n\n/**\n * Where `margin-left` is concerned we want to try and indent certain elements\n * by a consistent amount. Define that amount once,here.\n */\nul, ol, dd {\n  margin-left: 48px;\n  margin-left: 3rem;\n}\n\n/*------------------------------------*    #PAGE\n\\*------------------------------------*/\n/**\n * High-, page-level styling.\n *\n * 1. Set the default `font-size` and `line-height` for the entire project,\n *    sourced from our default variables. The `font-size` is calculated to exist\n *    in ems, the `line-height` is calculated to exist unitlessly.\n * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when\n *    navigating between pages that do/do not have enough content to produce\n *    scrollbars naturally.\n * 3. Ensure the page always fills at least the entire height of the viewport.\n * 4. Prevent certain mobile browsers from automatically zooming fonts.\n * 5. Fonts on OSX will look more consistent with other systems that do not\n *    render text using sub-pixel anti-aliasing.\n */\nhtml {\n  font-size: 1em;\n  /* [1] */\n  line-height: 1.5;\n  /* [1] */\n  background-color: #fff;\n  color: #333;\n  overflow-y: scroll;\n  /* [2] */\n  min-height: 100%;\n  /* [3] */\n  -webkit-text-size-adjust: 100%;\n  /* [4] */\n  -ms-text-size-adjust: 100%;\n  /* [4] */\n  -moz-osx-font-smoothing: grayscale;\n  /* [5] */\n  -webkit-font-smoothing: antialiased;\n  /* [5] */\n}\n\n/*------------------------------------*    #HEADINGS\n\\*------------------------------------*/\n/**\n * Headings 1–6.\n */\nh1 {\n  font-size: 36px;\n  font-size: 2.25rem;\n  line-height: 1.33333;\n}\n\nh2 {\n  font-size: 30px;\n  font-size: 1.875rem;\n  line-height: 1.6;\n}\n\nh3 {\n  font-size: 24px;\n  font-size: 1.5rem;\n  line-height: 1;\n}\n\nh4 {\n  font-size: 20px;\n  font-size: 1.25rem;\n  line-height: 1.2;\n}\n\nh5 {\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\nh6 {\n  font-size: 14px;\n  font-size: 0.875rem;\n  line-height: 1.71429;\n}\n\n/*------------------------------------*    #LISTS\n\\*------------------------------------*/\n/**\n * Remove extra vertical spacing when nesting lists.\n */\nli > ul,\nli > ol {\n  margin-bottom: 0;\n}\n\n/*------------------------------------*    #IMAGES\n\\*------------------------------------*/\n/**\n * 1. Fluid images for responsive purposes.\n * 2. Offset `alt` text from surrounding copy.\n * 3. Setting `vertical-align` removes the whitespace that appears under `img`\n *    elements when they are dropped into a page as-is. Safer alternative to\n *    using `display: block;`.\n */\nimg {\n  max-width: 100%;\n  /* [1] */\n  font-style: italic;\n  /* [2] */\n  vertical-align: middle;\n  /* [3] */\n}\n\n/**\n * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector\n *    to remove the effects.\n * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s\n *    not make the image fluid.\n */\n.gm-style img,\nimg[width],\nimg[height] {\n  /* [2] */\n  max-width: none;\n}\n\n@-webkit-keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@media screen and (min-width: 45em) {\n  html.grommet {\n    height: 100%;\n    width: 100%;\n    overflow: visible;\n  }\n}\n\n.grommet {\n  box-sizing: border-box;\n}\n\n.grommet.rtl {\n  direction: rtl;\n}\n\n.grommet * {\n  box-sizing: inherit;\n}\n\n@-webkit-keyframes reveal-chart {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes reveal-chart {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.chart {\n  position: relative;\n  display: block;\n}\n\n.chart__grid {\n  stroke: rgba(0, 0, 0, 0.15);\n}\n\n.chart__graphic {\n  width: 100%;\n  height: 192px;\n  max-height: calc(100vh - 144px);\n}\n\n@media screen and (min-width: 45em) {\n  .chart__values g {\n    -webkit-animation: reveal-chart 1.5s;\n    animation: reveal-chart 1.5s;\n  }\n}\n\n.chart__values-line {\n  stroke-width: 3px;\n}\n\n.chart__values-line.color-index-loading {\n  stroke: #ddd;\n  stroke-dasharray: 1px 10px;\n  stroke-dashoffset: 0;\n}\n\n.chart__values-line.color-index-unset {\n  stroke: #ddd;\n}\n\n.chart__values-line.color-index-brand {\n  stroke: #865CD6;\n}\n\n.chart__values-line.color-index-critical {\n  stroke: #FF324D;\n}\n\n.chart__values-line.color-index-error {\n  stroke: #FF324D;\n}\n\n.chart__values-line.color-index-warning {\n  stroke: #FFD602;\n}\n\n.chart__values-line.color-index-ok {\n  stroke: #8CC800;\n}\n\n.chart__values-line.color-index-unknown {\n  stroke: #a8a8a8;\n}\n\n.chart__values-line.color-index-disabled {\n  stroke: #a8a8a8;\n}\n\n.chart__values-line.color-index-graph-1, .chart__values-line.color-index-graph-6 {\n  stroke: #00CCEB;\n}\n\n.chart__values-line.color-index-graph-2, .chart__values-line.color-index-graph-7 {\n  stroke: #FF7D28;\n}\n\n.chart__values-line.color-index-graph-3, .chart__values-line.color-index-graph-8 {\n  stroke: #0A64A0;\n}\n\n.chart__values-line.color-index-graph-4, .chart__values-line.color-index-graph-9 {\n  stroke: #DC2878;\n}\n\n.chart__values-line.color-index-graph-5, .chart__values-line.color-index-graph-10 {\n  stroke: #501EB4;\n}\n\n.chart__values-line.color-index-grey-1, .chart__values-line.color-index-grey-5 {\n  stroke: #333333;\n}\n\n.chart__values-line.color-index-grey-2, .chart__values-line.color-index-grey-6 {\n  stroke: #3B3B3B;\n}\n\n.chart__values-line.color-index-grey-3, .chart__values-line.color-index-grey-7 {\n  stroke: #434343;\n}\n\n.chart__values-line.color-index-grey-4, .chart__values-line.color-index-grey-8 {\n  stroke: #666666;\n}\n\n.chart__values-line.color-index-accent-1, .chart__values-line.color-index-accent-3 {\n  stroke: #00CCEB;\n}\n\n.chart__values-line.color-index-accent-2, .chart__values-line.color-index-accent-4 {\n  stroke: #FF7D28;\n}\n\n.chart__values-line.color-index-light-1, .chart__values-line.color-index-light-3 {\n  stroke: #ffffff;\n}\n\n.chart__values-line.color-index-light-2, .chart__values-line.color-index-light-4 {\n  stroke: #f5f5f5;\n}\n\n.chart__values-bar.color-index-critical, .chart__values-area.color-index-critical {\n  fill: rgba(255, 50, 77, 0.7);\n}\n\n.chart__values-bar.color-index-error, .chart__values-area.color-index-error {\n  fill: rgba(255, 50, 77, 0.7);\n}\n\n.chart__values-bar.color-index-warning, .chart__values-area.color-index-warning {\n  fill: rgba(255, 214, 2, 0.7);\n}\n\n.chart__values-bar.color-index-ok, .chart__values-area.color-index-ok {\n  fill: rgba(140, 200, 0, 0.7);\n}\n\n.chart__values-bar.color-index-unknown, .chart__values-area.color-index-unknown {\n  fill: rgba(168, 168, 168, 0.7);\n}\n\n.chart__values-bar.color-index-disabled, .chart__values-area.color-index-disabled {\n  fill: rgba(168, 168, 168, 0.7);\n}\n\n.chart__values-bar.color-index-graph-1, .chart__values-bar.color-index-graph-6, .chart__values-area.color-index-graph-1, .chart__values-area.color-index-graph-6 {\n  fill: rgba(0, 204, 235, 0.7);\n}\n\n.chart__values-bar.color-index-graph-2, .chart__values-bar.color-index-graph-7, .chart__values-area.color-index-graph-2, .chart__values-area.color-index-graph-7 {\n  fill: rgba(255, 125, 40, 0.7);\n}\n\n.chart__values-bar.color-index-graph-3, .chart__values-bar.color-index-graph-8, .chart__values-area.color-index-graph-3, .chart__values-area.color-index-graph-8 {\n  fill: rgba(10, 100, 160, 0.7);\n}\n\n.chart__values-bar.color-index-graph-4, .chart__values-bar.color-index-graph-9, .chart__values-area.color-index-graph-4, .chart__values-area.color-index-graph-9 {\n  fill: rgba(220, 40, 120, 0.7);\n}\n\n.chart__values-bar.color-index-graph-5, .chart__values-bar.color-index-graph-10, .chart__values-area.color-index-graph-5, .chart__values-area.color-index-graph-10 {\n  fill: rgba(80, 30, 180, 0.7);\n}\n\n.chart__values-bar--active.color-index-unset, .chart__values-area--active.color-index-unset {\n  fill: #ddd;\n}\n\n.chart__values-bar--active.color-index-brand, .chart__values-area--active.color-index-brand {\n  fill: #865CD6;\n}\n\n.chart__values-bar--active.color-index-critical, .chart__values-area--active.color-index-critical {\n  fill: #FF324D;\n}\n\n.chart__values-bar--active.color-index-error, .chart__values-area--active.color-index-error {\n  fill: #FF324D;\n}\n\n.chart__values-bar--active.color-index-warning, .chart__values-area--active.color-index-warning {\n  fill: #FFD602;\n}\n\n.chart__values-bar--active.color-index-ok, .chart__values-area--active.color-index-ok {\n  fill: #8CC800;\n}\n\n.chart__values-bar--active.color-index-unknown, .chart__values-area--active.color-index-unknown {\n  fill: #a8a8a8;\n}\n\n.chart__values-bar--active.color-index-disabled, .chart__values-area--active.color-index-disabled {\n  fill: #a8a8a8;\n}\n\n.chart__values-bar--active.color-index-graph-1, .chart__values-bar--active.color-index-graph-6, .chart__values-area--active.color-index-graph-1, .chart__values-area--active.color-index-graph-6 {\n  fill: #00CCEB;\n}\n\n.chart__values-bar--active.color-index-graph-2, .chart__values-bar--active.color-index-graph-7, .chart__values-area--active.color-index-graph-2, .chart__values-area--active.color-index-graph-7 {\n  fill: #FF7D28;\n}\n\n.chart__values-bar--active.color-index-graph-3, .chart__values-bar--active.color-index-graph-8, .chart__values-area--active.color-index-graph-3, .chart__values-area--active.color-index-graph-8 {\n  fill: #0A64A0;\n}\n\n.chart__values-bar--active.color-index-graph-4, .chart__values-bar--active.color-index-graph-9, .chart__values-area--active.color-index-graph-4, .chart__values-area--active.color-index-graph-9 {\n  fill: #DC2878;\n}\n\n.chart__values-bar--active.color-index-graph-5, .chart__values-bar--active.color-index-graph-10, .chart__values-area--active.color-index-graph-5, .chart__values-area--active.color-index-graph-10 {\n  fill: #501EB4;\n}\n\n.chart__values-bar--active.color-index-accent-1, .chart__values-bar--active.color-index-accent-3, .chart__values-area--active.color-index-accent-1, .chart__values-area--active.color-index-accent-3 {\n  fill: #00CCEB;\n}\n\n.chart__values-bar--active.color-index-accent-2, .chart__values-bar--active.color-index-accent-4, .chart__values-area--active.color-index-accent-2, .chart__values-area--active.color-index-accent-4 {\n  fill: #FF7D28;\n}\n\n.chart__values-bar--active.color-index-grey-1, .chart__values-bar--active.color-index-grey-5, .chart__values-area--active.color-index-grey-1, .chart__values-area--active.color-index-grey-5 {\n  fill: #333333;\n}\n\n.chart__values-bar--active.color-index-grey-2, .chart__values-bar--active.color-index-grey-6, .chart__values-area--active.color-index-grey-2, .chart__values-area--active.color-index-grey-6 {\n  fill: #3B3B3B;\n}\n\n.chart__values-bar--active.color-index-grey-3, .chart__values-bar--active.color-index-grey-7, .chart__values-area--active.color-index-grey-3, .chart__values-area--active.color-index-grey-7 {\n  fill: #434343;\n}\n\n.chart__values-bar--active.color-index-grey-4, .chart__values-bar--active.color-index-grey-8, .chart__values-area--active.color-index-grey-4, .chart__values-area--active.color-index-grey-8 {\n  fill: #666666;\n}\n\n.chart__values-point {\n  stroke-width: 3px;\n  fill: #fff;\n}\n\n.chart__values-point.color-index-loading {\n  stroke: #ddd;\n  stroke-dasharray: 1px 10px;\n  stroke-dashoffset: 0;\n}\n\n.chart__values-point.color-index-unset {\n  stroke: #ddd;\n}\n\n.chart__values-point.color-index-brand {\n  stroke: #865CD6;\n}\n\n.chart__values-point.color-index-critical {\n  stroke: #FF324D;\n}\n\n.chart__values-point.color-index-error {\n  stroke: #FF324D;\n}\n\n.chart__values-point.color-index-warning {\n  stroke: #FFD602;\n}\n\n.chart__values-point.color-index-ok {\n  stroke: #8CC800;\n}\n\n.chart__values-point.color-index-unknown {\n  stroke: #a8a8a8;\n}\n\n.chart__values-point.color-index-disabled {\n  stroke: #a8a8a8;\n}\n\n.chart__values-point.color-index-graph-1, .chart__values-point.color-index-graph-6 {\n  stroke: #00CCEB;\n}\n\n.chart__values-point.color-index-graph-2, .chart__values-point.color-index-graph-7 {\n  stroke: #FF7D28;\n}\n\n.chart__values-point.color-index-graph-3, .chart__values-point.color-index-graph-8 {\n  stroke: #0A64A0;\n}\n\n.chart__values-point.color-index-graph-4, .chart__values-point.color-index-graph-9 {\n  stroke: #DC2878;\n}\n\n.chart__values-point.color-index-graph-5, .chart__values-point.color-index-graph-10 {\n  stroke: #501EB4;\n}\n\n.chart__values-point.color-index-grey-1, .chart__values-point.color-index-grey-5 {\n  stroke: #333333;\n}\n\n.chart__values-point.color-index-grey-2, .chart__values-point.color-index-grey-6 {\n  stroke: #3B3B3B;\n}\n\n.chart__values-point.color-index-grey-3, .chart__values-point.color-index-grey-7 {\n  stroke: #434343;\n}\n\n.chart__values-point.color-index-grey-4, .chart__values-point.color-index-grey-8 {\n  stroke: #666666;\n}\n\n.chart__values-point.color-index-accent-1, .chart__values-point.color-index-accent-3 {\n  stroke: #00CCEB;\n}\n\n.chart__values-point.color-index-accent-2, .chart__values-point.color-index-accent-4 {\n  stroke: #FF7D28;\n}\n\n.chart__values-point.color-index-light-1, .chart__values-point.color-index-light-3 {\n  stroke: #ffffff;\n}\n\n.chart__values-point.color-index-light-2, .chart__values-point.color-index-light-4 {\n  stroke: #f5f5f5;\n}\n\n.chart__values--loading {\n  stroke-width: 24px;\n}\n\n.chart__values--loading.color-index-loading {\n  stroke: #ddd;\n  stroke-dasharray: 1px 10px;\n  stroke-dashoffset: 0;\n}\n\n.chart__values--loading.color-index-unset {\n  stroke: #ddd;\n}\n\n.chart__values--loading.color-index-brand {\n  stroke: #865CD6;\n}\n\n.chart__values--loading.color-index-critical {\n  stroke: #FF324D;\n}\n\n.chart__values--loading.color-index-error {\n  stroke: #FF324D;\n}\n\n.chart__values--loading.color-index-warning {\n  stroke: #FFD602;\n}\n\n.chart__values--loading.color-index-ok {\n  stroke: #8CC800;\n}\n\n.chart__values--loading.color-index-unknown {\n  stroke: #a8a8a8;\n}\n\n.chart__values--loading.color-index-disabled {\n  stroke: #a8a8a8;\n}\n\n.chart__values--loading.color-index-graph-1, .chart__values--loading.color-index-graph-6 {\n  stroke: #00CCEB;\n}\n\n.chart__values--loading.color-index-graph-2, .chart__values--loading.color-index-graph-7 {\n  stroke: #FF7D28;\n}\n\n.chart__values--loading.color-index-graph-3, .chart__values--loading.color-index-graph-8 {\n  stroke: #0A64A0;\n}\n\n.chart__values--loading.color-index-graph-4, .chart__values--loading.color-index-graph-9 {\n  stroke: #DC2878;\n}\n\n.chart__values--loading.color-index-graph-5, .chart__values--loading.color-index-graph-10 {\n  stroke: #501EB4;\n}\n\n.chart__values--loading.color-index-grey-1, .chart__values--loading.color-index-grey-5 {\n  stroke: #333333;\n}\n\n.chart__values--loading.color-index-grey-2, .chart__values--loading.color-index-grey-6 {\n  stroke: #3B3B3B;\n}\n\n.chart__values--loading.color-index-grey-3, .chart__values--loading.color-index-grey-7 {\n  stroke: #434343;\n}\n\n.chart__values--loading.color-index-grey-4, .chart__values--loading.color-index-grey-8 {\n  stroke: #666666;\n}\n\n.chart__values--loading.color-index-accent-1, .chart__values--loading.color-index-accent-3 {\n  stroke: #00CCEB;\n}\n\n.chart__values--loading.color-index-accent-2, .chart__values--loading.color-index-accent-4 {\n  stroke: #FF7D28;\n}\n\n.chart__values--loading.color-index-light-1, .chart__values--loading.color-index-light-3 {\n  stroke: #ffffff;\n}\n\n.chart__values--loading.color-index-light-2, .chart__values--loading.color-index-light-4 {\n  stroke: #f5f5f5;\n}\n\n.chart__threshold {\n  stroke-width: 2px;\n  stroke: rgba(51, 51, 51, 0.2);\n  pointer-events: none;\n}\n\n.chart__yaxis .chart__bar.color-index-critical {\n  fill: rgba(255, 50, 77, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-error {\n  fill: rgba(255, 50, 77, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-warning {\n  fill: rgba(255, 214, 2, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-ok {\n  fill: rgba(140, 200, 0, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-unknown {\n  fill: rgba(168, 168, 168, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-disabled {\n  fill: rgba(168, 168, 168, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-graph-1, .chart__yaxis .chart__bar.color-index-graph-6 {\n  fill: rgba(0, 204, 235, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-graph-2, .chart__yaxis .chart__bar.color-index-graph-7 {\n  fill: rgba(255, 125, 40, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-graph-3, .chart__yaxis .chart__bar.color-index-graph-8 {\n  fill: rgba(10, 100, 160, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-graph-4, .chart__yaxis .chart__bar.color-index-graph-9 {\n  fill: rgba(220, 40, 120, 0.5);\n}\n\n.chart__yaxis .chart__bar.color-index-graph-5, .chart__yaxis .chart__bar.color-index-graph-10 {\n  fill: rgba(80, 30, 180, 0.5);\n}\n\n.chart__xaxis-index text {\n  fill: #777;\n}\n\n.chart__xaxis-index--eclipse text {\n  fill: transparent;\n}\n\n.chart__xaxis-index--active text {\n  fill: #333;\n}\n\n.chart__front-xband-background {\n  fill: transparent;\n}\n\n.chart__cursor {\n  stroke: #333;\n  stroke-width: 2;\n  pointer-events: none;\n}\n\n.chart__cursor-point {\n  stroke-width: 2;\n}\n\n.chart__cursor-point.color-index-unset {\n  fill: #ddd;\n}\n\n.chart__cursor-point.color-index-brand {\n  fill: #865CD6;\n}\n\n.chart__cursor-point.color-index-critical {\n  fill: #FF324D;\n}\n\n.chart__cursor-point.color-index-error {\n  fill: #FF324D;\n}\n\n.chart__cursor-point.color-index-warning {\n  fill: #FFD602;\n}\n\n.chart__cursor-point.color-index-ok {\n  fill: #8CC800;\n}\n\n.chart__cursor-point.color-index-unknown {\n  fill: #a8a8a8;\n}\n\n.chart__cursor-point.color-index-disabled {\n  fill: #a8a8a8;\n}\n\n.chart__cursor-point.color-index-graph-1, .chart__cursor-point.color-index-graph-6 {\n  fill: #00CCEB;\n}\n\n.chart__cursor-point.color-index-graph-2, .chart__cursor-point.color-index-graph-7 {\n  fill: #FF7D28;\n}\n\n.chart__cursor-point.color-index-graph-3, .chart__cursor-point.color-index-graph-8 {\n  fill: #0A64A0;\n}\n\n.chart__cursor-point.color-index-graph-4, .chart__cursor-point.color-index-graph-9 {\n  fill: #DC2878;\n}\n\n.chart__cursor-point.color-index-graph-5, .chart__cursor-point.color-index-graph-10 {\n  fill: #501EB4;\n}\n\n.chart__cursor-point.color-index-accent-1, .chart__cursor-point.color-index-accent-3 {\n  fill: #00CCEB;\n}\n\n.chart__cursor-point.color-index-accent-2, .chart__cursor-point.color-index-accent-4 {\n  fill: #FF7D28;\n}\n\n.chart__cursor-point.color-index-grey-1, .chart__cursor-point.color-index-grey-5 {\n  fill: #333333;\n}\n\n.chart__cursor-point.color-index-grey-2, .chart__cursor-point.color-index-grey-6 {\n  fill: #3B3B3B;\n}\n\n.chart__cursor-point.color-index-grey-3, .chart__cursor-point.color-index-grey-7 {\n  fill: #434343;\n}\n\n.chart__cursor-point.color-index-grey-4, .chart__cursor-point.color-index-grey-8 {\n  fill: #666666;\n}\n\n.chart__legend--overlay {\n  padding: 12px;\n  pointer-events: none;\n}\n\n@media screen and (max-width: 44.9375em) {\n  .chart__legend--overlay {\n    margin: 0px auto;\n  }\n}\n\n@media screen and (min-width: 45em) {\n  .chart__legend--overlay {\n    position: absolute;\n    left: 0px;\n    margin: 0px;\n    background-color: rgba(255, 255, 255, 0.8);\n  }\n}\n\n.chart--area .chart__gradient.color-index-critical .begin, .chart--bar .chart__gradient.color-index-critical .begin {\n  stop-color: #FF324D;\n}\n\n.chart--area .chart__gradient.color-index-critical .mid, .chart--bar .chart__gradient.color-index-critical .mid {\n  stop-color: #FF324D;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-critical .end, .chart--bar .chart__gradient.color-index-critical .end {\n  stop-color: #FF324D;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-error .begin, .chart--bar .chart__gradient.color-index-error .begin {\n  stop-color: #FF324D;\n}\n\n.chart--area .chart__gradient.color-index-error .mid, .chart--bar .chart__gradient.color-index-error .mid {\n  stop-color: #FF324D;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-error .end, .chart--bar .chart__gradient.color-index-error .end {\n  stop-color: #FF324D;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-warning .begin, .chart--bar .chart__gradient.color-index-warning .begin {\n  stop-color: #FFD602;\n}\n\n.chart--area .chart__gradient.color-index-warning .mid, .chart--bar .chart__gradient.color-index-warning .mid {\n  stop-color: #FFD602;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-warning .end, .chart--bar .chart__gradient.color-index-warning .end {\n  stop-color: #FFD602;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-ok .begin, .chart--bar .chart__gradient.color-index-ok .begin {\n  stop-color: #8CC800;\n}\n\n.chart--area .chart__gradient.color-index-ok .mid, .chart--bar .chart__gradient.color-index-ok .mid {\n  stop-color: #8CC800;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-ok .end, .chart--bar .chart__gradient.color-index-ok .end {\n  stop-color: #8CC800;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-unknown .begin, .chart--bar .chart__gradient.color-index-unknown .begin {\n  stop-color: #a8a8a8;\n}\n\n.chart--area .chart__gradient.color-index-unknown .mid, .chart--bar .chart__gradient.color-index-unknown .mid {\n  stop-color: #a8a8a8;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-unknown .end, .chart--bar .chart__gradient.color-index-unknown .end {\n  stop-color: #a8a8a8;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-disabled .begin, .chart--bar .chart__gradient.color-index-disabled .begin {\n  stop-color: #a8a8a8;\n}\n\n.chart--area .chart__gradient.color-index-disabled .mid, .chart--bar .chart__gradient.color-index-disabled .mid {\n  stop-color: #a8a8a8;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-disabled .end, .chart--bar .chart__gradient.color-index-disabled .end {\n  stop-color: #a8a8a8;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-graph-1 .begin, .chart--area .chart__gradient.color-index-graph-6 .begin, .chart--bar .chart__gradient.color-index-graph-1 .begin, .chart--bar .chart__gradient.color-index-graph-6 .begin {\n  stop-color: #00CCEB;\n}\n\n.chart--area .chart__gradient.color-index-graph-1 .mid, .chart--area .chart__gradient.color-index-graph-6 .mid, .chart--bar .chart__gradient.color-index-graph-1 .mid, .chart--bar .chart__gradient.color-index-graph-6 .mid {\n  stop-color: #00CCEB;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-graph-1 .end, .chart--area .chart__gradient.color-index-graph-6 .end, .chart--bar .chart__gradient.color-index-graph-1 .end, .chart--bar .chart__gradient.color-index-graph-6 .end {\n  stop-color: #00CCEB;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-graph-2 .begin, .chart--area .chart__gradient.color-index-graph-7 .begin, .chart--bar .chart__gradient.color-index-graph-2 .begin, .chart--bar .chart__gradient.color-index-graph-7 .begin {\n  stop-color: #FF7D28;\n}\n\n.chart--area .chart__gradient.color-index-graph-2 .mid, .chart--area .chart__gradient.color-index-graph-7 .mid, .chart--bar .chart__gradient.color-index-graph-2 .mid, .chart--bar .chart__gradient.color-index-graph-7 .mid {\n  stop-color: #FF7D28;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-graph-2 .end, .chart--area .chart__gradient.color-index-graph-7 .end, .chart--bar .chart__gradient.color-index-graph-2 .end, .chart--bar .chart__gradient.color-index-graph-7 .end {\n  stop-color: #FF7D28;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-graph-3 .begin, .chart--area .chart__gradient.color-index-graph-8 .begin, .chart--bar .chart__gradient.color-index-graph-3 .begin, .chart--bar .chart__gradient.color-index-graph-8 .begin {\n  stop-color: #0A64A0;\n}\n\n.chart--area .chart__gradient.color-index-graph-3 .mid, .chart--area .chart__gradient.color-index-graph-8 .mid, .chart--bar .chart__gradient.color-index-graph-3 .mid, .chart--bar .chart__gradient.color-index-graph-8 .mid {\n  stop-color: #0A64A0;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-graph-3 .end, .chart--area .chart__gradient.color-index-graph-8 .end, .chart--bar .chart__gradient.color-index-graph-3 .end, .chart--bar .chart__gradient.color-index-graph-8 .end {\n  stop-color: #0A64A0;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-graph-4 .begin, .chart--area .chart__gradient.color-index-graph-9 .begin, .chart--bar .chart__gradient.color-index-graph-4 .begin, .chart--bar .chart__gradient.color-index-graph-9 .begin {\n  stop-color: #DC2878;\n}\n\n.chart--area .chart__gradient.color-index-graph-4 .mid, .chart--area .chart__gradient.color-index-graph-9 .mid, .chart--bar .chart__gradient.color-index-graph-4 .mid, .chart--bar .chart__gradient.color-index-graph-9 .mid {\n  stop-color: #DC2878;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-graph-4 .end, .chart--area .chart__gradient.color-index-graph-9 .end, .chart--bar .chart__gradient.color-index-graph-4 .end, .chart--bar .chart__gradient.color-index-graph-9 .end {\n  stop-color: #DC2878;\n  stop-opacity: 0;\n}\n\n.chart--area .chart__gradient.color-index-graph-5 .begin, .chart--area .chart__gradient.color-index-graph-10 .begin, .chart--bar .chart__gradient.color-index-graph-5 .begin, .chart--bar .chart__gradient.color-index-graph-10 .begin {\n  stop-color: #501EB4;\n}\n\n.chart--area .chart__gradient.color-index-graph-5 .mid, .chart--area .chart__gradient.color-index-graph-10 .mid, .chart--bar .chart__gradient.color-index-graph-5 .mid, .chart--bar .chart__gradient.color-index-graph-10 .mid {\n  stop-color: #501EB4;\n  stop-opacity: 0.5;\n}\n\n.chart--area .chart__gradient.color-index-graph-5 .end, .chart--area .chart__gradient.color-index-graph-10 .end, .chart--bar .chart__gradient.color-index-graph-5 .end, .chart--bar .chart__gradient.color-index-graph-10 .end {\n  stop-color: #501EB4;\n  stop-opacity: 0;\n}\n\n.chart--small .chart__graphic {\n  height: 96px;\n}\n\n.chart--large .chart__graphic {\n  height: 288px;\n}\n\n.chart--sparkline {\n  display: inline-block;\n  margin-right: 6px;\n}\n\n.chart--sparkline .chart__graphic {\n  width: auto;\n  height: 24px;\n}\n\n.chart--sparkline .chart__values-bar.color-index-unset, .chart--sparkline .chart__values-area.color-index-unset {\n  fill: #ddd;\n}\n\n.chart--sparkline .chart__values-bar.color-index-brand, .chart--sparkline .chart__values-area.color-index-brand {\n  fill: #865CD6;\n}\n\n.chart--sparkline .chart__values-bar.color-index-critical, .chart--sparkline .chart__values-area.color-index-critical {\n  fill: #FF324D;\n}\n\n.chart--sparkline .chart__values-bar.color-index-error, .chart--sparkline .chart__values-area.color-index-error {\n  fill: #FF324D;\n}\n\n.chart--sparkline .chart__values-bar.color-index-warning, .chart--sparkline .chart__values-area.color-index-warning {\n  fill: #FFD602;\n}\n\n.chart--sparkline .chart__values-bar.color-index-ok, .chart--sparkline .chart__values-area.color-index-ok {\n  fill: #8CC800;\n}\n\n.chart--sparkline .chart__values-bar.color-index-unknown, .chart--sparkline .chart__values-area.color-index-unknown {\n  fill: #a8a8a8;\n}\n\n.chart--sparkline .chart__values-bar.color-index-disabled, .chart--sparkline .chart__values-area.color-index-disabled {\n  fill: #a8a8a8;\n}\n\n.chart--sparkline .chart__values-bar.color-index-graph-1, .chart--sparkline .chart__values-bar.color-index-graph-6, .chart--sparkline .chart__values-area.color-index-graph-1, .chart--sparkline .chart__values-area.color-index-graph-6 {\n  fill: #00CCEB;\n}\n\n.chart--sparkline .chart__values-bar.color-index-graph-2, .chart--sparkline .chart__values-bar.color-index-graph-7, .chart--sparkline .chart__values-area.color-index-graph-2, .chart--sparkline .chart__values-area.color-index-graph-7 {\n  fill: #FF7D28;\n}\n\n.chart--sparkline .chart__values-bar.color-index-graph-3, .chart--sparkline .chart__values-bar.color-index-graph-8, .chart--sparkline .chart__values-area.color-index-graph-3, .chart--sparkline .chart__values-area.color-index-graph-8 {\n  fill: #0A64A0;\n}\n\n.chart--sparkline .chart__values-bar.color-index-graph-4, .chart--sparkline .chart__values-bar.color-index-graph-9, .chart--sparkline .chart__values-area.color-index-graph-4, .chart--sparkline .chart__values-area.color-index-graph-9 {\n  fill: #DC2878;\n}\n\n.chart--sparkline .chart__values-bar.color-index-graph-5, .chart--sparkline .chart__values-bar.color-index-graph-10, .chart--sparkline .chart__values-area.color-index-graph-5, .chart--sparkline .chart__values-area.color-index-graph-10 {\n  fill: #501EB4;\n}\n\n.chart--sparkline .chart__values-bar.color-index-accent-1, .chart--sparkline .chart__values-bar.color-index-accent-3, .chart--sparkline .chart__values-area.color-index-accent-1, .chart--sparkline .chart__values-area.color-index-accent-3 {\n  fill: #00CCEB;\n}\n\n.chart--sparkline .chart__values-bar.color-index-accent-2, .chart--sparkline .chart__values-bar.color-index-accent-4, .chart--sparkline .chart__values-area.color-index-accent-2, .chart--sparkline .chart__values-area.color-index-accent-4 {\n  fill: #FF7D28;\n}\n\n.chart--sparkline .chart__values-bar.color-index-grey-1, .chart--sparkline .chart__values-bar.color-index-grey-5, .chart--sparkline .chart__values-area.color-index-grey-1, .chart--sparkline .chart__values-area.color-index-grey-5 {\n  fill: #333333;\n}\n\n.chart--sparkline .chart__values-bar.color-index-grey-2, .chart--sparkline .chart__values-bar.color-index-grey-6, .chart--sparkline .chart__values-area.color-index-grey-2, .chart--sparkline .chart__values-area.color-index-grey-6 {\n  fill: #3B3B3B;\n}\n\n.chart--sparkline .chart__values-bar.color-index-grey-3, .chart--sparkline .chart__values-bar.color-index-grey-7, .chart--sparkline .chart__values-area.color-index-grey-3, .chart--sparkline .chart__values-area.color-index-grey-7 {\n  fill: #434343;\n}\n\n.chart--sparkline .chart__values-bar.color-index-grey-4, .chart--sparkline .chart__values-bar.color-index-grey-8, .chart--sparkline .chart__values-area.color-index-grey-4, .chart--sparkline .chart__values-area.color-index-grey-8 {\n  fill: #666666;\n}\n\n@-webkit-keyframes draw-meter {\n  0% {\n    stroke-dashoffset: 192px;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n@keyframes draw-meter {\n  0% {\n    stroke-dashoffset: 192px;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n@-webkit-keyframes draw-arc {\n  0% {\n    stroke-dashoffset: -192px;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n@keyframes draw-arc {\n  0% {\n    stroke-dashoffset: -192px;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n\n.meter {\n  display: inline-block;\n  position: relative;\n}\n\n.meter__slice {\n  stroke-width: 4px;\n}\n\n.meter__threshold {\n  stroke: rgba(51, 51, 51, 0.2);\n}\n\n.meter__value-container {\n  position: relative;\n  display: inline-block;\n}\n\n.meter__graphic-container {\n  white-space: normal;\n}\n\n.meter__graphic-container > a {\n  text-decoration: none;\n}\n\n.meter__graphic:focus {\n  outline: #00CCEB solid 1px;\n}\n\n.meter__graphic text {\n  fill: #777;\n}\n\n.meter__value {\n  white-space: normal;\n  pointer-events: none;\n}\n\n.meter__value--active {\n  pointer-events: auto;\n  cursor: pointer;\n}\n\n.meter__value-value {\n  font-size: 36px;\n  font-size: 2.25rem;\n  line-height: 38px;\n  font-weight: bold;\n}\n\n.meter__value-units {\n  font-size: 24px;\n  font-size: 1.5rem;\n  line-height: inherit;\n  margin-left: 6px;\n  color: #777;\n  font-weight: normal;\n}\n\nhtml.rtl .meter__value-units {\n  margin-left: 0;\n  margin-right: 6px;\n}\n\n.meter__value-label {\n  display: block;\n}\n\n.meter__minmax-container {\n  display: block;\n}\n\n.meter__minmax {\n  display: flex;\n  justify-content: space-between;\n  color: #777;\n  font-size: 14px;\n  font-size: 0.875rem;\n  line-height: 1.71429;\n}\n\n.meter__label-min,\n.meter__label-max {\n  flex: 0 0 48px;\n}\n\n.meter__label-max {\n  text-align: right;\n}\n\n.meter__label {\n  fill: #777;\n}\n\n.meter__label--active {\n  fill: #000;\n}\n\n.meter--legend-right {\n  white-space: nowrap;\n}\n\n.meter--legend-right .meter__legend {\n  vertical-align: top;\n  margin-left: 24px;\n}\n\nhtml.rtl .meter--legend-right .meter__legend {\n  margin-left: 0;\n  margin-right: 24px;\n}\n\n.meter--legend-right:not(.meter--tall-legend) .meter__legend {\n  position: relative;\n  -webkit-transform: translateY(-50%);\n  transform: translateY(-50%);\n}\n\n.meter--legend-bottom .meter__legend {\n  margin-top: 24px;\n  display: block;\n}\n\n.meter--legend-bottom.meter--legend-align-center .meter__legend {\n  text-align: center;\n}\n\n.meter:not(.meter--vertical) .meter__graphic-container {\n  display: inline-block;\n}\n\n.meter:not(.meter--vertical) .meter__minmax-container {\n  display: block;\n  width: 192px;\n}\n\n.meter:not(.meter--vertical) .meter__minmax {\n  width: 100%;\n}\n\n.meter:not(.meter--vertical).meter--small .meter__minmax-container {\n  width: 96px;\n}\n\n.meter:not(.meter--vertical).meter--large .meter__minmax-container {\n  width: 288px;\n}\n\n.meter--vertical .meter__graphic-container {\n  display: inline-block;\n  white-space: nowrap;\n}\n\n.meter--vertical .meter__minmax-container {\n  height: 192px;\n}\n\n.meter--vertical .meter__minmax {\n  flex-direction: column;\n  height: 100%;\n}\n\n.meter--vertical .meter__minmax-min {\n  order: 1;\n}\n\n.meter--vertical .meter__minmax-max {\n  order: 0;\n}\n\n.meter--vertical .meter__label-min,\n.meter--vertical .meter__label-max {\n  flex: 0 0 auto;\n  text-align: left;\n}\n\n.meter--vertical .meter__label-min {\n  order: 1;\n}\n\n.meter--vertical .meter__label-max {\n  order: 0;\n}\n\n.meter--vertical .meter__value-label {\n  display: block;\n}\n\n.meter--vertical.meter--small .meter__minmax-container {\n  height: 96px;\n}\n\n.meter--vertical.meter--large .meter__minmax-container {\n  height: 288px;\n}\n\n.meter--small .meter__slice {\n  stroke-width: 8px;\n}\n\n.meter--small .meter__values .meter__slice:hover {\n  stroke-width: 24px;\n}\n\n.meter--small .meter__value-value {\n  font-size: 20px;\n  font-size: 1.25rem;\n  line-height: 1.2;\n}\n\n.meter--small .meter__value-units {\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.meter--large .meter__value-value {\n  font-size: 64px;\n  font-size: 4rem;\n  line-height: 1.125;\n}\n\n.meter--large .meter__value-units {\n  font-size: 48px;\n  font-size: 3rem;\n  line-height: 1;\n}\n\n.meter--active .meter__values .meter__slice:hover {\n  stroke-width: 12px;\n}\n\n.meter--active:not(.meter--single) .meter__values .meter__slice.meter__slice--active {\n  stroke-width: 12px;\n}\n\n.meter--bar .meter__slice {\n  stroke-linecap: butt;\n  stroke-dasharray: 192px 192px;\n  stroke-dashoffset: 0;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-loading {\n  stroke: #ddd;\n  stroke-dasharray: 1px 10px;\n  stroke-dashoffset: 0;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-unset {\n  stroke: #ddd;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-brand {\n  stroke: #865CD6;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-critical {\n  stroke: #FF324D;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-error {\n  stroke: #FF324D;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-warning {\n  stroke: #FFD602;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-ok {\n  stroke: #8CC800;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-unknown {\n  stroke: #a8a8a8;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-disabled {\n  stroke: #a8a8a8;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-graph-1, .meter--bar .meter__values .meter__slice.color-index-graph-6 {\n  stroke: #00CCEB;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-graph-2, .meter--bar .meter__values .meter__slice.color-index-graph-7 {\n  stroke: #FF7D28;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-graph-3, .meter--bar .meter__values .meter__slice.color-index-graph-8 {\n  stroke: #0A64A0;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-graph-4, .meter--bar .meter__values .meter__slice.color-index-graph-9 {\n  stroke: #DC2878;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-graph-5, .meter--bar .meter__values .meter__slice.color-index-graph-10 {\n  stroke: #501EB4;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-grey-1, .meter--bar .meter__values .meter__slice.color-index-grey-5 {\n  stroke: #333333;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-grey-2, .meter--bar .meter__values .meter__slice.color-index-grey-6 {\n  stroke: #3B3B3B;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-grey-3, .meter--bar .meter__values .meter__slice.color-index-grey-7 {\n  stroke: #434343;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-grey-4, .meter--bar .meter__values .meter__slice.color-index-grey-8 {\n  stroke: #666666;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-accent-1, .meter--bar .meter__values .meter__slice.color-index-accent-3 {\n  stroke: #00CCEB;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-accent-2, .meter--bar .meter__values .meter__slice.color-index-accent-4 {\n  stroke: #FF7D28;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-light-1, .meter--bar .meter__values .meter__slice.color-index-light-3 {\n  stroke: #ffffff;\n}\n\n.meter--bar .meter__values .meter__slice.color-index-light-2, .meter--bar .meter__values .meter__slice.color-index-light-4 {\n  stroke: #f5f5f5;\n}\n\n.meter--bar .meter__values .meter__slice--clickable {\n  cursor: pointer;\n}\n\n@media screen and (min-width: 45em) {\n  .meter--bar .meter__values .meter__slice {\n    transition: stroke-width 0.2s;\n    -webkit-animation: draw-meter 1.5s linear;\n    animation: draw-meter 1.5s linear;\n  }\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-unset,\n.meter--bar .meter__tracks .meter__slice.color-index-unset {\n  stroke: rgba(221, 221, 221, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-brand,\n.meter--bar .meter__tracks .meter__slice.color-index-brand {\n  stroke: rgba(134, 92, 214, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-critical,\n.meter--bar .meter__tracks .meter__slice.color-index-critical {\n  stroke: rgba(255, 50, 77, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-error,\n.meter--bar .meter__tracks .meter__slice.color-index-error {\n  stroke: rgba(255, 50, 77, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-warning,\n.meter--bar .meter__tracks .meter__slice.color-index-warning {\n  stroke: rgba(255, 214, 2, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-ok,\n.meter--bar .meter__tracks .meter__slice.color-index-ok {\n  stroke: rgba(140, 200, 0, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-unknown,\n.meter--bar .meter__tracks .meter__slice.color-index-unknown {\n  stroke: rgba(168, 168, 168, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-disabled,\n.meter--bar .meter__tracks .meter__slice.color-index-disabled {\n  stroke: rgba(168, 168, 168, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-graph-1, .meter--bar .meter__thresholds .meter__slice.color-index-graph-6,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-1,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-6 {\n  stroke: rgba(0, 204, 235, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-graph-2, .meter--bar .meter__thresholds .meter__slice.color-index-graph-7,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-2,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-7 {\n  stroke: rgba(255, 125, 40, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-graph-3, .meter--bar .meter__thresholds .meter__slice.color-index-graph-8,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-3,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-8 {\n  stroke: rgba(10, 100, 160, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-graph-4, .meter--bar .meter__thresholds .meter__slice.color-index-graph-9,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-4,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-9 {\n  stroke: rgba(220, 40, 120, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-graph-5, .meter--bar .meter__thresholds .meter__slice.color-index-graph-10,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-5,\n.meter--bar .meter__tracks .meter__slice.color-index-graph-10 {\n  stroke: rgba(80, 30, 180, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-accent-1, .meter--bar .meter__thresholds .meter__slice.color-index-accent-3,\n.meter--bar .meter__tracks .meter__slice.color-index-accent-1,\n.meter--bar .meter__tracks .meter__slice.color-index-accent-3 {\n  stroke: rgba(0, 204, 235, 0.5);\n}\n\n.meter--bar .meter__thresholds .meter__slice.color-index-accent-2, .meter--bar .meter__thresholds .meter__slice.color-index-accent-4,\n.meter--bar .meter__tracks .meter__slice.color-index-accent-2,\n.meter--bar .meter__tracks .meter__slice.color-index-accent-4 {\n  stroke: rgba(255, 125, 40, 0.5);\n}\n\n.meter--bar .meter__value {\n  text-align: left;\n}\n\n.meter--bar .meter__value-label {\n  font-size: 14px;\n  font-size: 0.875rem;\n  line-height: 16px;\n}\n\n.meter--bar.meter--vertical {\n  white-space: nowrap;\n}\n\n.meter--bar.meter--vertical svg.meter__graphic {\n  height: 192px;\n}\n\n.meter--bar.meter--vertical .meter__labeled-graphic {\n  display: inline-block;\n}\n\n.meter--bar.meter--vertical .meter__value {\n  position: relative;\n  vertical-align: top;\n  top: 96px;\n  -webkit-transform: translateY(-50%);\n  transform: translateY(-50%);\n  display: inline-block;\n}\n\n.meter--bar.meter--vertical .meter__minmax-container {\n  position: absolute;\n  top: 0px;\n  left: 24px;\n}\n\n.meter--bar.meter--vertical.meter--legend-right .meter__legend {\n  top: 96px;\n}\n\n.meter--bar.meter--vertical.meter--legend-right .meter__value {\n  min-width: 60px;\n}\n\n.meter--bar.meter--vertical.meter--small svg.meter__graphic {\n  height: 96px;\n}\n\n.meter--bar.meter--vertical.meter--small:not(.meter--stacked).meter--count-2 .meter__graphic {\n  width: 24px;\n}\n\n.meter--bar.meter--vertical.meter--small:not(.meter--stacked).meter--count-3 .meter__graphic {\n  width: 36px;\n}\n\n.meter--bar.meter--vertical.meter--small:not(.meter--stacked).meter--count-4 .meter__graphic {\n  width: 48px;\n}\n\n.meter--bar.meter--vertical.meter--small .meter__value {\n  top: 48px;\n}\n\n.meter--bar.meter--vertical.meter--small.meter--legend-right .meter__legend {\n  top: 48px;\n}\n\n.meter--bar.meter--vertical.meter--small.meter--legend-right .meter__value {\n  min-width: 42px;\n}\n\n.meter--bar.meter--vertical.meter--large svg.meter__graphic {\n  height: 288px;\n  width: 36px;\n}\n\n.meter--bar.meter--vertical.meter--large:not(.meter--stacked).meter--count-2 .meter__graphic {\n  width: 72px;\n}\n\n.meter--bar.meter--vertical.meter--large:not(.meter--stacked).meter--count-3 .meter__graphic {\n  width: 108px;\n}\n\n.meter--bar.meter--vertical.meter--large:not(.meter--stacked).meter--count-4 .meter__graphic {\n  width: 144px;\n}\n\n.meter--bar.meter--vertical.meter--large .meter__value {\n  top: 144px;\n}\n\n.meter--bar.meter--vertical.meter--large.meter--legend-right .meter__legend {\n  top: 144px;\n}\n\n.meter--bar:not(.meter--vertical) .meter__minmax-container > a {\n  vertical-align: top;\n  display: block;\n  height: 24px;\n}\n\n.meter--bar:not(.meter--vertical) .meter__graphic {\n  width: 192px;\n}\n\n.meter--bar:not(.meter--vertical) .meter__value {\n  display: inline-block;\n  vertical-align: top;\n  margin-left: 12px;\n}\n\nhtml.rtl .meter--bar:not(.meter--vertical) .meter__value {\n  margin-left: 0;\n  margin-right: 12px;\n}\n\n.meter--bar:not(.meter--vertical) .meter__value-value {\n  font-size: 24px;\n  font-size: 1.5rem;\n  line-height: 1;\n}\n\n.meter--bar:not(.meter--vertical) .meter__value-units {\n  font-size: 20px;\n  font-size: 1.25rem;\n  line-height: 1.2;\n}\n\n.meter--bar:not(.meter--vertical).meter--single .meter__value-label, .meter--bar:not(.meter--vertical).meter--stacked .meter__value-label {\n  display: inline-block;\n  margin-left: 4px;\n}\n\nhtml.rtl .meter--bar:not(.meter--vertical).meter--single .meter__value-label, html.rtl .meter--bar:not(.meter--vertical).meter--stacked .meter__value-label {\n  margin-left: 0;\n  margin-right: 4px;\n}\n\n.meter--bar:not(.meter--vertical).meter--single.meter--legend-right .meter__value, .meter--bar:not(.meter--vertical).meter--stacked.meter--legend-right .meter__value {\n  min-width: 84px;\n}\n\n.meter--bar:not(.meter--vertical).meter--legend-right .meter__legend {\n  top: 0px;\n  -webkit-transform: none;\n  transform: none;\n}\n\n.meter--bar:not(.meter--vertical).meter--legend-right .meter__value {\n  min-width: 48px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small svg.meter__graphic {\n  width: 96px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small .meter__value-value,\n.meter--bar:not(.meter--vertical).meter--small .meter__value-units {\n  font-size: 16px;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.meter--bar:not(.meter--vertical).meter--small.meter--single svg.meter__graphic, .meter--bar:not(.meter--vertical).meter--small.meter--stacked svg.meter__graphic {\n  height: 12px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small:not(.meter--stacked).meter--count-2 .meter__graphic {\n  height: 24px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small:not(.meter--stacked).meter--count-3 .meter__graphic {\n  height: 36px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small:not(.meter--stacked).meter--count-4 .meter__graphic {\n  height: 48px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small.meter--legend-right .meter__value {\n  min-width: 42px;\n}\n\n.meter--bar:not(.meter--vertical).meter--small.meter--legend-right.meter--stacked .meter__value {\n  min-width: 72px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large {\n  line-height: 36px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large svg.meter__graphic {\n  width: 288px;\n  height: 36px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large:not(.meter--stacked).meter--count-2 .meter__graphic {\n  height: 72px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large:not(.meter--stacked).meter--count-3 .meter__graphic {\n  height: 108px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large:not(.meter--stacked).meter--count-4 .meter__graphic {\n  height: 144px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large .meter__value {\n  margin-left: 16px;\n}\n\nhtml.rtl .meter--bar:not(.meter--vertical).meter--large .meter__value {\n  margin-left: 0;\n  margin-right: 16px;\n}\n\n.meter--bar:not(.meter--vertical).meter--large .meter__value-value, .meter--bar:not(.meter--vertical).meter--large .meter__value-units {\n  font-size: 26px;\n  font-size: 1.625rem;\n  line-height: inherit;\n}\n\n@media screen and (max-width: 44.9375em) {\n  .meter--circle,\n  .meter--arc,\n  .meter--spiral {\n    margin: 0px auto;\n  }\n}\n\n.meter--circle svg.meter__graphic,\n.meter--arc svg.meter__graphic,\n.meter--spiral svg.meter__graphic {\n  display: block;\n}\n\n.meter--circle .meter.series-pre path,\n.meter--arc .meter.series-pre path,\n.meter--spiral .meter.series-pre path {\n  stroke-dashoffset: 768px;\n}\n\n.meter--circle .meter__slice,\n.meter--arc .meter__slice,\n.meter--spiral .meter__slice {\n  stroke-linecap: butt;\n  stroke-dasharray: 768px 768px;\n  stroke-dashoffset: 0;\n  fill: none;\n  stroke: rgba(51, 51, 51, 0.2);\n}\n\n.meter--circle .meter__slice-indicator,\n.meter--arc .meter__slice-indicator,\n.meter--spiral .meter__slice-indicator {\n  stroke-linecap: square;\n  stroke-width: 4px;\n  stroke: rgba(51, 51, 51, 0.2);\n}\n\n.meter--circle .meter__values .meter__slice.color-index-loading,\n.meter--arc .meter__values .meter__slice.color-index-loading,\n.meter--spiral .meter__values .meter__slice.color-index-loading {\n  stroke: #ddd;\n  stroke-dasharray: 1px 10px;\n  stroke-dashoffset: 0;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-unset,\n.meter--arc .meter__values .meter__slice.color-index-unset,\n.meter--spiral .meter__values .meter__slice.color-index-unset {\n  stroke: #ddd;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-brand,\n.meter--arc .meter__values .meter__slice.color-index-brand,\n.meter--spiral .meter__values .meter__slice.color-index-brand {\n  stroke: #865CD6;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-critical,\n.meter--arc .meter__values .meter__slice.color-index-critical,\n.meter--spiral .meter__values .meter__slice.color-index-critical {\n  stroke: #FF324D;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-error,\n.meter--arc .meter__values .meter__slice.color-index-error,\n.meter--spiral .meter__values .meter__slice.color-index-error {\n  stroke: #FF324D;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-warning,\n.meter--arc .meter__values .meter__slice.color-index-warning,\n.meter--spiral .meter__values .meter__slice.color-index-warning {\n  stroke: #FFD602;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-ok,\n.meter--arc .meter__values .meter__slice.color-index-ok,\n.meter--spiral .meter__values .meter__slice.color-index-ok {\n  stroke: #8CC800;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-unknown,\n.meter--arc .meter__values .meter__slice.color-index-unknown,\n.meter--spiral .meter__values .meter__slice.color-index-unknown {\n  stroke: #a8a8a8;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-disabled,\n.meter--arc .meter__values .meter__slice.color-index-disabled,\n.meter--spiral .meter__values .meter__slice.color-index-disabled {\n  stroke: #a8a8a8;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-graph-1, .meter--circle .meter__values .meter__slice.color-index-graph-6,\n.meter--arc .meter__values .meter__slice.color-index-graph-1,\n.meter--arc .meter__values .meter__slice.color-index-graph-6,\n.meter--spiral .meter__values .meter__slice.color-index-graph-1,\n.meter--spiral .meter__values .meter__slice.color-index-graph-6 {\n  stroke: #00CCEB;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-graph-2, .meter--circle .meter__values .meter__slice.color-index-graph-7,\n.meter--arc .meter__values .meter__slice.color-index-graph-2,\n.meter--arc .meter__values .meter__slice.color-index-graph-7,\n.meter--spiral .meter__values .meter__slice.color-index-graph-2,\n.meter--spiral .meter__values .meter__slice.color-index-graph-7 {\n  stroke: #FF7D28;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-graph-3, .meter--circle .meter__values .meter__slice.color-index-graph-8,\n.meter--arc .meter__values .meter__slice.color-index-graph-3,\n.meter--arc .meter__values .meter__slice.color-index-graph-8,\n.meter--spiral .meter__values .meter__slice.color-index-graph-3,\n.meter--spiral .meter__values .meter__slice.color-index-graph-8 {\n  stroke: #0A64A0;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-graph-4, .meter--circle .meter__values .meter__slice.color-index-graph-9,\n.meter--arc .meter__values .meter__slice.color-index-graph-4,\n.meter--arc .meter__values .meter__slice.color-index-graph-9,\n.meter--spiral .meter__values .meter__slice.color-index-graph-4,\n.meter--spiral .meter__values .meter__slice.color-index-graph-9 {\n  stroke: #DC2878;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-graph-5, .meter--circle .meter__values .meter__slice.color-index-graph-10,\n.meter--arc .meter__values .meter__slice.color-index-graph-5,\n.meter--arc .meter__values .meter__slice.color-index-graph-10,\n.meter--spiral .meter__values .meter__slice.color-index-graph-5,\n.meter--spiral .meter__values .meter__slice.color-index-graph-10 {\n  stroke: #501EB4;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-grey-1, .meter--circle .meter__values .meter__slice.color-index-grey-5,\n.meter--arc .meter__values .meter__slice.color-index-grey-1,\n.meter--arc .meter__values .meter__slice.color-index-grey-5,\n.meter--spiral .meter__values .meter__slice.color-index-grey-1,\n.meter--spiral .meter__values .meter__slice.color-index-grey-5 {\n  stroke: #333333;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-grey-2, .meter--circle .meter__values .meter__slice.color-index-grey-6,\n.meter--arc .meter__values .meter__slice.color-index-grey-2,\n.meter--arc .meter__values .meter__slice.color-index-grey-6,\n.meter--spiral .meter__values .meter__slice.color-index-grey-2,\n.meter--spiral .meter__values .meter__slice.color-index-grey-6 {\n  stroke: #3B3B3B;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-grey-3, .meter--circle .meter__values .meter__slice.color-index-grey-7,\n.meter--arc .meter__values .meter__slice.color-index-grey-3,\n.meter--arc .meter__values .meter__slice.color-index-grey-7,\n.meter--spiral .meter__values .meter__slice.color-index-grey-3,\n.meter--spiral .meter__values .meter__slice.color-index-grey-7 {\n  stroke: #434343;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-grey-4, .meter--circle .meter__values .meter__slice.color-index-grey-8,\n.meter--arc .meter__values .meter__slice.color-index-grey-4,\n.meter--arc .meter__values .meter__slice.color-index-grey-8,\n.meter--spiral .meter__values .meter__slice.color-index-grey-4,\n.meter--spiral .meter__values .meter__slice.color-index-grey-8 {\n  stroke: #666666;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-accent-1, .meter--circle .meter__values .meter__slice.color-index-accent-3,\n.meter--arc .meter__values .meter__slice.color-index-accent-1,\n.meter--arc .meter__values .meter__slice.color-index-accent-3,\n.meter--spiral .meter__values .meter__slice.color-index-accent-1,\n.meter--spiral .meter__values .meter__slice.color-index-accent-3 {\n  stroke: #00CCEB;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-accent-2, .meter--circle .meter__values .meter__slice.color-index-accent-4,\n.meter--arc .meter__values .meter__slice.color-index-accent-2,\n.meter--arc .meter__values .meter__slice.color-index-accent-4,\n.meter--spiral .meter__values .meter__slice.color-index-accent-2,\n.meter--spiral .meter__values .meter__slice.color-index-accent-4 {\n  stroke: #FF7D28;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-light-1, .meter--circle .meter__values .meter__slice.color-index-light-3,\n.meter--arc .meter__values .meter__slice.color-index-light-1,\n.meter--arc .meter__values .meter__slice.color-index-light-3,\n.meter--spiral .meter__values .meter__slice.color-index-light-1,\n.meter--spiral .meter__values .meter__slice.color-index-light-3 {\n  stroke: #ffffff;\n}\n\n.meter--circle .meter__values .meter__slice.color-index-light-2, .meter--circle .meter__values .meter__slice.color-index-light-4,\n.meter--arc .meter__values .meter__slice.color-index-light-2,\n.meter--arc .meter__values .meter__slice.color-index-light-4,\n.meter--spiral .meter__values .meter__slice.color-index-light-2,\n.meter--spiral .meter__values .meter__slice.color-index-light-4 {\n  stroke: #f5f5f5;\n}\n\n.meter--circle .meter__values .meter__slice--clickable,\n.meter--arc .meter__values .meter__slice--clickable,\n.meter--spiral .meter__values .meter__slice--clickable {\n  cursor: pointer;\n}\n\n@media screen and (min-width: 45em) {\n  .meter--circle .meter__values .meter__slice,\n  .meter--arc .meter__values .meter__slice,\n  .meter--spiral .meter__values .meter__slice {\n    transition: stroke-width 0.2s;\n    -webkit-animation: draw-arc 1.5s linear;\n    animation: draw-arc 1.5s linear;\n  }\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-unset,\n.meter--circle .meter__tracks .meter__slice.color-index-unset,\n.meter--arc .meter__thresholds .meter__slice.color-index-unset,\n.meter--arc .meter__tracks .meter__slice.color-index-unset,\n.meter--spiral .meter__thresholds .meter__slice.color-index-unset,\n.meter--spiral .meter__tracks .meter__slice.color-index-unset {\n  stroke: rgba(221, 221, 221, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-brand,\n.meter--circle .meter__tracks .meter__slice.color-index-brand,\n.meter--arc .meter__thresholds .meter__slice.color-index-brand,\n.meter--arc .meter__tracks .meter__slice.color-index-brand,\n.meter--spiral .meter__thresholds .meter__slice.color-index-brand,\n.meter--spiral .meter__tracks .meter__slice.color-index-brand {\n  stroke: rgba(134, 92, 214, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-critical,\n.meter--circle .meter__tracks .meter__slice.color-index-critical,\n.meter--arc .meter__thresholds .meter__slice.color-index-critical,\n.meter--arc .meter__tracks .meter__slice.color-index-critical,\n.meter--spiral .meter__thresholds .meter__slice.color-index-critical,\n.meter--spiral .meter__tracks .meter__slice.color-index-critical {\n  stroke: rgba(255, 50, 77, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-error,\n.meter--circle .meter__tracks .meter__slice.color-index-error,\n.meter--arc .meter__thresholds .meter__slice.color-index-error,\n.meter--arc .meter__tracks .meter__slice.color-index-error,\n.meter--spiral .meter__thresholds .meter__slice.color-index-error,\n.meter--spiral .meter__tracks .meter__slice.color-index-error {\n  stroke: rgba(255, 50, 77, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-warning,\n.meter--circle .meter__tracks .meter__slice.color-index-warning,\n.meter--arc .meter__thresholds .meter__slice.color-index-warning,\n.meter--arc .meter__tracks .meter__slice.color-index-warning,\n.meter--spiral .meter__thresholds .meter__slice.color-index-warning,\n.meter--spiral .meter__tracks .meter__slice.color-index-warning {\n  stroke: rgba(255, 214, 2, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-ok,\n.meter--circle .meter__tracks .meter__slice.color-index-ok,\n.meter--arc .meter__thresholds .meter__slice.color-index-ok,\n.meter--arc .meter__tracks .meter__slice.color-index-ok,\n.meter--spiral .meter__thresholds .meter__slice.color-index-ok,\n.meter--spiral .meter__tracks .meter__slice.color-index-ok {\n  stroke: rgba(140, 200, 0, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-unknown,\n.meter--circle .meter__tracks .meter__slice.color-index-unknown,\n.meter--arc .meter__thresholds .meter__slice.color-index-unknown,\n.meter--arc .meter__tracks .meter__slice.color-index-unknown,\n.meter--spiral .meter__thresholds .meter__slice.color-index-unknown,\n.meter--spiral .meter__tracks .meter__slice.color-index-unknown {\n  stroke: rgba(168, 168, 168, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-disabled,\n.meter--circle .meter__tracks .meter__slice.color-index-disabled,\n.meter--arc .meter__thresholds .meter__slice.color-index-disabled,\n.meter--arc .meter__tracks .meter__slice.color-index-disabled,\n.meter--spiral .meter__thresholds .meter__slice.color-index-disabled,\n.meter--spiral .meter__tracks .meter__slice.color-index-disabled {\n  stroke: rgba(168, 168, 168, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-graph-1, .meter--circle .meter__thresholds .meter__slice.color-index-graph-6,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-1,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-6,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-1,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-6,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-1,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-6,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-1,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-6,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-1,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-6 {\n  stroke: rgba(0, 204, 235, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-graph-2, .meter--circle .meter__thresholds .meter__slice.color-index-graph-7,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-2,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-7,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-2,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-7,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-2,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-7,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-2,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-7,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-2,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-7 {\n  stroke: rgba(255, 125, 40, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-graph-3, .meter--circle .meter__thresholds .meter__slice.color-index-graph-8,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-3,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-8,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-3,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-8,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-3,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-8,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-3,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-8,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-3,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-8 {\n  stroke: rgba(10, 100, 160, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-graph-4, .meter--circle .meter__thresholds .meter__slice.color-index-graph-9,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-4,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-9,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-4,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-9,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-4,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-9,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-4,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-9,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-4,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-9 {\n  stroke: rgba(220, 40, 120, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-graph-5, .meter--circle .meter__thresholds .meter__slice.color-index-graph-10,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-5,\n.meter--circle .meter__tracks .meter__slice.color-index-graph-10,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-5,\n.meter--arc .meter__thresholds .meter__slice.color-index-graph-10,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-5,\n.meter--arc .meter__tracks .meter__slice.color-index-graph-10,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-5,\n.meter--spiral .meter__thresholds .meter__slice.color-index-graph-10,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-5,\n.meter--spiral .meter__tracks .meter__slice.color-index-graph-10 {\n  stroke: rgba(80, 30, 180, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-accent-1, .meter--circle .meter__thresholds .meter__slice.color-index-accent-3,\n.meter--circle .meter__tracks .meter__slice.color-index-accent-1,\n.meter--circle .meter__tracks .meter__slice.color-index-accent-3,\n.meter--arc .meter__thresholds .meter__slice.color-index-accent-1,\n.meter--arc .meter__thresholds .meter__slice.color-index-accent-3,\n.meter--arc .meter__tracks .meter__slice.color-index-accent-1,\n.meter--arc .meter__tracks .meter__slice.color-index-accent-3,\n.meter--spiral .meter__thresholds .meter__slice.color-index-accent-1,\n.meter--spiral .meter__thresholds .meter__slice.color-index-accent-3,\n.meter--spiral .meter__tracks .meter__slice.color-index-accent-1,\n.meter--spiral .meter__tracks .meter__slice.color-index-accent-3 {\n  stroke: rgba(0, 204, 235, 0.5);\n}\n\n.meter--circle .meter__thresholds .meter__slice.color-index-accent-2, .meter--circle .meter__thresholds .meter__slice.color-index-accent-4,\n.meter--circle .meter__tracks .meter__slice.color-index-accent-2,\n.meter--circle .meter__tracks .meter__slice.color-index-accent-4,\n.meter--arc .meter__thresholds .meter__slice.color-index-accent-2,\n.meter--arc .meter__thresholds .meter__slice.color-index-accent-4,\n.meter--arc .meter__tracks .meter__slice.color-index-accent-2,\n.meter--arc .meter__tracks .meter__slice.color-index-accent-4,\n.meter--spiral .meter__thresholds .meter__slice.color-index-accent-2,\n.meter--spiral .meter__thresholds .meter__slice.color-index-accent-4,\n.meter--spiral .meter__tracks .meter__slice.color-index-accent-2,\n.meter--spiral .meter__tracks .meter__slice.color-index-accent-4 {\n  stroke: rgba(255, 125, 40, 0.5);\n}\n\n.meter--circle .meter__threshold,\n.meter--arc .meter__threshold,\n.meter--spiral .meter__threshold {\n  stroke-linecap: butt;\n}\n\n.meter--circle .meter__value-label,\n.meter--arc .meter__value-label,\n.meter--spiral .meter__value-label {\n  display: block;\n}\n\n@media screen and (max-width: 44.9375em) {\n  .meter--circle,\n  .meter--arc {\n    width: 192px;\n  }\n}\n\n.meter--circle .meter__value,\n.meter--arc .meter__value {\n  white-space: normal;\n  pointer-events: none;\n  text-align: center;\n}\n\n.meter--circle .meter__value--active,\n.meter--arc .meter__value--active {\n  pointer-events: auto;\n  cursor: pointer;\n}\n\n.meter--circle .meter__minmax-container,\n.meter--arc:not(.meter--vertical) .meter__minmax-container {\n  width: 192px;\n}\n\n.meter--circle .meter__value,\n.meter--arc:not(.meter--vertical) .meter__value {\n  position: absolute;\n  left: 50%;\n}\n\n.meter--circle.meter--small .meter__minmax-container,\n.meter--arc:not(.meter--vertical).meter--small .meter__minmax-container {\n  width: 96px;\n}\n\n.meter--circle.meter--large .meter__minmax-container,\n.meter--arc:not(.meter--vertical).meter--large .meter__minmax-container {\n  width: 288px;\n}\n\n.meter--circle.meter--legend-right .meter__legend,\n.meter--arc.meter--vertical.meter--legend-right .meter__legend {\n  top: 96px;\n}\n\n.meter--circle.meter--legend-right.meter--small .meter__legend,\n.meter--arc.meter--vertical.meter--legend-right.meter--small .meter__legend {\n  top: 48px;\n}\n\n.meter--circle.meter--legend-right.meter--large .meter__legend,\n.meter--arc.meter--vertical.meter--legend-right.meter--large .meter__legend {\n  top: 144px;\n}\n\n.meter--circle svg.meter__graphic {\n  width: 192px;\n  height: 192px;\n}\n\n.meter--circle .meter__value {\n  top: 96px;\n  -webkit-transform: translateX(-50%) translateY(-50%);\n  transform: translateX(-50%) translateY(-50%);\n  max-width: 144px;\n}\n\n.meter--circle.meter--small svg.meter__graphic {\n  width: 96px;\n  height: 96px;\n}\n\n.meter--circle.meter--small .meter__value {\n  top: 48px;\n  max-width: 72px;\n}\n\n.meter--circle.meter--large svg.meter__graphic {\n  width: 288px;\n  height: 288px;\n}\n\n.meter--circle.meter--large .meter__value {\n  top: 144px;\n  max-width: 216px;\n}\n\n.meter--circle:not(.meter--stacked):not(.meter--single) .meter__value {\n  position: static;\n  margin: 0 auto;\n  -webkit-transform: none;\n  transform: none;\n}\n\n.meter--arc:not(.meter--vertical) svg.meter__graphic {\n  width: 192px;\n  height: 144px;\n}\n\n.meter--arc:not(.meter--vertical) .meter__value {\n  top: 108px;\n  -webkit-transform: translateX(-50%);\n  transform: translateX(-50%);\n  max-width: 120px;\n}\n\n.meter--arc:not(.meter--vertical).meter--legend-right .meter__legend {\n  top: 72px;\n}\n\n.meter--arc:not(.meter--vertical).meter--small svg.meter__graphic {\n  width: 96px;\n  height: 72px;\n}\n\n.meter--arc:not(.meter--vertical).meter--small .meter__value {\n  top: 60px;\n  max-width: 60px;\n}\n\n.meter--arc:not(.meter--vertical).meter--large svg.meter__graphic {\n  width: 288px;\n  height: 216px;\n}\n\n.meter--arc:not(.meter--vertical).meter--large .meter__value {\n  top: 156px;\n  max-width: 180px;\n}\n\n.meter--arc.meter--vertical svg.meter__graphic {\n  display: inline;\n  width: 144px;\n  height: 192px;\n}\n\n.meter--arc.meter--vertical .meter__value {\n  position: relative;\n  top: 96px;\n  -webkit-transform: translateY(-50%);\n  transform: translateY(-50%);\n  display: inline-block;\n  margin-left: -24px;\n  vertical-align: top;\n}\n\nhtml.rtl .meter--arc.meter--vertical .meter__value {\n  margin-left: 0;\n  margin-right: -24px;\n}\n\n.meter--arc.meter--vertical .meter__minmax-container {\n  display: inline-block;\n  vertical-align: top;\n  margin-left: 12px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\n\nhtml.rtl .meter--arc.meter--vertical .meter__minmax-container {\n  margin-left: 0;\n  margin-right: 12px;\n}\n\n.meter--arc.meter--vertical.meter--small svg.meter__graphic {\n  width: 72px;\n  height: 96px;\n}\n\n.meter--arc.meter--vertical.meter--small .meter__value {\n  top: 48px;\n  margin-left: -12px;\n}\n\nhtml.rtl .meter--arc.meter--vertical.meter--small .meter__value {\n  margin-left: 0;\n  margin-right: -12px;\n}\n\n.meter--arc.meter--vertical.meter--small .meter__minmax-container {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n\n.meter--arc.meter--vertical.meter--large svg.meter__graphic {\n  width: 216px;\n  height: 288px;\n}\n\n.meter--arc.meter--vertical.meter--large .meter__value {\n  top: 144px;\n  margin-left: -48px;\n}\n\nhtml.rtl .meter--arc.meter--vertical.meter--large .meter__value {\n  margin-left: 0;\n  margin-right: -48px;\n}\n\n.meter--arc.meter--vertical.meter--minmax .meter__value {\n  margin-left: -72px;\n}\n\nhtml.rtl .meter--arc.meter--vertical.meter--minmax .meter__value {\n  margin-left: 0;\n  margin-right: -72px;\n}\n\n.meter--arc.meter--vertical.meter--minmax.meter--small .meter__value {\n  margin-left: -60px;\n}\n\nhtml.rtl .meter--arc.meter--vertical.meter--minmax.meter--small .meter__value {\n  margin-left: 0;\n  margin-right: -60px;\n}\n\n.meter--arc.meter--vertical.meter--legend-right.meter--small .meter__value {\n  min-width: 78px;\n}\n\n.meter--arc.meter--vertical.meter--legend-right .meter__value {\n  min-width: 120px;\n}\n\n.meter--spiral .meter__value {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  white-space: normal;\n  text-align: right;\n}\n\n.meter--spiral .meter__value-value {\n  display: block;\n  font-size: 24px;\n  font-size: 1.5rem;\n  line-height: 1;\n  margin-bottom: 6px;\n}\n\n.meter--spiral .meter__value-units {\n  font-size: 20px;\n  font-size: 1.25rem;\n  line-height: 1.2;\n  color: #777;\n  margin-left: 0.2em;\n}\n\nhtml.rtl .meter--spiral .meter__value-units {\n  margin-left: 0;\n  margin-right: 0.2em;\n}\n\n.meter--spiral .meter__value-label {\n  display: block;\n  font-size: 14px;\n  font-size: 0.875rem;\n  line-height: 16px;\n}\n\n.meter--loading .meter__thresholds,\n.meter--loading .meter__value {\n  display: none;\n}\n\n.legend {\n  text-align: left;\n  list-style-type: none;\n  white-space: normal;\n  display: inline-block;\n  margin: 0px;\n  line-height: 24px;\n}\n\nhtml.rtl .legend {\n  text-align: right;\n}\n\n.legend__item,\n.legend__total {\n  color: #777;\n}\n\n.legend__item > *,\n.legend__total > * {\n  vertical-align: top;\n}\n\n.legend__item-label,\n.legend__total-label {\n  display: inline-block;\n  min-width: 72px;\n  text-align: left;\n}\n\n.legend__item-value,\n.legend__total-value {\n  display: inline-block;\n  width: 72px;\n  text-align: right;\n}\n\nhtml.rtl .legend__item-value, html.rtl\n.legend__total-value {\n  text-align: left;\n}\n\n.legend__item-units,\n.legend__total-units {\n  display: inline-block;\n  margin-left: 6px;\n}\n\nhtml.rtl .legend__item-units, html.rtl\n.legend__total-units {\n  margin-left: 0;\n  margin-right: 6px;\n}\n\n.legend__item svg.legend__item-swatch {\n  width: 12px;\n  height: 12px;\n  margin-top: 6px;\n  margin-right: 12px;\n  overflow: visible;\n}\n\n.legend__item svg.legend__item-swatch.color-index-loading {\n  stroke: #ddd;\n  stroke-dasharray: 1px 10px;\n  stroke-dashoffset: 0;\n}\n\n.legend__item svg.legend__item-swatch.color-index-unset {\n  stroke: #ddd;\n}\n\n.legend__item svg.legend__item-swatch.color-index-brand {\n  stroke: #865CD6;\n}\n\n.legend__item svg.legend__item-swatch.color-index-critical {\n  stroke: #FF324D;\n}\n\n.legend__item svg.legend__item-swatch.color-index-error {\n  stroke: #FF324D;\n}\n\n.legend__item svg.legend__item-swatch.color-index-warning {\n  stroke: #FFD602;\n}\n\n.legend__item svg.legend__item-swatch.color-index-ok {\n  stroke: #8CC800;\n}\n\n.legend__item svg.legend__item-swatch.color-index-unknown {\n  stroke: #a8a8a8;\n}\n\n.legend__item svg.legend__item-swatch.color-index-disabled {\n  stroke: #a8a8a8;\n}\n\n.legend__item svg.legend__item-swatch.color-index-graph-1, .legend__item svg.legend__item-swatch.color-index-graph-6 {\n  stroke: #00CCEB;\n}\n\n.legend__item svg.legend__item-swatch.color-index-graph-2, .legend__item svg.legend__item-swatch.color-index-graph-7 {\n  stroke: #FF7D28;\n}\n\n.legend__item svg.legend__item-swatch.color-index-graph-3, .legend__item svg.legend__item-swatch.color-index-graph-8 {\n  stroke: #0A64A0;\n}\n\n.legend__item svg.legend__item-swatch.color-index-graph-4, .legend__item svg.legend__item-swatch.color-index-graph-9 {\n  stroke: #DC2878;\n}\n\n.legend__item svg.legend__item-swatch.color-index-graph-5, .legend__item svg.legend__item-swatch.color-index-graph-10 {\n  stroke: #501EB4;\n}\n\n.legend__item svg.legend__item-swatch.color-index-grey-1, .legend__item svg.legend__item-swatch.color-index-grey-5 {\n  stroke: #333333;\n}\n\n.legend__item svg.legend__item-swatch.color-index-grey-2, .legend__item svg.legend__item-swatch.color-index-grey-6 {\n  stroke: #3B3B3B;\n}\n\n.legend__item svg.legend__item-swatch.color-index-grey-3, .legend__item svg.legend__item-swatch.color-index-grey-7 {\n  stroke: #434343;\n}\n\n.legend__item svg.legend__item-swatch.color-index-grey-4, .legend__item svg.legend__item-swatch.color-index-grey-8 {\n  stroke: #666666;\n}\n\n.legend__item svg.legend__item-swatch.color-index-accent-1, .legend__item svg.legend__item-swatch.color-index-accent-3 {\n  stroke: #00CCEB;\n}\n\n.legend__item svg.legend__item-swatch.color-index-accent-2, .legend__item svg.legend__item-swatch.color-index-accent-4 {\n  stroke: #FF7D28;\n}\n\n.legend__item svg.legend__item-swatch.color-index-light-1, .legend__item svg.legend__item-swatch.color-index-light-3 {\n  stroke: #ffffff;\n}\n\n.legend__item svg.legend__item-swatch.color-index-light-2, .legend__item svg.legend__item-swatch.color-index-light-4 {\n  stroke: #f5f5f5;\n}\n\nhtml.rtl .legend__item svg.legend__item-swatch {\n  margin-right: 0;\n  margin-left: 12px;\n}\n\n.legend__item svg.legend__item-swatch path {\n  stroke-width: 12px;\n  transition-property: stroke-width;\n  transition-duration: 0.3s;\n  transition-timing-function: ease-in-out;\n}\n\n.legend__item--clickable {\n  cursor: pointer;\n}\n\n.legend__item--active {\n  color: #333;\n}\n\n.legend__item--active svg.legend__item-swatch path {\n  stroke-width: 12px;\n}\n\n[class*=\"background-color-index-\"]:not([class*=\"background-color-index-accent\"]):not([class*=\"background-color-index-light\"]):not([class*=\"background-color-index-warning\"]):not([class*=\"background-color-index-disabled\"]):not([class*=\"background-color-index-unknown\"]) .legend__item--active {\n  color: #fff;\n}\n\nli.legend__total {\n  margin-left: 24px;\n}\n\nhtml.rtl li.legend__total {\n  margin-left: 0;\n  margin-right: 24px;\n}\n\nli.legend__total > * {\n  margin-top: 6px;\n  padding-top: 6px;\n  border-top: 1px dotted rgba(0, 0, 0, 0.15);\n}\n\n.legend--single .legend__item-value {\n  font-size: 36px;\n  font-size: 2.25rem;\n  line-height: 1.33333;\n  font-weight: bold;\n  width: auto;\n}\n\n.legend--single .legend__item-units {\n  font-size: 24px;\n  font-size: 1.5rem;\n  line-height: inherit;\n  margin-left: 6px;\n  color: #777;\n  font-weight: normal;\n}\n\nhtml.rtl .legend--single .legend__item-units {\n  margin-left: 0;\n  margin-right: 6px;\n}\n\n.chart__legend--overlay {\n  border-radius: 5px;\n}\n\n.layer--hidden {\n  display: none;\n}\n\n.chart__graphic:focus, .meter__graphic:focus {\n  outline: none;\n}\n\n.meter--circle svg.meter__graphic {\n  width: 140px;\n  height: 140px;\n}\n\n.meter--circle .meter__value {\n  top: 70px;\n}\n\n.meter__slice {\n  stroke-width: 6px;\n}\n\n.meter__value-value.large-number-font span {\n  font-size: 24px;\n}\n\n.meter__value-value.large-number-font .meter__value-units.large-number-font {\n  font-size: 16px;\n  margin-left: 2px;\n}\n\n.legend--single .legend__item-value span {\n  font-size: 30px;\n}\n\n.legend__item-label, .legend__total-label {\n  font-size: 18px;\n}\n\n.legend__item-value span {\n  font-size: 30px;\n}\n\n.happiness.heading {\n  display: block;\n  text-transform: uppercase;\n  margin-top: 10px;\n  text-align: center;\n}\n\n.happiness.container {\n  display: block;\n  position: relative;\n  border-radius: 50%;\n  background-color: #fafafa;\n  border: 3px solid #cacaca;\n  width: 75px;\n  height: 75px;\n  margin: 10px auto;\n}\n\n.happiness.container .score {\n  position: absolute;\n  top: 16px;\n  left: 0;\n  font-size: 24px;\n  width: 69px;\n  text-align: center;\n}\n", ""]);

	// exports


/***/ },
/* 175 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(178);


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(179);
	var ReactDOMServer = __webpack_require__(323);
	var ReactIsomorphic = __webpack_require__(327);

	var assign = __webpack_require__(214);
	var deprecated = __webpack_require__(332);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(180);
	var ReactDOMTextComponent = __webpack_require__(181);
	var ReactDefaultInjection = __webpack_require__(246);
	var ReactInstanceHandles = __webpack_require__(220);
	var ReactMount = __webpack_require__(203);
	var ReactPerf = __webpack_require__(193);
	var ReactReconciler = __webpack_require__(225);
	var ReactUpdates = __webpack_require__(229);
	var ReactVersion = __webpack_require__(321);

	var findDOMNode = __webpack_require__(266);
	var renderSubtreeIntoContainer = __webpack_require__(322);
	var warning = __webpack_require__(200);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(184);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(182);
	var DOMPropertyOperations = __webpack_require__(197);
	var ReactComponentBrowserEnvironment = __webpack_require__(201);
	var ReactMount = __webpack_require__(203);

	var assign = __webpack_require__(214);
	var escapeTextContentForBrowser = __webpack_require__(196);
	var setTextContent = __webpack_require__(195);
	var validateDOMNesting = __webpack_require__(245);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(183);
	var ReactMultiChildUpdateTypes = __webpack_require__(191);
	var ReactPerf = __webpack_require__(193);

	var setInnerHTML = __webpack_require__(194);
	var setTextContent = __webpack_require__(195);
	var invariant = __webpack_require__(188);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var createNodesFromMarkup = __webpack_require__(185);
	var emptyFunction = __webpack_require__(190);
	var getMarkupWrap = __webpack_require__(189);
	var invariant = __webpack_require__(188);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 184 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var createArrayFromMixed = __webpack_require__(186);
	var getMarkupWrap = __webpack_require__(189);
	var invariant = __webpack_require__(188);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(187);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var invariant = __webpack_require__(188);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 190 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(192);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);
	var escapeTextContentForBrowser = __webpack_require__(196);
	var setInnerHTML = __webpack_require__(194);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 196 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(198);
	var ReactPerf = __webpack_require__(193);

	var quoteAttributeValueForBrowser = __webpack_require__(199);
	var warning = __webpack_require__(200);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(196);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(190);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(202);
	var ReactMount = __webpack_require__(203);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(182);
	var DOMPropertyOperations = __webpack_require__(197);
	var ReactMount = __webpack_require__(203);
	var ReactPerf = __webpack_require__(193);

	var invariant = __webpack_require__(188);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(198);
	var ReactBrowserEventEmitter = __webpack_require__(204);
	var ReactCurrentOwner = __webpack_require__(180);
	var ReactDOMFeatureFlags = __webpack_require__(216);
	var ReactElement = __webpack_require__(217);
	var ReactEmptyComponentRegistry = __webpack_require__(219);
	var ReactInstanceHandles = __webpack_require__(220);
	var ReactInstanceMap = __webpack_require__(222);
	var ReactMarkupChecksum = __webpack_require__(223);
	var ReactPerf = __webpack_require__(193);
	var ReactReconciler = __webpack_require__(225);
	var ReactUpdateQueue = __webpack_require__(228);
	var ReactUpdates = __webpack_require__(229);

	var assign = __webpack_require__(214);
	var emptyObject = __webpack_require__(233);
	var containsNode = __webpack_require__(234);
	var instantiateReactComponent = __webpack_require__(237);
	var invariant = __webpack_require__(188);
	var setInnerHTML = __webpack_require__(194);
	var shouldUpdateReactComponent = __webpack_require__(242);
	var validateDOMNesting = __webpack_require__(245);
	var warning = __webpack_require__(200);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventPluginHub = __webpack_require__(206);
	var EventPluginRegistry = __webpack_require__(207);
	var ReactEventEmitterMixin = __webpack_require__(212);
	var ReactPerf = __webpack_require__(193);
	var ViewportMetrics = __webpack_require__(213);

	var assign = __webpack_require__(214);
	var isEventSupported = __webpack_require__(215);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(192);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(207);
	var EventPluginUtils = __webpack_require__(208);
	var ReactErrorUtils = __webpack_require__(209);

	var accumulateInto = __webpack_require__(210);
	var forEachAccumulated = __webpack_require__(211);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var ReactErrorUtils = __webpack_require__(209);

	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 211 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(206);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 213 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 214 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 216 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(180);

	var assign = __webpack_require__(214);
	var canDefineProperty = __webpack_require__(218);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 219 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(221);

	var invariant = __webpack_require__(188);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 221 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 222 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(224);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 224 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(226);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(227);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(180);
	var ReactElement = __webpack_require__(217);
	var ReactInstanceMap = __webpack_require__(222);
	var ReactUpdates = __webpack_require__(229);

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(230);
	var PooledClass = __webpack_require__(231);
	var ReactPerf = __webpack_require__(193);
	var ReactReconciler = __webpack_require__(225);
	var Transaction = __webpack_require__(232);

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(231);

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(235);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(236);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 236 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(238);
	var ReactEmptyComponent = __webpack_require__(243);
	var ReactNativeComponent = __webpack_require__(244);

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(239);
	var ReactCurrentOwner = __webpack_require__(180);
	var ReactElement = __webpack_require__(217);
	var ReactInstanceMap = __webpack_require__(222);
	var ReactPerf = __webpack_require__(193);
	var ReactPropTypeLocations = __webpack_require__(240);
	var ReactPropTypeLocationNames = __webpack_require__(241);
	var ReactReconciler = __webpack_require__(225);
	var ReactUpdateQueue = __webpack_require__(228);

	var assign = __webpack_require__(214);
	var emptyObject = __webpack_require__(233);
	var invariant = __webpack_require__(188);
	var shouldUpdateReactComponent = __webpack_require__(242);
	var warning = __webpack_require__(200);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(188);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(192);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 242 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(217);
	var ReactEmptyComponentRegistry = __webpack_require__(219);
	var ReactReconciler = __webpack_require__(225);

	var assign = __webpack_require__(214);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(214);
	var emptyFunction = __webpack_require__(190);
	var warning = __webpack_require__(200);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(247);
	var ChangeEventPlugin = __webpack_require__(255);
	var ClientReactRootIndex = __webpack_require__(258);
	var DefaultEventPluginOrder = __webpack_require__(259);
	var EnterLeaveEventPlugin = __webpack_require__(260);
	var ExecutionEnvironment = __webpack_require__(184);
	var HTMLDOMPropertyConfig = __webpack_require__(264);
	var ReactBrowserComponentMixin = __webpack_require__(265);
	var ReactComponentBrowserEnvironment = __webpack_require__(201);
	var ReactDefaultBatchingStrategy = __webpack_require__(267);
	var ReactDOMComponent = __webpack_require__(268);
	var ReactDOMTextComponent = __webpack_require__(181);
	var ReactEventListener = __webpack_require__(293);
	var ReactInjection = __webpack_require__(296);
	var ReactInstanceHandles = __webpack_require__(220);
	var ReactMount = __webpack_require__(203);
	var ReactReconcileTransaction = __webpack_require__(300);
	var SelectEventPlugin = __webpack_require__(305);
	var ServerReactRootIndex = __webpack_require__(306);
	var SimpleEventPlugin = __webpack_require__(307);
	var SVGDOMPropertyConfig = __webpack_require__(316);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(317);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventPropagators = __webpack_require__(248);
	var ExecutionEnvironment = __webpack_require__(184);
	var FallbackCompositionState = __webpack_require__(249);
	var SyntheticCompositionEvent = __webpack_require__(251);
	var SyntheticInputEvent = __webpack_require__(253);

	var keyOf = __webpack_require__(254);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventPluginHub = __webpack_require__(206);

	var warning = __webpack_require__(200);

	var accumulateInto = __webpack_require__(210);
	var forEachAccumulated = __webpack_require__(211);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(231);

	var assign = __webpack_require__(214);
	var getTextContentAccessor = __webpack_require__(250);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(252);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(231);

	var assign = __webpack_require__(214);
	var emptyFunction = __webpack_require__(190);
	var warning = __webpack_require__(200);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(252);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 254 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventPluginHub = __webpack_require__(206);
	var EventPropagators = __webpack_require__(248);
	var ExecutionEnvironment = __webpack_require__(184);
	var ReactUpdates = __webpack_require__(229);
	var SyntheticEvent = __webpack_require__(252);

	var getEventTarget = __webpack_require__(256);
	var isEventSupported = __webpack_require__(215);
	var isTextInputElement = __webpack_require__(257);
	var keyOf = __webpack_require__(254);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 256 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 257 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 258 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(254);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventPropagators = __webpack_require__(248);
	var SyntheticMouseEvent = __webpack_require__(261);

	var ReactMount = __webpack_require__(203);
	var keyOf = __webpack_require__(254);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(262);
	var ViewportMetrics = __webpack_require__(213);

	var getEventModifierState = __webpack_require__(263);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(252);

	var getEventTarget = __webpack_require__(256);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 263 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(198);
	var ExecutionEnvironment = __webpack_require__(184);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(222);

	var findDOMNode = __webpack_require__(266);
	var warning = __webpack_require__(200);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(180);
	var ReactInstanceMap = __webpack_require__(222);
	var ReactMount = __webpack_require__(203);

	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(229);
	var Transaction = __webpack_require__(232);

	var assign = __webpack_require__(214);
	var emptyFunction = __webpack_require__(190);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(269);
	var CSSPropertyOperations = __webpack_require__(271);
	var DOMProperty = __webpack_require__(198);
	var DOMPropertyOperations = __webpack_require__(197);
	var EventConstants = __webpack_require__(205);
	var ReactBrowserEventEmitter = __webpack_require__(204);
	var ReactComponentBrowserEnvironment = __webpack_require__(201);
	var ReactDOMButton = __webpack_require__(279);
	var ReactDOMInput = __webpack_require__(280);
	var ReactDOMOption = __webpack_require__(284);
	var ReactDOMSelect = __webpack_require__(287);
	var ReactDOMTextarea = __webpack_require__(288);
	var ReactMount = __webpack_require__(203);
	var ReactMultiChild = __webpack_require__(289);
	var ReactPerf = __webpack_require__(193);
	var ReactUpdateQueue = __webpack_require__(228);

	var assign = __webpack_require__(214);
	var canDefineProperty = __webpack_require__(218);
	var escapeTextContentForBrowser = __webpack_require__(196);
	var invariant = __webpack_require__(188);
	var isEventSupported = __webpack_require__(215);
	var keyOf = __webpack_require__(254);
	var setInnerHTML = __webpack_require__(194);
	var setTextContent = __webpack_require__(195);
	var shallowEqual = __webpack_require__(292);
	var validateDOMNesting = __webpack_require__(245);
	var warning = __webpack_require__(200);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(203);

	var findDOMNode = __webpack_require__(266);
	var focusNode = __webpack_require__(270);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 270 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(272);
	var ExecutionEnvironment = __webpack_require__(184);
	var ReactPerf = __webpack_require__(193);

	var camelizeStyleName = __webpack_require__(273);
	var dangerousStyleValue = __webpack_require__(275);
	var hyphenateStyleName = __webpack_require__(276);
	var memoizeStringOnly = __webpack_require__(278);
	var warning = __webpack_require__(200);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 272 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(274);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 274 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(272);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(277);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 277 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 278 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 279 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(202);
	var LinkedValueUtils = __webpack_require__(281);
	var ReactMount = __webpack_require__(203);
	var ReactUpdates = __webpack_require__(229);

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(282);
	var ReactPropTypeLocations = __webpack_require__(240);

	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(217);
	var ReactPropTypeLocationNames = __webpack_require__(241);

	var emptyFunction = __webpack_require__(190);
	var getIteratorFn = __webpack_require__(283);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 283 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(285);
	var ReactDOMSelect = __webpack_require__(287);

	var assign = __webpack_require__(214);
	var warning = __webpack_require__(200);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(231);
	var ReactElement = __webpack_require__(217);

	var emptyFunction = __webpack_require__(190);
	var traverseAllChildren = __webpack_require__(286);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(180);
	var ReactElement = __webpack_require__(217);
	var ReactInstanceHandles = __webpack_require__(220);

	var getIteratorFn = __webpack_require__(283);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(281);
	var ReactMount = __webpack_require__(203);
	var ReactUpdates = __webpack_require__(229);

	var assign = __webpack_require__(214);
	var warning = __webpack_require__(200);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(281);
	var ReactDOMIDOperations = __webpack_require__(202);
	var ReactUpdates = __webpack_require__(229);

	var assign = __webpack_require__(214);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(239);
	var ReactMultiChildUpdateTypes = __webpack_require__(191);

	var ReactCurrentOwner = __webpack_require__(180);
	var ReactReconciler = __webpack_require__(225);
	var ReactChildReconciler = __webpack_require__(290);

	var flattenChildren = __webpack_require__(291);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(225);

	var instantiateReactComponent = __webpack_require__(237);
	var shouldUpdateReactComponent = __webpack_require__(242);
	var traverseAllChildren = __webpack_require__(286);
	var warning = __webpack_require__(200);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(286);
	var warning = __webpack_require__(200);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 292 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(294);
	var ExecutionEnvironment = __webpack_require__(184);
	var PooledClass = __webpack_require__(231);
	var ReactInstanceHandles = __webpack_require__(220);
	var ReactMount = __webpack_require__(203);
	var ReactUpdates = __webpack_require__(229);

	var assign = __webpack_require__(214);
	var getEventTarget = __webpack_require__(256);
	var getUnboundedScrollPosition = __webpack_require__(295);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(190);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 295 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(198);
	var EventPluginHub = __webpack_require__(206);
	var ReactComponentEnvironment = __webpack_require__(239);
	var ReactClass = __webpack_require__(297);
	var ReactEmptyComponent = __webpack_require__(243);
	var ReactBrowserEventEmitter = __webpack_require__(204);
	var ReactNativeComponent = __webpack_require__(244);
	var ReactPerf = __webpack_require__(193);
	var ReactRootIndex = __webpack_require__(221);
	var ReactUpdates = __webpack_require__(229);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(298);
	var ReactElement = __webpack_require__(217);
	var ReactPropTypeLocations = __webpack_require__(240);
	var ReactPropTypeLocationNames = __webpack_require__(241);
	var ReactNoopUpdateQueue = __webpack_require__(299);

	var assign = __webpack_require__(214);
	var emptyObject = __webpack_require__(233);
	var invariant = __webpack_require__(188);
	var keyMirror = __webpack_require__(192);
	var keyOf = __webpack_require__(254);
	var warning = __webpack_require__(200);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(299);

	var canDefineProperty = __webpack_require__(218);
	var emptyObject = __webpack_require__(233);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(200);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(230);
	var PooledClass = __webpack_require__(231);
	var ReactBrowserEventEmitter = __webpack_require__(204);
	var ReactDOMFeatureFlags = __webpack_require__(216);
	var ReactInputSelection = __webpack_require__(301);
	var Transaction = __webpack_require__(232);

	var assign = __webpack_require__(214);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(302);

	var containsNode = __webpack_require__(234);
	var focusNode = __webpack_require__(270);
	var getActiveElement = __webpack_require__(304);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var getNodeForCharacterOffset = __webpack_require__(303);
	var getTextContentAccessor = __webpack_require__(250);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 303 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 304 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventPropagators = __webpack_require__(248);
	var ExecutionEnvironment = __webpack_require__(184);
	var ReactInputSelection = __webpack_require__(301);
	var SyntheticEvent = __webpack_require__(252);

	var getActiveElement = __webpack_require__(304);
	var isTextInputElement = __webpack_require__(257);
	var keyOf = __webpack_require__(254);
	var shallowEqual = __webpack_require__(292);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 306 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(205);
	var EventListener = __webpack_require__(294);
	var EventPropagators = __webpack_require__(248);
	var ReactMount = __webpack_require__(203);
	var SyntheticClipboardEvent = __webpack_require__(308);
	var SyntheticEvent = __webpack_require__(252);
	var SyntheticFocusEvent = __webpack_require__(309);
	var SyntheticKeyboardEvent = __webpack_require__(310);
	var SyntheticMouseEvent = __webpack_require__(261);
	var SyntheticDragEvent = __webpack_require__(313);
	var SyntheticTouchEvent = __webpack_require__(314);
	var SyntheticUIEvent = __webpack_require__(262);
	var SyntheticWheelEvent = __webpack_require__(315);

	var emptyFunction = __webpack_require__(190);
	var getEventCharCode = __webpack_require__(311);
	var invariant = __webpack_require__(188);
	var keyOf = __webpack_require__(254);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(252);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(262);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(262);

	var getEventCharCode = __webpack_require__(311);
	var getEventKey = __webpack_require__(312);
	var getEventModifierState = __webpack_require__(263);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 311 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(311);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(261);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(262);

	var getEventModifierState = __webpack_require__(263);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(261);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(198);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(198);
	var ReactDefaultPerfAnalysis = __webpack_require__(318);
	var ReactMount = __webpack_require__(203);
	var ReactPerf = __webpack_require__(193);

	var performanceNow = __webpack_require__(319);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(214);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(320);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(184);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 321 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.8';

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(203);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(246);
	var ReactServerRendering = __webpack_require__(324);
	var ReactVersion = __webpack_require__(321);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(267);
	var ReactElement = __webpack_require__(217);
	var ReactInstanceHandles = __webpack_require__(220);
	var ReactMarkupChecksum = __webpack_require__(223);
	var ReactServerBatchingStrategy = __webpack_require__(325);
	var ReactServerRenderingTransaction = __webpack_require__(326);
	var ReactUpdates = __webpack_require__(229);

	var emptyObject = __webpack_require__(233);
	var instantiateReactComponent = __webpack_require__(237);
	var invariant = __webpack_require__(188);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 325 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(231);
	var CallbackQueue = __webpack_require__(230);
	var Transaction = __webpack_require__(232);

	var assign = __webpack_require__(214);
	var emptyFunction = __webpack_require__(190);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(285);
	var ReactComponent = __webpack_require__(298);
	var ReactClass = __webpack_require__(297);
	var ReactDOMFactories = __webpack_require__(328);
	var ReactElement = __webpack_require__(217);
	var ReactElementValidator = __webpack_require__(329);
	var ReactPropTypes = __webpack_require__(282);
	var ReactVersion = __webpack_require__(321);

	var assign = __webpack_require__(214);
	var onlyChild = __webpack_require__(331);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(217);
	var ReactElementValidator = __webpack_require__(329);

	var mapObject = __webpack_require__(330);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(217);
	var ReactPropTypeLocations = __webpack_require__(240);
	var ReactPropTypeLocationNames = __webpack_require__(241);
	var ReactCurrentOwner = __webpack_require__(180);

	var canDefineProperty = __webpack_require__(218);
	var getIteratorFn = __webpack_require__(283);
	var invariant = __webpack_require__(188);
	var warning = __webpack_require__(200);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 330 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(217);

	var invariant = __webpack_require__(188);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(214);
	var warning = __webpack_require__(200);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(179);


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _Locale = __webpack_require__(335);

	var _SkipLinks = __webpack_require__(341);

	var _SkipLinks2 = _interopRequireDefault(_SkipLinks);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = 'app';

	var supportedLocales = ['en-US', 'pt-BR'];

	function localesSupported() {
	  return global.Intl && supportedLocales.every(function (locale) {
	    return Intl.NumberFormat.supportedLocalesOf(locale)[0] === locale && Intl.DateTimeFormat.supportedLocalesOf(locale)[0] === locale;
	  });
	}

	if (!localesSupported()) {
	  __webpack_require__(381);
	  __webpack_require__(386);
	  __webpack_require__(387);
	  Intl.NumberFormat = IntlPolyfill.NumberFormat;
	  Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;
	}

	var App = function (_Component) {
	  _inherits(App, _Component);

	  function App(props, context) {
	    _classCallCheck(this, App);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this, props, context));

	    _this.state = {
	      lang: 'en-US'
	    };
	    return _this;
	  }

	  _createClass(App, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var lang = (0, _Locale.getCurrentLocale)();
	      if (this.props.lang) {
	        lang = this.props.lang;
	      }
	      if (!document.documentElement.getAttribute('lang')) {
	        document.documentElement.setAttribute('lang', lang);
	      }
	      this.setState({ lang: lang });

	      // Put the grommet class on the html element.
	      document.documentElement.classList.add('grommet');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var classes = ["grommet", CLASS_ROOT];
	      if (this.props.centered) {
	        classes.push(CLASS_ROOT + '--centered');
	      }
	      if (this.props.inline) {
	        classes.push(CLASS_ROOT + '--inline');
	      }

	      if (this.props.className) {
	        classes.push(this.props.className);
	      }

	      return _react2.default.createElement(
	        'div',
	        { lang: this.state.lang, className: classes.join(' ') },
	        this.props.children,
	        _react2.default.createElement(_SkipLinks2.default, null)
	      );
	    }
	  }]);

	  return App;
	}(_react.Component);

	exports.default = App;


	App.defaultProps = {
	  centered: true
	};

	App.propTypes = {
	  centered: _react.PropTypes.bool
	};
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	exports.setLocale = setLocale;
	exports.getCurrentLocale = getCurrentLocale;
	exports.getLocaleData = getLocaleData;

	var _Cookies = __webpack_require__(336);

	var _Cookies2 = _interopRequireDefault(_Cookies);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var currentLocale = 'en-US';

	function normalizeLocale(locale) {
	  var locales = locale.replace(/_/g, '-').split('-');
	  var normalizedLocale = locales[0];
	  if (locales.length > 1) {
	    normalizedLocale += '-' + locales[1].toUpperCase();
	  }

	  return normalizedLocale;
	}

	function setLocale(locale) {
	  currentLocale = normalizeLocale(locale);
	}

	function getCurrentLocale() {
	  try {
	    var cookieLanguages = _Cookies2.default.get('languages');
	    var locale = cookieLanguages ? JSON.parse(cookieLanguages)[0] : undefined;
	    if (!locale) {
	      locale = window.navigator.languages ? window.navigator.languages[0] : window.navigator.language || window.navigator.userLanguage;
	    }

	    return normalizeLocale(locale);
	  } catch (e) {
	    return currentLocale;
	  }
	}

	function getLocaleData() {
	  var appMessages = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var locale = arguments.length <= 1 || arguments[1] === undefined ? getCurrentLocale() : arguments[1];

	  var grommetMessages = void 0;
	  try {
	    grommetMessages = __webpack_require__(337)("./" + locale);
	  } catch (e) {
	    grommetMessages = {};
	  }

	  var messages = _extends({}, grommetMessages, appMessages);

	  return { locale: locale, messages: messages };
	}

/***/ },
/* 336 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2015 Hewlett Packard Enterprise Development LP

	// Slightly modified version of the Mozilla Developer Network version.
	// renamed the module and the functions.

	/*\
	|*|
	|*|  :: cookies.js ::
	|*|
	|*|  A complete cookies reader/writer framework with full unicode support.
	|*|
	|*|  Revision #1 - September 4, 2014
	|*|
	|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie
	|*|  https://developer.mozilla.org/User:fusionchess
	|*|
	|*|  This framework is released under the GNU Public License, version 3 or later.
	|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html
	|*|
	|*|  Syntaxes:
	|*|
	|*|  * Cookies.set(name, value[, end[, path[, domain[, secure]]]])
	|*|  * Cookies.get(name)
	|*|  * Cookies.remove(name[, path[, domain]])
	|*|  * Cookies.has(name)
	|*|  * Cookies.keys()
	|*|
	\*/

	exports.default = {
	  get: function get(sKey) {
	    if (!sKey) {
	      return null;
	    }
	    return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
	  },
	  set: function set(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
	    if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
	      return false;
	    }
	    var sExpires = "";
	    if (vEnd) {
	      switch (vEnd.constructor) {
	        case Number:
	          sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
	          break;
	        case String:
	          sExpires = "; expires=" + vEnd;
	          break;
	        case Date:
	          sExpires = "; expires=" + vEnd.toUTCString();
	          break;
	      }
	    }
	    document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
	    return true;
	  },
	  remove: function remove(sKey, sPath, sDomain) {
	    if (!this.has(sKey)) {
	      return false;
	    }
	    document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
	    return true;
	  },
	  has: function has(sKey) {
	    if (!sKey) {
	      return false;
	    }
	    return new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie);
	  },
	  keys: function keys() {
	    var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
	    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {
	      aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
	    }
	    return aKeys;
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./en": 338,
		"./en-US": 339,
		"./en-US.js": 339,
		"./en.js": 338,
		"./pt-BR": 340,
		"./pt-BR.js": 340
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 337;


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	module.exports = __webpack_require__(339);

/***/ },
/* 339 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	exports.default = {
	  IndexFilters: {
	    filters: '{quantity, plural,\n  =0 {Filters}\n  =1 {one filter}\n  other {# filters}\n}'
	  },
	  Active: 'Active',
	  add: 'add',
	  Alerts: 'Alerts',
	  All: 'All',
	  archive: 'archive',
	  area: 'area',
	  Bar: 'Bar',
	  bar: 'bar',
	  Box: 'Box',
	  camera: 'camera',
	  Category: 'Category',
	  Circle: 'Circle',
	  Chart: 'Chart',
	  Clear: 'Clear',
	  Cleared: 'Cleared',
	  Close: 'Close',
	  close: 'close',
	  'Close Menu': 'Close Menu',
	  'command-line': 'command line',
	  Completed: 'Completed',
	  created: 'Created',
	  Critical: 'Critical',
	  Disabled: 'Disabled',
	  Distribution: 'Distribution',
	  down: 'down',
	  download: 'download',
	  edit: 'edit',
	  Email: 'Email',
	  Error: 'Error',
	  Filter: 'Filter',
	  filter: 'filter',
	  Footer: 'Footer',
	  'Grommet Logo': 'Grommet Logo',
	  'Layer': 'Layer',
	  line: 'line',
	  'link-next': 'link-next',
	  'link-previous': 'link-previous',
	  'Loading': 'Loading',
	  loginInvalidPassword: 'Please provide Username and Password.',
	  'Log In': 'Log In',
	  Logout: 'Logout',
	  'Main Content': 'Main Content',
	  Max: 'Max',
	  Menu: 'Menu',
	  menu: 'menu',
	  Meter: 'Meter',
	  Min: 'Min',
	  model: 'Model',
	  modified: 'Modified',
	  monitor: 'monitor',
	  more: 'more',
	  Name: 'Name',
	  OK: 'OK',
	  Open: 'Open',
	  Password: 'Password',
	  power: 'power',
	  'Remember me': 'Remember me',
	  Resource: 'Resource',
	  Running: 'Running',
	  Search: 'Search',
	  search: 'search',
	  'Skip to': 'Skip to',
	  State: 'State',
	  Status: 'Status',
	  subtract: 'subtract',
	  support: 'support',
	  sync: 'sync',
	  'Tab Contents': '{activeTitle} Tab Contents',
	  Tasks: 'Tasks',
	  Time: 'Time',
	  Title: 'Title',
	  Total: 'Total',
	  trash: 'trash',
	  Threshold: 'Threshold',
	  Unknown: 'Unknown',
	  upload: 'upload',
	  user: 'user',
	  Username: 'Username',
	  uri: 'URI',
	  validation: 'validation',
	  Value: 'Value',
	  Warning: 'Warning'
	};
	module.exports = exports['default'];

/***/ },
/* 340 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	exports.default = {
	  IndexFilters: {
	    filters: '{quantity, plural,\n  =0 {Filtros}\n  =1 {um filtro}\n  other {# filtros}\n}'
	  },
	  Active: 'Ativos',
	  add: 'add',
	  Alerts: 'Alertas',
	  All: 'Todos',
	  area: 'Área',
	  Bar: 'Bar',
	  bar: 'bar',
	  Box: 'Box',
	  camera: 'Câmera',
	  Category: 'Categoria',
	  Circle: 'Círculo',
	  Chart: 'Gráfico',
	  Clear: 'Limpar',
	  Cleared: 'Livre',
	  Close: 'Fechar',
	  close: 'fechar',
	  'Close Menu': 'Fechar Menu',
	  'command-line': 'linha de comando',
	  Completed: 'Completado',
	  created: 'Criado',
	  Critical: 'Crítico',
	  Disabled: 'Desabilitado',
	  Distribution: 'Distribuição',
	  down: 'baixo',
	  Email: 'Email',
	  Error: 'Erro',
	  Filter: 'Filtro',
	  filter: 'filtro',
	  Footer: 'Rodapé',
	  'Grommet Logo': 'Gromment Logomarca',
	  'Layer': 'Modal',
	  line: 'linha',
	  'link-next': 'link-next',
	  'link-previous': 'link-previous',
	  'Loading': 'Carregando',
	  loginInvalidPassword: 'Por favor, informe Usuário e Senha.',
	  'Log In': 'Logar',
	  Logout: 'Deslogar',
	  'Main Content': 'Conteúdo Principal',
	  Max: 'Max',
	  Menu: 'Menu',
	  menu: 'menu',
	  Meter: 'Meter',
	  Min: 'Min',
	  model: 'Modelo',
	  modified: 'Modificado',
	  monitor: 'monitor',
	  more: 'mais',
	  Name: 'Nome',
	  OK: 'OK',
	  Open: 'Abrir',
	  Password: 'Senha',
	  power: 'power',
	  'Remember me': 'Lembrar Usuário',
	  Resource: 'Recurso',
	  Running: 'Executando',
	  Search: 'Buscar',
	  search: 'buscar',
	  'Skip to': 'Saltar para',
	  State: 'Estado',
	  Status: 'Situaçāo',
	  subtract: 'subtract',
	  'Tab Contents': '{activeTitle} Conteúdo da Tab',
	  Tasks: 'Tarefas',
	  Time: 'Data',
	  Title: 'Título',
	  Total: 'Total',
	  trash: 'lixeira',
	  Threshold: 'Limiar',
	  Unknown: 'Desconhecido',
	  user: 'user',
	  Username: 'Usuário',
	  uri: 'URI',
	  validation: 'validation',
	  Value: 'Valor',
	  Warning: 'Alerta'
	};
	module.exports = exports['default'];

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _FormattedMessage = __webpack_require__(342);

	var _FormattedMessage2 = _interopRequireDefault(_FormattedMessage);

	var _Box = __webpack_require__(366);

	var _Box2 = _interopRequireDefault(_Box);

	var _Layer = __webpack_require__(370);

	var _Layer2 = _interopRequireDefault(_Layer);

	var _Menu = __webpack_require__(375);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _KeyboardAccelerators = __webpack_require__(367);

	var _KeyboardAccelerators2 = _interopRequireDefault(_KeyboardAccelerators);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var SkipLinks = function (_Component) {
	  _inherits(SkipLinks, _Component);

	  function SkipLinks(props, context) {
	    _classCallCheck(this, SkipLinks);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SkipLinks).call(this, props, context));

	    _this._processTab = _this._processTab.bind(_this);
	    _this._onFocus = _this._onFocus.bind(_this);
	    _this._updateAnchors = _this._updateAnchors.bind(_this);
	    _this.state = { anchors: [], showLayer: false };
	    return _this;
	  }

	  _createClass(SkipLinks, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._updateAnchors();

	      this._keyboardHandlers = {
	        tab: this._processTab
	      };
	      _KeyboardAccelerators2.default.startListeningToKeyboard(this, this._keyboardHandlers);

	      document.addEventListener('DOMNodeInserted', this._updateAnchors);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps() {
	      this.setState({ routeChanged: true });
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.state.routeChanged) {
	        this.setState({ routeChanged: false }, this._updateAnchors);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _KeyboardAccelerators2.default.stopListeningToKeyboard(this, this._keyboardHandlers);
	      document.removeEventListener('DOMNodeInserted', this._updateAnchors);
	    }
	  }, {
	    key: '_updateAnchors',
	    value: function _updateAnchors() {
	      var anchorElements = document.querySelectorAll('.skip-link-anchor');

	      var anchors = Array.prototype.map.call(anchorElements, function (anchorElement) {
	        return {
	          id: anchorElement.getAttribute('id'),
	          label: anchorElement.textContent
	        };
	      });

	      this.setState({ anchors: anchors });
	    }
	  }, {
	    key: '_onFocus',
	    value: function _onFocus() {
	      if (!this.state.showLayer) {
	        this.setState({ showLayer: true });
	      }
	    }
	  }, {
	    key: '_processTab',
	    value: function _processTab(event) {
	      if (this.state.showLayer) {
	        var currentAnchor = document.activeElement;
	        var last = this.state.anchors.length - 1;

	        var achorId = event.shiftKey ? this.state.anchors[0].id : this.state.anchors[last].id;

	        var targetId = 'skipLayer_' + achorId;

	        if (currentAnchor.id === targetId) {
	          this.setState({ showLayer: false });
	        }
	      }
	    }
	  }, {
	    key: '_onClick',
	    value: function _onClick(destId) {
	      return function (event) {
	        var dest = document.getElementById(destId);
	        dest.focus();
	        this.setState({ showLayer: false });
	      }.bind(this);
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      var anchorElements = this.state.anchors.map(function (anchor, index) {
	        var skipToLabel = _Intl2.default.getMessage(this.context.intl, 'Skip to');
	        var a11yLabel = skipToLabel + ' ' + anchor.label;
	        return _react2.default.createElement(
	          'a',
	          { href: '#' + anchor.id,
	            onFocus: this._onFocus,
	            onClick: this._onClick(anchor.id),
	            id: 'skipLayer_' + anchor.id,
	            key: anchor.id,
	            'aria-label': a11yLabel },
	          anchor.label
	        );
	      }.bind(this));

	      var menuComponent = void 0;
	      if (anchorElements.length > 0) {
	        menuComponent = _react2.default.createElement(
	          _Menu2.default,
	          { direction: 'row', responsive: false },
	          anchorElements
	        );
	      }

	      return _react2.default.createElement(
	        _Layer2.default,
	        { id: 'skip-link-layer', hidden: !this.state.showLayer, align: 'top' },
	        _react2.default.createElement(
	          _Box2.default,
	          { ref: 'skipLinksLayer',
	            pad: { horizontal: 'small', vertical: 'medium' } },
	          _react2.default.createElement(
	            'h2',
	            null,
	            _react2.default.createElement(_FormattedMessage2.default, { id: 'Skip to', defaultMessage: 'Skip to' })
	          ),
	          menuComponent
	        )
	      );
	    }
	  }]);

	  return SkipLinks;
	}(_react.Component);

	exports.default = SkipLinks;


	SkipLinks.contextTypes = {
	  intl: _react.PropTypes.object
	};
	module.exports = exports['default'];

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactIntl = __webpack_require__(343);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	// NOTE: This component is a temporary wrapper of react-intl FormattedMessage
	// to avoid errors being thrown if the context hasn't been wrapped by
	// IntlProvider. The hope is that react-intl will change to obviate the
	// need for this component.

	var GrommetFormattedMessage = function GrommetFormattedMessage(props, context) {
	  return context.intl ? _react2.default.createElement(_reactIntl.FormattedMessage, props) : _react2.default.createElement(
	    'span',
	    { id: props.id },
	    props.defaultMessage || props.id
	  );
	};

	GrommetFormattedMessage.contextTypes = {
	  intl: _react.PropTypes.object
	};

	GrommetFormattedMessage.propTypes = {
	  id: _react.PropTypes.string.isRequired,
	  defaultMessage: _react.PropTypes.string
	};

	GrommetFormattedMessage.displayName = 'GrommetFormattedMessage';

	exports.default = GrommetFormattedMessage;
	module.exports = exports['default'];

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
	 * Copyright 2016, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	'use strict';

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var allLocaleData = _interopDefault(__webpack_require__(344));
	var IntlMessageFormat = _interopDefault(__webpack_require__(345));
	var IntlRelativeFormat = _interopDefault(__webpack_require__(355));
	var React = __webpack_require__(177);
	var React__default = _interopDefault(React);
	var invariant = _interopDefault(__webpack_require__(362));
	var memoizeIntlConstructor = _interopDefault(__webpack_require__(363));

	var babelHelpers = {};
	babelHelpers.typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
	};

	babelHelpers.classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	babelHelpers.createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	babelHelpers.defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

	babelHelpers.extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	babelHelpers.inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	babelHelpers.possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	babelHelpers.toConsumableArray = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return Array.from(arr);
	  }
	};

	babelHelpers;

	// GENERATED FILE
	var defaultLocaleData = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) {
	    var s = String(n).split("."),
	        v0 = !s[1],
	        t0 = Number(s[0]) == n,
	        n10 = t0 && s[0].slice(-1),
	        n100 = t0 && s[0].slice(-2);if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other";return n == 1 && v0 ? "one" : "other";
	  }, "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "minute": { "displayName": "minute", "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } } } };

	function addLocaleData() {
	    var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    var locales = Array.isArray(data) ? data : [data];

	    locales.forEach(function (localeData) {
	        if (localeData && localeData.locale) {
	            IntlMessageFormat.__addLocaleData(localeData);
	            IntlRelativeFormat.__addLocaleData(localeData);
	        }
	    });
	}

	function hasLocaleData(locale) {
	    var localeParts = (locale || '').split('-');

	    while (localeParts.length > 0) {
	        if (hasIMFAndIRFLocaleData(localeParts.join('-'))) {
	            return true;
	        }

	        localeParts.pop();
	    }

	    return false;
	}

	function hasIMFAndIRFLocaleData(locale) {
	    var normalizedLocale = locale && locale.toLowerCase();

	    return !!(IntlMessageFormat.__localeData__[normalizedLocale] && IntlRelativeFormat.__localeData__[normalizedLocale]);
	}

	var bool = React.PropTypes.bool;
	var number = React.PropTypes.number;
	var string = React.PropTypes.string;
	var func = React.PropTypes.func;
	var object = React.PropTypes.object;
	var oneOf = React.PropTypes.oneOf;
	var shape = React.PropTypes.shape;


	var intlConfigPropTypes = {
	    locale: string,
	    formats: object,
	    messages: object,

	    defaultLocale: string,
	    defaultFormats: object
	};

	var intlFormatPropTypes = {
	    formatDate: func.isRequired,
	    formatTime: func.isRequired,
	    formatRelative: func.isRequired,
	    formatNumber: func.isRequired,
	    formatPlural: func.isRequired,
	    formatMessage: func.isRequired,
	    formatHTMLMessage: func.isRequired
	};

	var intlShape = shape(babelHelpers['extends']({}, intlConfigPropTypes, intlFormatPropTypes, {
	    now: func.isRequired
	}));

	var messageDescriptorPropTypes = {
	    id: string.isRequired,
	    description: string,
	    defaultMessage: string
	};

	var dateTimeFormatPropTypes = {
	    localeMatcher: oneOf(['best fit', 'lookup']),
	    formatMatcher: oneOf(['basic', 'best fit']),

	    timeZone: string,
	    hour12: bool,

	    weekday: oneOf(['narrow', 'short', 'long']),
	    era: oneOf(['narrow', 'short', 'long']),
	    year: oneOf(['numeric', '2-digit']),
	    month: oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
	    day: oneOf(['numeric', '2-digit']),
	    hour: oneOf(['numeric', '2-digit']),
	    minute: oneOf(['numeric', '2-digit']),
	    second: oneOf(['numeric', '2-digit']),
	    timeZoneName: oneOf(['short', 'long'])
	};

	var numberFormatPropTypes = {
	    localeMatcher: oneOf(['best fit', 'lookup']),

	    style: oneOf(['decimal', 'currency', 'percent']),
	    currency: string,
	    currencyDisplay: oneOf(['symbol', 'code', 'name']),
	    useGrouping: bool,

	    minimumIntegerDigits: number,
	    minimumFractionDigits: number,
	    maximumFractionDigits: number,
	    minimumSignificantDigits: number,
	    maximumSignificantDigits: number
	};

	var relativeFormatPropTypes = {
	    style: oneOf(['best fit', 'numeric']),
	    units: oneOf(['second', 'minute', 'hour', 'day', 'month', 'year'])
	};

	var pluralFormatPropTypes = {
	    style: oneOf(['cardinal', 'ordinal'])
	};

	var intlConfigPropNames = Object.keys(intlConfigPropTypes);

	var ESCAPED_CHARS = {
	    '&': '&amp;',
	    '>': '&gt;',
	    '<': '&lt;',
	    '"': '&quot;',
	    '\'': '&#x27;'
	};

	var UNSAFE_CHARS_REGEX = /[&><"']/g;

	function escape(str) {
	    return ('' + str).replace(UNSAFE_CHARS_REGEX, function (match) {
	        return ESCAPED_CHARS[match];
	    });
	}

	function filterProps(obj, whitelist) {
	    var defaults = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    return whitelist.reduce(function (filtered, name) {
	        if (obj.hasOwnProperty(name)) {
	            filtered[name] = obj[name];
	        } else if (defaults.hasOwnProperty(name)) {
	            filtered[name] = defaults[name];
	        }

	        return filtered;
	    }, {});
	}

	function invariantIntlContext() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var intl = _ref.intl;

	    invariant(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');
	}

	function shallowEquals(objA, objB) {
	    if (objA === objB) {
	        return true;
	    }

	    if ((typeof objA === 'undefined' ? 'undefined' : babelHelpers['typeof'](objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : babelHelpers['typeof'](objB)) !== 'object' || objB === null) {
	        return false;
	    }

	    var keysA = Object.keys(objA);
	    var keysB = Object.keys(objB);

	    if (keysA.length !== keysB.length) {
	        return false;
	    }

	    // Test for A's keys different from B.
	    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	    for (var i = 0; i < keysA.length; i++) {
	        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	            return false;
	        }
	    }

	    return true;
	}

	function shouldIntlComponentUpdate(_ref2, nextProps, nextState) {
	    var props = _ref2.props;
	    var state = _ref2.state;
	    var _ref2$context = _ref2.context;
	    var context = _ref2$context === undefined ? {} : _ref2$context;
	    var nextContext = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var _context$intl = context.intl;
	    var intl = _context$intl === undefined ? {} : _context$intl;
	    var _nextContext$intl = nextContext.intl;
	    var nextIntl = _nextContext$intl === undefined ? {} : _nextContext$intl;


	    return !shallowEquals(nextProps, props) || !shallowEquals(nextState, state) || !shallowEquals(filterProps(nextIntl, intlConfigPropNames), filterProps(intl, intlConfigPropNames));
	}

	function getDisplayName(Component) {
	    return Component.displayName || Component.name || 'Component';
	}

	function injectIntl(WrappedComponent) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var _options$intlPropName = options.intlPropName;
	    var intlPropName = _options$intlPropName === undefined ? 'intl' : _options$intlPropName;
	    var _options$withRef = options.withRef;
	    var withRef = _options$withRef === undefined ? false : _options$withRef;

	    var InjectIntl = function (_Component) {
	        babelHelpers.inherits(InjectIntl, _Component);

	        function InjectIntl(props, context) {
	            babelHelpers.classCallCheck(this, InjectIntl);

	            var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(InjectIntl).call(this, props, context));

	            invariantIntlContext(context);
	            return _this;
	        }

	        babelHelpers.createClass(InjectIntl, [{
	            key: 'getWrappedInstance',
	            value: function getWrappedInstance() {
	                invariant(withRef, '[React Intl] To access the wrapped instance, ' + 'the `{withRef: true}` option must be set when calling: ' + '`injectIntl()`');

	                return this.refs.wrappedInstance;
	            }
	        }, {
	            key: 'render',
	            value: function render() {
	                return React__default.createElement(WrappedComponent, babelHelpers['extends']({}, this.props, babelHelpers.defineProperty({}, intlPropName, this.context.intl), {
	                    ref: withRef ? 'wrappedInstance' : null
	                }));
	            }
	        }]);
	        return InjectIntl;
	    }(React.Component);

	    InjectIntl.displayName = 'InjectIntl(' + getDisplayName(WrappedComponent) + ')';

	    InjectIntl.contextTypes = {
	        intl: intlShape
	    };

	    InjectIntl.WrappedComponent = WrappedComponent;

	    return InjectIntl;
	}

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	function defineMessages(messageDescriptors) {
	  // This simply returns what's passed-in because it's meant to be a hook for
	  // babel-plugin-react-intl.
	  return messageDescriptors;
	}

	function resolveLocale(locales) {
	    // IntlMessageFormat#_resolveLocale() does not depend on `this`.
	    return IntlMessageFormat.prototype._resolveLocale(locales);
	}

	function findPluralFunction(locale) {
	    // IntlMessageFormat#_findPluralFunction() does not depend on `this`.
	    return IntlMessageFormat.prototype._findPluralRuleFunction(locale);
	}

	var IntlPluralFormat = function IntlPluralFormat(locales) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    babelHelpers.classCallCheck(this, IntlPluralFormat);

	    var useOrdinal = options.style === 'ordinal';
	    var pluralFn = findPluralFunction(resolveLocale(locales));

	    this.format = function (value) {
	        return pluralFn(value, useOrdinal);
	    };
	};

	var DATE_TIME_FORMAT_OPTIONS = Object.keys(dateTimeFormatPropTypes);
	var NUMBER_FORMAT_OPTIONS = Object.keys(numberFormatPropTypes);
	var RELATIVE_FORMAT_OPTIONS = Object.keys(relativeFormatPropTypes);
	var PLURAL_FORMAT_OPTIONS = Object.keys(pluralFormatPropTypes);

	function getNamedFormat(formats, type, name) {
	    var format = formats && formats[type] && formats[type][name];
	    if (format) {
	        return format;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	        console.error('[React Intl] No ' + type + ' format named: ' + name);
	    }
	}

	function formatDate(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;


	    var date = new Date(value);
	    var defaults = format && getNamedFormat(formats, 'date', format);
	    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);

	    try {
	        return state.getDateTimeFormat(locale, filteredOptions).format(date);
	    } catch (e) {
	        if (process.env.NODE_ENV !== 'production') {
	            console.error('[React Intl] Error formatting date.\n' + e);
	        }
	    }

	    return String(date);
	}

	function formatTime(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;


	    var date = new Date(value);
	    var defaults = format && getNamedFormat(formats, 'time', format);
	    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);

	    // When no formatting options have been specified, default to outputting a
	    // time; e.g.: "9:42 AM".
	    if (Object.keys(filteredOptions).length === 0) {
	        filteredOptions = {
	            hour: 'numeric',
	            minute: 'numeric'
	        };
	    }

	    try {
	        return state.getDateTimeFormat(locale, filteredOptions).format(date);
	    } catch (e) {
	        if (process.env.NODE_ENV !== 'production') {
	            console.error('[React Intl] Error formatting time.\n' + e);
	        }
	    }

	    return String(date);
	}

	function formatRelative(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;


	    var date = new Date(value);
	    var now = new Date(options.now);
	    var defaults = format && getNamedFormat(formats, 'relative', format);
	    var filteredOptions = filterProps(options, RELATIVE_FORMAT_OPTIONS, defaults);

	    // Capture the current threshold values, then temporarily override them with
	    // specific values just for this render.
	    var thresholds = babelHelpers['extends']({}, IntlRelativeFormat.thresholds);
	    Object.assign(IntlRelativeFormat.thresholds, {
	        second: 60, // seconds to minute
	        minute: 60, // minutes to hour
	        hour: 24, // hours to day
	        day: 30, // days to month
	        month: 12 });

	    // months to year
	    try {
	        return state.getRelativeFormat(locale, filteredOptions).format(date, {
	            now: isFinite(now) ? now : state.now()
	        });
	    } catch (e) {
	        if (process.env.NODE_ENV !== 'production') {
	            console.error('[React Intl] Error formatting relative time.\n' + e);
	        }
	    } finally {
	        Object.assign(IntlRelativeFormat.thresholds, thresholds);
	    }

	    return String(date);
	}

	function formatNumber(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;


	    var defaults = format && getNamedFormat(formats, 'number', format);
	    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);

	    try {
	        return state.getNumberFormat(locale, filteredOptions).format(value);
	    } catch (e) {
	        if (process.env.NODE_ENV !== 'production') {
	            console.error('[React Intl] Error formatting number.\n' + e);
	        }
	    }

	    return String(value);
	}

	function formatPlural(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;


	    var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);

	    try {
	        return state.getPluralFormat(locale, filteredOptions).format(value);
	    } catch (e) {
	        if (process.env.NODE_ENV !== 'production') {
	            console.error('[React Intl] Error formatting plural.\n' + e);
	        }
	    }

	    return 'other';
	}

	function formatMessage(config, state) {
	    var messageDescriptor = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	    var values = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var messages = config.messages;
	    var defaultLocale = config.defaultLocale;
	    var defaultFormats = config.defaultFormats;
	    var id = messageDescriptor.id;
	    var defaultMessage = messageDescriptor.defaultMessage;

	    // `id` is a required field of a Message Descriptor.

	    invariant(id, '[React Intl] An `id` must be provided to format a message.');

	    var message = messages && messages[id];
	    var hasValues = Object.keys(values).length > 0;

	    // Avoid expensive message formatting for simple messages without values. In
	    // development messages will always be formatted in case of missing values.
	    if (!hasValues && process.env.NODE_ENV === 'production') {
	        return message || defaultMessage || id;
	    }

	    var formattedMessage = void 0;

	    if (message) {
	        try {
	            var formatter = state.getMessageFormat(message, locale, formats);

	            formattedMessage = formatter.format(values);
	        } catch (e) {
	            if (process.env.NODE_ENV !== 'production') {
	                console.error('[React Intl] Error formatting message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : '') + ('\n' + e));
	            }
	        }
	    } else {
	        if (process.env.NODE_ENV !== 'production') {
	            // This prevents warnings from littering the console in development
	            // when no `messages` are passed into the <IntlProvider> for the
	            // default locale, and a default message is in the source.
	            if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {

	                console.error('[React Intl] Missing message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : ''));
	            }
	        }
	    }

	    if (!formattedMessage && defaultMessage) {
	        try {
	            var _formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);

	            formattedMessage = _formatter.format(values);
	        } catch (e) {
	            if (process.env.NODE_ENV !== 'production') {
	                console.error('[React Intl] Error formatting the default message for: "' + id + '"' + ('\n' + e));
	            }
	        }
	    }

	    if (!formattedMessage) {
	        if (process.env.NODE_ENV !== 'production') {
	            console.error('[React Intl] Cannot format message: "' + id + '", ' + ('using message ' + (message || defaultMessage ? 'source' : 'id') + ' as fallback.'));
	        }
	    }

	    return formattedMessage || message || defaultMessage || id;
	}

	function formatHTMLMessage(config, state, messageDescriptor) {
	    var rawValues = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	    // Process all the values before they are used when formatting the ICU
	    // Message string. Since the formatted message might be injected via
	    // `innerHTML`, all String-based values need to be HTML-escaped.
	    var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {
	        var value = rawValues[name];
	        escaped[name] = typeof value === 'string' ? escape(value) : value;
	        return escaped;
	    }, {});

	    return formatMessage(config, state, messageDescriptor, escapedValues);
	}

	var format = Object.freeze({
	    formatDate: formatDate,
	    formatTime: formatTime,
	    formatRelative: formatRelative,
	    formatNumber: formatNumber,
	    formatPlural: formatPlural,
	    formatMessage: formatMessage,
	    formatHTMLMessage: formatHTMLMessage
	});

	var intlConfigPropNames$1 = Object.keys(intlConfigPropTypes);
	var intlFormatPropNames = Object.keys(intlFormatPropTypes);

	// These are not a static property on the `IntlProvider` class so the intl
	// config values can be inherited from an <IntlProvider> ancestor.
	var defaultProps = {
	    formats: {},
	    messages: {},

	    defaultLocale: 'en',
	    defaultFormats: {}
	};

	var IntlProvider = function (_Component) {
	    babelHelpers.inherits(IntlProvider, _Component);

	    function IntlProvider(props, context) {
	        babelHelpers.classCallCheck(this, IntlProvider);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(IntlProvider).call(this, props, context));

	        invariant(typeof Intl !== 'undefined', '[React Intl] The `Intl` APIs must be available in the runtime, ' + 'and do not appear to be built-in. An `Intl` polyfill should be loaded.\n' + 'See: http://formatjs.io/guides/runtime-environments/');

	        // Used to stabilize time when performing an initial rendering so that
	        // all relative times use the same reference "now" time.
	        var initialNow = void 0;
	        if (isFinite(props.initialNow)) {
	            initialNow = Number(props.initialNow);
	        } else {
	            // When an `initialNow` isn't provided via `props`, look to see an
	            // <IntlProvider> exists in the ancestry and call its `now()`
	            // function to propagate its value for "now".
	            initialNow = context.intl ? context.intl.now() : Date.now();
	        }

	        _this.state = {
	            // Creating `Intl*` formatters is expensive so these format caches
	            // memoize the `Intl*` constructors and have the same lifecycle as
	            // this IntlProvider instance.
	            getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat),
	            getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat),
	            getMessageFormat: memoizeIntlConstructor(IntlMessageFormat),
	            getRelativeFormat: memoizeIntlConstructor(IntlRelativeFormat),
	            getPluralFormat: memoizeIntlConstructor(IntlPluralFormat),

	            // Wrapper to provide stable "now" time for initial render.
	            now: function now() {
	                return _this._didDisplay ? Date.now() : initialNow;
	            }
	        };
	        return _this;
	    }

	    babelHelpers.createClass(IntlProvider, [{
	        key: 'getConfig',
	        value: function getConfig() {
	            var _context$intl = this.context.intl;
	            var intlContext = _context$intl === undefined ? {} : _context$intl;

	            // Build a whitelisted config object from `props`, defaults, and
	            // `context.intl`, if an <IntlProvider> exists in the ancestry.

	            var config = babelHelpers['extends']({}, defaultProps, filterProps(this.props, intlConfigPropNames$1, intlContext));

	            if (!hasLocaleData(config.locale)) {
	                var _config = config;
	                var locale = _config.locale;
	                var defaultLocale = _config.defaultLocale;
	                var defaultFormats = _config.defaultFormats;


	                if (process.env.NODE_ENV !== 'production') {
	                    console.error('[React Intl] Missing locale data for locale: "' + locale + '". ' + ('Using default locale: "' + defaultLocale + '" as fallback.'));
	                }

	                // Since there's no registered locale data for `locale`, this will
	                // fallback to the `defaultLocale` to make sure things can render.
	                // The `messages` are overridden to the `defaultProps` empty object
	                // to maintain referential equality across re-renders. It's assumed
	                // each <FormattedMessage> contains a `defaultMessage` prop.
	                config = babelHelpers['extends']({}, config, {
	                    locale: defaultLocale,
	                    formats: defaultFormats,
	                    messages: defaultProps.messages
	                });
	            }

	            return config;
	        }
	    }, {
	        key: 'getBoundFormatFns',
	        value: function getBoundFormatFns(config, state) {
	            return intlFormatPropNames.reduce(function (boundFormatFns, name) {
	                boundFormatFns[name] = format[name].bind(null, config, state);
	                return boundFormatFns;
	            }, {});
	        }
	    }, {
	        key: 'getChildContext',
	        value: function getChildContext() {
	            var config = this.getConfig();

	            // Bind intl factories and current config to the format functions.
	            var boundFormatFns = this.getBoundFormatFns(config, this.state);

	            return {
	                intl: babelHelpers['extends']({}, config, boundFormatFns, {
	                    now: this.state.now
	                })
	            };
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this._didDisplay = true;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.Children.only(this.props.children);
	        }
	    }]);
	    return IntlProvider;
	}(React.Component);

	IntlProvider.displayName = 'IntlProvider';

	IntlProvider.contextTypes = {
	    intl: intlShape
	};

	IntlProvider.childContextTypes = {
	    intl: intlShape.isRequired
	};

	IntlProvider.propTypes = babelHelpers['extends']({}, intlConfigPropTypes, {
	    children: React.PropTypes.element.isRequired,
	    initialNow: React.PropTypes.any
	});

	var FormattedDate = function (_Component) {
	    babelHelpers.inherits(FormattedDate, _Component);

	    function FormattedDate(props, context) {
	        babelHelpers.classCallCheck(this, FormattedDate);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedDate).call(this, props, context));

	        invariantIntlContext(context);
	        return _this;
	    }

	    babelHelpers.createClass(FormattedDate, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatDate = this.context.intl.formatDate;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;


	            var formattedDate = formatDate(value, this.props);

	            if (typeof children === 'function') {
	                return children(formattedDate);
	            }

	            return React__default.createElement(
	                'span',
	                null,
	                formattedDate
	            );
	        }
	    }]);
	    return FormattedDate;
	}(React.Component);

	FormattedDate.displayName = 'FormattedDate';

	FormattedDate.contextTypes = {
	    intl: intlShape
	};

	FormattedDate.propTypes = babelHelpers['extends']({}, dateTimeFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    children: React.PropTypes.func
	});

	var FormattedTime = function (_Component) {
	    babelHelpers.inherits(FormattedTime, _Component);

	    function FormattedTime(props, context) {
	        babelHelpers.classCallCheck(this, FormattedTime);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedTime).call(this, props, context));

	        invariantIntlContext(context);
	        return _this;
	    }

	    babelHelpers.createClass(FormattedTime, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatTime = this.context.intl.formatTime;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;


	            var formattedTime = formatTime(value, this.props);

	            if (typeof children === 'function') {
	                return children(formattedTime);
	            }

	            return React__default.createElement(
	                'span',
	                null,
	                formattedTime
	            );
	        }
	    }]);
	    return FormattedTime;
	}(React.Component);

	FormattedTime.displayName = 'FormattedTime';

	FormattedTime.contextTypes = {
	    intl: intlShape
	};

	FormattedTime.propTypes = babelHelpers['extends']({}, dateTimeFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    children: React.PropTypes.func
	});

	var SECOND = 1000;
	var MINUTE = 1000 * 60;
	var HOUR = 1000 * 60 * 60;
	var DAY = 1000 * 60 * 60 * 24;

	// The maximum timer delay value is a 32-bit signed integer.
	// See: https://mdn.io/setTimeout
	var MAX_TIMER_DELAY = 2147483647;

	function selectUnits(delta) {
	    var absDelta = Math.abs(delta);

	    if (absDelta < MINUTE) {
	        return 'second';
	    }

	    if (absDelta < HOUR) {
	        return 'minute';
	    }

	    if (absDelta < DAY) {
	        return 'hour';
	    }

	    // The maximum scheduled delay will be measured in days since the maximum
	    // timer delay is less than the number of milliseconds in 25 days.
	    return 'day';
	}

	function getUnitDelay(units) {
	    switch (units) {
	        case 'second':
	            return SECOND;
	        case 'minute':
	            return MINUTE;
	        case 'hour':
	            return HOUR;
	        case 'day':
	            return DAY;
	        default:
	            return MAX_TIMER_DELAY;
	    }
	}

	var FormattedRelative = function (_Component) {
	    babelHelpers.inherits(FormattedRelative, _Component);

	    function FormattedRelative(props, context) {
	        babelHelpers.classCallCheck(this, FormattedRelative);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedRelative).call(this, props, context));

	        invariantIntlContext(context);

	        var now = isFinite(props.initialNow) ? Number(props.initialNow) : context.intl.now();

	        // `now` is stored as state so that `render()` remains a function of
	        // props + state, instead of accessing `Date.now()` inside `render()`.
	        _this.state = { now: now };
	        return _this;
	    }

	    babelHelpers.createClass(FormattedRelative, [{
	        key: 'scheduleNextUpdate',
	        value: function scheduleNextUpdate(props, state) {
	            var _this2 = this;

	            var updateInterval = props.updateInterval;

	            // If the `updateInterval` is falsy, including `0`, then auto updates
	            // have been turned off, so we bail and skip scheduling an update.

	            if (!updateInterval) {
	                return;
	            }

	            var time = new Date(props.value).getTime();
	            var delta = time - state.now;
	            var units = props.units || selectUnits(delta);

	            var unitDelay = getUnitDelay(units);
	            var unitRemainder = Math.abs(delta % unitDelay);

	            // We want the largest possible timer delay which will still display
	            // accurate information while reducing unnecessary re-renders. The delay
	            // should be until the next "interesting" moment, like a tick from
	            // "1 minute ago" to "2 minutes ago" when the delta is 120,000ms.
	            var delay = delta < 0 ? Math.max(updateInterval, unitDelay - unitRemainder) : Math.max(updateInterval, unitRemainder);

	            clearTimeout(this._timer);

	            this._timer = setTimeout(function () {
	                _this2.setState({ now: _this2.context.intl.now() });
	            }, delay);
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate(nextProps, nextState) {
	            this.scheduleNextUpdate(nextProps, nextState);
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.scheduleNextUpdate(this.props, this.state);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            clearTimeout(this._timer);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatRelative = this.context.intl.formatRelative;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;


	            var formattedRelative = formatRelative(value, babelHelpers['extends']({}, this.props, this.state));

	            if (typeof children === 'function') {
	                return children(formattedRelative);
	            }

	            return React__default.createElement(
	                'span',
	                null,
	                formattedRelative
	            );
	        }
	    }]);
	    return FormattedRelative;
	}(React.Component);

	FormattedRelative.displayName = 'FormattedRelative';

	FormattedRelative.contextTypes = {
	    intl: intlShape
	};

	FormattedRelative.propTypes = babelHelpers['extends']({}, relativeFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    updateInterval: React.PropTypes.number,
	    initialNow: React.PropTypes.any,
	    children: React.PropTypes.func
	});

	FormattedRelative.defaultProps = {
	    updateInterval: 1000 * 10
	};

	var FormattedNumber = function (_Component) {
	    babelHelpers.inherits(FormattedNumber, _Component);

	    function FormattedNumber(props, context) {
	        babelHelpers.classCallCheck(this, FormattedNumber);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedNumber).call(this, props, context));

	        invariantIntlContext(context);
	        return _this;
	    }

	    babelHelpers.createClass(FormattedNumber, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatNumber = this.context.intl.formatNumber;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;


	            var formattedNumber = formatNumber(value, this.props);

	            if (typeof children === 'function') {
	                return children(formattedNumber);
	            }

	            return React__default.createElement(
	                'span',
	                null,
	                formattedNumber
	            );
	        }
	    }]);
	    return FormattedNumber;
	}(React.Component);

	FormattedNumber.displayName = 'FormattedNumber';

	FormattedNumber.contextTypes = {
	    intl: intlShape
	};

	FormattedNumber.propTypes = babelHelpers['extends']({}, numberFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    children: React.PropTypes.func
	});

	var FormattedPlural = function (_Component) {
	    babelHelpers.inherits(FormattedPlural, _Component);

	    function FormattedPlural(props, context) {
	        babelHelpers.classCallCheck(this, FormattedPlural);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedPlural).call(this, props, context));

	        invariantIntlContext(context);
	        return _this;
	    }

	    babelHelpers.createClass(FormattedPlural, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatPlural = this.context.intl.formatPlural;
	            var _props = this.props;
	            var value = _props.value;
	            var other = _props.other;
	            var children = _props.children;


	            var pluralCategory = formatPlural(value, this.props);
	            var formattedPlural = this.props[pluralCategory] || other;

	            if (typeof children === 'function') {
	                return children(formattedPlural);
	            }

	            return React__default.createElement(
	                'span',
	                null,
	                formattedPlural
	            );
	        }
	    }]);
	    return FormattedPlural;
	}(React.Component);

	FormattedPlural.displayName = 'FormattedPlural';

	FormattedPlural.contextTypes = {
	    intl: intlShape
	};

	FormattedPlural.propTypes = babelHelpers['extends']({}, pluralFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,

	    other: React.PropTypes.node.isRequired,
	    zero: React.PropTypes.node,
	    one: React.PropTypes.node,
	    two: React.PropTypes.node,
	    few: React.PropTypes.node,
	    many: React.PropTypes.node,

	    children: React.PropTypes.func
	});

	FormattedPlural.defaultProps = {
	    style: 'cardinal'
	};

	var FormattedMessage = function (_Component) {
	    babelHelpers.inherits(FormattedMessage, _Component);

	    function FormattedMessage(props, context) {
	        babelHelpers.classCallCheck(this, FormattedMessage);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedMessage).call(this, props, context));

	        invariantIntlContext(context);
	        return _this;
	    }

	    babelHelpers.createClass(FormattedMessage, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps) {
	            var values = this.props.values;
	            var nextValues = nextProps.values;


	            if (!shallowEquals(nextValues, values)) {
	                return true;
	            }

	            // Since `values` has already been checked, we know they're not
	            // different, so the current `values` are carried over so the shallow
	            // equals comparison on the other props isn't affected by the `values`.
	            var nextPropsToCheck = babelHelpers['extends']({}, nextProps, {
	                values: values
	            });

	            for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                next[_key - 1] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatMessage = this.context.intl.formatMessage;
	            var _props = this.props;
	            var id = _props.id;
	            var description = _props.description;
	            var defaultMessage = _props.defaultMessage;
	            var values = _props.values;
	            var tagName = _props.tagName;
	            var children = _props.children;


	            var tokenRegexp = void 0;
	            var tokenizedValues = void 0;
	            var elements = void 0;

	            var hasValues = values && Object.keys(values).length > 0;
	            if (hasValues) {
	                (function () {
	                    // Creates a token with a random UID that should not be guessable or
	                    // conflict with other parts of the `message` string.
	                    var uid = Math.floor(Math.random() * 0x10000000000).toString(16);

	                    var generateToken = function () {
	                        var counter = 0;
	                        return function () {
	                            return '@__ELEMENT-' + uid + '-' + (counter += 1) + '__@';
	                        };
	                    }();

	                    tokenRegexp = new RegExp('(@__ELEMENT-' + uid + '-\\d+__@)', 'g');
	                    tokenizedValues = {};
	                    elements = {};

	                    // Iterates over the `props` to keep track of any React Element
	                    // values so they can be represented by the `token` as a placeholder
	                    // when the `message` is formatted. This allows the formatted
	                    // message to then be broken-up into parts with references to the
	                    // React Elements inserted back in.
	                    Object.keys(values).forEach(function (name) {
	                        var value = values[name];

	                        if (React.isValidElement(value)) {
	                            var token = generateToken();
	                            tokenizedValues[name] = token;
	                            elements[token] = value;
	                        } else {
	                            tokenizedValues[name] = value;
	                        }
	                    });
	                })();
	            }

	            var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
	            var formattedMessage = formatMessage(descriptor, tokenizedValues || values);

	            var nodes = void 0;

	            var hasElements = elements && Object.keys(elements).length > 0;
	            if (hasElements) {
	                // Split the message into parts so the React Element values captured
	                // above can be inserted back into the rendered message. This
	                // approach allows messages to render with React Elements while
	                // keeping React's virtual diffing working properly.
	                nodes = formattedMessage.split(tokenRegexp).filter(function (part) {
	                    return !!part;
	                }).map(function (part) {
	                    return elements[part] || part;
	                });
	            } else {
	                nodes = [formattedMessage];
	            }

	            if (typeof children === 'function') {
	                return children.apply(undefined, babelHelpers.toConsumableArray(nodes));
	            }

	            return React.createElement.apply(undefined, [tagName, null].concat(babelHelpers.toConsumableArray(nodes)));
	        }
	    }]);
	    return FormattedMessage;
	}(React.Component);

	FormattedMessage.displayName = 'FormattedMessage';

	FormattedMessage.contextTypes = {
	    intl: intlShape
	};

	FormattedMessage.propTypes = babelHelpers['extends']({}, messageDescriptorPropTypes, {
	    values: React.PropTypes.object,
	    tagName: React.PropTypes.string,
	    children: React.PropTypes.func
	});

	FormattedMessage.defaultProps = {
	    values: {},
	    tagName: 'span'
	};

	var FormattedHTMLMessage = function (_Component) {
	    babelHelpers.inherits(FormattedHTMLMessage, _Component);

	    function FormattedHTMLMessage(props, context) {
	        babelHelpers.classCallCheck(this, FormattedHTMLMessage);

	        var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(FormattedHTMLMessage).call(this, props, context));

	        invariantIntlContext(context);
	        return _this;
	    }

	    babelHelpers.createClass(FormattedHTMLMessage, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps) {
	            var values = this.props.values;
	            var nextValues = nextProps.values;


	            if (!shallowEquals(nextValues, values)) {
	                return true;
	            }

	            // Since `values` has already been checked, we know they're not
	            // different, so the current `values` are carried over so the shallow
	            // equals comparison on the other props isn't affected by the `values`.
	            var nextPropsToCheck = babelHelpers['extends']({}, nextProps, {
	                values: values
	            });

	            for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                next[_key - 1] = arguments[_key];
	            }

	            return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatHTMLMessage = this.context.intl.formatHTMLMessage;
	            var _props = this.props;
	            var id = _props.id;
	            var description = _props.description;
	            var defaultMessage = _props.defaultMessage;
	            var rawValues = _props.values;
	            var tagName = _props.tagName;
	            var children = _props.children;


	            var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
	            var formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);

	            if (typeof children === 'function') {
	                return children(formattedHTMLMessage);
	            }

	            // Since the message presumably has HTML in it, we need to set
	            // `innerHTML` in order for it to be rendered and not escaped by React.
	            // To be safe, all string prop values were escaped when formatting the
	            // message. It is assumed that the message is not UGC, and came from the
	            // developer making it more like a template.
	            //
	            // Note: There's a perf impact of using this component since there's no
	            // way for React to do its virtual DOM diffing.
	            return React.createElement(tagName, {
	                dangerouslySetInnerHTML: {
	                    __html: formattedHTMLMessage
	                }
	            });
	        }
	    }]);
	    return FormattedHTMLMessage;
	}(React.Component);

	FormattedHTMLMessage.displayName = 'FormattedHTMLMessage';

	FormattedHTMLMessage.contextTypes = {
	    intl: intlShape
	};

	FormattedHTMLMessage.propTypes = babelHelpers['extends']({}, messageDescriptorPropTypes, {
	    values: React.PropTypes.object,
	    tagName: React.PropTypes.string,
	    children: React.PropTypes.func
	});

	FormattedHTMLMessage.defaultProps = {
	    values: {},
	    tagName: 'span'
	};

	addLocaleData(defaultLocaleData);

	addLocaleData(allLocaleData);

	exports.addLocaleData = addLocaleData;
	exports.intlShape = intlShape;
	exports.injectIntl = injectIntl;
	exports.defineMessages = defineMessages;
	exports.IntlProvider = IntlProvider;
	exports.FormattedDate = FormattedDate;
	exports.FormattedTime = FormattedTime;
	exports.FormattedRelative = FormattedRelative;
	exports.FormattedNumber = FormattedNumber;
	exports.FormattedPlural = FormattedPlural;
	exports.FormattedMessage = FormattedMessage;
	exports.FormattedHTMLMessage = FormattedHTMLMessage;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 344 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint node:true */

	'use strict';

	var IntlMessageFormat = __webpack_require__(346)['default'];

	// Add all locale data to `IntlMessageFormat`. This module will be ignored when
	// bundling for the browser with Browserify/Webpack.
	__webpack_require__(354);

	// Re-export `IntlMessageFormat` as the CommonJS default exports with all the
	// locale data registered, and with English set as the default locale. Define
	// the `default` prop for use with other compiled ES6 Modules.
	exports = module.exports = IntlMessageFormat;
	exports['default'] = exports;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint esnext: true */

	"use strict";
	var src$core$$ = __webpack_require__(347), src$en$$ = __webpack_require__(353);

	src$core$$["default"].__addLocaleData(src$en$$["default"]);
	src$core$$["default"].defaultLocale = 'en';

	exports["default"] = src$core$$["default"];

	//# sourceMappingURL=main.js.map

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	var src$utils$$ = __webpack_require__(348), src$es5$$ = __webpack_require__(349), src$compiler$$ = __webpack_require__(350), intl$messageformat$parser$$ = __webpack_require__(351);
	exports["default"] = MessageFormat;

	// -- MessageFormat --------------------------------------------------------

	function MessageFormat(message, locales, formats) {
	    // Parse string messages into an AST.
	    var ast = typeof message === 'string' ?
	            MessageFormat.__parse(message) : message;

	    if (!(ast && ast.type === 'messageFormatPattern')) {
	        throw new TypeError('A message must be provided as a String or AST.');
	    }

	    // Creates a new object with the specified `formats` merged with the default
	    // formats.
	    formats = this._mergeFormats(MessageFormat.formats, formats);

	    // Defined first because it's used to build the format pattern.
	    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});

	    // Compile the `ast` to a pattern that is highly optimized for repeated
	    // `format()` invocations. **Note:** This passes the `locales` set provided
	    // to the constructor instead of just the resolved locale.
	    var pluralFn = this._findPluralRuleFunction(this._locale);
	    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);

	    // "Bind" `format()` method to `this` so it can be passed by reference like
	    // the other `Intl` APIs.
	    var messageFormat = this;
	    this.format = function (values) {
	        return messageFormat._format(pattern, values);
	    };
	}

	// Default format options used as the prototype of the `formats` provided to the
	// constructor. These are used when constructing the internal Intl.NumberFormat
	// and Intl.DateTimeFormat instances.
	src$es5$$.defineProperty(MessageFormat, 'formats', {
	    enumerable: true,

	    value: {
	        number: {
	            'currency': {
	                style: 'currency'
	            },

	            'percent': {
	                style: 'percent'
	            }
	        },

	        date: {
	            'short': {
	                month: 'numeric',
	                day  : 'numeric',
	                year : '2-digit'
	            },

	            'medium': {
	                month: 'short',
	                day  : 'numeric',
	                year : 'numeric'
	            },

	            'long': {
	                month: 'long',
	                day  : 'numeric',
	                year : 'numeric'
	            },

	            'full': {
	                weekday: 'long',
	                month  : 'long',
	                day    : 'numeric',
	                year   : 'numeric'
	            }
	        },

	        time: {
	            'short': {
	                hour  : 'numeric',
	                minute: 'numeric'
	            },

	            'medium':  {
	                hour  : 'numeric',
	                minute: 'numeric',
	                second: 'numeric'
	            },

	            'long': {
	                hour        : 'numeric',
	                minute      : 'numeric',
	                second      : 'numeric',
	                timeZoneName: 'short'
	            },

	            'full': {
	                hour        : 'numeric',
	                minute      : 'numeric',
	                second      : 'numeric',
	                timeZoneName: 'short'
	            }
	        }
	    }
	});

	// Define internal private properties for dealing with locale data.
	src$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
	src$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {
	    if (!(data && data.locale)) {
	        throw new Error(
	            'Locale data provided to IntlMessageFormat is missing a ' +
	            '`locale` property'
	        );
	    }

	    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;
	}});

	// Defines `__parse()` static method as an exposed private.
	src$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$["default"].parse});

	// Define public `defaultLocale` property which defaults to English, but can be
	// set by the developer.
	src$es5$$.defineProperty(MessageFormat, 'defaultLocale', {
	    enumerable: true,
	    writable  : true,
	    value     : undefined
	});

	MessageFormat.prototype.resolvedOptions = function () {
	    // TODO: Provide anything else?
	    return {
	        locale: this._locale
	    };
	};

	MessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {
	    var compiler = new src$compiler$$["default"](locales, formats, pluralFn);
	    return compiler.compile(ast);
	};

	MessageFormat.prototype._findPluralRuleFunction = function (locale) {
	    var localeData = MessageFormat.__localeData__;
	    var data       = localeData[locale.toLowerCase()];

	    // The locale data is de-duplicated, so we have to traverse the locale's
	    // hierarchy until we find a `pluralRuleFunction` to return.
	    while (data) {
	        if (data.pluralRuleFunction) {
	            return data.pluralRuleFunction;
	        }

	        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
	    }

	    throw new Error(
	        'Locale data added to IntlMessageFormat is missing a ' +
	        '`pluralRuleFunction` for :' + locale
	    );
	};

	MessageFormat.prototype._format = function (pattern, values) {
	    var result = '',
	        i, len, part, id, value;

	    for (i = 0, len = pattern.length; i < len; i += 1) {
	        part = pattern[i];

	        // Exist early for string parts.
	        if (typeof part === 'string') {
	            result += part;
	            continue;
	        }

	        id = part.id;

	        // Enforce that all required values are provided by the caller.
	        if (!(values && src$utils$$.hop.call(values, id))) {
	            throw new Error('A value must be provided for: ' + id);
	        }

	        value = values[id];

	        // Recursively format plural and select parts' option — which can be a
	        // nested pattern structure. The choosing of the option to use is
	        // abstracted-by and delegated-to the part helper object.
	        if (part.options) {
	            result += this._format(part.getOption(value), values);
	        } else {
	            result += part.format(value);
	        }
	    }

	    return result;
	};

	MessageFormat.prototype._mergeFormats = function (defaults, formats) {
	    var mergedFormats = {},
	        type, mergedType;

	    for (type in defaults) {
	        if (!src$utils$$.hop.call(defaults, type)) { continue; }

	        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);

	        if (formats && src$utils$$.hop.call(formats, type)) {
	            src$utils$$.extend(mergedType, formats[type]);
	        }
	    }

	    return mergedFormats;
	};

	MessageFormat.prototype._resolveLocale = function (locales) {
	    if (typeof locales === 'string') {
	        locales = [locales];
	    }

	    // Create a copy of the array so we can push on the default locale.
	    locales = (locales || []).concat(MessageFormat.defaultLocale);

	    var localeData = MessageFormat.__localeData__;
	    var i, len, localeParts, data;

	    // Using the set of locales + the default locale, we look for the first one
	    // which that has been registered. When data does not exist for a locale, we
	    // traverse its ancestors to find something that's been registered within
	    // its hierarchy of locales. Since we lack the proper `parentLocale` data
	    // here, we must take a naive approach to traversal.
	    for (i = 0, len = locales.length; i < len; i += 1) {
	        localeParts = locales[i].toLowerCase().split('-');

	        while (localeParts.length) {
	            data = localeData[localeParts.join('-')];
	            if (data) {
	                // Return the normalized locale string; e.g., we return "en-US",
	                // instead of "en-us".
	                return data.locale;
	            }

	            localeParts.pop();
	        }
	    }

	    var defaultLocale = locales.pop();
	    throw new Error(
	        'No locale data has been added to IntlMessageFormat for: ' +
	        locales.join(', ') + ', or the default locale: ' + defaultLocale
	    );
	};

	//# sourceMappingURL=core.js.map

/***/ },
/* 348 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	exports.extend = extend;
	var hop = Object.prototype.hasOwnProperty;

	function extend(obj) {
	    var sources = Array.prototype.slice.call(arguments, 1),
	        i, len, source, key;

	    for (i = 0, len = sources.length; i < len; i += 1) {
	        source = sources[i];
	        if (!source) { continue; }

	        for (key in source) {
	            if (hop.call(source, key)) {
	                obj[key] = source[key];
	            }
	        }
	    }

	    return obj;
	}
	exports.hop = hop;

	//# sourceMappingURL=utils.js.map

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	var src$utils$$ = __webpack_require__(348);

	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License

	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();

	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;

	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {

	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!src$utils$$.hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};

	var objCreate = Object.create || function (proto, props) {
	    var obj, k;

	    function F() {}
	    F.prototype = proto;
	    obj = new F();

	    for (k in props) {
	        if (src$utils$$.hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }

	    return obj;
	};
	exports.defineProperty = defineProperty, exports.objCreate = objCreate;

	//# sourceMappingURL=es5.js.map

/***/ },
/* 350 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	exports["default"] = Compiler;

	function Compiler(locales, formats, pluralFn) {
	    this.locales  = locales;
	    this.formats  = formats;
	    this.pluralFn = pluralFn;
	}

	Compiler.prototype.compile = function (ast) {
	    this.pluralStack        = [];
	    this.currentPlural      = null;
	    this.pluralNumberFormat = null;

	    return this.compileMessage(ast);
	};

	Compiler.prototype.compileMessage = function (ast) {
	    if (!(ast && ast.type === 'messageFormatPattern')) {
	        throw new Error('Message AST is not of type: "messageFormatPattern"');
	    }

	    var elements = ast.elements,
	        pattern  = [];

	    var i, len, element;

	    for (i = 0, len = elements.length; i < len; i += 1) {
	        element = elements[i];

	        switch (element.type) {
	            case 'messageTextElement':
	                pattern.push(this.compileMessageText(element));
	                break;

	            case 'argumentElement':
	                pattern.push(this.compileArgument(element));
	                break;

	            default:
	                throw new Error('Message element does not have a valid type');
	        }
	    }

	    return pattern;
	};

	Compiler.prototype.compileMessageText = function (element) {
	    // When this `element` is part of plural sub-pattern and its value contains
	    // an unescaped '#', use a `PluralOffsetString` helper to properly output
	    // the number with the correct offset in the string.
	    if (this.currentPlural && /(^|[^\\])#/g.test(element.value)) {
	        // Create a cache a NumberFormat instance that can be reused for any
	        // PluralOffsetString instance in this message.
	        if (!this.pluralNumberFormat) {
	            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);
	        }

	        return new PluralOffsetString(
	                this.currentPlural.id,
	                this.currentPlural.format.offset,
	                this.pluralNumberFormat,
	                element.value);
	    }

	    // Unescape the escaped '#'s in the message text.
	    return element.value.replace(/\\#/g, '#');
	};

	Compiler.prototype.compileArgument = function (element) {
	    var format = element.format;

	    if (!format) {
	        return new StringFormat(element.id);
	    }

	    var formats  = this.formats,
	        locales  = this.locales,
	        pluralFn = this.pluralFn,
	        options;

	    switch (format.type) {
	        case 'numberFormat':
	            options = formats.number[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.NumberFormat(locales, options).format
	            };

	        case 'dateFormat':
	            options = formats.date[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.DateTimeFormat(locales, options).format
	            };

	        case 'timeFormat':
	            options = formats.time[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.DateTimeFormat(locales, options).format
	            };

	        case 'pluralFormat':
	            options = this.compileOptions(element);
	            return new PluralFormat(
	                element.id, format.ordinal, format.offset, options, pluralFn
	            );

	        case 'selectFormat':
	            options = this.compileOptions(element);
	            return new SelectFormat(element.id, options);

	        default:
	            throw new Error('Message element does not have a valid format type');
	    }
	};

	Compiler.prototype.compileOptions = function (element) {
	    var format      = element.format,
	        options     = format.options,
	        optionsHash = {};

	    // Save the current plural element, if any, then set it to a new value when
	    // compiling the options sub-patterns. This conforms the spec's algorithm
	    // for handling `"#"` syntax in message text.
	    this.pluralStack.push(this.currentPlural);
	    this.currentPlural = format.type === 'pluralFormat' ? element : null;

	    var i, len, option;

	    for (i = 0, len = options.length; i < len; i += 1) {
	        option = options[i];

	        // Compile the sub-pattern and save it under the options's selector.
	        optionsHash[option.selector] = this.compileMessage(option.value);
	    }

	    // Pop the plural stack to put back the original current plural value.
	    this.currentPlural = this.pluralStack.pop();

	    return optionsHash;
	};

	// -- Compiler Helper Classes --------------------------------------------------

	function StringFormat(id) {
	    this.id = id;
	}

	StringFormat.prototype.format = function (value) {
	    if (!value) {
	        return '';
	    }

	    return typeof value === 'string' ? value : String(value);
	};

	function PluralFormat(id, useOrdinal, offset, options, pluralFn) {
	    this.id         = id;
	    this.useOrdinal = useOrdinal;
	    this.offset     = offset;
	    this.options    = options;
	    this.pluralFn   = pluralFn;
	}

	PluralFormat.prototype.getOption = function (value) {
	    var options = this.options;

	    var option = options['=' + value] ||
	            options[this.pluralFn(value - this.offset, this.useOrdinal)];

	    return option || options.other;
	};

	function PluralOffsetString(id, offset, numberFormat, string) {
	    this.id           = id;
	    this.offset       = offset;
	    this.numberFormat = numberFormat;
	    this.string       = string;
	}

	PluralOffsetString.prototype.format = function (value) {
	    var number = this.numberFormat.format(value - this.offset);

	    return this.string
	            .replace(/(^|[^\\])#/g, '$1' + number)
	            .replace(/\\#/g, '#');
	};

	function SelectFormat(id, options) {
	    this.id      = id;
	    this.options = options;
	}

	SelectFormat.prototype.getOption = function (value) {
	    var options = this.options;
	    return options[value] || options.other;
	};

	//# sourceMappingURL=compiler.js.map

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports = module.exports = __webpack_require__(352)['default'];
	exports['default'] = exports;


/***/ },
/* 352 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = (function() {
	  /*
	   * Generated by PEG.js 0.8.0.
	   *
	   * http://pegjs.majda.cz/
	   */

	  function peg$subclass(child, parent) {
	    function ctor() { this.constructor = child; }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }

	  function SyntaxError(message, expected, found, offset, line, column) {
	    this.message  = message;
	    this.expected = expected;
	    this.found    = found;
	    this.offset   = offset;
	    this.line     = line;
	    this.column   = column;

	    this.name     = "SyntaxError";
	  }

	  peg$subclass(SyntaxError, Error);

	  function parse(input) {
	    var options = arguments.length > 1 ? arguments[1] : {},

	        peg$FAILED = {},

	        peg$startRuleFunctions = { start: peg$parsestart },
	        peg$startRuleFunction  = peg$parsestart,

	        peg$c0 = [],
	        peg$c1 = function(elements) {
	                return {
	                    type    : 'messageFormatPattern',
	                    elements: elements
	                };
	            },
	        peg$c2 = peg$FAILED,
	        peg$c3 = function(text) {
	                var string = '',
	                    i, j, outerLen, inner, innerLen;

	                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {
	                    inner = text[i];

	                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {
	                        string += inner[j];
	                    }
	                }

	                return string;
	            },
	        peg$c4 = function(messageText) {
	                return {
	                    type : 'messageTextElement',
	                    value: messageText
	                };
	            },
	        peg$c5 = /^[^ \t\n\r,.+={}#]/,
	        peg$c6 = { type: "class", value: "[^ \\t\\n\\r,.+={}#]", description: "[^ \\t\\n\\r,.+={}#]" },
	        peg$c7 = "{",
	        peg$c8 = { type: "literal", value: "{", description: "\"{\"" },
	        peg$c9 = null,
	        peg$c10 = ",",
	        peg$c11 = { type: "literal", value: ",", description: "\",\"" },
	        peg$c12 = "}",
	        peg$c13 = { type: "literal", value: "}", description: "\"}\"" },
	        peg$c14 = function(id, format) {
	                return {
	                    type  : 'argumentElement',
	                    id    : id,
	                    format: format && format[2]
	                };
	            },
	        peg$c15 = "number",
	        peg$c16 = { type: "literal", value: "number", description: "\"number\"" },
	        peg$c17 = "date",
	        peg$c18 = { type: "literal", value: "date", description: "\"date\"" },
	        peg$c19 = "time",
	        peg$c20 = { type: "literal", value: "time", description: "\"time\"" },
	        peg$c21 = function(type, style) {
	                return {
	                    type : type + 'Format',
	                    style: style && style[2]
	                };
	            },
	        peg$c22 = "plural",
	        peg$c23 = { type: "literal", value: "plural", description: "\"plural\"" },
	        peg$c24 = function(pluralStyle) {
	                return {
	                    type   : pluralStyle.type,
	                    ordinal: false,
	                    offset : pluralStyle.offset || 0,
	                    options: pluralStyle.options
	                };
	            },
	        peg$c25 = "selectordinal",
	        peg$c26 = { type: "literal", value: "selectordinal", description: "\"selectordinal\"" },
	        peg$c27 = function(pluralStyle) {
	                return {
	                    type   : pluralStyle.type,
	                    ordinal: true,
	                    offset : pluralStyle.offset || 0,
	                    options: pluralStyle.options
	                }
	            },
	        peg$c28 = "select",
	        peg$c29 = { type: "literal", value: "select", description: "\"select\"" },
	        peg$c30 = function(options) {
	                return {
	                    type   : 'selectFormat',
	                    options: options
	                };
	            },
	        peg$c31 = "=",
	        peg$c32 = { type: "literal", value: "=", description: "\"=\"" },
	        peg$c33 = function(selector, pattern) {
	                return {
	                    type    : 'optionalFormatPattern',
	                    selector: selector,
	                    value   : pattern
	                };
	            },
	        peg$c34 = "offset:",
	        peg$c35 = { type: "literal", value: "offset:", description: "\"offset:\"" },
	        peg$c36 = function(number) {
	                return number;
	            },
	        peg$c37 = function(offset, options) {
	                return {
	                    type   : 'pluralFormat',
	                    offset : offset,
	                    options: options
	                };
	            },
	        peg$c38 = { type: "other", description: "whitespace" },
	        peg$c39 = /^[ \t\n\r]/,
	        peg$c40 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
	        peg$c41 = { type: "other", description: "optionalWhitespace" },
	        peg$c42 = /^[0-9]/,
	        peg$c43 = { type: "class", value: "[0-9]", description: "[0-9]" },
	        peg$c44 = /^[0-9a-f]/i,
	        peg$c45 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
	        peg$c46 = "0",
	        peg$c47 = { type: "literal", value: "0", description: "\"0\"" },
	        peg$c48 = /^[1-9]/,
	        peg$c49 = { type: "class", value: "[1-9]", description: "[1-9]" },
	        peg$c50 = function(digits) {
	            return parseInt(digits, 10);
	        },
	        peg$c51 = /^[^{}\\\0-\x1F \t\n\r]/,
	        peg$c52 = { type: "class", value: "[^{}\\\\\\0-\\x1F \\t\\n\\r]", description: "[^{}\\\\\\0-\\x1F \\t\\n\\r]" },
	        peg$c53 = "\\\\",
	        peg$c54 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
	        peg$c55 = function() { return '\\'; },
	        peg$c56 = "\\#",
	        peg$c57 = { type: "literal", value: "\\#", description: "\"\\\\#\"" },
	        peg$c58 = function() { return '\\#'; },
	        peg$c59 = "\\{",
	        peg$c60 = { type: "literal", value: "\\{", description: "\"\\\\{\"" },
	        peg$c61 = function() { return '\u007B'; },
	        peg$c62 = "\\}",
	        peg$c63 = { type: "literal", value: "\\}", description: "\"\\\\}\"" },
	        peg$c64 = function() { return '\u007D'; },
	        peg$c65 = "\\u",
	        peg$c66 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
	        peg$c67 = function(digits) {
	                return String.fromCharCode(parseInt(digits, 16));
	            },
	        peg$c68 = function(chars) { return chars.join(''); },

	        peg$currPos          = 0,
	        peg$reportedPos      = 0,
	        peg$cachedPos        = 0,
	        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
	        peg$maxFailPos       = 0,
	        peg$maxFailExpected  = [],
	        peg$silentFails      = 0,

	        peg$result;

	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }

	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }

	    function text() {
	      return input.substring(peg$reportedPos, peg$currPos);
	    }

	    function offset() {
	      return peg$reportedPos;
	    }

	    function line() {
	      return peg$computePosDetails(peg$reportedPos).line;
	    }

	    function column() {
	      return peg$computePosDetails(peg$reportedPos).column;
	    }

	    function expected(description) {
	      throw peg$buildException(
	        null,
	        [{ type: "other", description: description }],
	        peg$reportedPos
	      );
	    }

	    function error(message) {
	      throw peg$buildException(message, null, peg$reportedPos);
	    }

	    function peg$computePosDetails(pos) {
	      function advance(details, startPos, endPos) {
	        var p, ch;

	        for (p = startPos; p < endPos; p++) {
	          ch = input.charAt(p);
	          if (ch === "\n") {
	            if (!details.seenCR) { details.line++; }
	            details.column = 1;
	            details.seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            details.line++;
	            details.column = 1;
	            details.seenCR = true;
	          } else {
	            details.column++;
	            details.seenCR = false;
	          }
	        }
	      }

	      if (peg$cachedPos !== pos) {
	        if (peg$cachedPos > pos) {
	          peg$cachedPos = 0;
	          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
	        }
	        advance(peg$cachedPosDetails, peg$cachedPos, pos);
	        peg$cachedPos = pos;
	      }

	      return peg$cachedPosDetails;
	    }

	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) { return; }

	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }

	      peg$maxFailExpected.push(expected);
	    }

	    function peg$buildException(message, expected, pos) {
	      function cleanupExpected(expected) {
	        var i = 1;

	        expected.sort(function(a, b) {
	          if (a.description < b.description) {
	            return -1;
	          } else if (a.description > b.description) {
	            return 1;
	          } else {
	            return 0;
	          }
	        });

	        while (i < expected.length) {
	          if (expected[i - 1] === expected[i]) {
	            expected.splice(i, 1);
	          } else {
	            i++;
	          }
	        }
	      }

	      function buildMessage(expected, found) {
	        function stringEscape(s) {
	          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

	          return s
	            .replace(/\\/g,   '\\\\')
	            .replace(/"/g,    '\\"')
	            .replace(/\x08/g, '\\b')
	            .replace(/\t/g,   '\\t')
	            .replace(/\n/g,   '\\n')
	            .replace(/\f/g,   '\\f')
	            .replace(/\r/g,   '\\r')
	            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
	            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
	            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
	            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
	        }

	        var expectedDescs = new Array(expected.length),
	            expectedDesc, foundDesc, i;

	        for (i = 0; i < expected.length; i++) {
	          expectedDescs[i] = expected[i].description;
	        }

	        expectedDesc = expected.length > 1
	          ? expectedDescs.slice(0, -1).join(", ")
	              + " or "
	              + expectedDescs[expected.length - 1]
	          : expectedDescs[0];

	        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

	        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	      }

	      var posDetails = peg$computePosDetails(pos),
	          found      = pos < input.length ? input.charAt(pos) : null;

	      if (expected !== null) {
	        cleanupExpected(expected);
	      }

	      return new SyntaxError(
	        message !== null ? message : buildMessage(expected, found),
	        expected,
	        found,
	        pos,
	        posDetails.line,
	        posDetails.column
	      );
	    }

	    function peg$parsestart() {
	      var s0;

	      s0 = peg$parsemessageFormatPattern();

	      return s0;
	    }

	    function peg$parsemessageFormatPattern() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsemessageFormatElement();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsemessageFormatElement();
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c1(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsemessageFormatElement() {
	      var s0;

	      s0 = peg$parsemessageTextElement();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseargumentElement();
	      }

	      return s0;
	    }

	    function peg$parsemessageText() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$currPos;
	      s3 = peg$parse_();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsechars();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s3 = [s3, s4, s5];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c2;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$c2;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$c2;
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$currPos;
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsechars();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s3 = [s3, s4, s5];
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$c2;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$c2;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c2;
	          }
	        }
	      } else {
	        s1 = peg$c2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c3(s1);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsews();
	        if (s1 !== peg$FAILED) {
	          s1 = input.substring(s0, peg$currPos);
	        }
	        s0 = s1;
	      }

	      return s0;
	    }

	    function peg$parsemessageTextElement() {
	      var s0, s1;

	      s0 = peg$currPos;
	      s1 = peg$parsemessageText();
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c4(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseargument() {
	      var s0, s1, s2;

	      s0 = peg$parsenumber();
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c5.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c6); }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c5.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c6); }
	            }
	          }
	        } else {
	          s1 = peg$c2;
	        }
	        if (s1 !== peg$FAILED) {
	          s1 = input.substring(s0, peg$currPos);
	        }
	        s0 = s1;
	      }

	      return s0;
	    }

	    function peg$parseargumentElement() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 123) {
	        s1 = peg$c7;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c8); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseargument();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 44) {
	                s6 = peg$c10;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c11); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseelementFormat();
	                  if (s8 !== peg$FAILED) {
	                    s6 = [s6, s7, s8];
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$c2;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$c2;
	              }
	              if (s5 === peg$FAILED) {
	                s5 = peg$c9;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parse_();
	                if (s6 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 125) {
	                    s7 = peg$c12;
	                    peg$currPos++;
	                  } else {
	                    s7 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c14(s3, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$c2;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parseelementFormat() {
	      var s0;

	      s0 = peg$parsesimpleFormat();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsepluralFormat();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseselectOrdinalFormat();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parseselectFormat();
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsesimpleFormat() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c15) {
	        s1 = peg$c15;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c16); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c17) {
	          s1 = peg$c17;
	          peg$currPos += 4;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c18); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c19) {
	            s1 = peg$c19;
	            peg$currPos += 4;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c20); }
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s4 = peg$c10;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsechars();
	              if (s6 !== peg$FAILED) {
	                s4 = [s4, s5, s6];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$c2;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$c2;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$c2;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = peg$c9;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c21(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parsepluralFormat() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c22) {
	        s1 = peg$c22;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c23); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c10;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepluralStyle();
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c24(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parseselectOrdinalFormat() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 13) === peg$c25) {
	        s1 = peg$c25;
	        peg$currPos += 13;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c26); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c10;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepluralStyle();
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c27(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parseselectFormat() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c28) {
	        s1 = peg$c28;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c29); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c10;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parseoptionalFormatPattern();
	              if (s6 !== peg$FAILED) {
	                while (s6 !== peg$FAILED) {
	                  s5.push(s6);
	                  s6 = peg$parseoptionalFormatPattern();
	                }
	              } else {
	                s5 = peg$c2;
	              }
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c30(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parseselector() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 61) {
	        s2 = peg$c31;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c32); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parsenumber();
	        if (s3 !== peg$FAILED) {
	          s2 = [s2, s3];
	          s1 = s2;
	        } else {
	          peg$currPos = s1;
	          s1 = peg$c2;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$c2;
	      }
	      if (s1 !== peg$FAILED) {
	        s1 = input.substring(s0, peg$currPos);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsechars();
	      }

	      return s0;
	    }

	    function peg$parseoptionalFormatPattern() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      s1 = peg$parse_();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseselector();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 123) {
	              s4 = peg$c7;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c8); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsemessageFormatPattern();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parse_();
	                  if (s7 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 125) {
	                      s8 = peg$c12;
	                      peg$currPos++;
	                    } else {
	                      s8 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c13); }
	                    }
	                    if (s8 !== peg$FAILED) {
	                      peg$reportedPos = s0;
	                      s1 = peg$c33(s2, s6);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$c2;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$c2;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parseoffset() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 7) === peg$c34) {
	        s1 = peg$c34;
	        peg$currPos += 7;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c35); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsenumber();
	          if (s3 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c36(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parsepluralStyle() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseoffset();
	      if (s1 === peg$FAILED) {
	        s1 = peg$c9;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$parseoptionalFormatPattern();
	          if (s4 !== peg$FAILED) {
	            while (s4 !== peg$FAILED) {
	              s3.push(s4);
	              s4 = peg$parseoptionalFormatPattern();
	            }
	          } else {
	            s3 = peg$c2;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c37(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }

	      return s0;
	    }

	    function peg$parsews() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = [];
	      if (peg$c39.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c40); }
	      }
	      if (s1 !== peg$FAILED) {
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          if (peg$c39.test(input.charAt(peg$currPos))) {
	            s1 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c40); }
	          }
	        }
	      } else {
	        s0 = peg$c2;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c38); }
	      }

	      return s0;
	    }

	    function peg$parse_() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsews();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsews();
	      }
	      if (s1 !== peg$FAILED) {
	        s1 = input.substring(s0, peg$currPos);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c41); }
	      }

	      return s0;
	    }

	    function peg$parsedigit() {
	      var s0;

	      if (peg$c42.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c43); }
	      }

	      return s0;
	    }

	    function peg$parsehexDigit() {
	      var s0;

	      if (peg$c44.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c45); }
	      }

	      return s0;
	    }

	    function peg$parsenumber() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 48) {
	        s1 = peg$c46;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c47); }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = peg$currPos;
	        s2 = peg$currPos;
	        if (peg$c48.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c49); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = [];
	          s5 = peg$parsedigit();
	          while (s5 !== peg$FAILED) {
	            s4.push(s5);
	            s5 = peg$parsedigit();
	          }
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c2;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$c2;
	        }
	        if (s2 !== peg$FAILED) {
	          s2 = input.substring(s1, peg$currPos);
	        }
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c50(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsechar() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      if (peg$c51.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c52); }
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 2) === peg$c53) {
	          s1 = peg$c53;
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c54); }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$reportedPos = s0;
	          s1 = peg$c55();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 2) === peg$c56) {
	            s1 = peg$c56;
	            peg$currPos += 2;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c57); }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c58();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c59) {
	              s1 = peg$c59;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c60); }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$reportedPos = s0;
	              s1 = peg$c61();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 2) === peg$c62) {
	                s1 = peg$c62;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c63); }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c64();
	              }
	              s0 = s1;
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 2) === peg$c65) {
	                  s1 = peg$c65;
	                  peg$currPos += 2;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c66); }
	                }
	                if (s1 !== peg$FAILED) {
	                  s2 = peg$currPos;
	                  s3 = peg$currPos;
	                  s4 = peg$parsehexDigit();
	                  if (s4 !== peg$FAILED) {
	                    s5 = peg$parsehexDigit();
	                    if (s5 !== peg$FAILED) {
	                      s6 = peg$parsehexDigit();
	                      if (s6 !== peg$FAILED) {
	                        s7 = peg$parsehexDigit();
	                        if (s7 !== peg$FAILED) {
	                          s4 = [s4, s5, s6, s7];
	                          s3 = s4;
	                        } else {
	                          peg$currPos = s3;
	                          s3 = peg$c2;
	                        }
	                      } else {
	                        peg$currPos = s3;
	                        s3 = peg$c2;
	                      }
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$c2;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$c2;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    s3 = input.substring(s2, peg$currPos);
	                  }
	                  s2 = s3;
	                  if (s2 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c67(s2);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$c2;
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsechars() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsechar();
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parsechar();
	        }
	      } else {
	        s1 = peg$c2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c68(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    peg$result = peg$startRuleFunction();

	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail({ type: "end", description: "end of input" });
	      }

	      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
	    }
	  }

	  return {
	    SyntaxError: SyntaxError,
	    parse:       parse
	  };
	})();

	//# sourceMappingURL=parser.js.map

/***/ },
/* 353 */
/***/ function(module, exports) {

	// GENERATED FILE
	"use strict";
	exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"}};

	//# sourceMappingURL=en.js.map

/***/ },
/* 354 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint node:true */

	'use strict';

	var IntlRelativeFormat = __webpack_require__(356)['default'];

	// Add all locale data to `IntlRelativeFormat`. This module will be ignored when
	// bundling for the browser with Browserify/Webpack.
	__webpack_require__(361);

	// Re-export `IntlRelativeFormat` as the CommonJS default exports with all the
	// locale data registered, and with English set as the default locale. Define
	// the `default` prop for use with other compiled ES6 Modules.
	exports = module.exports = IntlRelativeFormat;
	exports['default'] = exports;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint esnext: true */

	"use strict";
	var src$core$$ = __webpack_require__(357), src$en$$ = __webpack_require__(360);

	src$core$$["default"].__addLocaleData(src$en$$["default"]);
	src$core$$["default"].defaultLocale = 'en';

	exports["default"] = src$core$$["default"];

	//# sourceMappingURL=main.js.map

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	var intl$messageformat$$ = __webpack_require__(345), src$diff$$ = __webpack_require__(358), src$es5$$ = __webpack_require__(359);
	exports["default"] = RelativeFormat;

	// -----------------------------------------------------------------------------

	var FIELDS = ['second', 'minute', 'hour', 'day', 'month', 'year'];
	var STYLES = ['best fit', 'numeric'];

	// -- RelativeFormat -----------------------------------------------------------

	function RelativeFormat(locales, options) {
	    options = options || {};

	    // Make a copy of `locales` if it's an array, so that it doesn't change
	    // since it's used lazily.
	    if (src$es5$$.isArray(locales)) {
	        locales = locales.concat();
	    }

	    src$es5$$.defineProperty(this, '_locale', {value: this._resolveLocale(locales)});
	    src$es5$$.defineProperty(this, '_options', {value: {
	        style: this._resolveStyle(options.style),
	        units: this._isValidUnits(options.units) && options.units
	    }});

	    src$es5$$.defineProperty(this, '_locales', {value: locales});
	    src$es5$$.defineProperty(this, '_fields', {value: this._findFields(this._locale)});
	    src$es5$$.defineProperty(this, '_messages', {value: src$es5$$.objCreate(null)});

	    // "Bind" `format()` method to `this` so it can be passed by reference like
	    // the other `Intl` APIs.
	    var relativeFormat = this;
	    this.format = function format(date, options) {
	        return relativeFormat._format(date, options);
	    };
	}

	// Define internal private properties for dealing with locale data.
	src$es5$$.defineProperty(RelativeFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
	src$es5$$.defineProperty(RelativeFormat, '__addLocaleData', {value: function (data) {
	    if (!(data && data.locale)) {
	        throw new Error(
	            'Locale data provided to IntlRelativeFormat is missing a ' +
	            '`locale` property value'
	        );
	    }

	    RelativeFormat.__localeData__[data.locale.toLowerCase()] = data;

	    // Add data to IntlMessageFormat.
	    intl$messageformat$$["default"].__addLocaleData(data);
	}});

	// Define public `defaultLocale` property which can be set by the developer, or
	// it will be set when the first RelativeFormat instance is created by
	// leveraging the resolved locale from `Intl`.
	src$es5$$.defineProperty(RelativeFormat, 'defaultLocale', {
	    enumerable: true,
	    writable  : true,
	    value     : undefined
	});

	// Define public `thresholds` property which can be set by the developer, and
	// defaults to relative time thresholds from moment.js.
	src$es5$$.defineProperty(RelativeFormat, 'thresholds', {
	    enumerable: true,

	    value: {
	        second: 45,  // seconds to minute
	        minute: 45,  // minutes to hour
	        hour  : 22,  // hours to day
	        day   : 26,  // days to month
	        month : 11   // months to year
	    }
	});

	RelativeFormat.prototype.resolvedOptions = function () {
	    return {
	        locale: this._locale,
	        style : this._options.style,
	        units : this._options.units
	    };
	};

	RelativeFormat.prototype._compileMessage = function (units) {
	    // `this._locales` is the original set of locales the user specified to the
	    // constructor, while `this._locale` is the resolved root locale.
	    var locales        = this._locales;
	    var resolvedLocale = this._locale;

	    var field        = this._fields[units];
	    var relativeTime = field.relativeTime;
	    var future       = '';
	    var past         = '';
	    var i;

	    for (i in relativeTime.future) {
	        if (relativeTime.future.hasOwnProperty(i)) {
	            future += ' ' + i + ' {' +
	                relativeTime.future[i].replace('{0}', '#') + '}';
	        }
	    }

	    for (i in relativeTime.past) {
	        if (relativeTime.past.hasOwnProperty(i)) {
	            past += ' ' + i + ' {' +
	                relativeTime.past[i].replace('{0}', '#') + '}';
	        }
	    }

	    var message = '{when, select, future {{0, plural, ' + future + '}}' +
	                                 'past {{0, plural, ' + past + '}}}';

	    // Create the synthetic IntlMessageFormat instance using the original
	    // locales value specified by the user when constructing the the parent
	    // IntlRelativeFormat instance.
	    return new intl$messageformat$$["default"](message, locales);
	};

	RelativeFormat.prototype._getMessage = function (units) {
	    var messages = this._messages;

	    // Create a new synthetic message based on the locale data from CLDR.
	    if (!messages[units]) {
	        messages[units] = this._compileMessage(units);
	    }

	    return messages[units];
	};

	RelativeFormat.prototype._getRelativeUnits = function (diff, units) {
	    var field = this._fields[units];

	    if (field.relative) {
	        return field.relative[diff];
	    }
	};

	RelativeFormat.prototype._findFields = function (locale) {
	    var localeData = RelativeFormat.__localeData__;
	    var data       = localeData[locale.toLowerCase()];

	    // The locale data is de-duplicated, so we have to traverse the locale's
	    // hierarchy until we find `fields` to return.
	    while (data) {
	        if (data.fields) {
	            return data.fields;
	        }

	        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
	    }

	    throw new Error(
	        'Locale data added to IntlRelativeFormat is missing `fields` for :' +
	        locale
	    );
	};

	RelativeFormat.prototype._format = function (date, options) {
	    var now = options && options.now !== undefined ? options.now : src$es5$$.dateNow();

	    if (date === undefined) {
	        date = now;
	    }

	    // Determine if the `date` and optional `now` values are valid, and throw a
	    // similar error to what `Intl.DateTimeFormat#format()` would throw.
	    if (!isFinite(now)) {
	        throw new RangeError(
	            'The `now` option provided to IntlRelativeFormat#format() is not ' +
	            'in valid range.'
	        );
	    }

	    if (!isFinite(date)) {
	        throw new RangeError(
	            'The date value provided to IntlRelativeFormat#format() is not ' +
	            'in valid range.'
	        );
	    }

	    var diffReport  = src$diff$$["default"](now, date);
	    var units       = this._options.units || this._selectUnits(diffReport);
	    var diffInUnits = diffReport[units];

	    if (this._options.style !== 'numeric') {
	        var relativeUnits = this._getRelativeUnits(diffInUnits, units);
	        if (relativeUnits) {
	            return relativeUnits;
	        }
	    }

	    return this._getMessage(units).format({
	        '0' : Math.abs(diffInUnits),
	        when: diffInUnits < 0 ? 'past' : 'future'
	    });
	};

	RelativeFormat.prototype._isValidUnits = function (units) {
	    if (!units || src$es5$$.arrIndexOf.call(FIELDS, units) >= 0) {
	        return true;
	    }

	    if (typeof units === 'string') {
	        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);
	        if (suggestion && src$es5$$.arrIndexOf.call(FIELDS, suggestion) >= 0) {
	            throw new Error(
	                '"' + units + '" is not a valid IntlRelativeFormat `units` ' +
	                'value, did you mean: ' + suggestion
	            );
	        }
	    }

	    throw new Error(
	        '"' + units + '" is not a valid IntlRelativeFormat `units` value, it ' +
	        'must be one of: "' + FIELDS.join('", "') + '"'
	    );
	};

	RelativeFormat.prototype._resolveLocale = function (locales) {
	    if (typeof locales === 'string') {
	        locales = [locales];
	    }

	    // Create a copy of the array so we can push on the default locale.
	    locales = (locales || []).concat(RelativeFormat.defaultLocale);

	    var localeData = RelativeFormat.__localeData__;
	    var i, len, localeParts, data;

	    // Using the set of locales + the default locale, we look for the first one
	    // which that has been registered. When data does not exist for a locale, we
	    // traverse its ancestors to find something that's been registered within
	    // its hierarchy of locales. Since we lack the proper `parentLocale` data
	    // here, we must take a naive approach to traversal.
	    for (i = 0, len = locales.length; i < len; i += 1) {
	        localeParts = locales[i].toLowerCase().split('-');

	        while (localeParts.length) {
	            data = localeData[localeParts.join('-')];
	            if (data) {
	                // Return the normalized locale string; e.g., we return "en-US",
	                // instead of "en-us".
	                return data.locale;
	            }

	            localeParts.pop();
	        }
	    }

	    var defaultLocale = locales.pop();
	    throw new Error(
	        'No locale data has been added to IntlRelativeFormat for: ' +
	        locales.join(', ') + ', or the default locale: ' + defaultLocale
	    );
	};

	RelativeFormat.prototype._resolveStyle = function (style) {
	    // Default to "best fit" style.
	    if (!style) {
	        return STYLES[0];
	    }

	    if (src$es5$$.arrIndexOf.call(STYLES, style) >= 0) {
	        return style;
	    }

	    throw new Error(
	        '"' + style + '" is not a valid IntlRelativeFormat `style` value, it ' +
	        'must be one of: "' + STYLES.join('", "') + '"'
	    );
	};

	RelativeFormat.prototype._selectUnits = function (diffReport) {
	    var i, l, units;

	    for (i = 0, l = FIELDS.length; i < l; i += 1) {
	        units = FIELDS[i];

	        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {
	            break;
	        }
	    }

	    return units;
	};

	//# sourceMappingURL=core.js.map

/***/ },
/* 358 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";

	var round = Math.round;

	function daysToYears(days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    return days * 400 / 146097;
	}

	exports["default"] = function (from, to) {
	    // Convert to ms timestamps.
	    from = +from;
	    to   = +to;

	    var millisecond = round(to - from),
	        second      = round(millisecond / 1000),
	        minute      = round(second / 60),
	        hour        = round(minute / 60),
	        day         = round(hour / 24),
	        week        = round(day / 7);

	    var rawYears = daysToYears(day),
	        month    = round(rawYears * 12),
	        year     = round(rawYears);

	    return {
	        millisecond: millisecond,
	        second     : second,
	        minute     : minute,
	        hour       : hour,
	        day        : day,
	        week       : week,
	        month      : month,
	        year       : year
	    };
	};

	//# sourceMappingURL=diff.js.map

/***/ },
/* 359 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";

	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License

	var hop = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();

	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;

	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {

	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};

	var objCreate = Object.create || function (proto, props) {
	    var obj, k;

	    function F() {}
	    F.prototype = proto;
	    obj = new F();

	    for (k in props) {
	        if (hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }

	    return obj;
	};

	var arrIndexOf = Array.prototype.indexOf || function (search, fromIndex) {
	    /*jshint validthis:true */
	    var arr = this;
	    if (!arr.length) {
	        return -1;
	    }

	    for (var i = fromIndex || 0, max = arr.length; i < max; i++) {
	        if (arr[i] === search) {
	            return i;
	        }
	    }

	    return -1;
	};

	var isArray = Array.isArray || function (obj) {
	    return toString.call(obj) === '[object Array]';
	};

	var dateNow = Date.now || function () {
	    return new Date().getTime();
	};
	exports.defineProperty = defineProperty, exports.objCreate = objCreate, exports.arrIndexOf = arrIndexOf, exports.isArray = isArray, exports.dateNow = dateNow;

	//# sourceMappingURL=es5.js.map

/***/ },
/* 360 */
/***/ function(module, exports) {

	// GENERATED FILE
	"use strict";
	exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"},"fields":{"year":{"displayName":"year","relative":{"0":"this year","1":"next year","-1":"last year"},"relativeTime":{"future":{"one":"in {0} year","other":"in {0} years"},"past":{"one":"{0} year ago","other":"{0} years ago"}}},"month":{"displayName":"month","relative":{"0":"this month","1":"next month","-1":"last month"},"relativeTime":{"future":{"one":"in {0} month","other":"in {0} months"},"past":{"one":"{0} month ago","other":"{0} months ago"}}},"day":{"displayName":"day","relative":{"0":"today","1":"tomorrow","-1":"yesterday"},"relativeTime":{"future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"}}},"hour":{"displayName":"hour","relativeTime":{"future":{"one":"in {0} hour","other":"in {0} hours"},"past":{"one":"{0} hour ago","other":"{0} hours ago"}}},"minute":{"displayName":"minute","relativeTime":{"future":{"one":"in {0} minute","other":"in {0} minutes"},"past":{"one":"{0} minute ago","other":"{0} minutes ago"}}},"second":{"displayName":"second","relative":{"0":"now"},"relativeTime":{"future":{"one":"in {0} second","other":"in {0} seconds"},"past":{"one":"{0} second ago","other":"{0} seconds ago"}}}}};

	//# sourceMappingURL=en.js.map

/***/ },
/* 361 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(81)))

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports = module.exports = __webpack_require__(364)['default'];
	exports['default'] = exports;


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var src$es5$$ = __webpack_require__(365);
	exports["default"] = createFormatCache;

	// -----------------------------------------------------------------------------

	function createFormatCache(FormatConstructor) {
	    var cache = src$es5$$.objCreate(null);

	    return function () {
	        var args    = Array.prototype.slice.call(arguments);
	        var cacheId = getCacheId(args);
	        var format  = cacheId && cache[cacheId];

	        if (!format) {
	            format = new (src$es5$$.bind.apply(FormatConstructor, [null].concat(args)))();

	            if (cacheId) {
	                cache[cacheId] = format;
	            }
	        }

	        return format;
	    };
	}

	// -- Utilities ----------------------------------------------------------------

	function getCacheId(inputs) {
	    // When JSON is not available in the runtime, we will not create a cache id.
	    if (typeof JSON === 'undefined') { return; }

	    var cacheId = [];

	    var i, len, input;

	    for (i = 0, len = inputs.length; i < len; i += 1) {
	        input = inputs[i];

	        if (input && typeof input === 'object') {
	            cacheId.push(orderedProps(input));
	        } else {
	            cacheId.push(input);
	        }
	    }

	    return JSON.stringify(cacheId);
	}

	function orderedProps(obj) {
	    var props = [],
	        keys  = [];

	    var key, i, len, prop;

	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            keys.push(key);
	        }
	    }

	    var orderedKeys = keys.sort();

	    for (i = 0, len = orderedKeys.length; i < len; i += 1) {
	        key  = orderedKeys[i];
	        prop = {};

	        prop[key] = obj[key];
	        props[i]  = prop;
	    }

	    return props;
	}

	//# sourceMappingURL=memoizer.js.map

/***/ },
/* 365 */
/***/ function(module, exports) {

	"use strict";
	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	// Function.prototype.bind implementation from Mozilla Developer Network:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill

	var bind = Function.prototype.bind || function (oThis) {
	    if (typeof this !== 'function') {
	      // closest thing possible to the ECMAScript 5
	      // internal IsCallable function
	      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
	    }

	    var aArgs   = Array.prototype.slice.call(arguments, 1),
	        fToBind = this,
	        fNOP    = function() {},
	        fBound  = function() {
	          return fToBind.apply(this instanceof fNOP
	                 ? this
	                 : oThis,
	                 aArgs.concat(Array.prototype.slice.call(arguments)));
	        };

	    if (this.prototype) {
	      // native functions don't have a prototype
	      fNOP.prototype = this.prototype;
	    }
	    fBound.prototype = new fNOP();

	    return fBound;
	};

	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License

	var hop = Object.prototype.hasOwnProperty;

	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();

	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;

	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {

	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};

	var objCreate = Object.create || function (proto, props) {
	    var obj, k;

	    function F() {}
	    F.prototype = proto;
	    obj = new F();

	    for (k in props) {
	        if (hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }

	    return obj;
	};

	exports.bind = bind, exports.defineProperty = defineProperty, exports.objCreate = objCreate;

	//# sourceMappingURL=es5.js.map

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _KeyboardAccelerators = __webpack_require__(367);

	var _KeyboardAccelerators2 = _interopRequireDefault(_KeyboardAccelerators);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	var _SkipLinkAnchor = __webpack_require__(369);

	var _SkipLinkAnchor2 = _interopRequireDefault(_SkipLinkAnchor);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = "box";

	var Box = function (_Component) {
	  _inherits(Box, _Component);

	  function Box() {
	    _classCallCheck(this, Box);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Box).apply(this, arguments));
	  }

	  _createClass(Box, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.onClick) {
	        var clickCallback = function () {
	          if (this.refs.boxContainer === document.activeElement) {
	            this.props.onClick();
	          }
	        }.bind(this);

	        _KeyboardAccelerators2.default.startListeningToKeyboard(this, {
	          enter: clickCallback,
	          space: clickCallback
	        });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.onClick) {
	        _KeyboardAccelerators2.default.stopListeningToKeyboard(this);
	      }
	    }
	  }, {
	    key: '_addPropertyClass',
	    value: function _addPropertyClass(classes, prefix, property, classProperty) {
	      var choice = this.props[property];
	      var propertyPrefix = classProperty || property;
	      if (choice) {
	        if (typeof choice === 'string') {
	          classes.push(prefix + '--' + propertyPrefix + '-' + choice);
	        } else if ((typeof choice === 'undefined' ? 'undefined' : _typeof(choice)) === 'object') {
	          Object.keys(choice).forEach(function (key) {
	            classes.push(prefix + '--' + propertyPrefix + '-' + key + '-' + choice[key]);
	          });
	        } else {
	          classes.push(prefix + '--' + propertyPrefix);
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var classes = [CLASS_ROOT];
	      var containerClasses = [CLASS_ROOT + "__container"];
	      this._addPropertyClass(classes, CLASS_ROOT, 'full');
	      this._addPropertyClass(classes, CLASS_ROOT, 'direction');
	      this._addPropertyClass(classes, CLASS_ROOT, 'justify');
	      this._addPropertyClass(classes, CLASS_ROOT, 'align');
	      this._addPropertyClass(classes, CLASS_ROOT, 'alignContent', 'align-content');
	      this._addPropertyClass(classes, CLASS_ROOT, 'reverse');
	      this._addPropertyClass(classes, CLASS_ROOT, 'responsive');
	      this._addPropertyClass(classes, CLASS_ROOT, 'pad');
	      this._addPropertyClass(classes, CLASS_ROOT, 'separator');
	      this._addPropertyClass(classes, CLASS_ROOT, 'textAlign', 'text-align');
	      this._addPropertyClass(classes, CLASS_ROOT, 'wrap');

	      if (this.props.appCentered) {
	        this._addPropertyClass(containerClasses, CLASS_ROOT + "__container", 'full');
	        if (this.props.colorIndex) {
	          containerClasses.push("background-color-index-" + this.props.colorIndex);
	        }
	        if (this.props.containerClassName) {
	          containerClasses.push(this.props.containerClassName);
	        }
	      } else {
	        if (this.props.colorIndex) {
	          classes.push("background-color-index-" + this.props.colorIndex);
	        }
	      }

	      var a11yProps = {};
	      if (this.props.onClick) {
	        classes.push(CLASS_ROOT + "--clickable");
	        if (this.props.focusable) {
	          var boxLabel = this.props.a11yTitle || _Intl2.default.getMessage(this.context.intl, 'Box');
	          a11yProps.tabIndex = 0;
	          a11yProps["aria-label"] = boxLabel;
	          a11yProps.role = this.props.role || 'link';
	        }
	      }

	      var skipLinkAnchor = void 0;
	      if (this.props.primary) {
	        var mainContentLabel = _Intl2.default.getMessage(this.context.intl, 'Main Content');
	        skipLinkAnchor = _react2.default.createElement(_SkipLinkAnchor2.default, { label: mainContentLabel });
	      }

	      if (this.props.className) {
	        classes.push(this.props.className);
	      }

	      var style = {};
	      if (this.props.texture && 'string' === typeof this.props.texture) {
	        style.backgroundImage = this.props.texture;
	      } else if (this.props.backgroundImage) {
	        style.background = this.props.backgroundImage + " no-repeat center center";
	        style.backgroundSize = "cover";
	      }
	      var texture = void 0;
	      if ('object' === _typeof(this.props.texture)) {
	        texture = _react2.default.createElement(
	          'div',
	          { className: CLASS_ROOT + "__texture" },
	          this.props.texture
	        );
	      }

	      var eventRegex = /^on[A-Z].*$/;
	      var eventListeners = {};
	      Object.keys(this.props).forEach(function (prop) {
	        if (eventRegex.test(prop)) {
	          eventListeners[prop] = _this2.props[prop];
	        }
	      });

	      if (this.props.appCentered) {
	        return _react2.default.createElement(
	          'div',
	          _extends({ ref: 'boxContainer', className: containerClasses.join(' '),
	            style: style, role: this.props.role }, a11yProps, eventListeners),
	          skipLinkAnchor,
	          _react2.default.createElement(
	            this.props.tag,
	            { id: this.props.id, className: classes.join(' ') },
	            texture,
	            this.props.children
	          )
	        );
	      } else {
	        return _react2.default.createElement(
	          this.props.tag,
	          _extends({ ref: 'boxContainer', id: this.props.id,
	            className: classes.join(' '), style: style,
	            role: this.props.role, tabIndex: this.props.tabIndex }, a11yProps, eventListeners),
	          skipLinkAnchor,
	          texture,
	          this.props.children
	        );
	      }
	    }
	  }]);

	  return Box;
	}(_react.Component);

	exports.default = Box;


	Box.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  align: _react.PropTypes.oneOf(['start', 'center', 'end', 'baseline', 'stretch']),
	  alignContent: _react.PropTypes.oneOf(['start', 'center', 'end', 'between', 'around', 'stretch']),
	  appCentered: _react.PropTypes.bool,
	  backgroundImage: _react.PropTypes.string,
	  colorIndex: _react.PropTypes.string,
	  containerClassName: _react.PropTypes.string,
	  direction: _react.PropTypes.oneOf(['row', 'column']),
	  focusable: _react.PropTypes.bool,
	  full: _react.PropTypes.oneOf([true, 'horizontal', 'vertical', false]),
	  onClick: _react.PropTypes.func,
	  justify: _react.PropTypes.oneOf(['start', 'center', 'between', 'end']),
	  pad: _react.PropTypes.oneOfType([_react.PropTypes.oneOf(['none', 'small', 'medium', 'large']), _react.PropTypes.shape({
	    between: _react.PropTypes.oneOf(['none', 'small', 'medium', 'large']),
	    horizontal: _react.PropTypes.oneOf(['none', 'small', 'medium', 'large']),
	    vertical: _react.PropTypes.oneOf(['none', 'small', 'medium', 'large'])
	  })]),
	  primary: _react.PropTypes.bool,
	  reverse: _react.PropTypes.bool,
	  responsive: _react.PropTypes.bool,
	  role: _react.PropTypes.string,
	  separator: _react.PropTypes.oneOf(['top', 'bottom', 'left', 'right', 'horizontal', 'vertical', 'all', 'none']),
	  tag: _react.PropTypes.string,
	  textAlign: _react.PropTypes.oneOf(['left', 'center', 'right']),
	  texture: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.string]),
	  wrap: _react.PropTypes.bool
	};

	Box.contextTypes = {
	  intl: _react.PropTypes.object
	};

	Box.defaultProps = {
	  direction: 'column',
	  pad: 'none',
	  tag: 'div',
	  responsive: true,
	  focusable: true
	};
	module.exports = exports['default'];

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _reactDom = __webpack_require__(333);

	// Allow callers to use key labels instead of key code numbers.
	// This makes their code easier to read.
	var KEYS = {
	  backspace: 8,
	  tab: 9,
	  enter: 13,
	  esc: 27,
	  escape: 27,
	  space: 32,
	  left: 37,
	  up: 38,
	  right: 39,
	  down: 40,
	  comma: 188,
	  shift: 16
	}; // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var _keyboardAccelerators = {};
	var _listeners = [];
	var _isKeyboardAcceleratorListening = false;

	var _onKeyboardAcceleratorKeyPress = function _onKeyboardAcceleratorKeyPress(e) {
	  var key = e.keyCode ? e.keyCode : e.which;
	  _listeners.slice().reverse().some(function (listener) {
	    if (_keyboardAccelerators[listener]) {
	      var handlers = _keyboardAccelerators[listener].handlers;
	      if (handlers.hasOwnProperty(key)) {
	        if (handlers[key](e)) {
	          return true;
	        }
	      }
	    }
	    return false;
	  });
	};

	// KeyboardAccelerators is a utility for handling keyboard events.
	// Add listeners using startListeningToKeyboard().
	// Remove listeners using stopListeningToKeyboard().
	exports.default = {
	  _initKeyboardAccelerators: function _initKeyboardAccelerators(element) {
	    var id = element.getAttribute('data-reactid');
	    _keyboardAccelerators[id] = {
	      handlers: {}
	    };
	  },
	  _getKeyboardAcceleratorHandlers: function _getKeyboardAcceleratorHandlers(element) {
	    var id = element.getAttribute('data-reactid');
	    return _keyboardAccelerators[id].handlers;
	  },
	  _getDowns: function _getDowns(element) {
	    var id = element.getAttribute('data-reactid');
	    return _keyboardAccelerators[id].downs;
	  },
	  _isComponentListening: function _isComponentListening(element) {
	    var id = element.getAttribute('data-reactid');

	    return _listeners.some(function (listener) {
	      return listener === id;
	    });
	  },
	  _subscribeComponent: function _subscribeComponent(element) {
	    var id = element.getAttribute('data-reactid');
	    _listeners.push(id);
	  },
	  _unsubscribeComponent: function _unsubscribeComponent(element) {
	    var id = element.getAttribute('data-reactid');

	    var removeListenerIndex = _listeners.indexOf(id);
	    _listeners.splice(removeListenerIndex, 1);

	    delete _keyboardAccelerators[id];
	  },


	  // Add handlers for specific keys.
	  // This function can be called multiple times, existing handlers will
	  // be replaced, new handlers will be added.
	  startListeningToKeyboard: function startListeningToKeyboard(component, handlers) {
	    var element = (0, _reactDom.findDOMNode)(component);
	    this._initKeyboardAccelerators(element);
	    var keys = 0;
	    for (var key in handlers) {
	      if (handlers.hasOwnProperty(key)) {
	        var keyCode = key;
	        if (KEYS.hasOwnProperty(key)) {
	          keyCode = KEYS[key];
	        }
	        keys += 1;
	        this._getKeyboardAcceleratorHandlers(element)[keyCode] = handlers[key];
	      }
	    }

	    if (keys > 0) {
	      if (!_isKeyboardAcceleratorListening) {
	        window.addEventListener("keydown", _onKeyboardAcceleratorKeyPress);
	        _isKeyboardAcceleratorListening = true;
	      }
	      if (!this._isComponentListening(element)) {
	        this._subscribeComponent(element);
	      }
	    }
	  },


	  // Remove handlers for all keys or specific keys.
	  // If no argument is passed in, all handlers are removed.
	  // This function can be called multiple times, only the handlers
	  // specified will be removed.
	  stopListeningToKeyboard: function stopListeningToKeyboard(component, handlers) {
	    var element = (0, _reactDom.findDOMNode)(component);
	    if (!this._isComponentListening(element)) {
	      return;
	    }
	    if (handlers) {
	      for (var key in handlers) {
	        if (handlers.hasOwnProperty(key)) {
	          var keyCode = key;
	          if (KEYS.hasOwnProperty(key)) {
	            keyCode = KEYS[key];
	          }
	          delete this._getKeyboardAcceleratorHandlers(element)[keyCode];
	        }
	      }
	    }

	    var keyCount = 0;
	    for (var keyHandler in this._getKeyboardAcceleratorHandlers(element)) {
	      if (this._getKeyboardAcceleratorHandlers(element).hasOwnProperty(keyHandler)) {
	        keyCount += 1;
	      }
	    }

	    if (!handlers || 0 === keyCount) {
	      this._initKeyboardAccelerators(element);
	      this._unsubscribeComponent(element);
	    }

	    if (_listeners.length === 0) {
	      window.removeEventListener("keydown", _onKeyboardAcceleratorKeyPress);
	      _isKeyboardAcceleratorListening = false;
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 368 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2014 Hewlett Packard Enterprise Development LP
	exports.default = {
	  getMessage: function getMessage(intl, key, values) {
	    if (intl) {
	      return intl.formatMessage({
	        id: key,
	        defaultMessage: key
	      }, values);
	    } else {
	      return key;
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var SkipLinkAnchor = function (_Component) {
	  _inherits(SkipLinkAnchor, _Component);

	  function SkipLinkAnchor() {
	    _classCallCheck(this, SkipLinkAnchor);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(SkipLinkAnchor).apply(this, arguments));
	  }

	  _createClass(SkipLinkAnchor, [{
	    key: 'render',
	    value: function render() {
	      var id = 'skip-link-' + this.props.label.toLowerCase().replace(/ /g, '_');

	      return _react2.default.createElement(
	        'a',
	        { tabIndex: '-1', 'aria-hidden': 'true', id: id, className: 'skip-link-anchor' },
	        this.props.label
	      );
	    }
	  }]);

	  return SkipLinkAnchor;
	}(_react.Component);

	exports.default = SkipLinkAnchor;
	;

	SkipLinkAnchor.propTypes = {
	  label: _react.PropTypes.node.isRequired
	};
	module.exports = exports['default'];

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(333);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Close = __webpack_require__(371);

	var _Close2 = _interopRequireDefault(_Close);

	var _KeyboardAccelerators = __webpack_require__(367);

	var _KeyboardAccelerators2 = _interopRequireDefault(_KeyboardAccelerators);

	var _DOM = __webpack_require__(373);

	var _DOM2 = _interopRequireDefault(_DOM);

	var _Button = __webpack_require__(374);

	var _Button2 = _interopRequireDefault(_Button);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = "layer";

	var LayerContents = function (_Component) {
	  _inherits(LayerContents, _Component);

	  function LayerContents() {
	    _classCallCheck(this, LayerContents);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LayerContents).call(this));

	    _this._processTab = _this._processTab.bind(_this);
	    return _this;
	  }

	  _createClass(LayerContents, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        history: this.props.history,
	        intl: this.props.intl,
	        router: this.props.router,
	        store: this.props.store
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var items = this.refs.container.getElementsByTagName('*');
	      var firstFocusable = _DOM2.default.getBestFirstFocusable(items);
	      if (firstFocusable) {
	        firstFocusable.focus();
	      }

	      this._keyboardHandlers = {
	        tab: this._processTab
	      };

	      if (this.props.onClose) {
	        this._keyboardHandlers.esc = this.props.onClose;
	      }

	      _KeyboardAccelerators2.default.startListeningToKeyboard(this, this._keyboardHandlers);

	      if (this.props.a11yCloserTitle) {
	        console.log('a11yCloserTitle prop has been deprecated. Please use a11yTitle instead.');
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.hidden) {
	        _KeyboardAccelerators2.default.stopListeningToKeyboard(this, this._keyboardHandlers);
	      };
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _KeyboardAccelerators2.default.stopListeningToKeyboard(this, this._keyboardHandlers);
	    }
	  }, {
	    key: '_processTab',
	    value: function _processTab(event) {
	      var items = this.refs.container.getElementsByTagName('*');
	      items = _DOM2.default.filterByFocusable(items);

	      if (!items || items.length === 0) {
	        event.preventDefault();
	      } else {
	        if (event.shiftKey) {
	          if (event.target === items[0]) {
	            items[items.length - 1].focus();
	            event.preventDefault();
	          }
	        } else if (event.target === items[items.length - 1]) {
	          items[0].focus();
	          event.preventDefault();
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var closer = null;
	      if (this.props.onClose && this.props.closer) {
	        //TODO: remove a11yCloserTitle after 0.6 release
	        var closeLabel = _Intl2.default.getMessage(this.context.intl, 'Close');
	        var layerLabel = _Intl2.default.getMessage(this.context.intl, 'Layer');
	        var a11yTitle = this.props.a11yCloserTitle || closeLabel + ' ' + (this.props.a11yTitle || '') + ' ' + layerLabel;

	        closer = _react2.default.createElement(
	          'div',
	          { className: CLASS_ROOT + "__closer" },
	          _react2.default.createElement(
	            _Button2.default,
	            { plain: true, onClick: this.props.onClose },
	            _react2.default.createElement(_Close2.default, { a11yTitle: a11yTitle })
	          )
	        );
	      }

	      return _react2.default.createElement(
	        'div',
	        { ref: 'container', className: CLASS_ROOT + "__container" },
	        closer,
	        this.props.children
	      );
	    }
	  }]);

	  return LayerContents;
	}(_react.Component);

	LayerContents.propTypes = {
	  //deprecated
	  a11yCloserTitle: _react.PropTypes.string,
	  a11yTitle: _react.PropTypes.string,
	  closer: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.bool]),
	  history: _react.PropTypes.object,
	  intl: _react.PropTypes.object,
	  onClose: _react.PropTypes.func,
	  router: _react.PropTypes.any,
	  store: _react.PropTypes.any
	};

	// Because Layer creates a new DOM render context, the context
	// is not transfered. For now, we hard code these specific ones.
	// TODO: Either figure out how to introspect the context and transfer
	// whatever we find or have callers explicitly indicate which parts
	// of the context to transfer somehow.
	LayerContents.childContextTypes = {
	  history: _react.PropTypes.object,
	  intl: _react.PropTypes.object,
	  router: _react.PropTypes.any,
	  store: _react.PropTypes.object
	};

	var Layer = function (_Component2) {
	  _inherits(Layer, _Component2);

	  function Layer() {
	    _classCallCheck(this, Layer);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Layer).apply(this, arguments));
	  }

	  _createClass(Layer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._originalFocusedElement = document.activeElement;
	      this._addLayer();
	      this._renderLayer();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._renderLayer();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {

	      if (this._originalFocusedElement) {
	        this._originalFocusedElement.focus();
	      }

	      this._removeLayer();
	    }
	  }, {
	    key: '_classesFromProps',
	    value: function _classesFromProps() {
	      var classes = ['grommet', CLASS_ROOT];
	      if (this.props.align) {
	        classes.push(CLASS_ROOT + "--align-" + this.props.align);
	      }
	      if (this.props.flush) {
	        classes.push(CLASS_ROOT + "--flush");
	      }
	      if (this.props.hidden) {
	        classes.push(CLASS_ROOT + "--hidden");
	      }
	      if (this.props.peek) {
	        classes.push(CLASS_ROOT + "--peek");
	      }
	      if (this.props.closer) {
	        classes.push(CLASS_ROOT + "--closeable");
	      }
	      if (this.props.className) {
	        classes.push(this.props.className);
	      }
	      return classes;
	    }
	  }, {
	    key: '_addLayer',
	    value: function _addLayer() {
	      var element = document.createElement('div');
	      if (this.props.id) {
	        element.id = this.props.id;
	      }
	      element.className = this._classesFromProps().join(' ');
	      // insert before .app, if possible.
	      var appElements = document.querySelectorAll('.app');
	      var beforeElement;
	      if (appElements.length > 0) {
	        beforeElement = appElements[0];
	      } else {
	        beforeElement = document.body.firstChild;
	      }
	      this._element = beforeElement.parentNode.insertBefore(element, beforeElement);
	    }
	  }, {
	    key: '_handleAriaHidden',
	    value: function _handleAriaHidden(hideOverlay) {
	      this._element.setAttribute('aria-hidden', hideOverlay || false);
	    }
	  }, {
	    key: '_renderLayer',
	    value: function _renderLayer() {
	      this._element.className = this._classesFromProps().join(' ');
	      var contents = _react2.default.createElement(LayerContents, _extends({}, this.props, {
	        history: this.context.history,
	        intl: this.context.intl,
	        router: this.context.router,
	        store: this.context.store }));
	      _reactDom2.default.render(contents, this._element);
	      this._handleAriaHidden(this.props.hidden);
	    }
	  }, {
	    key: '_removeLayer',
	    value: function _removeLayer() {
	      this._element.removeEventListener('animationend', this._onAnimationEnd);
	      this._handleAriaHidden(true);

	      _reactDom2.default.unmountComponentAtNode(this._element);
	      this._element.parentNode.removeChild(this._element);
	      this._element = null;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('span', null);
	    }
	  }]);

	  return Layer;
	}(_react.Component);

	exports.default = Layer;


	Layer.propTypes = {
	  align: _react.PropTypes.oneOf(['center', 'top', 'bottom', 'left', 'right']),
	  closer: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.bool]),
	  flush: _react.PropTypes.bool,
	  hidden: _react.PropTypes.bool,
	  peek: _react.PropTypes.bool,
	  onClose: _react.PropTypes.func
	};

	Layer.contextTypes = {
	  router: _react.PropTypes.any,
	  history: _react.PropTypes.object,
	  intl: _react.PropTypes.object,
	  store: _react.PropTypes.object
	};

	Layer.defaultProps = {
	  align: 'center'
	};
	module.exports = exports['default'];

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(372);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var _FormattedMessage = __webpack_require__(342);

	var _FormattedMessage2 = _interopRequireDefault(_FormattedMessage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = 'control-icon';

	var Icon = function (_Component) {
	  _inherits(Icon, _Component);

	  function Icon() {
	    _classCallCheck(this, Icon);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Icon).apply(this, arguments));
	  }

	  _createClass(Icon, [{
	    key: 'render',
	    value: function render() {
	      var _classnames;

	      var _props = this.props;
	      var a11yTitle = _props.a11yTitle;
	      var a11yTitleId = _props.a11yTitleId;
	      var className = _props.className;
	      var colorIndex = _props.colorIndex;
	      var large = _props.large;
	      var size = _props.size;


	      if (!size && large) {
	        size = 'large';
	      }

	      var classes = (0, _classnames3.default)(CLASS_ROOT, CLASS_ROOT + '-close', className, (_classnames = {}, _defineProperty(_classnames, CLASS_ROOT + '--' + size, size), _defineProperty(_classnames, 'color-index-' + colorIndex, colorIndex), _classnames));

	      var titleLabel = a11yTitle || 'close';
	      a11yTitle = _react2.default.createElement(_FormattedMessage2.default, { id: titleLabel, defaultMessage: titleLabel });

	      return _react2.default.createElement(
	        'svg',
	        { version: '1.1', viewBox: '0 0 24 24', width: '24px', height: '24px', className: classes, 'aria-labelledby': a11yTitleId },
	        _react2.default.createElement(
	          'title',
	          { id: a11yTitleId },
	          a11yTitle
	        ),
	        _react2.default.createElement(
	          'g',
	          { id: 'close' },
	          _react2.default.createElement('rect', { id: '_x2E_svg', x: '0', y: '0', fill: 'none', width: '24', height: '24' }),
	          _react2.default.createElement('path', { fill: 'none', stroke: '#000000', strokeWidth: '2', strokeMiterlimit: '10', d: 'M3,21L21,3 M3,3l18,18' })
	        )
	      );
	    }
	  }]);

	  return Icon;
	}(_react.Component);

	exports.default = Icon;
	;

	Icon.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  a11yTitleId: _react.PropTypes.string,
	  colorIndex: _react.PropTypes.string,
	  large: _react.PropTypes.bool,
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large', 'huge'])
	};

	Icon.defaultProps = {
	  a11yTitleId: 'close-title'
	};

	Icon.icon = true;

	Icon.displayName = 'Close';
	module.exports = exports['default'];

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 373 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP
	exports.default = {
	  findScrollParents: function findScrollParents(element, horizontal) {
	    var result = [];
	    var parent = element.parentNode;
	    while (parent && parent.getBoundingClientRect) {
	      var rect = parent.getBoundingClientRect();
	      // 10px is to account for borders and scrollbars in a lazy way
	      if (horizontal) {
	        if (rect.width && parent.scrollWidth > rect.width + 10) {
	          result.push(parent);
	        }
	      } else {
	        if (rect.height && parent.scrollHeight > rect.height + 10) {
	          result.push(parent);
	        }
	      }
	      parent = parent.parentNode;
	    }
	    if (result.length === 0) {
	      result.push(document);
	    }
	    return result;
	  },
	  isDescendant: function isDescendant(parent, child) {
	    var node = child.parentNode;
	    while (node != null) {
	      if (node == parent) {
	        return true;
	      }
	      node = node.parentNode;
	    }
	    return false;
	  },
	  findAncestor: function findAncestor(element, className) {
	    var node = element.parentNode;
	    while (node != null) {
	      if (node.classList && node.classList.contains(className)) {
	        break;
	      }
	      node = node.parentNode;
	    }
	    return node;
	  },
	  filterByFocusable: function filterByFocusable(elements) {
	    return Array.prototype.filter.call(elements || [], function (element) {
	      var currentTag = element.tagName.toLowerCase();
	      var validTags = /(svg|a|area|input|select|textarea|button|iframe)$/;
	      var isValidTag = currentTag.match(validTags) && element.focus;

	      if (currentTag === 'a') {
	        return isValidTag && element.childNodes.length > 0;
	      } else if (currentTag === 'svg') {
	        return isValidTag && element.hasAttribute('tabindex');
	      }

	      return isValidTag;
	    });
	  },
	  getBestFirstFocusable: function getBestFirstFocusable(elements) {
	    var bestFirstFocusable;

	    Array.prototype.some.call(elements || [], function (element) {
	      var currentTag = element.tagName.toLowerCase();
	      var isValidTag = currentTag.match(/(input|select|textarea)$/);
	      return isValidTag ? (bestFirstFocusable = element, true) : false;
	    });

	    if (!bestFirstFocusable) {
	      bestFirstFocusable = this.filterByFocusable(elements)[0];
	    }

	    return bestFirstFocusable;
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(372);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2016 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = 'button';

	var Button = function (_Component) {
	  _inherits(Button, _Component);

	  function Button() {
	    _classCallCheck(this, Button);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Button).apply(this, arguments));
	  }

	  _createClass(Button, [{
	    key: 'render',
	    value: function render() {
	      var _classnames;

	      var plain = this.props.plain !== undefined ? this.props.plain : this.props.icon && !this.props.label;
	      var classes = (0, _classnames3.default)(CLASS_ROOT, this.props.className, (_classnames = {}, _defineProperty(_classnames, CLASS_ROOT + '--primary', this.props.primary), _defineProperty(_classnames, CLASS_ROOT + '--secondary', this.props.secondary), _defineProperty(_classnames, CLASS_ROOT + '--accent', this.props.accent), _defineProperty(_classnames, CLASS_ROOT + '--disabled', !this.props.onClick && !this.props.href), _defineProperty(_classnames, CLASS_ROOT + '--fill', this.props.fill), _defineProperty(_classnames, CLASS_ROOT + '--plain', plain), _defineProperty(_classnames, CLASS_ROOT + '--icon', this.props.icon), _classnames));

	      var icon = void 0;
	      if (this.props.icon) {
	        icon = _react2.default.createElement(
	          'span',
	          { className: CLASS_ROOT + '__icon' },
	          this.props.icon
	        );
	      }

	      var children = _react2.default.Children.map(this.props.children, function (child) {
	        if (child && child.type && child.type.icon) {
	          child = _react2.default.createElement(
	            'span',
	            { className: CLASS_ROOT + '__icon' },
	            child
	          );
	        }

	        return child;
	      });

	      if (!children) {
	        children = this.props.label;
	      }

	      var Tag = this.props.href ? 'a' : 'button';

	      return _react2.default.createElement(
	        Tag,
	        { href: this.props.href, id: this.props.id, type: this.props.type,
	          className: classes, 'aria-label': this.props.a11yTitle,
	          onClick: this.props.onClick, disabled: !this.props.onClick },
	        icon,
	        children
	      );
	    }
	  }]);

	  return Button;
	}(_react.Component);

	exports.default = Button;
	;

	Button.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  accent: _react.PropTypes.bool,
	  fill: _react.PropTypes.bool,
	  icon: _react.PropTypes.element,
	  id: _react.PropTypes.string,
	  label: _react.PropTypes.node,
	  onClick: _react.PropTypes.func,
	  plain: _react.PropTypes.bool,
	  primary: _react.PropTypes.bool,
	  secondary: _react.PropTypes.bool,
	  type: _react.PropTypes.oneOf(['button', 'reset', 'submit'])
	};

	Button.defaultProps = {
	  type: 'button'
	};
	module.exports = exports['default'];

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(333);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames3 = __webpack_require__(372);

	var _classnames4 = _interopRequireDefault(_classnames3);

	var _KeyboardAccelerators = __webpack_require__(367);

	var _KeyboardAccelerators2 = _interopRequireDefault(_KeyboardAccelerators);

	var _DOM = __webpack_require__(373);

	var _DOM2 = _interopRequireDefault(_DOM);

	var _Drop = __webpack_require__(376);

	var _Drop2 = _interopRequireDefault(_Drop);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	var _Props = __webpack_require__(377);

	var _Props2 = _interopRequireDefault(_Props);

	var _Responsive = __webpack_require__(378);

	var _Responsive2 = _interopRequireDefault(_Responsive);

	var _Box = __webpack_require__(366);

	var _Box2 = _interopRequireDefault(_Box);

	var _Button = __webpack_require__(374);

	var _Button2 = _interopRequireDefault(_Button);

	var _Down = __webpack_require__(379);

	var _Down2 = _interopRequireDefault(_Down);

	var _More = __webpack_require__(380);

	var _More2 = _interopRequireDefault(_More);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = 'menu';

	function isFunction(obj) {
	  return obj && obj.constructor && obj.call && obj.apply;
	}

	// We have a separate module for the drop component
	// so we can transfer the router context.

	var MenuDrop = function (_Component) {
	  _inherits(MenuDrop, _Component);

	  function MenuDrop() {
	    _classCallCheck(this, MenuDrop);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MenuDrop).call(this));

	    _this._onUpKeyPress = _this._onUpKeyPress.bind(_this);
	    _this._onDownKeyPress = _this._onDownKeyPress.bind(_this);
	    _this._processTab = _this._processTab.bind(_this);
	    return _this;
	  }

	  _createClass(MenuDrop, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        intl: this.props.intl,
	        history: this.props.history,
	        router: this.props.router,
	        store: this.props.store
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._originalFocusedElement = document.activeElement;
	      this._keyboardHandlers = {
	        tab: this._processTab,
	        up: this._onUpKeyPress,
	        left: this._onUpKeyPress,
	        down: this._onDownKeyPress,
	        right: this._onDownKeyPress
	      };
	      _KeyboardAccelerators2.default.startListeningToKeyboard(this, this._keyboardHandlers);

	      var container = _reactDom2.default.findDOMNode(this.refs.navContainer);
	      var menuItems = container.childNodes;
	      for (var i = 0; i < menuItems.length; i++) {
	        var classes = menuItems[i].className.toString();
	        var tagName = menuItems[i].tagName.toLowerCase();
	        // want to skip items of the menu that are not focusable.
	        if (tagName !== 'button' && tagName !== 'a' && classes.indexOf('check-box') === -1) {
	          continue;
	        }
	        menuItems[i].setAttribute('role', 'menuitem');

	        if (!menuItems[i].getAttribute('id')) {
	          menuItems[i].setAttribute('id', menuItems[i].getAttribute('data-reactid'));
	        }
	      }

	      container.setAttribute('aria-activedescendant', menuItems[0].getAttribute('id'));

	      var menuDrop = _reactDom2.default.findDOMNode(this.refs.menuDrop);
	      var items = menuDrop.getElementsByTagName('*');
	      var firstFocusable = _DOM2.default.getBestFirstFocusable(items);
	      if (firstFocusable) {
	        firstFocusable.focus();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._originalFocusedElement.focus();
	      _KeyboardAccelerators2.default.stopListeningToKeyboard(this, this._keyboardHandlers);
	    }
	  }, {
	    key: '_processTab',
	    value: function _processTab(event) {
	      var container = _reactDom2.default.findDOMNode(this.refs.menuDrop);
	      var items = container.getElementsByTagName('*');
	      items = _DOM2.default.filterByFocusable(items);

	      if (!items || items.length === 0) {
	        event.preventDefault();
	      } else {
	        if (event.shiftKey) {
	          if (event.target === items[0]) {
	            items[items.length - 1].focus();
	            event.preventDefault();
	          }
	        } else if (event.target === items[items.length - 1]) {
	          items[0].focus();
	          event.preventDefault();
	        }
	      }
	    }
	  }, {
	    key: '_onUpKeyPress',
	    value: function _onUpKeyPress(event) {
	      event.preventDefault();
	      var container = _reactDom2.default.findDOMNode(this.refs.navContainer);
	      var menuItems = container.childNodes;
	      if (!this.activeMenuItem) {
	        var lastMenuItem = menuItems[menuItems.length - 1];
	        this.activeMenuItem = lastMenuItem;
	      } else if (this.activeMenuItem.previousSibling) {
	        this.activeMenuItem = this.activeMenuItem.previousSibling;
	      }

	      var classes = this.activeMenuItem.className.split(/\s+/);
	      var tagName = this.activeMenuItem.tagName.toLowerCase();
	      // want to skip items of the menu that are not focusable.
	      if (tagName !== 'button' && tagName !== 'a' && classes.indexOf('check-box') === -1) {
	        if (this.activeMenuItem === menuItems[0]) {
	          return true;
	        } else {
	          // If this item is not focusable, check the next item.
	          return this._onUpKeyPress(event);
	        }
	      }

	      this.activeMenuItem.focus();
	      container.setAttribute('aria-activedescendant', this.activeMenuItem.getAttribute('id'));
	      // Stops KeyboardAccelerators from calling the other listeners.
	      // Works limilar to event.stopPropagation().
	      return true;
	    }
	  }, {
	    key: '_onDownKeyPress',
	    value: function _onDownKeyPress(event) {
	      event.preventDefault();
	      var container = _reactDom2.default.findDOMNode(this.refs.navContainer);
	      var menuItems = container.childNodes;
	      if (!this.activeMenuItem) {
	        this.activeMenuItem = menuItems[0];
	      } else if (this.activeMenuItem.nextSibling) {
	        this.activeMenuItem = this.activeMenuItem.nextSibling;
	      }

	      var classes = this.activeMenuItem.className.split(/\s+/);
	      var tagName = this.activeMenuItem.tagName.toLowerCase();
	      // want to skip items of the menu that are not focusable.
	      if (tagName !== 'button' && tagName !== 'a' && classes.indexOf('check-box') === -1) {
	        if (this.activeMenuItem === menuItems[menuItems.length - 1]) {
	          return true;
	        } else {
	          // If this item is not focusable, check the next item.
	          return this._onDownKeyPress(event);
	        }
	      }

	      this.activeMenuItem.focus();
	      container.setAttribute('aria-activedescendant', this.activeMenuItem.getAttribute('id'));
	      // Stops KeyboardAccelerators from calling the other listeners.
	      // Works limilar to event.stopPropagation().
	      return true;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classnames;

	      var _props = this.props;
	      var dropAlign = _props.dropAlign;
	      var size = _props.size;
	      var control = _props.control;
	      var id = _props.id;
	      var colorIndex = _props.colorIndex;
	      var onClick = _props.onClick;

	      var boxProps = _Props2.default.pick(this.props, Object.keys(_Box2.default.propTypes));
	      delete boxProps.colorIndex; // manage colorIndex at the outer menuDrop element

	      delete boxProps.onClick;

	      // Put nested Menus inline
	      var children = _react2.default.Children.map(this.props.children, function (child) {
	        var result = child;
	        if (child && isFunction(child.type) && child.type.prototype._renderMenuDrop) {
	          result = _react2.default.cloneElement(child, { inline: 'explode', direction: 'column' });
	        }
	        return result;
	      });

	      var contents = [_react2.default.cloneElement(control, { key: 'control', fill: true }), _react2.default.createElement(
	        _Box2.default,
	        _extends({}, boxProps, { key: 'nav', ref: 'navContainer',
	          role: 'menu', tag: 'nav', className: CLASS_ROOT + '__contents',
	          primary: false }),
	        children
	      )];

	      if (dropAlign.bottom) {
	        contents.reverse();
	      }

	      var classes = (0, _classnames4.default)(CLASS_ROOT + '__drop', (_classnames = {}, _defineProperty(_classnames, CLASS_ROOT + '__drop--align-right', dropAlign.right), _defineProperty(_classnames, CLASS_ROOT + '__drop--' + size, size), _classnames));

	      return _react2.default.createElement(
	        _Box2.default,
	        { ref: 'menuDrop', id: id, className: classes, colorIndex: colorIndex,
	          onClick: onClick },
	        contents
	      );
	    }
	  }]);

	  return MenuDrop;
	}(_react.Component);

	MenuDrop.propTypes = _extends({}, _Box2.default.propTypes, {
	  control: _react.PropTypes.node,
	  dropAlign: _Drop2.default.alignPropType,
	  id: _react.PropTypes.string.isRequired,
	  onClick: _react.PropTypes.func.isRequired,
	  router: _react.PropTypes.any,
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large']),
	  store: _react.PropTypes.any
	});

	MenuDrop.childContextTypes = {
	  intl: _react.PropTypes.any,
	  history: _react.PropTypes.any,
	  router: _react.PropTypes.any,
	  store: _react.PropTypes.any
	};

	var Menu = function (_Component2) {
	  _inherits(Menu, _Component2);

	  function Menu(props) {
	    _classCallCheck(this, Menu);

	    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Menu).call(this, props));

	    _this2._onOpen = _this2._onOpen.bind(_this2);
	    _this2._onClose = _this2._onClose.bind(_this2);
	    _this2._onSink = _this2._onSink.bind(_this2);
	    _this2._onResponsive = _this2._onResponsive.bind(_this2);
	    _this2._onFocusControl = _this2._onFocusControl.bind(_this2);
	    _this2._onBlurControl = _this2._onBlurControl.bind(_this2);

	    var inline = void 0;
	    if (props.hasOwnProperty('inline')) {
	      inline = props.inline;
	    } else {
	      inline = !props.label && !props.icon;
	    }
	    var responsive = void 0;
	    if (props.hasOwnProperty('responsive')) {
	      responsive = props.responsive;
	    } else {
	      responsive = inline && 'row' === props.direction;
	    }
	    _this2.state = {
	      // state may be 'collapsed', 'focused' or 'expanded' (active).
	      state: 'collapsed',
	      initialInline: inline,
	      inline: inline,
	      responsive: responsive,
	      dropId: 'menuDrop'
	    };
	    return _this2;
	  }

	  _createClass(Menu, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.refs.control) {
	        var controlElement = this.refs.control.firstChild;
	        this.setState({
	          dropId: 'menu-drop-' + controlElement.getAttribute('data-reactid'),
	          controlHeight: controlElement.clientHeight
	        });
	      }

	      if (this.state.responsive) {
	        this._responsive = _Responsive2.default.start(this._onResponsive);
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.state !== prevState.state) {
	        var activeKeyboardHandlers = {
	          esc: this._onClose
	        };
	        var focusedKeyboardHandlers = {
	          space: this._onOpen,
	          down: this._onOpen,
	          enter: this._onOpen
	        };

	        switch (this.state.state) {
	          case 'collapsed':
	            _KeyboardAccelerators2.default.stopListeningToKeyboard(this, focusedKeyboardHandlers);
	            _KeyboardAccelerators2.default.stopListeningToKeyboard(this, activeKeyboardHandlers);
	            document.removeEventListener('click', this._onClose);
	            if (this._drop) {
	              this._drop.remove();
	              this._drop = null;
	            }
	            break;
	          case 'focused':
	            _KeyboardAccelerators2.default.stopListeningToKeyboard(this, activeKeyboardHandlers);
	            _KeyboardAccelerators2.default.startListeningToKeyboard(this, focusedKeyboardHandlers);
	            break;
	          case 'expanded':
	            _KeyboardAccelerators2.default.stopListeningToKeyboard(this, focusedKeyboardHandlers);
	            _KeyboardAccelerators2.default.startListeningToKeyboard(this, activeKeyboardHandlers);
	            document.addEventListener('click', this._onClose);
	            this._drop = _Drop2.default.add(this.refs.control, this._renderMenuDrop(), {
	              align: this.props.dropAlign,
	              colorIndex: this.props.dropColorIndex
	            });
	            this._drop.render(this._renderMenuDrop());
	            break;
	        }
	      } else if (this.state.state === 'expanded') {
	        this._drop.render(this._renderMenuDrop());
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      document.removeEventListener('click', this._onClose);
	      _KeyboardAccelerators2.default.stopListeningToKeyboard(this);
	      if (this._drop) {
	        this._drop.remove();
	      }
	      if (this._responsive) {
	        this._responsive.stop();
	      }
	    }
	  }, {
	    key: '_onOpen',
	    value: function _onOpen() {
	      this.setState({ state: 'expanded' });
	    }
	  }, {
	    key: '_onClose',
	    value: function _onClose() {
	      this.setState({ state: 'collapsed' });
	    }
	  }, {
	    key: '_onSink',
	    value: function _onSink(event) {
	      event.stopPropagation();
	      // need to go native to prevent closing via document
	      event.nativeEvent.stopImmediatePropagation();
	    }
	  }, {
	    key: '_onResponsive',
	    value: function _onResponsive(small) {
	      // deactivate if we change resolutions
	      var newState = this.state.state;
	      if (this.state.state === 'expanded') {
	        newState = 'focused';
	      }
	      if (small) {
	        this.setState({ inline: false, active: newState, controlCollapsed: true });
	      } else {
	        this.setState({
	          inline: this.state.initialInline,
	          active: newState,
	          state: 'collapsed',
	          controlCollapsed: false
	        });
	      }
	    }
	  }, {
	    key: '_onFocusControl',
	    value: function _onFocusControl() {
	      this.setState({ state: 'focused' });
	    }
	  }, {
	    key: '_onBlurControl',
	    value: function _onBlurControl() {
	      if (this.state.state === 'focused') {
	        this.setState({ state: 'collapsed' });
	      }
	    }
	  }, {
	    key: '_renderControlContents',
	    value: function _renderControlContents() {
	      var icon = void 0,
	          label = void 0;

	      // If this is a collapsed inline Menu, use any icon and/or label provided,
	      // revert to default icon if neither.
	      if (this.props.icon) {
	        icon = _react2.default.cloneElement(this.props.icon, { key: 'icon' });
	      }
	      if (this.props.label) {
	        label = [_react2.default.createElement(
	          'span',
	          { key: 'label', className: CLASS_ROOT + '__control-label' },
	          this.props.label
	        ), _react2.default.createElement(_Down2.default, { key: 'caret' })];
	      }
	      if (!icon && !label) {
	        icon = _react2.default.createElement(_More2.default, { key: 'icon' });
	      }
	      return [icon, label];
	    }
	  }, {
	    key: '_renderMenuDrop',
	    value: function _renderMenuDrop() {
	      var closeLabel = _Intl2.default.getMessage(this.context.intl, 'Close');
	      var menuLabel = _Intl2.default.getMessage(this.context.intl, 'Menu');
	      var menuTitle = closeLabel + ' ' + (this.props.a11yTitle || this.props.label || '') + ' ' + menuLabel;

	      var control = _react2.default.createElement(
	        _Button2.default,
	        { plain: true, className: CLASS_ROOT + '__control',
	          a11yTitle: menuTitle,
	          style: { lineHeight: this.state.controlHeight + 'px' },
	          onClick: this._onClose },
	        this._renderControlContents()
	      );

	      var boxProps = _Props2.default.pick(this.props, Object.keys(_Box2.default.propTypes));
	      var onClick = this.props.closeOnClick ? this._onClose : this._onSink;

	      return _react2.default.createElement(
	        MenuDrop,
	        _extends({}, boxProps, this.context, {
	          dropAlign: this.props.dropAlign,
	          size: this.props.size,
	          onClick: onClick,
	          id: this.state.dropId,
	          control: control }),
	        this.props.children
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classnames2;

	      var classes = (0, _classnames4.default)(CLASS_ROOT, this.props.className, (_classnames2 = {}, _defineProperty(_classnames2, CLASS_ROOT + '--' + this.props.direction, this.props.direction), _defineProperty(_classnames2, CLASS_ROOT + '--' + this.props.size, this.props.size), _defineProperty(_classnames2, CLASS_ROOT + '--primary', this.props.primary), _defineProperty(_classnames2, CLASS_ROOT + '--inline', this.state.inline), _defineProperty(_classnames2, CLASS_ROOT + '--explode', 'explode' === this.state.inline), _defineProperty(_classnames2, CLASS_ROOT + '--controlled', !this.state.inline), _defineProperty(_classnames2, CLASS_ROOT + '__control', !this.state.inline), _defineProperty(_classnames2, CLASS_ROOT + '--labelled', !this.state.inline && this.props.label), _classnames2));

	      if (this.state.inline) {
	        var boxProps = _Props2.default.pick(this.props, Object.keys(_Box2.default.propTypes));
	        var label = void 0;
	        if ('explode' === this.state.inline) {
	          label = _react2.default.createElement(
	            'div',
	            { className: CLASS_ROOT + '__label' },
	            this.props.label
	          );
	        }

	        return _react2.default.createElement(
	          _Box2.default,
	          _extends({}, boxProps, { tag: 'nav', id: this.props.id,
	            className: classes, primary: false }),
	          label,
	          this.props.children
	        );
	      } else {
	        var controlContents = this._renderControlContents();
	        var openLabel = _Intl2.default.getMessage(this.context.intl, 'Open');
	        var menuLabel = _Intl2.default.getMessage(this.context.intl, 'Menu');
	        var menuTitle = openLabel + ' ' + (this.props.a11yTitle || this.props.label || '') + ' ' + menuLabel;

	        return _react2.default.createElement(
	          'div',
	          { ref: 'control' },
	          _react2.default.createElement(
	            _Button2.default,
	            { plain: true, id: this.props.id,
	              className: classes,
	              tabIndex: '0',
	              style: { lineHeight: this.state.controlHeight + 'px' },
	              onClick: this._onOpen,
	              a11yTitle: menuTitle,
	              onFocus: this._onFocusControl,
	              onBlur: this._onBlurControl },
	            controlContents
	          )
	        );
	      }
	    }
	  }]);

	  return Menu;
	}(_react.Component);

	exports.default = Menu;


	Menu.propTypes = _extends({
	  closeOnClick: _react.PropTypes.bool,
	  dropAlign: _Drop2.default.alignPropType,
	  dropColorIndex: _react.PropTypes.string,
	  icon: _react.PropTypes.node,
	  id: _react.PropTypes.string,
	  inline: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.oneOf('expand')]),
	  label: _react.PropTypes.string,
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large'])
	}, _Box2.default.propTypes);

	Menu.contextTypes = {
	  intl: _react.PropTypes.any,
	  history: _react.PropTypes.any,
	  router: _react.PropTypes.any,
	  store: _react.PropTypes.any
	};

	Menu.defaultProps = {
	  closeOnClick: true,
	  direction: 'column',
	  dropAlign: { top: 'top', left: 'left' },
	  pad: 'none'
	};
	module.exports = exports['default'];

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // (C) Copyright 2014 Hewlett Packard Enterprise Development LP

	var _react = __webpack_require__(177);

	var _reactDom = __webpack_require__(333);

	var _DOM = __webpack_require__(373);

	var _DOM2 = _interopRequireDefault(_DOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*
	 * Drop is a utility for rendering components like drop down menus layered above
	 * their initiating controls.
	 */

	var VERTICAL_ALIGN_OPTIONS = ['top', 'bottom'];
	var HORIZONTAL_ALIGN_OPTIONS = ['right', 'left'];

	exports.default = {

	  // How callers can validate a property for drop alignment which will be passed to add().
	  alignPropType: _react.PropTypes.shape({
	    top: _react.PropTypes.oneOf(VERTICAL_ALIGN_OPTIONS),
	    bottom: _react.PropTypes.oneOf(VERTICAL_ALIGN_OPTIONS),
	    left: _react.PropTypes.oneOf(HORIZONTAL_ALIGN_OPTIONS),
	    right: _react.PropTypes.oneOf(HORIZONTAL_ALIGN_OPTIONS)
	  }),

	  // Add a drop component.
	  //
	  // control - DOM element to anchor the overlay on
	  // content - React node to render
	  // options - {
	  //   align: {
	  //     top: top|bottom
	  //     bottom: top|bottom
	  //     left: left|right
	  //     right: left|right
	  //   },
	  //   className: <string>
	  //   colorIndex: <string>
	  // }

	  add: function add(control, content, options) {
	    // normalize for older interface that just had align content
	    if (options.top || options.bottom || options.left || options.right) {
	      options = { align: options };
	    }
	    // validate align
	    if (options && options.align && options.align.top && VERTICAL_ALIGN_OPTIONS.indexOf(options.align.top) === -1) {
	      console.warn("Warning: Invalid align.top value '" + options.align.top + "' supplied to Drop," + "expected one of [" + VERTICAL_ALIGN_OPTIONS.join(',') + "]");
	    }
	    if (options.align && options.align.bottom && VERTICAL_ALIGN_OPTIONS.indexOf(options.align.bottom) === -1) {
	      console.warn("Warning: Invalid align.bottom value '" + options.align.bottom + "' supplied to Drop," + "expected one of [" + VERTICAL_ALIGN_OPTIONS.join(',') + "]");
	    }
	    if (options.align && options.align.left && HORIZONTAL_ALIGN_OPTIONS.indexOf(options.align.left) === -1) {
	      console.warn("Warning: Invalid align.left value '" + options.align.left + "' supplied to Drop," + "expected one of [" + HORIZONTAL_ALIGN_OPTIONS.join(',') + "]");
	    }
	    if (options.align && options.align.right && HORIZONTAL_ALIGN_OPTIONS.indexOf(options.align.right) === -1) {
	      console.warn("Warning: Invalid align.right value '" + options.align.right + "' supplied to Drop," + "expected one of [" + HORIZONTAL_ALIGN_OPTIONS.join(',') + "]");
	    }
	    var align = options.align || {};

	    // initialize data
	    var drop = {
	      control: control,
	      options: _extends({}, options, {
	        align: {
	          top: align.top,
	          bottom: align.bottom,
	          left: align.left,
	          right: align.right
	        }
	      })
	    };
	    if (!drop.options.align.top && !drop.options.align.bottom) {
	      drop.options.align.top = "top";
	    }
	    if (!drop.options.align.left && !drop.options.align.right) {
	      drop.options.align.left = "left";
	    }

	    // setup DOM
	    drop.container = document.createElement('div');
	    drop.container.className = 'grommet drop ' + (drop.options.className || '');
	    if (drop.options.colorIndex) {
	      drop.container.className += ' background-color-index-' + drop.options.colorIndex;
	    }
	    // prepend in body to avoid browser scroll issues
	    document.body.insertBefore(drop.container, document.body.firstChild);
	    (0, _reactDom.render)(content, drop.container);

	    drop.scrollParents = _DOM2.default.findScrollParents(drop.control);
	    drop.place = this._place.bind(this, drop);
	    drop.render = this._render.bind(this, drop);
	    drop.remove = this._remove.bind(this, drop);

	    drop.scrollParents.forEach(function (scrollParent) {
	      scrollParent.addEventListener('scroll', drop.place);
	    });
	    window.addEventListener('resize', drop.place);

	    // position content
	    this._place(drop);

	    return drop;
	  },
	  _render: function _render(drop, content) {
	    (0, _reactDom.render)(content, drop.container);
	    // in case content changed, re-place
	    setTimeout(this._place.bind(this, drop), 1);
	  },
	  _remove: function _remove(drop) {
	    drop.scrollParents.forEach(function (scrollParent) {
	      scrollParent.removeEventListener('scroll', drop.place);
	    });
	    window.removeEventListener('resize', drop.place);

	    (0, _reactDom.unmountComponentAtNode)(drop.container);
	    document.body.removeChild(drop.container);
	  },
	  _place: function _place(drop) {
	    var control = drop.control;
	    var container = drop.container;
	    var align = drop.options.align;
	    var windowWidth = window.innerWidth;
	    var windowHeight = window.innerHeight;

	    // clear prior styling
	    container.style.left = '';
	    container.style.width = '';
	    container.style.top = '';
	    container.style.maxHeight = '';

	    // get bounds
	    var controlRect = control.getBoundingClientRect();
	    var containerRect = container.getBoundingClientRect();
	    var bodyRect = document.body.getBoundingClientRect();

	    // set width
	    var width = Math.min(Math.max(controlRect.width, containerRect.width), windowWidth);

	    // set left position
	    var left;
	    if (align.left) {
	      if ('left' === align.left) {
	        left = controlRect.left;
	      } else if ('right' === align.left) {
	        left = controlRect.left - width;
	      }
	    } else if (align.right) {
	      if ('left' === align.right) {
	        left = controlRect.left - width;
	      } else if ('right' === align.right) {
	        left = controlRect.left + controlRect.width - width;
	      }
	    }
	    if (left + width > windowWidth) {
	      left -= left + width - windowWidth;
	    } else if (left < 0) {
	      left = 0;
	    }

	    // set top position
	    var top;
	    var maxHeight;
	    if (align.top) {
	      if ('top' === align.top) {
	        top = controlRect.top;
	        maxHeight = Math.min(windowHeight - controlRect.top, windowHeight);
	      } else {
	        top = controlRect.bottom;
	        maxHeight = Math.min(windowHeight - controlRect.bottom, windowHeight - controlRect.height);
	      }
	    } else if (align.bottom) {
	      if ('bottom' === align.bottom) {
	        top = Math.max(0, controlRect.bottom - containerRect.height);
	        maxHeight = Math.max(controlRect.bottom, 0);
	      } else {
	        top = Math.max(0, controlRect.top - containerRect.height);
	        maxHeight = Math.max(controlRect.top, 0);
	      }
	    }

	    // if we can't fit it all, see if there's more room the other direction
	    if (containerRect.height > maxHeight) {
	      // We need more room than we have.
	      if (align.top && top > windowHeight / 2) {
	        // We put it below, but there's more room above, put it above
	        if (align.top === 'bottom') {
	          top = Math.max(controlRect.top - containerRect.height, 0);
	          maxHeight = controlRect.top;
	        } else {
	          top = Math.max(controlRect.bottom - containerRect.height, 0);
	          maxHeight = controlRect.bottom;
	        }
	      } else if (align.bottom && maxHeight < windowHeight / 2) {
	        // We put it above but there's more room below, put it below
	        if (align.bottom === 'bottom') {
	          top = controlRect.top;
	          maxHeight = Math.min(windowHeight - top, windowHeight);
	        } else {
	          top = controlRect.bottom;
	          maxHeight = Math.min(windowHeight - top, windowHeight - controlRect.height);
	        }
	      }
	    }

	    container.style.left = left + 'px';
	    container.style.width = width + 'px';
	    // We use position:absolute and the body element's position
	    // to handle mobile browsers better. We used to use position:fixed
	    // but that didn't work on mobile browsers as well.
	    container.style.top = top - bodyRect.top + 'px';
	    container.style.maxHeight = maxHeight + 'px';
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 377 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	exports.default = {
	  pick: function pick(props, fields) {
	    var has = function has(p) {
	      return props.hasOwnProperty(p);
	    };
	    var obj = {};
	    (fields || []).forEach(function (field) {
	      if (has(field)) obj[field] = props[field];
	    });
	    return obj;
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 378 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// (C) Copyright 2014 Hewlett Packard Enterprise Development LP

	/*
	 * Responsive is a utility for tracking the display size.
	 * It aligns with CSS media queries.
	 */

	var SMALL_WIDTH_EM = 44.9375; // align with _settings.responsive.scss

	function _smallSize() {
	  var fontSize = '16px';
	  // unit tests don't have getComputedStyle
	  if (window.getComputedStyle) {
	    fontSize = window.getComputedStyle(document.documentElement).fontSize;
	  }
	  return SMALL_WIDTH_EM * parseFloat(fontSize);
	}

	exports.default = {

	  // Track responsive sizing.
	  //
	  // Example:
	  // inside componentDidMount()
	  //   this._responsive = Responsive.start(this._onResponsive);
	  // inside componentWillUnmount()
	  //   this._responsive.stop()

	  start: function start(func) {
	    var responsive = {
	      func: func,
	      timer: null,
	      small: null,
	      smallSize: _smallSize()
	    };
	    responsive.onResize = this._onResize.bind(this, responsive);
	    responsive.layout = this._check.bind(this, responsive);
	    responsive.stop = this._stop.bind(this, responsive);
	    window.addEventListener('resize', responsive.onResize);
	    responsive.layout();
	    return responsive;
	  },
	  _stop: function _stop(responsive) {
	    clearTimeout(responsive.timer);
	    window.removeEventListener('resize', responsive.onResize);
	  },
	  _onResize: function _onResize(responsive) {
	    // Don't debounce so we align more closely with how the stylesheets are
	    // processed.
	    responsive.layout();
	  },
	  _check: function _check(responsive) {
	    if (window.innerWidth <= responsive.smallSize) {
	      if (!responsive.small) {
	        responsive.small = true;
	        responsive.func(true);
	      }
	    } else {
	      if (false !== responsive.small) {
	        responsive.small = false;
	        responsive.func(false);
	      }
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(372);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var _FormattedMessage = __webpack_require__(342);

	var _FormattedMessage2 = _interopRequireDefault(_FormattedMessage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = 'control-icon';

	var Icon = function (_Component) {
	  _inherits(Icon, _Component);

	  function Icon() {
	    _classCallCheck(this, Icon);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Icon).apply(this, arguments));
	  }

	  _createClass(Icon, [{
	    key: 'render',
	    value: function render() {
	      var _classnames;

	      var _props = this.props;
	      var a11yTitle = _props.a11yTitle;
	      var a11yTitleId = _props.a11yTitleId;
	      var className = _props.className;
	      var colorIndex = _props.colorIndex;
	      var large = _props.large;
	      var size = _props.size;


	      if (!size && large) {
	        size = 'large';
	      }

	      var classes = (0, _classnames3.default)(CLASS_ROOT, CLASS_ROOT + '-down', className, (_classnames = {}, _defineProperty(_classnames, CLASS_ROOT + '--' + size, size), _defineProperty(_classnames, 'color-index-' + colorIndex, colorIndex), _classnames));

	      var titleLabel = a11yTitle || 'down';
	      a11yTitle = _react2.default.createElement(_FormattedMessage2.default, { id: titleLabel, defaultMessage: titleLabel });

	      return _react2.default.createElement(
	        'svg',
	        { version: '1.1', viewBox: '0 0 24 24', width: '24px', height: '24px', className: classes, 'aria-labelledby': a11yTitleId },
	        _react2.default.createElement(
	          'title',
	          { id: a11yTitleId },
	          a11yTitle
	        ),
	        _react2.default.createElement(
	          'g',
	          { id: 'down' },
	          _react2.default.createElement('rect', { id: '_x2E_svg_260_', y: '0', fill: 'none', width: '24', height: '24' }),
	          _react2.default.createElement('polyline', { fill: 'none', stroke: '#000000', strokeWidth: '2', strokeMiterlimit: '10', points: '23,6.5 12,17.5 1,6.5 \t' })
	        )
	      );
	    }
	  }]);

	  return Icon;
	}(_react.Component);

	exports.default = Icon;
	;

	Icon.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  a11yTitleId: _react.PropTypes.string,
	  colorIndex: _react.PropTypes.string,
	  large: _react.PropTypes.bool,
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large', 'huge'])
	};

	Icon.defaultProps = {
	  a11yTitleId: 'down-title'
	};

	Icon.icon = true;

	Icon.displayName = 'Down';
	module.exports = exports['default'];

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(372);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var _FormattedMessage = __webpack_require__(342);

	var _FormattedMessage2 = _interopRequireDefault(_FormattedMessage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = 'control-icon';

	var Icon = function (_Component) {
	  _inherits(Icon, _Component);

	  function Icon() {
	    _classCallCheck(this, Icon);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Icon).apply(this, arguments));
	  }

	  _createClass(Icon, [{
	    key: 'render',
	    value: function render() {
	      var _classnames;

	      var _props = this.props;
	      var a11yTitle = _props.a11yTitle;
	      var a11yTitleId = _props.a11yTitleId;
	      var className = _props.className;
	      var colorIndex = _props.colorIndex;
	      var large = _props.large;
	      var size = _props.size;


	      if (!size && large) {
	        size = 'large';
	      }

	      var classes = (0, _classnames3.default)(CLASS_ROOT, CLASS_ROOT + '-more', className, (_classnames = {}, _defineProperty(_classnames, CLASS_ROOT + '--' + size, size), _defineProperty(_classnames, 'color-index-' + colorIndex, colorIndex), _classnames));

	      var titleLabel = a11yTitle || 'more';
	      a11yTitle = _react2.default.createElement(_FormattedMessage2.default, { id: titleLabel, defaultMessage: titleLabel });

	      return _react2.default.createElement(
	        'svg',
	        { version: '1.1', viewBox: '0 0 24 24', width: '24px', height: '24px', className: classes, 'aria-labelledby': a11yTitleId },
	        _react2.default.createElement(
	          'title',
	          { id: a11yTitleId },
	          a11yTitle
	        ),
	        _react2.default.createElement(
	          'g',
	          { id: 'more' },
	          _react2.default.createElement('rect', { id: '_x2E_svg_3_', x: '0', y: '0', fill: 'none', width: '24', height: '24' }),
	          _react2.default.createElement('rect', { x: '0', y: '10', width: '4', height: '4' }),
	          _react2.default.createElement('rect', { x: '10', y: '10', width: '4', height: '4' }),
	          _react2.default.createElement('rect', { x: '20', y: '10', width: '4', height: '4' })
	        )
	      );
	    }
	  }]);

	  return Icon;
	}(_react.Component);

	exports.default = Icon;
	;

	Icon.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  a11yTitleId: _react.PropTypes.string,
	  colorIndex: _react.PropTypes.string,
	  large: _react.PropTypes.bool,
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large', 'huge'])
	};

	Icon.defaultProps = {
	  a11yTitleId: 'more-title'
	};

	Icon.icon = true;

	Icon.displayName = 'More';
	module.exports = exports['default'];

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var m = __webpack_require__(382),
	    IntlPolyfill = m['default'];

	// Expose `IntlPolyfill` as global to add locale data into runtime later on.
	global.IntlPolyfill = IntlPolyfill;

	// Require all locale data for `Intl`. This module will be
	// ignored when bundling for the browser with Browserify/Webpack.
	__webpack_require__(385);

	// hack to export the polyfill as global Intl if needed
	if (!global.Intl) {
	    global.Intl = IntlPolyfill;
	    IntlPolyfill.__applyLocaleSensitivePrototypes();
	}

	// providing an idiomatic api for the nodejs version of this module
	module.exports = exports = IntlPolyfill;
	// preserving the original api in case another module is relying on that
	exports['default'] = IntlPolyfill;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Copyright 2013 Andy Earnshaw, MIT License
	 *
	 * Implements the ECMAScript Internationalization API in ES5-compatible environments,
	 * following the ECMA-402 specification as closely as possible
	 *
	 * ECMA-402: http://ecma-international.org/ecma-402/1.0/
	 *
	 * CLDR format locale data should be provided using IntlPolyfill.__addLocaleData().
	 */
	/*jshint esnext: true, proto:true, eqnull:true, boss:true, laxbreak:true, newcap:false, shadow:true, funcscope:true */

	"use strict";
	var src$exp$$ = __webpack_require__(383), src$cldr$$ = __webpack_require__(384);

	var Intl = {},

	    realDefineProp = (function () {
	        var sentinel = {};
	        try {
	            Object.defineProperty(sentinel, 'a', {});
	            return 'a' in sentinel;
	        } catch (e) {
	            return false;
	        }
	    })(),

	    // Need a workaround for getters in ES3
	    es3  = !realDefineProp && !Object.prototype.__defineGetter__,

	    // We use this a lot (and need it for proto-less objects)
	    hop = Object.prototype.hasOwnProperty,

	    // Naive defineProperty for compatibility
	    defineProperty = realDefineProp ? Object.defineProperty : function (obj, name, desc) {
	        if ('get' in desc && obj.__defineGetter__)
	            obj.__defineGetter__(name, desc.get);

	        else if (!hop.call(obj, name) || 'value' in desc)
	            obj[name] = desc.value;
	    },

	    // Array.prototype.indexOf, as good as we need it to be
	    arrIndexOf = Array.prototype.indexOf || function (search) {
	        /*jshint validthis:true */
	        var t = this;
	        if (!t.length)
	            return -1;

	        for (var i = arguments[1] || 0, max = t.length; i < max; i++) {
	            if (t[i] === search)
	                return i;
	        }

	        return -1;
	    },

	    // Create an object with the specified prototype (2nd arg required for Record)
	    objCreate = Object.create || function (proto, props) {
	        var obj;

	        function F() {}
	        F.prototype = proto;
	        obj = new F();

	        for (var k in props) {
	            if (hop.call(props, k))
	                defineProperty(obj, k, props[k]);
	        }

	        return obj;
	    },

	    // Snapshot some (hopefully still) native built-ins
	    arrSlice  = Array.prototype.slice,
	    arrConcat = Array.prototype.concat,
	    arrPush   = Array.prototype.push,
	    arrJoin   = Array.prototype.join,
	    arrShift  = Array.prototype.shift,
	    arrUnshift= Array.prototype.unshift,

	    // Naive Function.prototype.bind for compatibility
	    fnBind = Function.prototype.bind || function (thisObj) {
	        var fn = this,
	            args = arrSlice.call(arguments, 1);

	        // All our (presently) bound functions have either 1 or 0 arguments. By returning
	        // different function signatures, we can pass some tests in ES3 environments
	        if (fn.length === 1) {
	            return function (a) {
	                return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));
	            };
	        }
	        else {
	            return function () {
	                return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));
	            };
	        }
	    },

	    // Default locale is the first-added locale data for us
	    defaultLocale,

	    // Object housing internal properties for constructors
	    internals = objCreate(null),

	    // Keep internal properties internal
	    secret = Math.random(),

	    // An object map of date component keys, saves using a regex later
	    dateWidths = objCreate(null, { narrow:{}, short:{}, long:{} }),

	    // Each constructor prototype should be an instance of the constructor itself, but we
	    // can't initialise them as such until some locale data has been added, so this is how
	    // we keep track
	    numberFormatProtoInitialised = false,
	    dateTimeFormatProtoInitialised = false,

	    // Some regular expressions we're using
	    expCurrencyCode = /^[A-Z]{3}$/,
	    expUnicodeExSeq = /-u(?:-[0-9a-z]{2,8})+/gi, // See `extension` below

	    // IANA Subtag Registry redundant tag and subtag maps
	    redundantTags = {
	        tags: {
	            "art-lojban":   "jbo",       "i-ami":        "ami",       "i-bnn":       "bnn",  "i-hak":      "hak",
	            "i-klingon":    "tlh",       "i-lux":        "lb",        "i-navajo":    "nv",   "i-pwn":      "pwn",
	            "i-tao":        "tao",       "i-tay":        "tay",       "i-tsu":       "tsu",  "no-bok":     "nb",
	            "no-nyn":       "nn",        "sgn-BE-FR":    "sfb",       "sgn-BE-NL":   "vgt",  "sgn-CH-DE":  "sgg",
	            "zh-guoyu":     "cmn",       "zh-hakka":     "hak",       "zh-min-nan":  "nan",  "zh-xiang":   "hsn",
	            "sgn-BR":       "bzs",       "sgn-CO":       "csn",       "sgn-DE":      "gsg",  "sgn-DK":     "dsl",
	            "sgn-ES":       "ssp",       "sgn-FR":       "fsl",       "sgn-GB":      "bfi",  "sgn-GR":     "gss",
	            "sgn-IE":       "isg",       "sgn-IT":       "ise",       "sgn-JP":      "jsl",  "sgn-MX":     "mfs",
	            "sgn-NI":       "ncs",       "sgn-NL":       "dse",       "sgn-NO":      "nsl",  "sgn-PT":     "psr",
	            "sgn-SE":       "swl",       "sgn-US":       "ase",       "sgn-ZA":      "sfs",  "zh-cmn":     "cmn",
	            "zh-cmn-Hans":  "cmn-Hans",  "zh-cmn-Hant":  "cmn-Hant",  "zh-gan":      "gan",  "zh-wuu":     "wuu",
	            "zh-yue":       "yue"
	        },
	        subtags: {
	              BU: "MM",   DD: "DE",   FX: "FR",   TP: "TL",   YD: "YE",   ZR: "CD",  heploc: "alalc97",
	            'in': "id",   iw: "he",   ji:  "yi",  jw: "jv",   mo: "ro",  ayx: "nun", bjd: "drl",
	             ccq: "rki", cjr: "mom", cka: "cmr", cmk: "xch", drh: "khk", drw: "prs", gav: "dev",
	             hrr: "jal", ibi: "opa", kgh: "kml", lcq: "ppr", mst: "mry", myt: "mry", sca: "hle",
	             tie: "ras", tkk: "twm", tlw: "weo", tnf: "prs", ybd: "rki", yma: "lrr"
	        },
	        extLang: {
	            aao: [ "aao", "ar"  ], abh: [ "abh", "ar"  ], abv: [ "abv", "ar"  ], acm: [ "acm", "ar"  ],
	            acq: [ "acq", "ar"  ], acw: [ "acw", "ar"  ], acx: [ "acx", "ar"  ], acy: [ "acy", "ar"  ],
	            adf: [ "adf", "ar"  ], ads: [ "ads", "sgn" ], aeb: [ "aeb", "ar"  ], aec: [ "aec", "ar"  ],
	            aed: [ "aed", "sgn" ], aen: [ "aen", "sgn" ], afb: [ "afb", "ar"  ], afg: [ "afg", "sgn" ],
	            ajp: [ "ajp", "ar"  ], apc: [ "apc", "ar"  ], apd: [ "apd", "ar"  ], arb: [ "arb", "ar"  ],
	            arq: [ "arq", "ar"  ], ars: [ "ars", "ar"  ], ary: [ "ary", "ar"  ], arz: [ "arz", "ar"  ],
	            ase: [ "ase", "sgn" ], asf: [ "asf", "sgn" ], asp: [ "asp", "sgn" ], asq: [ "asq", "sgn" ],
	            asw: [ "asw", "sgn" ], auz: [ "auz", "ar"  ], avl: [ "avl", "ar"  ], ayh: [ "ayh", "ar"  ],
	            ayl: [ "ayl", "ar"  ], ayn: [ "ayn", "ar"  ], ayp: [ "ayp", "ar"  ], bbz: [ "bbz", "ar"  ],
	            bfi: [ "bfi", "sgn" ], bfk: [ "bfk", "sgn" ], bjn: [ "bjn", "ms"  ], bog: [ "bog", "sgn" ],
	            bqn: [ "bqn", "sgn" ], bqy: [ "bqy", "sgn" ], btj: [ "btj", "ms"  ], bve: [ "bve", "ms"  ],
	            bvl: [ "bvl", "sgn" ], bvu: [ "bvu", "ms"  ], bzs: [ "bzs", "sgn" ], cdo: [ "cdo", "zh"  ],
	            cds: [ "cds", "sgn" ], cjy: [ "cjy", "zh"  ], cmn: [ "cmn", "zh"  ], coa: [ "coa", "ms"  ],
	            cpx: [ "cpx", "zh"  ], csc: [ "csc", "sgn" ], csd: [ "csd", "sgn" ], cse: [ "cse", "sgn" ],
	            csf: [ "csf", "sgn" ], csg: [ "csg", "sgn" ], csl: [ "csl", "sgn" ], csn: [ "csn", "sgn" ],
	            csq: [ "csq", "sgn" ], csr: [ "csr", "sgn" ], czh: [ "czh", "zh"  ], czo: [ "czo", "zh"  ],
	            doq: [ "doq", "sgn" ], dse: [ "dse", "sgn" ], dsl: [ "dsl", "sgn" ], dup: [ "dup", "ms"  ],
	            ecs: [ "ecs", "sgn" ], esl: [ "esl", "sgn" ], esn: [ "esn", "sgn" ], eso: [ "eso", "sgn" ],
	            eth: [ "eth", "sgn" ], fcs: [ "fcs", "sgn" ], fse: [ "fse", "sgn" ], fsl: [ "fsl", "sgn" ],
	            fss: [ "fss", "sgn" ], gan: [ "gan", "zh"  ], gds: [ "gds", "sgn" ], gom: [ "gom", "kok" ],
	            gse: [ "gse", "sgn" ], gsg: [ "gsg", "sgn" ], gsm: [ "gsm", "sgn" ], gss: [ "gss", "sgn" ],
	            gus: [ "gus", "sgn" ], hab: [ "hab", "sgn" ], haf: [ "haf", "sgn" ], hak: [ "hak", "zh"  ],
	            hds: [ "hds", "sgn" ], hji: [ "hji", "ms"  ], hks: [ "hks", "sgn" ], hos: [ "hos", "sgn" ],
	            hps: [ "hps", "sgn" ], hsh: [ "hsh", "sgn" ], hsl: [ "hsl", "sgn" ], hsn: [ "hsn", "zh"  ],
	            icl: [ "icl", "sgn" ], ils: [ "ils", "sgn" ], inl: [ "inl", "sgn" ], ins: [ "ins", "sgn" ],
	            ise: [ "ise", "sgn" ], isg: [ "isg", "sgn" ], isr: [ "isr", "sgn" ], jak: [ "jak", "ms"  ],
	            jax: [ "jax", "ms"  ], jcs: [ "jcs", "sgn" ], jhs: [ "jhs", "sgn" ], jls: [ "jls", "sgn" ],
	            jos: [ "jos", "sgn" ], jsl: [ "jsl", "sgn" ], jus: [ "jus", "sgn" ], kgi: [ "kgi", "sgn" ],
	            knn: [ "knn", "kok" ], kvb: [ "kvb", "ms"  ], kvk: [ "kvk", "sgn" ], kvr: [ "kvr", "ms"  ],
	            kxd: [ "kxd", "ms"  ], lbs: [ "lbs", "sgn" ], lce: [ "lce", "ms"  ], lcf: [ "lcf", "ms"  ],
	            liw: [ "liw", "ms"  ], lls: [ "lls", "sgn" ], lsg: [ "lsg", "sgn" ], lsl: [ "lsl", "sgn" ],
	            lso: [ "lso", "sgn" ], lsp: [ "lsp", "sgn" ], lst: [ "lst", "sgn" ], lsy: [ "lsy", "sgn" ],
	            ltg: [ "ltg", "lv"  ], lvs: [ "lvs", "lv"  ], lzh: [ "lzh", "zh"  ], max: [ "max", "ms"  ],
	            mdl: [ "mdl", "sgn" ], meo: [ "meo", "ms"  ], mfa: [ "mfa", "ms"  ], mfb: [ "mfb", "ms"  ],
	            mfs: [ "mfs", "sgn" ], min: [ "min", "ms"  ], mnp: [ "mnp", "zh"  ], mqg: [ "mqg", "ms"  ],
	            mre: [ "mre", "sgn" ], msd: [ "msd", "sgn" ], msi: [ "msi", "ms"  ], msr: [ "msr", "sgn" ],
	            mui: [ "mui", "ms"  ], mzc: [ "mzc", "sgn" ], mzg: [ "mzg", "sgn" ], mzy: [ "mzy", "sgn" ],
	            nan: [ "nan", "zh"  ], nbs: [ "nbs", "sgn" ], ncs: [ "ncs", "sgn" ], nsi: [ "nsi", "sgn" ],
	            nsl: [ "nsl", "sgn" ], nsp: [ "nsp", "sgn" ], nsr: [ "nsr", "sgn" ], nzs: [ "nzs", "sgn" ],
	            okl: [ "okl", "sgn" ], orn: [ "orn", "ms"  ], ors: [ "ors", "ms"  ], pel: [ "pel", "ms"  ],
	            pga: [ "pga", "ar"  ], pks: [ "pks", "sgn" ], prl: [ "prl", "sgn" ], prz: [ "prz", "sgn" ],
	            psc: [ "psc", "sgn" ], psd: [ "psd", "sgn" ], pse: [ "pse", "ms"  ], psg: [ "psg", "sgn" ],
	            psl: [ "psl", "sgn" ], pso: [ "pso", "sgn" ], psp: [ "psp", "sgn" ], psr: [ "psr", "sgn" ],
	            pys: [ "pys", "sgn" ], rms: [ "rms", "sgn" ], rsi: [ "rsi", "sgn" ], rsl: [ "rsl", "sgn" ],
	            sdl: [ "sdl", "sgn" ], sfb: [ "sfb", "sgn" ], sfs: [ "sfs", "sgn" ], sgg: [ "sgg", "sgn" ],
	            sgx: [ "sgx", "sgn" ], shu: [ "shu", "ar"  ], slf: [ "slf", "sgn" ], sls: [ "sls", "sgn" ],
	            sqk: [ "sqk", "sgn" ], sqs: [ "sqs", "sgn" ], ssh: [ "ssh", "ar"  ], ssp: [ "ssp", "sgn" ],
	            ssr: [ "ssr", "sgn" ], svk: [ "svk", "sgn" ], swc: [ "swc", "sw"  ], swh: [ "swh", "sw"  ],
	            swl: [ "swl", "sgn" ], syy: [ "syy", "sgn" ], tmw: [ "tmw", "ms"  ], tse: [ "tse", "sgn" ],
	            tsm: [ "tsm", "sgn" ], tsq: [ "tsq", "sgn" ], tss: [ "tss", "sgn" ], tsy: [ "tsy", "sgn" ],
	            tza: [ "tza", "sgn" ], ugn: [ "ugn", "sgn" ], ugy: [ "ugy", "sgn" ], ukl: [ "ukl", "sgn" ],
	            uks: [ "uks", "sgn" ], urk: [ "urk", "ms"  ], uzn: [ "uzn", "uz"  ], uzs: [ "uzs", "uz"  ],
	            vgt: [ "vgt", "sgn" ], vkk: [ "vkk", "ms"  ], vkt: [ "vkt", "ms"  ], vsi: [ "vsi", "sgn" ],
	            vsl: [ "vsl", "sgn" ], vsv: [ "vsv", "sgn" ], wuu: [ "wuu", "zh"  ], xki: [ "xki", "sgn" ],
	            xml: [ "xml", "sgn" ], xmm: [ "xmm", "ms"  ], xms: [ "xms", "sgn" ], yds: [ "yds", "sgn" ],
	            ysl: [ "ysl", "sgn" ], yue: [ "yue", "zh"  ], zib: [ "zib", "sgn" ], zlm: [ "zlm", "ms"  ],
	            zmi: [ "zmi", "ms"  ], zsl: [ "zsl", "sgn" ], zsm: [ "zsm", "ms"  ]
	        }
	    },

	    // Currency minor units output from get-4217 grunt task, formatted
	    currencyMinorUnits = {
	        BHD: 3, BYR: 0, XOF: 0, BIF: 0, XAF: 0, CLF: 4, CLP: 0, KMF: 0, DJF: 0,
	        XPF: 0, GNF: 0, ISK: 0, IQD: 3, JPY: 0, JOD: 3, KRW: 0, KWD: 3, LYD: 3,
	        OMR: 3, PYG: 0, RWF: 0, TND: 3, UGX: 0, UYI: 0, VUV: 0, VND: 0
	    };

	// Sect 6.2 Language Tags
	// ======================

	/**
	 * The IsStructurallyValidLanguageTag abstract operation verifies that the locale
	 * argument (which must be a String value)
	 *
	 * - represents a well-formed BCP 47 language tag as specified in RFC 5646 section
	 *   2.1, or successor,
	 * - does not include duplicate variant subtags, and
	 * - does not include duplicate singleton subtags.
	 *
	 * The abstract operation returns true if locale can be generated from the ABNF
	 * grammar in section 2.1 of the RFC, starting with Language-Tag, and does not
	 * contain duplicate variant or singleton subtags (other than as a private use
	 * subtag). It returns false otherwise. Terminal value characters in the grammar are
	 * interpreted as the Unicode equivalents of the ASCII octet values given.
	 */
	function /* 6.2.2 */IsStructurallyValidLanguageTag(locale) {
	    // represents a well-formed BCP 47 language tag as specified in RFC 5646
	    if (!src$exp$$.expBCP47Syntax.test(locale))
	        return false;

	    // does not include duplicate variant subtags, and
	    if (src$exp$$.expVariantDupes.test(locale))
	        return false;

	    // does not include duplicate singleton subtags.
	    if (src$exp$$.expSingletonDupes.test(locale))
	        return false;

	    return true;
	}

	/**
	 * The CanonicalizeLanguageTag abstract operation returns the canonical and case-
	 * regularized form of the locale argument (which must be a String value that is
	 * a structurally valid BCP 47 language tag as verified by the
	 * IsStructurallyValidLanguageTag abstract operation). It takes the steps
	 * specified in RFC 5646 section 4.5, or successor, to bring the language tag
	 * into canonical form, and to regularize the case of the subtags, but does not
	 * take the steps to bring a language tag into “extlang form” and to reorder
	 * variant subtags.

	 * The specifications for extensions to BCP 47 language tags, such as RFC 6067,
	 * may include canonicalization rules for the extension subtag sequences they
	 * define that go beyond the canonicalization rules of RFC 5646 section 4.5.
	 * Implementations are allowed, but not required, to apply these additional rules.
	 */
	function /* 6.2.3 */CanonicalizeLanguageTag (locale) {
	    var match, parts;

	    // A language tag is in 'canonical form' when the tag is well-formed
	    // according to the rules in Sections 2.1 and 2.2

	    // Section 2.1 says all subtags use lowercase...
	    locale = locale.toLowerCase();

	    // ...with 2 exceptions: 'two-letter and four-letter subtags that neither
	    // appear at the start of the tag nor occur after singletons.  Such two-letter
	    // subtags are all uppercase (as in the tags "en-CA-x-ca" or "sgn-BE-FR") and
	    // four-letter subtags are titlecase (as in the tag "az-Latn-x-latn").
	    parts = locale.split('-');
	    for (var i = 1, max = parts.length; i < max; i++) {
	        // Two-letter subtags are all uppercase
	        if (parts[i].length === 2)
	            parts[i] = parts[i].toUpperCase();

	        // Four-letter subtags are titlecase
	        else if (parts[i].length === 4)
	            parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1);

	        // Is it a singleton?
	        else if (parts[i].length === 1 && parts[i] !== 'x')
	            break;
	    }
	    locale = arrJoin.call(parts, '-');

	    // The steps laid out in RFC 5646 section 4.5 are as follows:

	    // 1.  Extension sequences are ordered into case-insensitive ASCII order
	    //     by singleton subtag.
	    if ((match = locale.match(src$exp$$.expExtSequences)) && match.length > 1) {
	        // The built-in sort() sorts by ASCII order, so use that
	        match.sort();

	        // Replace all extensions with the joined, sorted array
	        locale = locale.replace(
	            RegExp('(?:' + src$exp$$.expExtSequences.source + ')+', 'i'),
	            arrJoin.call(match, '')
	        );
	    }

	    // 2.  Redundant or grandfathered tags are replaced by their 'Preferred-
	    //     Value', if there is one.
	    if (hop.call(redundantTags.tags, locale))
	        locale = redundantTags.tags[locale];

	    // 3.  Subtags are replaced by their 'Preferred-Value', if there is one.
	    //     For extlangs, the original primary language subtag is also
	    //     replaced if there is a primary language subtag in the 'Preferred-
	    //     Value'.
	    parts = locale.split('-');

	    for (var i = 1, max = parts.length; i < max; i++) {
	        if (hop.call(redundantTags.subtags, parts[i]))
	            parts[i] = redundantTags.subtags[parts[i]];

	        else if (hop.call(redundantTags.extLang, parts[i])) {
	            parts[i] = redundantTags.extLang[parts[i]][0];

	            // For extlang tags, the prefix needs to be removed if it is redundant
	            if (i === 1 && redundantTags.extLang[parts[1]][1] === parts[0]) {
	                parts = arrSlice.call(parts, i++);
	                max -= 1;
	            }
	        }
	    }

	    return arrJoin.call(parts, '-');
	}

	/**
	 * The DefaultLocale abstract operation returns a String value representing the
	 * structurally valid (6.2.2) and canonicalized (6.2.3) BCP 47 language tag for the
	 * host environment’s current locale.
	 */
	function /* 6.2.4 */DefaultLocale () {
	    return defaultLocale;
	}

	// Sect 6.3 Currency Codes
	// =======================

	/**
	 * The IsWellFormedCurrencyCode abstract operation verifies that the currency argument
	 * (after conversion to a String value) represents a well-formed 3-letter ISO currency
	 * code. The following steps are taken:
	 */
	function /* 6.3.1 */IsWellFormedCurrencyCode(currency) {
	    var
	        // 1. Let `c` be ToString(currency)
	        c = String(currency),

	        // 2. Let `normalized` be the result of mapping c to upper case as described
	        //    in 6.1.
	        normalized = toLatinUpperCase(c);

	    // 3. If the string length of normalized is not 3, return false.
	    // 4. If normalized contains any character that is not in the range "A" to "Z"
	    //    (U+0041 to U+005A), return false.
	    if (expCurrencyCode.test(normalized) === false)
	        return false;

	    // 5. Return true
	    return true;
	}

	// Sect 9.2 Abstract Operations
	// ============================
	function /* 9.2.1 */CanonicalizeLocaleList (locales) {
	// The abstract operation CanonicalizeLocaleList takes the following steps:

	    // 1. If locales is undefined, then a. Return a new empty List
	    if (locales === undefined)
	        return new List();

	    var
	        // 2. Let seen be a new empty List.
	        seen = new List(),

	        // 3. If locales is a String value, then
	        //    a. Let locales be a new array created as if by the expression new
	        //    Array(locales) where Array is the standard built-in constructor with
	        //    that name and locales is the value of locales.
	        locales = typeof locales === 'string' ? [ locales ] : locales,

	        // 4. Let O be ToObject(locales).
	        O = toObject(locales),

	        // 5. Let lenValue be the result of calling the [[Get]] internal method of
	        //    O with the argument "length".
	        // 6. Let len be ToUint32(lenValue).
	        len = O.length,

	        // 7. Let k be 0.
	        k = 0;

	    // 8. Repeat, while k < len
	    while (k < len) {
	        var
	            // a. Let Pk be ToString(k).
	            Pk = String(k),

	            // b. Let kPresent be the result of calling the [[HasProperty]] internal
	            //    method of O with argument Pk.
	            kPresent = Pk in O;

	        // c. If kPresent is true, then
	        if (kPresent) {
	            var
	                // i. Let kValue be the result of calling the [[Get]] internal
	                //     method of O with argument Pk.
	                kValue = O[Pk];

	            // ii. If the type of kValue is not String or Object, then throw a
	            //     TypeError exception.
	            if (kValue == null || (typeof kValue !== 'string' && typeof kValue !== 'object'))
	                throw new TypeError('String or Object type expected');

	            var
	                // iii. Let tag be ToString(kValue).
	                tag = String(kValue);

	            // iv. If the result of calling the abstract operation
	            //     IsStructurallyValidLanguageTag (defined in 6.2.2), passing tag as
	            //     the argument, is false, then throw a RangeError exception.
	            if (!IsStructurallyValidLanguageTag(tag))
	                throw new RangeError("'" + tag + "' is not a structurally valid language tag");

	            // v. Let tag be the result of calling the abstract operation
	            //    CanonicalizeLanguageTag (defined in 6.2.3), passing tag as the
	            //    argument.
	            tag = CanonicalizeLanguageTag(tag);

	            // vi. If tag is not an element of seen, then append tag as the last
	            //     element of seen.
	            if (arrIndexOf.call(seen, tag) === -1)
	                arrPush.call(seen, tag);
	        }

	        // d. Increase k by 1.
	        k++;
	    }

	    // 9. Return seen.
	    return seen;
	}

	/**
	 * The BestAvailableLocale abstract operation compares the provided argument
	 * locale, which must be a String value with a structurally valid and
	 * canonicalized BCP 47 language tag, against the locales in availableLocales and
	 * returns either the longest non-empty prefix of locale that is an element of
	 * availableLocales, or undefined if there is no such element. It uses the
	 * fallback mechanism of RFC 4647, section 3.4. The following steps are taken:
	 */
	function /* 9.2.2 */BestAvailableLocale (availableLocales, locale) {
	    var
	       // 1. Let candidate be locale
	       candidate = locale;

	    // 2. Repeat
	    while (true) {
	        // a. If availableLocales contains an element equal to candidate, then return
	        // candidate.
	        if (arrIndexOf.call(availableLocales, candidate) > -1)
	            return candidate;

	        var
	            // b. Let pos be the character index of the last occurrence of "-"
	            // (U+002D) within candidate. If that character does not occur, return
	            // undefined.
	            pos = candidate.lastIndexOf('-');

	        if (pos < 0)
	            return;

	        // c. If pos ≥ 2 and the character "-" occurs at index pos-2 of candidate,
	        //    then decrease pos by 2.
	        if (pos >= 2 && candidate.charAt(pos - 2) === '-')
	            pos -= 2;

	        // d. Let candidate be the substring of candidate from position 0, inclusive,
	        //    to position pos, exclusive.
	        candidate = candidate.substring(0, pos);
	    }
	}

	/**
	 * The LookupMatcher abstract operation compares requestedLocales, which must be
	 * a List as returned by CanonicalizeLocaleList, against the locales in
	 * availableLocales and determines the best available language to meet the
	 * request. The following steps are taken:
	 */
	function /* 9.2.3 */LookupMatcher (availableLocales, requestedLocales) {
	    var
	        // 1. Let i be 0.
	        i = 0,

	        // 2. Let len be the number of elements in requestedLocales.
	        len = requestedLocales.length,

	        // 3. Let availableLocale be undefined.
	        availableLocale;

	    // 4. Repeat while i < len and availableLocale is undefined:
	    while (i < len && !availableLocale) {
	        var
	            // a. Let locale be the element of requestedLocales at 0-origined list
	            //    position i.
	            locale = requestedLocales[i],

	            // b. Let noExtensionsLocale be the String value that is locale with all
	            //    Unicode locale extension sequences removed.
	            noExtensionsLocale = String(locale).replace(expUnicodeExSeq, ''),

	            // c. Let availableLocale be the result of calling the
	            //    BestAvailableLocale abstract operation (defined in 9.2.2) with
	            //    arguments availableLocales and noExtensionsLocale.
	            availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);

	        // d. Increase i by 1.
	        i++;
	    }

	    var
	        // 5. Let result be a new Record.
	        result = new Record();

	    // 6. If availableLocale is not undefined, then
	    if (availableLocale !== undefined) {
	        // a. Set result.[[locale]] to availableLocale.
	        result['[[locale]]'] = availableLocale;

	        // b. If locale and noExtensionsLocale are not the same String value, then
	        if (String(locale) !== String(noExtensionsLocale)) {
	            var
	                // i. Let extension be the String value consisting of the first
	                //    substring of locale that is a Unicode locale extension sequence.
	                extension = locale.match(expUnicodeExSeq)[0],

	                // ii. Let extensionIndex be the character position of the initial
	                //     "-" of the first Unicode locale extension sequence within locale.
	                extensionIndex = locale.indexOf('-u-');

	            // iii. Set result.[[extension]] to extension.
	            result['[[extension]]'] = extension;

	            // iv. Set result.[[extensionIndex]] to extensionIndex.
	            result['[[extensionIndex]]'] = extensionIndex;
	        }
	    }
	    // 7. Else
	    else
	        // a. Set result.[[locale]] to the value returned by the DefaultLocale abstract
	        //    operation (defined in 6.2.4).
	        result['[[locale]]'] = DefaultLocale();

	    // 8. Return result
	    return result;
	}

	/**
	 * The BestFitMatcher abstract operation compares requestedLocales, which must be
	 * a List as returned by CanonicalizeLocaleList, against the locales in
	 * availableLocales and determines the best available language to meet the
	 * request. The algorithm is implementation dependent, but should produce results
	 * that a typical user of the requested locales would perceive as at least as
	 * good as those produced by the LookupMatcher abstract operation. Options
	 * specified through Unicode locale extension sequences must be ignored by the
	 * algorithm. Information about such subsequences is returned separately.
	 * The abstract operation returns a record with a [[locale]] field, whose value
	 * is the language tag of the selected locale, which must be an element of
	 * availableLocales. If the language tag of the request locale that led to the
	 * selected locale contained a Unicode locale extension sequence, then the
	 * returned record also contains an [[extension]] field whose value is the first
	 * Unicode locale extension sequence, and an [[extensionIndex]] field whose value
	 * is the index of the first Unicode locale extension sequence within the request
	 * locale language tag.
	 */
	function /* 9.2.4 */BestFitMatcher (availableLocales, requestedLocales) {
	    return LookupMatcher(availableLocales, requestedLocales);
	}

	/**
	 * The ResolveLocale abstract operation compares a BCP 47 language priority list
	 * requestedLocales against the locales in availableLocales and determines the
	 * best available language to meet the request. availableLocales and
	 * requestedLocales must be provided as List values, options as a Record.
	 */
	function /* 9.2.5 */ResolveLocale (availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {
	    if (availableLocales.length === 0) {
	        throw new ReferenceError('No locale data has been provided for this object yet.');
	    }

	    // The following steps are taken:
	    var
	        // 1. Let matcher be the value of options.[[localeMatcher]].
	        matcher = options['[[localeMatcher]]'];

	    // 2. If matcher is "lookup", then
	    if (matcher === 'lookup')
	        var
	            // a. Let r be the result of calling the LookupMatcher abstract operation
	            //    (defined in 9.2.3) with arguments availableLocales and
	            //    requestedLocales.
	            r = LookupMatcher(availableLocales, requestedLocales);

	    // 3. Else
	    else
	        var
	            // a. Let r be the result of calling the BestFitMatcher abstract
	            //    operation (defined in 9.2.4) with arguments availableLocales and
	            //    requestedLocales.
	            r = BestFitMatcher(availableLocales, requestedLocales);

	    var
	        // 4. Let foundLocale be the value of r.[[locale]].
	        foundLocale = r['[[locale]]'];

	    // 5. If r has an [[extension]] field, then
	    if (hop.call(r, '[[extension]]'))
	        var
	            // a. Let extension be the value of r.[[extension]].
	            extension = r['[[extension]]'],
	            // b. Let extensionIndex be the value of r.[[extensionIndex]].
	            extensionIndex = r['[[extensionIndex]]'],
	            // c. Let split be the standard built-in function object defined in ES5,
	            //    15.5.4.14.
	            split = String.prototype.split,
	            // d. Let extensionSubtags be the result of calling the [[Call]] internal
	            //    method of split with extension as the this value and an argument
	            //    list containing the single item "-".
	            extensionSubtags = split.call(extension, '-'),
	            // e. Let extensionSubtagsLength be the result of calling the [[Get]]
	            //    internal method of extensionSubtags with argument "length".
	            extensionSubtagsLength = extensionSubtags.length;

	    var
	        // 6. Let result be a new Record.
	        result = new Record();

	    // 7. Set result.[[dataLocale]] to foundLocale.
	    result['[[dataLocale]]'] = foundLocale;

	    var
	        // 8. Let supportedExtension be "-u".
	        supportedExtension = '-u',
	        // 9. Let i be 0.
	        i = 0,
	        // 10. Let len be the result of calling the [[Get]] internal method of
	        //     relevantExtensionKeys with argument "length".
	        len = relevantExtensionKeys.length;

	    // 11 Repeat while i < len:
	    while (i < len) {
	        var
	            // a. Let key be the result of calling the [[Get]] internal method of
	            //    relevantExtensionKeys with argument ToString(i).
	            key = relevantExtensionKeys[i],
	            // b. Let foundLocaleData be the result of calling the [[Get]] internal
	            //    method of localeData with the argument foundLocale.
	            foundLocaleData = localeData[foundLocale],
	            // c. Let keyLocaleData be the result of calling the [[Get]] internal
	            //    method of foundLocaleData with the argument key.
	            keyLocaleData = foundLocaleData[key],
	            // d. Let value be the result of calling the [[Get]] internal method of
	            //    keyLocaleData with argument "0".
	            value = keyLocaleData['0'],
	            // e. Let supportedExtensionAddition be "".
	            supportedExtensionAddition = '',
	            // f. Let indexOf be the standard built-in function object defined in
	            //    ES5, 15.4.4.14.
	            indexOf = arrIndexOf;

	        // g. If extensionSubtags is not undefined, then
	        if (extensionSubtags !== undefined) {
	            var
	                // i. Let keyPos be the result of calling the [[Call]] internal
	                //    method of indexOf with extensionSubtags as the this value and
	                // an argument list containing the single item key.
	                keyPos = indexOf.call(extensionSubtags, key);

	            // ii. If keyPos ≠ -1, then
	            if (keyPos !== -1) {
	                // 1. If keyPos + 1 < extensionSubtagsLength and the length of the
	                //    result of calling the [[Get]] internal method of
	                //    extensionSubtags with argument ToString(keyPos +1) is greater
	                //    than 2, then
	                if (keyPos + 1 < extensionSubtagsLength
	                        && extensionSubtags[keyPos + 1].length > 2) {
	                    var
	                        // a. Let requestedValue be the result of calling the [[Get]]
	                        //    internal method of extensionSubtags with argument
	                        //    ToString(keyPos + 1).
	                        requestedValue = extensionSubtags[keyPos + 1],
	                        // b. Let valuePos be the result of calling the [[Call]]
	                        //    internal method of indexOf with keyLocaleData as the
	                        //    this value and an argument list containing the single
	                        //    item requestedValue.
	                        valuePos = indexOf.call(keyLocaleData, requestedValue);

	                    // c. If valuePos ≠ -1, then
	                    if (valuePos !== -1)
	                        var
	                            // i. Let value be requestedValue.
	                            value = requestedValue,
	                            // ii. Let supportedExtensionAddition be the
	                            //     concatenation of "-", key, "-", and value.
	                            supportedExtensionAddition = '-' + key + '-' + value;
	                }
	                // 2. Else
	                else {
	                    var
	                        // a. Let valuePos be the result of calling the [[Call]]
	                        // internal method of indexOf with keyLocaleData as the this
	                        // value and an argument list containing the single item
	                        // "true".
	                        valuePos = indexOf(keyLocaleData, 'true');

	                    // b. If valuePos ≠ -1, then
	                    if (valuePos !== -1)
	                        var
	                            // i. Let value be "true".
	                            value = 'true';
	                }
	            }
	        }
	        // h. If options has a field [[<key>]], then
	        if (hop.call(options, '[[' + key + ']]')) {
	            var
	                // i. Let optionsValue be the value of options.[[<key>]].
	                optionsValue = options['[[' + key + ']]'];

	            // ii. If the result of calling the [[Call]] internal method of indexOf
	            //     with keyLocaleData as the this value and an argument list
	            //     containing the single item optionsValue is not -1, then
	            if (indexOf.call(keyLocaleData, optionsValue) !== -1) {
	                // 1. If optionsValue is not equal to value, then
	                if (optionsValue !== value) {
	                    // a. Let value be optionsValue.
	                    value = optionsValue;
	                    // b. Let supportedExtensionAddition be "".
	                    supportedExtensionAddition = '';
	                }
	            }
	        }
	        // i. Set result.[[<key>]] to value.
	        result['[[' + key + ']]'] = value;

	        // j. Append supportedExtensionAddition to supportedExtension.
	        supportedExtension += supportedExtensionAddition;

	        // k. Increase i by 1.
	        i++;
	    }
	    // 12. If the length of supportedExtension is greater than 2, then
	    if (supportedExtension.length > 2) {
	        var
	            // a. Let preExtension be the substring of foundLocale from position 0,
	            //    inclusive, to position extensionIndex, exclusive.
	            preExtension = foundLocale.substring(0, extensionIndex),
	            // b. Let postExtension be the substring of foundLocale from position
	            //    extensionIndex to the end of the string.
	            postExtension = foundLocale.substring(extensionIndex),
	            // c. Let foundLocale be the concatenation of preExtension,
	            //    supportedExtension, and postExtension.
	            foundLocale = preExtension + supportedExtension + postExtension;
	    }
	    // 13. Set result.[[locale]] to foundLocale.
	    result['[[locale]]'] = foundLocale;

	    // 14. Return result.
	    return result;
	}

	/**
	 * The LookupSupportedLocales abstract operation returns the subset of the
	 * provided BCP 47 language priority list requestedLocales for which
	 * availableLocales has a matching locale when using the BCP 47 Lookup algorithm.
	 * Locales appear in the same order in the returned list as in requestedLocales.
	 * The following steps are taken:
	 */
	function /* 9.2.6 */LookupSupportedLocales (availableLocales, requestedLocales) {
	    var
	        // 1. Let len be the number of elements in requestedLocales.
	        len = requestedLocales.length,
	        // 2. Let subset be a new empty List.
	        subset = new List(),
	        // 3. Let k be 0.
	        k = 0;

	    // 4. Repeat while k < len
	    while (k < len) {
	        var
	            // a. Let locale be the element of requestedLocales at 0-origined list
	            //    position k.
	            locale = requestedLocales[k],
	            // b. Let noExtensionsLocale be the String value that is locale with all
	            //    Unicode locale extension sequences removed.
	            noExtensionsLocale = String(locale).replace(expUnicodeExSeq, ''),
	            // c. Let availableLocale be the result of calling the
	            //    BestAvailableLocale abstract operation (defined in 9.2.2) with
	            //    arguments availableLocales and noExtensionsLocale.
	            availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);

	        // d. If availableLocale is not undefined, then append locale to the end of
	        //    subset.
	        if (availableLocale !== undefined)
	            arrPush.call(subset, locale);

	        // e. Increment k by 1.
	        k++;
	    }

	    var
	        // 5. Let subsetArray be a new Array object whose elements are the same
	        //    values in the same order as the elements of subset.
	        subsetArray = arrSlice.call(subset);

	    // 6. Return subsetArray.
	    return subsetArray;
	}

	/**
	 * The BestFitSupportedLocales abstract operation returns the subset of the
	 * provided BCP 47 language priority list requestedLocales for which
	 * availableLocales has a matching locale when using the Best Fit Matcher
	 * algorithm. Locales appear in the same order in the returned list as in
	 * requestedLocales. The steps taken are implementation dependent.
	 */
	function /*9.2.7 */BestFitSupportedLocales (availableLocales, requestedLocales) {
	    // ###TODO: implement this function as described by the specification###
	    return LookupSupportedLocales(availableLocales, requestedLocales);
	}

	/**
	 * The SupportedLocales abstract operation returns the subset of the provided BCP
	 * 47 language priority list requestedLocales for which availableLocales has a
	 * matching locale. Two algorithms are available to match the locales: the Lookup
	 * algorithm described in RFC 4647 section 3.4, and an implementation dependent
	 * best-fit algorithm. Locales appear in the same order in the returned list as
	 * in requestedLocales. The following steps are taken:
	 */
	function /*9.2.8 */SupportedLocales (availableLocales, requestedLocales, options) {
	    // 1. If options is not undefined, then
	    if (options !== undefined) {
	        var
	            // a. Let options be ToObject(options).
	            options = new Record(toObject(options)),
	            // b. Let matcher be the result of calling the [[Get]] internal method of
	            //    options with argument "localeMatcher".
	            matcher = options.localeMatcher;

	        // c. If matcher is not undefined, then
	        if (matcher !== undefined) {
	            // i. Let matcher be ToString(matcher).
	            matcher = String(matcher);

	            // ii. If matcher is not "lookup" or "best fit", then throw a RangeError
	            //     exception.
	            if (matcher !== 'lookup' && matcher !== 'best fit')
	                throw new RangeError('matcher should be "lookup" or "best fit"');
	        }
	    }
	    // 2. If matcher is undefined or "best fit", then
	    if (matcher === undefined || matcher === 'best fit')
	        var
	            // a. Let subset be the result of calling the BestFitSupportedLocales
	            //    abstract operation (defined in 9.2.7) with arguments
	            //    availableLocales and requestedLocales.
	            subset = BestFitSupportedLocales(availableLocales, requestedLocales);
	    // 3. Else
	    else
	        var
	            // a. Let subset be the result of calling the LookupSupportedLocales
	            //    abstract operation (defined in 9.2.6) with arguments
	            //    availableLocales and requestedLocales.
	            subset = LookupSupportedLocales(availableLocales, requestedLocales);

	    // 4. For each named own property name P of subset,
	    for (var P in subset) {
	        if (!hop.call(subset, P))
	            continue;

	        // a. Let desc be the result of calling the [[GetOwnProperty]] internal
	        //    method of subset with P.
	        // b. Set desc.[[Writable]] to false.
	        // c. Set desc.[[Configurable]] to false.
	        // d. Call the [[DefineOwnProperty]] internal method of subset with P, desc,
	        //    and true as arguments.
	        defineProperty(subset, P, {
	            writable: false, configurable: false, value: subset[P]
	        });
	    }
	    // "Freeze" the array so no new elements can be added
	    defineProperty(subset, 'length', { writable: false });

	    // 5. Return subset
	    return subset;
	}

	/**
	 * The GetOption abstract operation extracts the value of the property named
	 * property from the provided options object, converts it to the required type,
	 * checks whether it is one of a List of allowed values, and fills in a fallback
	 * value if necessary.
	 */
	function /*9.2.9 */GetOption (options, property, type, values, fallback) {
	    var
	        // 1. Let value be the result of calling the [[Get]] internal method of
	        //    options with argument property.
	        value = options[property];

	    // 2. If value is not undefined, then
	    if (value !== undefined) {
	        // a. Assert: type is "boolean" or "string".
	        // b. If type is "boolean", then let value be ToBoolean(value).
	        // c. If type is "string", then let value be ToString(value).
	        value = type === 'boolean' ? Boolean(value)
	                  : (type === 'string' ? String(value) : value);

	        // d. If values is not undefined, then
	        if (values !== undefined) {
	            // i. If values does not contain an element equal to value, then throw a
	            //    RangeError exception.
	            if (arrIndexOf.call(values, value) === -1)
	                throw new RangeError("'" + value + "' is not an allowed value for `" + property +'`');
	        }

	        // e. Return value.
	        return value;
	    }
	    // Else return fallback.
	    return fallback;
	}

	/**
	 * The GetNumberOption abstract operation extracts a property value from the
	 * provided options object, converts it to a Number value, checks whether it is
	 * in the allowed range, and fills in a fallback value if necessary.
	 */
	function /* 9.2.10 */GetNumberOption (options, property, minimum, maximum, fallback) {
	    var
	        // 1. Let value be the result of calling the [[Get]] internal method of
	        //    options with argument property.
	        value = options[property];

	    // 2. If value is not undefined, then
	    if (value !== undefined) {
	        // a. Let value be ToNumber(value).
	        value = Number(value);

	        // b. If value is NaN or less than minimum or greater than maximum, throw a
	        //    RangeError exception.
	        if (isNaN(value) || value < minimum || value > maximum)
	            throw new RangeError('Value is not a number or outside accepted range');

	        // c. Return floor(value).
	        return Math.floor(value);
	    }
	    // 3. Else return fallback.
	    return fallback;
	}

	// 11.1 The Intl.NumberFormat constructor
	// ======================================

	// Define the NumberFormat constructor internally so it cannot be tainted
	function NumberFormatConstructor () {
	    var locales = arguments[0];
	    var options = arguments[1];

	    if (!this || this === Intl) {
	        return new Intl.NumberFormat(locales, options);
	    }

	    return InitializeNumberFormat(toObject(this), locales, options);
	}

	defineProperty(Intl, 'NumberFormat', {
	    configurable: true,
	    writable: true,
	    value: NumberFormatConstructor
	});

	// Must explicitly set prototypes as unwritable
	defineProperty(Intl.NumberFormat, 'prototype', {
	    writable: false
	});

	/**
	 * The abstract operation InitializeNumberFormat accepts the arguments
	 * numberFormat (which must be an object), locales, and options. It initializes
	 * numberFormat as a NumberFormat object.
	 */
	function /*11.1.1.1 */InitializeNumberFormat (numberFormat, locales, options) {
	    var
	    // This will be a internal properties object if we're not already initialized
	        internal = getInternalProperties(numberFormat),

	    // Create an object whose props can be used to restore the values of RegExp props
	        regexpState = createRegExpRestore();

	    // 1. If numberFormat has an [[initializedIntlObject]] internal property with
	    // value true, throw a TypeError exception.
	    if (internal['[[initializedIntlObject]]'] === true)
	        throw new TypeError('`this` object has already been initialized as an Intl object');

	    // Need this to access the `internal` object
	    defineProperty(numberFormat, '__getInternalProperties', {
	        value: function () {
	            // NOTE: Non-standard, for internal use only
	            if (arguments[0] === secret)
	                return internal;
	        }
	    });

	    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.
	    internal['[[initializedIntlObject]]'] = true;

	    var
	    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList
	    //    abstract operation (defined in 9.2.1) with argument locales.
	        requestedLocales = CanonicalizeLocaleList(locales);

	    // 4. If options is undefined, then
	    if (options === undefined)
	        // a. Let options be the result of creating a new object as if by the
	        // expression new Object() where Object is the standard built-in constructor
	        // with that name.
	        options = {};

	    // 5. Else
	    else
	        // a. Let options be ToObject(options).
	        options = toObject(options);

	    var
	    // 6. Let opt be a new Record.
	        opt = new Record(),

	    // 7. Let matcher be the result of calling the GetOption abstract operation
	    //    (defined in 9.2.9) with the arguments options, "localeMatcher", "string",
	    //    a List containing the two String values "lookup" and "best fit", and
	    //    "best fit".
	        matcher =  GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');

	    // 8. Set opt.[[localeMatcher]] to matcher.
	    opt['[[localeMatcher]]'] = matcher;

	    var
	    // 9. Let NumberFormat be the standard built-in object that is the initial value
	    //    of Intl.NumberFormat.
	    // 10. Let localeData be the value of the [[localeData]] internal property of
	    //     NumberFormat.
	        localeData = internals.NumberFormat['[[localeData]]'],

	    // 11. Let r be the result of calling the ResolveLocale abstract operation
	    //     (defined in 9.2.5) with the [[availableLocales]] internal property of
	    //     NumberFormat, requestedLocales, opt, the [[relevantExtensionKeys]]
	    //     internal property of NumberFormat, and localeData.
	        r = ResolveLocale(
	                internals.NumberFormat['[[availableLocales]]'], requestedLocales,
	                opt, internals.NumberFormat['[[relevantExtensionKeys]]'], localeData
	            );

	    // 12. Set the [[locale]] internal property of numberFormat to the value of
	    //     r.[[locale]].
	    internal['[[locale]]'] = r['[[locale]]'];

	    // 13. Set the [[numberingSystem]] internal property of numberFormat to the value
	    //     of r.[[nu]].
	    internal['[[numberingSystem]]'] = r['[[nu]]'];

	    // The specification doesn't tell us to do this, but it's helpful later on
	    internal['[[dataLocale]]'] = r['[[dataLocale]]'];

	    var
	    // 14. Let dataLocale be the value of r.[[dataLocale]].
	        dataLocale = r['[[dataLocale]]'],

	    // 15. Let s be the result of calling the GetOption abstract operation with the
	    //     arguments options, "style", "string", a List containing the three String
	    //     values "decimal", "percent", and "currency", and "decimal".
	        s = GetOption(options, 'style', 'string', new List('decimal', 'percent', 'currency'), 'decimal');

	    // 16. Set the [[style]] internal property of numberFormat to s.
	    internal['[[style]]'] = s;

	    var
	    // 17. Let c be the result of calling the GetOption abstract operation with the
	    //     arguments options, "currency", "string", undefined, and undefined.
	        c = GetOption(options, 'currency', 'string');

	    // 18. If c is not undefined and the result of calling the
	    //     IsWellFormedCurrencyCode abstract operation (defined in 6.3.1) with
	    //     argument c is false, then throw a RangeError exception.
	    if (c !== undefined && !IsWellFormedCurrencyCode(c))
	        throw new RangeError("'" + c + "' is not a valid currency code");

	    // 19. If s is "currency" and c is undefined, throw a TypeError exception.
	    if (s === 'currency' && c === undefined)
	        throw new TypeError('Currency code is required when style is currency');

	    // 20. If s is "currency", then
	    if (s === 'currency') {
	        // a. Let c be the result of converting c to upper case as specified in 6.1.
	        c = c.toUpperCase();

	        // b. Set the [[currency]] internal property of numberFormat to c.
	        internal['[[currency]]'] = c;

	        var
	        // c. Let cDigits be the result of calling the CurrencyDigits abstract
	        //    operation (defined below) with argument c.
	            cDigits = CurrencyDigits(c);
	    }

	    var
	    // 21. Let cd be the result of calling the GetOption abstract operation with the
	    //     arguments options, "currencyDisplay", "string", a List containing the
	    //     three String values "code", "symbol", and "name", and "symbol".
	        cd = GetOption(options, 'currencyDisplay', 'string', new List('code', 'symbol', 'name'), 'symbol');

	    // 22. If s is "currency", then set the [[currencyDisplay]] internal property of
	    //     numberFormat to cd.
	    if (s === 'currency')
	        internal['[[currencyDisplay]]'] = cd;

	    var
	    // 23. Let mnid be the result of calling the GetNumberOption abstract operation
	    //     (defined in 9.2.10) with arguments options, "minimumIntegerDigits", 1, 21,
	    //     and 1.
	        mnid = GetNumberOption(options, 'minimumIntegerDigits', 1, 21, 1);

	    // 24. Set the [[minimumIntegerDigits]] internal property of numberFormat to mnid.
	    internal['[[minimumIntegerDigits]]'] = mnid;

	    var
	    // 25. If s is "currency", then let mnfdDefault be cDigits; else let mnfdDefault
	    //     be 0.
	        mnfdDefault = s === 'currency' ? cDigits : 0,

	    // 26. Let mnfd be the result of calling the GetNumberOption abstract operation
	    //     with arguments options, "minimumFractionDigits", 0, 20, and mnfdDefault.
	        mnfd = GetNumberOption(options, 'minimumFractionDigits', 0, 20, mnfdDefault);

	    // 27. Set the [[minimumFractionDigits]] internal property of numberFormat to mnfd.
	    internal['[[minimumFractionDigits]]'] = mnfd;

	    var
	    // 28. If s is "currency", then let mxfdDefault be max(mnfd, cDigits); else if s
	    //     is "percent", then let mxfdDefault be max(mnfd, 0); else let mxfdDefault
	    //     be max(mnfd, 3).
	        mxfdDefault = s === 'currency' ? Math.max(mnfd, cDigits)
	                    : (s === 'percent' ? Math.max(mnfd, 0) : Math.max(mnfd, 3)),

	    // 29. Let mxfd be the result of calling the GetNumberOption abstract operation
	    //     with arguments options, "maximumFractionDigits", mnfd, 20, and mxfdDefault.
	        mxfd = GetNumberOption(options, 'maximumFractionDigits', mnfd, 20, mxfdDefault);

	    // 30. Set the [[maximumFractionDigits]] internal property of numberFormat to mxfd.
	    internal['[[maximumFractionDigits]]'] = mxfd;

	    var
	    // 31. Let mnsd be the result of calling the [[Get]] internal method of options
	    //     with argument "minimumSignificantDigits".
	        mnsd = options.minimumSignificantDigits,

	    // 32. Let mxsd be the result of calling the [[Get]] internal method of options
	    //     with argument "maximumSignificantDigits".
	        mxsd = options.maximumSignificantDigits;

	    // 33. If mnsd is not undefined or mxsd is not undefined, then:
	    if (mnsd !== undefined || mxsd !== undefined) {
	        // a. Let mnsd be the result of calling the GetNumberOption abstract
	        //    operation with arguments options, "minimumSignificantDigits", 1, 21,
	        //    and 1.
	        mnsd = GetNumberOption(options, 'minimumSignificantDigits', 1, 21, 1);

	        // b. Let mxsd be the result of calling the GetNumberOption abstract
	        //     operation with arguments options, "maximumSignificantDigits", mnsd,
	        //     21, and 21.
	        mxsd = GetNumberOption(options, 'maximumSignificantDigits', mnsd, 21, 21);

	        // c. Set the [[minimumSignificantDigits]] internal property of numberFormat
	        //    to mnsd, and the [[maximumSignificantDigits]] internal property of
	        //    numberFormat to mxsd.
	        internal['[[minimumSignificantDigits]]'] = mnsd;
	        internal['[[maximumSignificantDigits]]'] = mxsd;
	    }
	    var
	    // 34. Let g be the result of calling the GetOption abstract operation with the
	    //     arguments options, "useGrouping", "boolean", undefined, and true.
	        g = GetOption(options, 'useGrouping', 'boolean', undefined, true);

	    // 35. Set the [[useGrouping]] internal property of numberFormat to g.
	    internal['[[useGrouping]]'] = g;

	    var
	    // 36. Let dataLocaleData be the result of calling the [[Get]] internal method of
	    //     localeData with argument dataLocale.
	        dataLocaleData = localeData[dataLocale],

	    // 37. Let patterns be the result of calling the [[Get]] internal method of
	    //     dataLocaleData with argument "patterns".
	        patterns = dataLocaleData.patterns;

	    // 38. Assert: patterns is an object (see 11.2.3)

	    var
	    // 39. Let stylePatterns be the result of calling the [[Get]] internal method of
	    //     patterns with argument s.
	        stylePatterns = patterns[s];

	    // 40. Set the [[positivePattern]] internal property of numberFormat to the
	    //     result of calling the [[Get]] internal method of stylePatterns with the
	    //     argument "positivePattern".
	    internal['[[positivePattern]]'] = stylePatterns.positivePattern;

	    // 41. Set the [[negativePattern]] internal property of numberFormat to the
	    //     result of calling the [[Get]] internal method of stylePatterns with the
	    //     argument "negativePattern".
	    internal['[[negativePattern]]'] = stylePatterns.negativePattern;

	    // 42. Set the [[boundFormat]] internal property of numberFormat to undefined.
	    internal['[[boundFormat]]'] = undefined;

	    // 43. Set the [[initializedNumberFormat]] internal property of numberFormat to
	    //     true.
	    internal['[[initializedNumberFormat]]'] = true;

	    // In ES3, we need to pre-bind the format() function
	    if (es3)
	        numberFormat.format = GetFormatNumber.call(numberFormat);

	    // Restore the RegExp properties
	    regexpState.exp.test(regexpState.input);

	    // Return the newly initialised object
	    return numberFormat;
	}

	function CurrencyDigits(currency) {
	    // When the CurrencyDigits abstract operation is called with an argument currency
	    // (which must be an upper case String value), the following steps are taken:

	    // 1. If the ISO 4217 currency and funds code list contains currency as an
	    // alphabetic code, then return the minor unit value corresponding to the
	    // currency from the list; else return 2.
	    return currencyMinorUnits[currency] !== undefined
	                ? currencyMinorUnits[currency]
	                : 2;
	}

	/* 11.2.3 */internals.NumberFormat = {
	    '[[availableLocales]]': [],
	    '[[relevantExtensionKeys]]': ['nu'],
	    '[[localeData]]': {}
	};

	/**
	 * When the supportedLocalesOf method of Intl.NumberFormat is called, the
	 * following steps are taken:
	 */
	/* 11.2.2 */defineProperty(Intl.NumberFormat, 'supportedLocalesOf', {
	    configurable: true,
	    writable: true,
	    value: fnBind.call(supportedLocalesOf, internals.NumberFormat)
	});

	/**
	 * This named accessor property returns a function that formats a number
	 * according to the effective locale and the formatting options of this
	 * NumberFormat object.
	 */
	/* 11.3.2 */defineProperty(Intl.NumberFormat.prototype, 'format', {
	    configurable: true,
	    get: GetFormatNumber
	});

	function GetFormatNumber() {
	        var internal = this != null && typeof this === 'object' && getInternalProperties(this);

	        // Satisfy test 11.3_b
	        if (!internal || !internal['[[initializedNumberFormat]]'])
	            throw new TypeError('`this` value for format() is not an initialized Intl.NumberFormat object.');

	        // The value of the [[Get]] attribute is a function that takes the following
	        // steps:

	        // 1. If the [[boundFormat]] internal property of this NumberFormat object
	        //    is undefined, then:
	        if (internal['[[boundFormat]]'] === undefined) {
	            var
	            // a. Let F be a Function object, with internal properties set as
	            //    specified for built-in functions in ES5, 15, or successor, and the
	            //    length property set to 1, that takes the argument value and
	            //    performs the following steps:
	                F = function (value) {
	                    // i. If value is not provided, then let value be undefined.
	                    // ii. Let x be ToNumber(value).
	                    // iii. Return the result of calling the FormatNumber abstract
	                    //      operation (defined below) with arguments this and x.
	                    return FormatNumber(this, /* x = */Number(value));
	                },

	            // b. Let bind be the standard built-in function object defined in ES5,
	            //    15.3.4.5.
	            // c. Let bf be the result of calling the [[Call]] internal method of
	            //    bind with F as the this value and an argument list containing
	            //    the single item this.
	                bf = fnBind.call(F, this);

	            // d. Set the [[boundFormat]] internal property of this NumberFormat
	            //    object to bf.
	            internal['[[boundFormat]]'] = bf;
	        }
	        // Return the value of the [[boundFormat]] internal property of this
	        // NumberFormat object.
	        return internal['[[boundFormat]]'];
	    }

	/**
	 * When the FormatNumber abstract operation is called with arguments numberFormat
	 * (which must be an object initialized as a NumberFormat) and x (which must be a
	 * Number value), it returns a String value representing x according to the
	 * effective locale and the formatting options of numberFormat.
	 */
	function FormatNumber (numberFormat, x) {
	    var n,

	    // Create an object whose props can be used to restore the values of RegExp props
	        regexpState = createRegExpRestore(),

	        internal = getInternalProperties(numberFormat),
	        locale = internal['[[dataLocale]]'],
	        nums   = internal['[[numberingSystem]]'],
	        data   = internals.NumberFormat['[[localeData]]'][locale],
	        ild    = data.symbols[nums] || data.symbols.latn,

	    // 1. Let negative be false.
	        negative = false;

	    // 2. If the result of isFinite(x) is false, then
	    if (isFinite(x) === false) {
	        // a. If x is NaN, then let n be an ILD String value indicating the NaN value.
	        if (isNaN(x))
	            n = ild.nan;

	        // b. Else
	        else {
	            // a. Let n be an ILD String value indicating infinity.
	            n = ild.infinity;
	            // b. If x < 0, then let negative be true.
	            if (x < 0)
	                negative = true;
	        }
	    }
	    // 3. Else
	    else {
	        // a. If x < 0, then
	        if (x < 0) {
	            // i. Let negative be true.
	            negative = true;
	            // ii. Let x be -x.
	            x = -x;
	        }

	        // b. If the value of the [[style]] internal property of numberFormat is
	        //    "percent", let x be 100 × x.
	        if (internal['[[style]]'] === 'percent')
	            x *= 100;

	        // c. If the [[minimumSignificantDigits]] and [[maximumSignificantDigits]]
	        //    internal properties of numberFormat are present, then
	        if (hop.call(internal, '[[minimumSignificantDigits]]') &&
	                hop.call(internal, '[[maximumSignificantDigits]]'))
	            // i. Let n be the result of calling the ToRawPrecision abstract operation
	            //    (defined below), passing as arguments x and the values of the
	            //    [[minimumSignificantDigits]] and [[maximumSignificantDigits]]
	            //    internal properties of numberFormat.
	            n = ToRawPrecision(x,
	                  internal['[[minimumSignificantDigits]]'],
	                  internal['[[maximumSignificantDigits]]']);
	        // d. Else
	        else
	            // i. Let n be the result of calling the ToRawFixed abstract operation
	            //    (defined below), passing as arguments x and the values of the
	            //    [[minimumIntegerDigits]], [[minimumFractionDigits]], and
	            //    [[maximumFractionDigits]] internal properties of numberFormat.
	            n = ToRawFixed(x,
	                  internal['[[minimumIntegerDigits]]'],
	                  internal['[[minimumFractionDigits]]'],
	                  internal['[[maximumFractionDigits]]']);

	        // e. If the value of the [[numberingSystem]] internal property of
	        //    numberFormat matches one of the values in the “Numbering System” column
	        //    of Table 2 below, then
	        if (numSys[nums]) {
	            // i. Let digits be an array whose 10 String valued elements are the
	            //    UTF-16 string representations of the 10 digits specified in the
	            //    “Digits” column of Table 2 in the row containing the value of the
	            //    [[numberingSystem]] internal property.
	            var digits = numSys[internal['[[numberingSystem]]']];
	            // ii. Replace each digit in n with the value of digits[digit].
	            n = String(n).replace(/\d/g, function (digit) {
	                return digits[digit];
	            });
	        }
	        // f. Else use an implementation dependent algorithm to map n to the
	        //    appropriate representation of n in the given numbering system.
	        else
	            n = String(n); // ###TODO###

	        // g. If n contains the character ".", then replace it with an ILND String
	        //    representing the decimal separator.
	        n = n.replace(/\./g, ild.decimal);

	        // h. If the value of the [[useGrouping]] internal property of numberFormat
	        //    is true, then insert an ILND String representing a grouping separator
	        //    into an ILND set of locations within the integer part of n.
	        if (internal['[[useGrouping]]'] === true) {
	            var
	                parts  = n.split(ild.decimal),
	                igr    = parts[0],

	                // Primary group represents the group closest to the decimal
	                pgSize = data.patterns.primaryGroupSize || 3,

	                // Secondary group is every other group
	                sgSize = data.patterns.secondaryGroupSize || pgSize;

	            // Group only if necessary
	            if (igr.length > pgSize) {
	                var
	                    groups = new List(),

	                    // Index of the primary grouping separator
	                    end    = igr.length - pgSize,

	                    // Starting index for our loop
	                    idx    = end % sgSize,

	                    start  = igr.slice(0, idx);

	                if (start.length)
	                    arrPush.call(groups, start);

	                // Loop to separate into secondary grouping digits
	                while (idx < end) {
	                    arrPush.call(groups, igr.slice(idx, idx + sgSize));
	                    idx += sgSize;
	                }

	                // Add the primary grouping digits
	                arrPush.call(groups, igr.slice(end));

	                parts[0] = arrJoin.call(groups, ild.group);
	            }

	            n = arrJoin.call(parts, ild.decimal);
	        }
	    }

	    var
	    // 4. If negative is true, then let result be the value of the [[negativePattern]]
	    //    internal property of numberFormat; else let result be the value of the
	    //    [[positivePattern]] internal property of numberFormat.
	        result = internal[negative === true ? '[[negativePattern]]' : '[[positivePattern]]'];

	    // 5. Replace the substring "{number}" within result with n.
	    result = result.replace('{number}', n);

	    // 6. If the value of the [[style]] internal property of numberFormat is
	    //    "currency", then:
	    if (internal['[[style]]'] === 'currency') {
	        var cd,
	        // a. Let currency be the value of the [[currency]] internal property of
	        //    numberFormat.
	            currency = internal['[[currency]]'],

	        // Shorthand for the currency data
	            cData = data.currencies[currency];

	        // b. If the value of the [[currencyDisplay]] internal property of
	        //    numberFormat is "code", then let cd be currency.
	        // c. Else if the value of the [[currencyDisplay]] internal property of
	        //    numberFormat is "symbol", then let cd be an ILD string representing
	        //    currency in short form. If the implementation does not have such a
	        //    representation of currency, then use currency itself.
	        // d. Else if the value of the [[currencyDisplay]] internal property of
	        //    numberFormat is "name", then let cd be an ILD string representing
	        //    currency in long form. If the implementation does not have such a
	        //    representation of currency, then use currency itself.
	        switch (internal['[[currencyDisplay]]']) {
	            case 'symbol':
	                cd = cData || currency;
	                break;

	            default:
	            case 'code':
	            case 'name':
	                cd = currency;
	        }

	        // e. Replace the substring "{currency}" within result with cd.
	        result = result.replace('{currency}', cd);
	    }

	    // Restore the RegExp properties
	    regexpState.exp.test(regexpState.input);

	    // 7. Return result.
	    return result;
	}

	/**
	 * When the ToRawPrecision abstract operation is called with arguments x (which
	 * must be a finite non-negative number), minPrecision, and maxPrecision (both
	 * must be integers between 1 and 21) the following steps are taken:
	 */
	function ToRawPrecision (x, minPrecision, maxPrecision) {
	    var
	    // 1. Let p be maxPrecision.
	        p = maxPrecision;

	    // 2. If x = 0, then
	    if (x === 0) {
	        var
	        // a. Let m be the String consisting of p occurrences of the character "0".
	            m = arrJoin.call(Array (p + 1), '0'),
	        // b. Let e be 0.
	            e = 0;
	    }
	    // 3. Else
	    else {
	        // a. Let e and n be integers such that 10ᵖ⁻¹ ≤ n < 10ᵖ and for which the
	        //    exact mathematical value of n × 10ᵉ⁻ᵖ⁺¹ – x is as close to zero as
	        //    possible. If there are two such sets of e and n, pick the e and n for
	        //    which n × 10ᵉ⁻ᵖ⁺¹ is larger.
	        var
	            e = log10Floor(Math.abs(x)),

	            // Easier to get to m from here
	            f = Math.round(Math.exp((Math.abs(e - p + 1)) * Math.LN10)),

	        // b. Let m be the String consisting of the digits of the decimal
	        //    representation of n (in order, with no leading zeroes)
	            m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));
	    }

	    // 4. If e ≥ p, then
	    if (e >= p)
	        // a. Return the concatenation of m and e-p+1 occurrences of the character "0".
	        return m + arrJoin.call(Array(e-p+1 + 1), '0');

	    // 5. If e = p-1, then
	    else if (e === p - 1)
	        // a. Return m.
	        return m;

	    // 6. If e ≥ 0, then
	    else if (e >= 0)
	        // a. Let m be the concatenation of the first e+1 characters of m, the character
	        //    ".", and the remaining p–(e+1) characters of m.
	        m = m.slice(0, e + 1) + '.' + m.slice(e + 1);

	    // 7. If e < 0, then
	    else if (e < 0)
	        // a. Let m be the concatenation of the String "0.", –(e+1) occurrences of the
	        //    character "0", and the string m.
	        m = '0.' + arrJoin.call(Array (-(e+1) + 1), '0') + m;

	    // 8. If m contains the character ".", and maxPrecision > minPrecision, then
	    if (m.indexOf(".") >= 0 && maxPrecision > minPrecision) {
	        var
	        // a. Let cut be maxPrecision – minPrecision.
	            cut = maxPrecision - minPrecision;

	        // b. Repeat while cut > 0 and the last character of m is "0":
	        while (cut > 0 && m.charAt(m.length-1) === '0') {
	            //  i. Remove the last character from m.
	            m = m.slice(0, -1);

	            //  ii. Decrease cut by 1.
	            cut--;
	        }

	        // c. If the last character of m is ".", then
	        if (m.charAt(m.length-1) === '.')
	            //    i. Remove the last character from m.
	            m = m.slice(0, -1);
	    }
	    // 9. Return m.
	    return m;
	}

	/**
	 * When the ToRawFixed abstract operation is called with arguments x (which must
	 * be a finite non-negative number), minInteger (which must be an integer between
	 * 1 and 21), minFraction, and maxFraction (which must be integers between 0 and
	 * 20) the following steps are taken:
	 */
	function ToRawFixed (x, minInteger, minFraction, maxFraction) {
	    // (or not because Number.toPrototype.toFixed does a lot of it for us)
	    var idx,

	        // We can pick up after the fixed formatted string (m) is created
	        m   = Number.prototype.toFixed.call(x, maxFraction),

	        // 4. If [maxFraction] ≠ 0, then
	        //    ...
	        //    e. Let int be the number of characters in a.
	        //
	        // 5. Else let int be the number of characters in m.
	        igr = m.split(".")[0].length,  // int is a reserved word

	        // 6. Let cut be maxFraction – minFraction.
	        cut = maxFraction - minFraction,

	        exp = (idx = m.indexOf('e')) > -1 ? m.slice(idx + 1) : 0;

	    if (exp) {
	        m = m.slice(0, idx).replace('.', '');
	        m += arrJoin.call(Array(exp - (m.length - 1) + 1), '0')
	          + '.' + arrJoin.call(Array(maxFraction + 1), '0');

	        igr = m.length;
	    }

	    // 7. Repeat while cut > 0 and the last character of m is "0":
	    while (cut > 0 && m.slice(-1) === "0") {
	        // a. Remove the last character from m.
	        m = m.slice(0, -1);

	        // b. Decrease cut by 1.
	        cut--;
	    }

	    // 8. If the last character of m is ".", then
	    if (m.slice(-1) === ".")
	        // a. Remove the last character from m.
	        m = m.slice(0, -1);

	    // 9. If int < minInteger, then
	    if (igr < minInteger)
	        // a. Let z be the String consisting of minInteger–int occurrences of the
	        //    character "0".
	        var z = arrJoin.call(Array(minInteger - igr + 1), '0');

	    // 10. Let m be the concatenation of Strings z and m.
	    // 11. Return m.
	    return (z ? z : '') + m;
	}

	// Sect 11.3.2 Table 2, Numbering systems
	// ======================================
	var numSys = {
	    arab:    [ '\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669' ],
	    arabext: [ '\u06F0', '\u06F1', '\u06F2', '\u06F3', '\u06F4', '\u06F5', '\u06F6', '\u06F7', '\u06F8', '\u06F9' ],
	    bali:    [ '\u1B50', '\u1B51', '\u1B52', '\u1B53', '\u1B54', '\u1B55', '\u1B56', '\u1B57', '\u1B58', '\u1B59' ],
	    beng:    [ '\u09E6', '\u09E7', '\u09E8', '\u09E9', '\u09EA', '\u09EB', '\u09EC', '\u09ED', '\u09EE', '\u09EF' ],
	    deva:    [ '\u0966', '\u0967', '\u0968', '\u0969', '\u096A', '\u096B', '\u096C', '\u096D', '\u096E', '\u096F' ],
	    fullwide:[ '\uFF10', '\uFF11', '\uFF12', '\uFF13', '\uFF14', '\uFF15', '\uFF16', '\uFF17', '\uFF18', '\uFF19' ],
	    gujr:    [ '\u0AE6', '\u0AE7', '\u0AE8', '\u0AE9', '\u0AEA', '\u0AEB', '\u0AEC', '\u0AED', '\u0AEE', '\u0AEF' ],
	    guru:    [ '\u0A66', '\u0A67', '\u0A68', '\u0A69', '\u0A6A', '\u0A6B', '\u0A6C', '\u0A6D', '\u0A6E', '\u0A6F' ],
	    hanidec: [ '\u3007', '\u4E00', '\u4E8C', '\u4E09', '\u56DB', '\u4E94', '\u516D', '\u4E03', '\u516B', '\u4E5D' ],
	    khmr:    [ '\u17E0', '\u17E1', '\u17E2', '\u17E3', '\u17E4', '\u17E5', '\u17E6', '\u17E7', '\u17E8', '\u17E9' ],
	    knda:    [ '\u0CE6', '\u0CE7', '\u0CE8', '\u0CE9', '\u0CEA', '\u0CEB', '\u0CEC', '\u0CED', '\u0CEE', '\u0CEF' ],
	    laoo:    [ '\u0ED0', '\u0ED1', '\u0ED2', '\u0ED3', '\u0ED4', '\u0ED5', '\u0ED6', '\u0ED7', '\u0ED8', '\u0ED9' ],
	    latn:    [ '\u0030', '\u0031', '\u0032', '\u0033', '\u0034', '\u0035', '\u0036', '\u0037', '\u0038', '\u0039' ],
	    limb:    [ '\u1946', '\u1947', '\u1948', '\u1949', '\u194A', '\u194B', '\u194C', '\u194D', '\u194E', '\u194F' ],
	    mlym:    [ '\u0D66', '\u0D67', '\u0D68', '\u0D69', '\u0D6A', '\u0D6B', '\u0D6C', '\u0D6D', '\u0D6E', '\u0D6F' ],
	    mong:    [ '\u1810', '\u1811', '\u1812', '\u1813', '\u1814', '\u1815', '\u1816', '\u1817', '\u1818', '\u1819' ],
	    mymr:    [ '\u1040', '\u1041', '\u1042', '\u1043', '\u1044', '\u1045', '\u1046', '\u1047', '\u1048', '\u1049' ],
	    orya:    [ '\u0B66', '\u0B67', '\u0B68', '\u0B69', '\u0B6A', '\u0B6B', '\u0B6C', '\u0B6D', '\u0B6E', '\u0B6F' ],
	    tamldec: [ '\u0BE6', '\u0BE7', '\u0BE8', '\u0BE9', '\u0BEA', '\u0BEB', '\u0BEC', '\u0BED', '\u0BEE', '\u0BEF' ],
	    telu:    [ '\u0C66', '\u0C67', '\u0C68', '\u0C69', '\u0C6A', '\u0C6B', '\u0C6C', '\u0C6D', '\u0C6E', '\u0C6F' ],
	    thai:    [ '\u0E50', '\u0E51', '\u0E52', '\u0E53', '\u0E54', '\u0E55', '\u0E56', '\u0E57', '\u0E58', '\u0E59' ],
	    tibt:    [ '\u0F20', '\u0F21', '\u0F22', '\u0F23', '\u0F24', '\u0F25', '\u0F26', '\u0F27', '\u0F28', '\u0F29' ]
	};

	/**
	 * This function provides access to the locale and formatting options computed
	 * during initialization of the object.
	 *
	 * The function returns a new object whose properties and attributes are set as
	 * if constructed by an object literal assigning to each of the following
	 * properties the value of the corresponding internal property of this
	 * NumberFormat object (see 11.4): locale, numberingSystem, style, currency,
	 * currencyDisplay, minimumIntegerDigits, minimumFractionDigits,
	 * maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits, and
	 * useGrouping. Properties whose corresponding internal properties are not present
	 * are not assigned.
	 */
	/* 11.3.3 */defineProperty(Intl.NumberFormat.prototype, 'resolvedOptions', {
	    configurable: true,
	    writable: true,
	    value: function () {
	        var prop,
	            descs = new Record(),
	            props = [
	                'locale', 'numberingSystem', 'style', 'currency', 'currencyDisplay',
	                'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits',
	                'minimumSignificantDigits', 'maximumSignificantDigits', 'useGrouping'
	            ],
	            internal = this != null && typeof this === 'object' && getInternalProperties(this);

	        // Satisfy test 11.3_b
	        if (!internal || !internal['[[initializedNumberFormat]]'])
	            throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.NumberFormat object.');

	        for (var i = 0, max = props.length; i < max; i++) {
	            if (hop.call(internal, prop = '[['+ props[i] +']]'))
	                descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };
	        }

	        return objCreate({}, descs);
	    }
	});

	// 12.1 The Intl.DateTimeFormat constructor
	// ==================================

	// Define the DateTimeFormat constructor internally so it cannot be tainted
	function DateTimeFormatConstructor () {
	    var locales = arguments[0];
	    var options = arguments[1];

	    if (!this || this === Intl) {
	        return new Intl.DateTimeFormat(locales, options);
	    }
	    return InitializeDateTimeFormat(toObject(this), locales, options);
	}

	defineProperty(Intl, 'DateTimeFormat', {
	    configurable: true,
	    writable: true,
	    value: DateTimeFormatConstructor
	});

	// Must explicitly set prototypes as unwritable
	defineProperty(DateTimeFormatConstructor, 'prototype', {
	    writable: false
	});

	/**
	 * The abstract operation InitializeDateTimeFormat accepts the arguments dateTimeFormat
	 * (which must be an object), locales, and options. It initializes dateTimeFormat as a
	 * DateTimeFormat object.
	 */
	function/* 12.1.1.1 */InitializeDateTimeFormat (dateTimeFormat, locales, options) {
	    var
	    // This will be a internal properties object if we're not already initialized
	        internal = getInternalProperties(dateTimeFormat),

	    // Create an object whose props can be used to restore the values of RegExp props
	        regexpState = createRegExpRestore();

	    // 1. If dateTimeFormat has an [[initializedIntlObject]] internal property with
	    //    value true, throw a TypeError exception.
	    if (internal['[[initializedIntlObject]]'] === true)
	        throw new TypeError('`this` object has already been initialized as an Intl object');

	    // Need this to access the `internal` object
	    defineProperty(dateTimeFormat, '__getInternalProperties', {
	        value: function () {
	            // NOTE: Non-standard, for internal use only
	            if (arguments[0] === secret)
	                return internal;
	        }
	    });

	    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.
	    internal['[[initializedIntlObject]]'] = true;

	    var
	    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList
	    //    abstract operation (defined in 9.2.1) with argument locales.
	        requestedLocales = CanonicalizeLocaleList(locales),

	    // 4. Let options be the result of calling the ToDateTimeOptions abstract
	    //    operation (defined below) with arguments options, "any", and "date".
	        options = ToDateTimeOptions(options, 'any', 'date'),

	    // 5. Let opt be a new Record.
	        opt = new Record();

	    // 6. Let matcher be the result of calling the GetOption abstract operation
	    //    (defined in 9.2.9) with arguments options, "localeMatcher", "string", a List
	    //    containing the two String values "lookup" and "best fit", and "best fit".
	        matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');

	    // 7. Set opt.[[localeMatcher]] to matcher.
	    opt['[[localeMatcher]]'] = matcher;

	    var
	    // 8. Let DateTimeFormat be the standard built-in object that is the initial
	    //    value of Intl.DateTimeFormat.
	        DateTimeFormat = internals.DateTimeFormat, // This is what we *really* need

	    // 9. Let localeData be the value of the [[localeData]] internal property of
	    //    DateTimeFormat.
	        localeData = DateTimeFormat['[[localeData]]'],

	    // 10. Let r be the result of calling the ResolveLocale abstract operation
	    //     (defined in 9.2.5) with the [[availableLocales]] internal property of
	    //      DateTimeFormat, requestedLocales, opt, the [[relevantExtensionKeys]]
	    //      internal property of DateTimeFormat, and localeData.
	        r = ResolveLocale(DateTimeFormat['[[availableLocales]]'], requestedLocales,
	                opt, DateTimeFormat['[[relevantExtensionKeys]]'], localeData);

	    // 11. Set the [[locale]] internal property of dateTimeFormat to the value of
	    //     r.[[locale]].
	    internal['[[locale]]'] = r['[[locale]]'];

	    // 12. Set the [[calendar]] internal property of dateTimeFormat to the value of
	    //     r.[[ca]].
	    internal['[[calendar]]'] = r['[[ca]]'];

	    // 13. Set the [[numberingSystem]] internal property of dateTimeFormat to the value of
	    //     r.[[nu]].
	    internal['[[numberingSystem]]'] = r['[[nu]]'];

	    // The specification doesn't tell us to do this, but it's helpful later on
	    internal['[[dataLocale]]'] = r['[[dataLocale]]'];

	    var
	    // 14. Let dataLocale be the value of r.[[dataLocale]].
	        dataLocale = r['[[dataLocale]]'],

	    // 15. Let tz be the result of calling the [[Get]] internal method of options with
	    //     argument "timeZone".
	        tz = options.timeZone;

	    // 16. If tz is not undefined, then
	    if (tz !== undefined) {
	        // a. Let tz be ToString(tz).
	        // b. Convert tz to upper case as described in 6.1.
	        //    NOTE: If an implementation accepts additional time zone values, as permitted
	        //          under certain conditions by the Conformance clause, different casing
	        //          rules apply.
	        tz = toLatinUpperCase(tz);

	        // c. If tz is not "UTC", then throw a RangeError exception.
	        // ###TODO: accept more time zones###
	        if (tz !== 'UTC')
	            throw new RangeError('timeZone is not supported.');
	    }

	    // 17. Set the [[timeZone]] internal property of dateTimeFormat to tz.
	    internal['[[timeZone]]'] = tz;

	    // 18. Let opt be a new Record.
	    opt = new Record();

	    // 19. For each row of Table 3, except the header row, do:
	    for (var prop in dateTimeComponents) {
	        if (!hop.call(dateTimeComponents, prop))
	            continue;

	        var
	        // 20. Let prop be the name given in the Property column of the row.
	        // 21. Let value be the result of calling the GetOption abstract operation,
	        //     passing as argument options, the name given in the Property column of the
	        //     row, "string", a List containing the strings given in the Values column of
	        //     the row, and undefined.
	            value = GetOption(options, prop, 'string', dateTimeComponents[prop]);

	        // 22. Set opt.[[<prop>]] to value.
	        opt['[['+prop+']]'] = value;
	    }

	    var
	        // Assigned a value below
	        bestFormat,

	        // 23. Let dataLocaleData be the result of calling the [[Get]] internal method of
	        //     localeData with argument dataLocale.
	        dataLocaleData = localeData[dataLocale],

	        // 24. Let formats be the result of calling the [[Get]] internal method of
	        //     dataLocaleData with argument "formats".
	        //     Note: we process the CLDR formats into the spec'd structure
	        formats = ToDateTimeFormats(dataLocaleData.formats),

	        // 25. Let matcher be the result of calling the GetOption abstract operation with
	        //     arguments options, "formatMatcher", "string", a List containing the two String
	        //     values "basic" and "best fit", and "best fit".
	        matcher = GetOption(options, 'formatMatcher', 'string', new List('basic', 'best fit'), 'best fit');

	    // Optimization: caching the processed formats as a one time operation by
	    // replacing the initial structure from localeData
	    dataLocaleData.formats = formats;

	    // 26. If matcher is "basic", then
	    if (matcher === 'basic')
	        // 27. Let bestFormat be the result of calling the BasicFormatMatcher abstract
	        //     operation (defined below) with opt and formats.
	        bestFormat = BasicFormatMatcher(opt, formats);

	    // 28. Else
	    else
	        // 29. Let bestFormat be the result of calling the BestFitFormatMatcher
	        //     abstract operation (defined below) with opt and formats.
	        bestFormat = BestFitFormatMatcher(opt, formats);

	    // 30. For each row in Table 3, except the header row, do
	    for (var prop in dateTimeComponents) {
	        if (!hop.call(dateTimeComponents, prop))
	            continue;

	        // a. Let prop be the name given in the Property column of the row.
	        // b. Let pDesc be the result of calling the [[GetOwnProperty]] internal method of
	        //    bestFormat with argument prop.
	        // c. If pDesc is not undefined, then
	        if (hop.call(bestFormat, prop)) {
	            var
	            // i. Let p be the result of calling the [[Get]] internal method of bestFormat
	            //    with argument prop.
	                p = bestFormat[prop];

	            // ii. Set the [[<prop>]] internal property of dateTimeFormat to p.
	            // Diverging from spec becuase of bug #58
	            // https://github.com/tc39/ecma402/issues/58
	            internal['[['+prop+']]'] = opt['[['+prop+']]'] || p;
	        }
	    }

	    var
	        // Assigned a value below
	        pattern,

	    // 31. Let hr12 be the result of calling the GetOption abstract operation with
	    //     arguments options, "hour12", "boolean", undefined, and undefined.
	        hr12 = GetOption(options, 'hour12', 'boolean'/*, undefined, undefined*/);

	    // 32. If dateTimeFormat has an internal property [[hour]], then
	    if (internal['[[hour]]']) {
	        // a. If hr12 is undefined, then let hr12 be the result of calling the [[Get]]
	        //    internal method of dataLocaleData with argument "hour12".
	        hr12 = hr12 === undefined ? dataLocaleData.hour12 : hr12;

	        // b. Set the [[hour12]] internal property of dateTimeFormat to hr12.
	        internal['[[hour12]]'] = hr12;

	        // c. If hr12 is true, then
	        if (hr12 === true) {
	            var
	            // i. Let hourNo0 be the result of calling the [[Get]] internal method of
	            //    dataLocaleData with argument "hourNo0".
	                hourNo0 = dataLocaleData.hourNo0;

	            // ii. Set the [[hourNo0]] internal property of dateTimeFormat to hourNo0.
	            internal['[[hourNo0]]'] = hourNo0;

	            // iii. Let pattern be the result of calling the [[Get]] internal method of
	            //      bestFormat with argument "pattern12".
	            pattern = bestFormat.pattern12;
	        }

	        // d. Else
	        else
	            // i. Let pattern be the result of calling the [[Get]] internal method of
	            //    bestFormat with argument "pattern".
	            pattern = bestFormat.pattern;
	    }

	    // 33. Else
	    else
	        // a. Let pattern be the result of calling the [[Get]] internal method of
	        //    bestFormat with argument "pattern".
	        pattern = bestFormat.pattern;

	    // 34. Set the [[pattern]] internal property of dateTimeFormat to pattern.
	    internal['[[pattern]]'] = pattern;

	    // 35. Set the [[boundFormat]] internal property of dateTimeFormat to undefined.
	    internal['[[boundFormat]]'] = undefined;

	    // 36. Set the [[initializedDateTimeFormat]] internal property of dateTimeFormat to
	    //     true.
	    internal['[[initializedDateTimeFormat]]'] = true;

	    // In ES3, we need to pre-bind the format() function
	    if (es3)
	        dateTimeFormat.format = GetFormatDateTime.call(dateTimeFormat);

	    // Restore the RegExp properties
	    regexpState.exp.test(regexpState.input);

	    // Return the newly initialised object
	    return dateTimeFormat;
	}

	/**
	 * Several DateTimeFormat algorithms use values from the following table, which provides
	 * property names and allowable values for the components of date and time formats:
	 */
	var dateTimeComponents = {
	         weekday: [ "narrow", "short", "long" ],
	             era: [ "narrow", "short", "long" ],
	            year: [ "2-digit", "numeric" ],
	           month: [ "2-digit", "numeric", "narrow", "short", "long" ],
	             day: [ "2-digit", "numeric" ],
	            hour: [ "2-digit", "numeric" ],
	          minute: [ "2-digit", "numeric" ],
	          second: [ "2-digit", "numeric" ],
	    timeZoneName: [ "short", "long" ]
	};

	/**
	 * When the ToDateTimeOptions abstract operation is called with arguments options,
	 * required, and defaults, the following steps are taken:
	 */
	function ToDateTimeFormats(formats) {
	    if (Object.prototype.toString.call(formats) === '[object Array]') {
	        return formats;
	    }
	    return src$cldr$$.createDateTimeFormats(formats);
	}

	/**
	 * When the ToDateTimeOptions abstract operation is called with arguments options,
	 * required, and defaults, the following steps are taken:
	 */
	function ToDateTimeOptions (options, required, defaults) {
	    // 1. If options is undefined, then let options be null, else let options be
	    //    ToObject(options).
	    if (options === undefined)
	        options = null;

	    else {
	        // (#12) options needs to be a Record, but it also needs to inherit properties
	        var opt2 = toObject(options);
	        options = new Record();

	        for (var k in opt2)
	            options[k] = opt2[k];
	    }

	    var
	    // 2. Let create be the standard built-in function object defined in ES5, 15.2.3.5.
	        create = objCreate,

	    // 3. Let options be the result of calling the [[Call]] internal method of create with
	    //    undefined as the this value and an argument list containing the single item
	    //    options.
	        options = create(options),

	    // 4. Let needDefaults be true.
	        needDefaults = true;

	    // 5. If required is "date" or "any", then
	    if (required === 'date' || required === 'any') {
	        // a. For each of the property names "weekday", "year", "month", "day":
	            // i. If the result of calling the [[Get]] internal method of options with the
	            //    property name is not undefined, then let needDefaults be false.
	        if (options.weekday !== undefined || options.year !== undefined
	                || options.month !== undefined || options.day !== undefined)
	            needDefaults = false;
	    }

	    // 6. If required is "time" or "any", then
	    if (required === 'time' || required === 'any') {
	        // a. For each of the property names "hour", "minute", "second":
	            // i. If the result of calling the [[Get]] internal method of options with the
	            //    property name is not undefined, then let needDefaults be false.
	        if (options.hour !== undefined || options.minute !== undefined || options.second !== undefined)
	                needDefaults = false;
	    }

	    // 7. If needDefaults is true and defaults is either "date" or "all", then
	    if (needDefaults && (defaults === 'date' || defaults === 'all'))
	        // a. For each of the property names "year", "month", "day":
	            // i. Call the [[DefineOwnProperty]] internal method of options with the
	            //    property name, Property Descriptor {[[Value]]: "numeric", [[Writable]]:
	            //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
	        options.year = options.month = options.day = 'numeric';

	    // 8. If needDefaults is true and defaults is either "time" or "all", then
	    if (needDefaults && (defaults === 'time' || defaults === 'all'))
	        // a. For each of the property names "hour", "minute", "second":
	            // i. Call the [[DefineOwnProperty]] internal method of options with the
	            //    property name, Property Descriptor {[[Value]]: "numeric", [[Writable]]:
	            //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
	        options.hour = options.minute = options.second = 'numeric';

	    // 9. Return options.
	    return options;
	}

	/**
	 * When the BasicFormatMatcher abstract operation is called with two arguments options and
	 * formats, the following steps are taken:
	 */
	function BasicFormatMatcher (options, formats) {
	    return calculateScore(options, formats);
	}

	/**
	 * Calculates score for BestFitFormatMatcher and BasicFormatMatcher.
	 * Abstracted from BasicFormatMatcher section.
	 */
	function calculateScore (options, formats, bestFit) {
	    var
	    // Additional penalty type when bestFit === true
	       diffDataTypePenalty = 8,

	    // 1. Let removalPenalty be 120.
	        removalPenalty = 120,

	    // 2. Let additionPenalty be 20.
	        additionPenalty = 20,

	    // 3. Let longLessPenalty be 8.
	        longLessPenalty = 8,

	    // 4. Let longMorePenalty be 6.
	        longMorePenalty = 6,

	    // 5. Let shortLessPenalty be 6.
	        shortLessPenalty = 6,

	    // 6. Let shortMorePenalty be 3.
	        shortMorePenalty = 3,

	    // 7. Let bestScore be -Infinity.
	        bestScore = -Infinity,

	    // 8. Let bestFormat be undefined.
	        bestFormat,

	    // 9. Let i be 0.
	        i = 0,

	    // 10. Let len be the result of calling the [[Get]] internal method of formats with argument "length".
	        len = formats.length;

	    // 11. Repeat while i < len:
	    while (i < len) {
	        var
	        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).
	            format = formats[i],

	        // b. Let score be 0.
	            score = 0;

	        // c. For each property shown in Table 3:
	        for (var property in dateTimeComponents) {
	            if (!hop.call(dateTimeComponents, property))
	                continue;

	            var
	            // i. Let optionsProp be options.[[<property>]].
	                optionsProp = options['[['+ property +']]'],

	            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format
	            //     with argument property.
	            // iii. If formatPropDesc is not undefined, then
	            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.
	                formatProp = hop.call(format, property) ? format[property] : undefined;

	            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by
	            //     additionPenalty.
	            if (optionsProp === undefined && formatProp !== undefined)
	                score -= additionPenalty;

	            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by
	            //    removalPenalty.
	            else if (optionsProp !== undefined && formatProp === undefined)
	                score -= removalPenalty;

	            // vi. Else
	            else {
	                var
	                // 1. Let values be the array ["2-digit", "numeric", "narrow", "short",
	                //    "long"].
	                    values = [ '2-digit', 'numeric', 'narrow', 'short', 'long' ],

	                // 2. Let optionsPropIndex be the index of optionsProp within values.
	                    optionsPropIndex = arrIndexOf.call(values, optionsProp),

	                // 3. Let formatPropIndex be the index of formatProp within values.
	                    formatPropIndex = arrIndexOf.call(values, formatProp),

	                // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).
	                    delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);

	                // When the bestFit argument is true, subtract additional penalty where data types are not the same
	                if (bestFit && (
	                    ((optionsProp === 'numeric' || optionsProp === '2-digit') && (formatProp !== 'numeric' && formatProp !== '2-digit') || (optionsProp !== 'numeric' && optionsProp !== '2-digit') && (formatProp === '2-digit' || formatProp === 'numeric'))
	                ))
	                    score -= diffDataTypePenalty;

	                // 5. If delta = 2, decrease score by longMorePenalty.
	                if (delta === 2)
	                    score -= longMorePenalty;

	                // 6. Else if delta = 1, decrease score by shortMorePenalty.
	                else if (delta === 1)
	                    score -= shortMorePenalty;

	                // 7. Else if delta = -1, decrease score by shortLessPenalty.
	                else if (delta === -1)
	                    score -= shortLessPenalty;

	                // 8. Else if delta = -2, decrease score by longLessPenalty.
	                else if (delta === -2)
	                    score -= longLessPenalty;
	            }
	        }

	        // d. If score > bestScore, then
	        if (score > bestScore) {
	            // i. Let bestScore be score.
	            bestScore = score;

	            // ii. Let bestFormat be format.
	            bestFormat = format;
	        }

	        // e. Increase i by 1.
	        i++;
	    }

	    // 12. Return bestFormat.
	    return bestFormat;
	}

	/**
	 * When the BestFitFormatMatcher abstract operation is called with two arguments options
	 * and formats, it performs implementation dependent steps, which should return a set of
	 * component representations that a typical user of the selected locale would perceive as
	 * at least as good as the one returned by BasicFormatMatcher.
	 *
	 * This polyfill defines the algorithm to be the same as BasicFormatMatcher,
	 * with the addition of bonus points awarded where the requested format is of
	 * the same data type as the potentially matching format.
	 *
	 * For example,
	 *
	 *     { month: 'numeric', day: 'numeric' }
	 *
	 * should match
	 *
	 *     { month: '2-digit', day: '2-digit' }
	 *
	 * rather than
	 *
	 *     { month: 'short', day: 'numeric' }
	 *
	 * This makes sense because a user requesting a formatted date with numeric parts would
	 * not expect to see the returned format containing narrow, short or long part names
	 */
	function BestFitFormatMatcher (options, formats) {
	    return calculateScore(options, formats, true);
	}

	/* 12.2.3 */internals.DateTimeFormat = {
	    '[[availableLocales]]': [],
	    '[[relevantExtensionKeys]]': ['ca', 'nu'],
	    '[[localeData]]': {}
	};

	/**
	 * When the supportedLocalesOf method of Intl.DateTimeFormat is called, the
	 * following steps are taken:
	 */
	/* 12.2.2 */defineProperty(Intl.DateTimeFormat, 'supportedLocalesOf', {
	    configurable: true,
	    writable: true,
	    value: fnBind.call(supportedLocalesOf, internals.DateTimeFormat)
	});

	/**
	 * This named accessor property returns a function that formats a number
	 * according to the effective locale and the formatting options of this
	 * DateTimeFormat object.
	 */
	/* 12.3.2 */defineProperty(Intl.DateTimeFormat.prototype, 'format', {
	    configurable: true,
	    get: GetFormatDateTime
	});

	function GetFormatDateTime() {
	    var internal = this != null && typeof this === 'object' && getInternalProperties(this);

	    // Satisfy test 12.3_b
	    if (!internal || !internal['[[initializedDateTimeFormat]]'])
	        throw new TypeError('`this` value for format() is not an initialized Intl.DateTimeFormat object.');

	    // The value of the [[Get]] attribute is a function that takes the following
	    // steps:

	    // 1. If the [[boundFormat]] internal property of this DateTimeFormat object
	    //    is undefined, then:
	    if (internal['[[boundFormat]]'] === undefined) {
	        var
	        // a. Let F be a Function object, with internal properties set as
	        //    specified for built-in functions in ES5, 15, or successor, and the
	        //    length property set to 0, that takes the argument date and
	        //    performs the following steps:
	            F = function () {
	                //   i. If date is not provided or is undefined, then let x be the
	                //      result as if by the expression Date.now() where Date.now is
	                //      the standard built-in function defined in ES5, 15.9.4.4.
	                //  ii. Else let x be ToNumber(date).
	                // iii. Return the result of calling the FormatDateTime abstract
	                //      operation (defined below) with arguments this and x.
	                var x = Number(arguments.length === 0 ? Date.now() : arguments[0]);
	                return FormatDateTime(this, x);
	            },
	        // b. Let bind be the standard built-in function object defined in ES5,
	        //    15.3.4.5.
	        // c. Let bf be the result of calling the [[Call]] internal method of
	        //    bind with F as the this value and an argument list containing
	        //    the single item this.
	            bf = fnBind.call(F, this);
	        // d. Set the [[boundFormat]] internal property of this NumberFormat
	        //    object to bf.
	        internal['[[boundFormat]]'] = bf;
	    }
	    // Return the value of the [[boundFormat]] internal property of this
	    // NumberFormat object.
	    return internal['[[boundFormat]]'];
	}

	/**
	 * When the FormatDateTime abstract operation is called with arguments dateTimeFormat
	 * (which must be an object initialized as a DateTimeFormat) and x (which must be a Number
	 * value), it returns a String value representing x (interpreted as a time value as
	 * specified in ES5, 15.9.1.1) according to the effective locale and the formatting
	 * options of dateTimeFormat.
	 */
	function FormatDateTime(dateTimeFormat, x) {
	    // 1. If x is not a finite Number, then throw a RangeError exception.
	    if (!isFinite(x))
	        throw new RangeError('Invalid valid date passed to format');

	    var
	        internal = dateTimeFormat.__getInternalProperties(secret),

	    // Creating restore point for properties on the RegExp object... please wait
	        regexpState = createRegExpRestore(),

	    // 2. Let locale be the value of the [[locale]] internal property of dateTimeFormat.
	        locale = internal['[[locale]]'],

	    // 3. Let nf be the result of creating a new NumberFormat object as if by the
	    // expression new Intl.NumberFormat([locale], {useGrouping: false}) where
	    // Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.
	        nf = new Intl.NumberFormat([locale], {useGrouping: false}),

	    // 4. Let nf2 be the result of creating a new NumberFormat object as if by the
	    // expression new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping:
	    // false}) where Intl.NumberFormat is the standard built-in constructor defined in
	    // 11.1.3.
	        nf2 = new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping: false}),

	    // 5. Let tm be the result of calling the ToLocalTime abstract operation (defined
	    // below) with x, the value of the [[calendar]] internal property of dateTimeFormat,
	    // and the value of the [[timeZone]] internal property of dateTimeFormat.
	        tm = ToLocalTime(x, internal['[[calendar]]'], internal['[[timeZone]]']),

	    // 6. Let result be the value of the [[pattern]] internal property of dateTimeFormat.
	        result = internal['[[pattern]]'],

	    // Need the locale minus any extensions
	        dataLocale = internal['[[dataLocale]]'],

	    // Need the calendar data from CLDR
	        localeData = internals.DateTimeFormat['[[localeData]]'][dataLocale].calendars,
	        ca = internal['[[calendar]]'];

	    // 7. For each row of Table 3, except the header row, do:
	    for (var p in dateTimeComponents) {
	        // a. If dateTimeFormat has an internal property with the name given in the
	        //    Property column of the row, then:
	        if (hop.call(internal, '[['+ p +']]')) {
	            var
	            // Assigned values below
	                pm, fv,

	            //   i. Let p be the name given in the Property column of the row.
	            //  ii. Let f be the value of the [[<p>]] internal property of dateTimeFormat.
	                f = internal['[['+ p +']]'],

	            // iii. Let v be the value of tm.[[<p>]].
	                v = tm['[['+ p +']]'];

	            //  iv. If p is "year" and v ≤ 0, then let v be 1 - v.
	            if (p === 'year' && v <= 0)
	                v = 1 - v;

	            //   v. If p is "month", then increase v by 1.
	            else if (p === 'month')
	                v++;

	            //  vi. If p is "hour" and the value of the [[hour12]] internal property of
	            //      dateTimeFormat is true, then
	            else if (p === 'hour' && internal['[[hour12]]'] === true) {
	                // 1. Let v be v modulo 12.
	                v = v % 12;

	                // 2. If v is equal to the value of tm.[[<p>]], then let pm be false; else
	                //    let pm be true.
	                pm = v !== tm['[['+ p +']]'];

	                // 3. If v is 0 and the value of the [[hourNo0]] internal property of
	                //    dateTimeFormat is true, then let v be 12.
	                if (v === 0 && internal['[[hourNo0]]'] === true)
	                    v = 12;
	            }

	            // vii. If f is "numeric", then
	            if (f === 'numeric')
	                // 1. Let fv be the result of calling the FormatNumber abstract operation
	                //    (defined in 11.3.2) with arguments nf and v.
	                fv = FormatNumber(nf, v);

	            // viii. Else if f is "2-digit", then
	            else if (f === '2-digit') {
	                // 1. Let fv be the result of calling the FormatNumber abstract operation
	                //    with arguments nf2 and v.
	                fv = FormatNumber(nf2, v);

	                // 2. If the length of fv is greater than 2, let fv be the substring of fv
	                //    containing the last two characters.
	                if (fv.length > 2)
	                    fv = fv.slice(-2);
	            }

	            // ix. Else if f is "narrow", "short", or "long", then let fv be a String
	            //     value representing f in the desired form; the String value depends upon
	            //     the implementation and the effective locale and calendar of
	            //     dateTimeFormat. If p is "month", then the String value may also depend
	            //     on whether dateTimeFormat has a [[day]] internal property. If p is
	            //     "timeZoneName", then the String value may also depend on the value of
	            //     the [[inDST]] field of tm.
	            else if (f in dateWidths) {
	                switch (p) {
	                    case 'month':
	                        fv = resolveDateString(localeData, ca, 'months', f, tm['[['+ p +']]']);
	                        break;

	                    case 'weekday':
	                        try {
	                            fv = resolveDateString(localeData, ca, 'days', f, tm['[['+ p +']]']);
	                            // fv = resolveDateString(ca.days, f)[tm['[['+ p +']]']];
	                        } catch (e) {
	                            throw new Error('Could not find weekday data for locale '+locale);
	                        }
	                        break;

	                    case 'timeZoneName':
	                        fv = ''; // TODO
	                        break;

	                    // TODO: Era
	                    default:
	                        fv = tm['[['+ p +']]'];
	                }
	            }

	            // x. Replace the substring of result that consists of "{", p, and "}", with
	            //    fv.
	            result = result.replace('{'+ p +'}', fv);
	        }
	    }
	    // 8. If dateTimeFormat has an internal property [[hour12]] whose value is true, then
	    if (internal['[[hour12]]'] === true) {
	        // a. If pm is true, then let fv be an implementation and locale dependent String
	        //    value representing “post meridiem”; else let fv be an implementation and
	        //    locale dependent String value representing “ante meridiem”.
	        fv = resolveDateString(localeData, ca, 'dayPeriods', pm ? 'pm' : 'am');

	        // b. Replace the substring of result that consists of "{ampm}", with fv.
	        result = result.replace('{ampm}', fv);
	    }

	    // Restore properties of the RegExp object
	    regexpState.exp.test(regexpState.input);

	    // 9. Return result.
	    return result;
	}

	/**
	 * When the ToLocalTime abstract operation is called with arguments date, calendar, and
	 * timeZone, the following steps are taken:
	 */
	function ToLocalTime(date, calendar, timeZone) {
	    // 1. Apply calendrical calculations on date for the given calendar and time zone to
	    //    produce weekday, era, year, month, day, hour, minute, second, and inDST values.
	    //    The calculations should use best available information about the specified
	    //    calendar and time zone. If the calendar is "gregory", then the calculations must
	    //    match the algorithms specified in ES5, 15.9.1, except that calculations are not
	    //    bound by the restrictions on the use of best available information on time zones
	    //    for local time zone adjustment and daylight saving time adjustment imposed by
	    //    ES5, 15.9.1.7 and 15.9.1.8.
	    // ###TODO###
	    var d = new Date(date),
	        m = 'get' + (timeZone || '');

	    // 2. Return a Record with fields [[weekday]], [[era]], [[year]], [[month]], [[day]],
	    //    [[hour]], [[minute]], [[second]], and [[inDST]], each with the corresponding
	    //    calculated value.
	    return new Record({
	        '[[weekday]]': d[m + 'Day'](),
	        '[[era]]'    : +(d[m + 'FullYear']() >= 0),
	        '[[year]]'   : d[m + 'FullYear'](),
	        '[[month]]'  : d[m + 'Month'](),
	        '[[day]]'    : d[m + 'Date'](),
	        '[[hour]]'   : d[m + 'Hours'](),
	        '[[minute]]' : d[m + 'Minutes'](),
	        '[[second]]' : d[m + 'Seconds'](),
	        '[[inDST]]'  : false // ###TODO###
	    });
	}

	/**
	 * The function returns a new object whose properties and attributes are set as if
	 * constructed by an object literal assigning to each of the following properties the
	 * value of the corresponding internal property of this DateTimeFormat object (see 12.4):
	 * locale, calendar, numberingSystem, timeZone, hour12, weekday, era, year, month, day,
	 * hour, minute, second, and timeZoneName. Properties whose corresponding internal
	 * properties are not present are not assigned.
	 */
	/* 12.3.3 */defineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {
	    writable: true,
	    configurable: true,
	    value: function () {
	        var prop,
	            descs = new Record(),
	            props = [
	                'locale', 'calendar', 'numberingSystem', 'timeZone', 'hour12', 'weekday',
	                'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'
	            ],
	            internal = this != null && typeof this === 'object' && getInternalProperties(this);

	        // Satisfy test 12.3_b
	        if (!internal || !internal['[[initializedDateTimeFormat]]'])
	            throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.DateTimeFormat object.');

	        for (var i = 0, max = props.length; i < max; i++) {
	            if (hop.call(internal, prop = '[[' + props[i] + ']]'))
	                descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };
	        }

	        return objCreate({}, descs);
	    }
	});

	// Sect 13 Locale Sensitive Functions of the ECMAScript Language Specification
	// ===========================================================================

	var ls = Intl.__localeSensitiveProtos = {
	    Number: {},
	    Date:   {}
	};

	/**
	 * When the toLocaleString method is called with optional arguments locales and options,
	 * the following steps are taken:
	 */
	/* 13.2.1 */ls.Number.toLocaleString = function () {
	    // Satisfy test 13.2.1_1
	    if (Object.prototype.toString.call(this) !== '[object Number]')
	        throw new TypeError('`this` value must be a number for Number.prototype.toLocaleString()');

	    // 1. Let x be this Number value (as defined in ES5, 15.7.4).
	    // 2. If locales is not provided, then let locales be undefined.
	    // 3. If options is not provided, then let options be undefined.
	    // 4. Let numberFormat be the result of creating a new object as if by the
	    //    expression new Intl.NumberFormat(locales, options) where
	    //    Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.
	    // 5. Return the result of calling the FormatNumber abstract operation
	    //    (defined in 11.3.2) with arguments numberFormat and x.
	    return FormatNumber(new NumberFormatConstructor(arguments[0], arguments[1]), this);
	};

	/**
	 * When the toLocaleString method is called with optional arguments locales and options,
	 * the following steps are taken:
	 */
	/* 13.3.1 */ls.Date.toLocaleString = function () {
	    // Satisfy test 13.3.0_1
	    if (Object.prototype.toString.call(this) !== '[object Date]')
	        throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleString()');

	    var
	    // 1. Let x be this time value (as defined in ES5, 15.9.5).
	        x = +this;

	    // 2. If x is NaN, then return "Invalid Date".
	    if (isNaN(x))
	        return 'Invalid Date';

	    var
	    // 3. If locales is not provided, then let locales be undefined.
	        locales = arguments[0],

	    // 4. If options is not provided, then let options be undefined.
	        options = arguments[1],

	    // 5. Let options be the result of calling the ToDateTimeOptions abstract
	    //    operation (defined in 12.1.1) with arguments options, "any", and "all".
	        options = ToDateTimeOptions(options, 'any', 'all'),

	    // 6. Let dateTimeFormat be the result of creating a new object as if by the
	    //    expression new Intl.DateTimeFormat(locales, options) where
	    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.
	        dateTimeFormat = new DateTimeFormatConstructor(locales, options);

	    // 7. Return the result of calling the FormatDateTime abstract operation (defined
	    //    in 12.3.2) with arguments dateTimeFormat and x.
	    return FormatDateTime(dateTimeFormat, x);
	};

	/**
	 * When the toLocaleDateString method is called with optional arguments locales and
	 * options, the following steps are taken:
	 */
	/* 13.3.2 */ls.Date.toLocaleDateString = function () {
	    // Satisfy test 13.3.0_1
	    if (Object.prototype.toString.call(this) !== '[object Date]')
	        throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleDateString()');

	    var
	    // 1. Let x be this time value (as defined in ES5, 15.9.5).
	        x = +this;

	    // 2. If x is NaN, then return "Invalid Date".
	    if (isNaN(x))
	        return 'Invalid Date';

	    var
	    // 3. If locales is not provided, then let locales be undefined.
	        locales = arguments[0],

	    // 4. If options is not provided, then let options be undefined.
	        options = arguments[1],

	    // 5. Let options be the result of calling the ToDateTimeOptions abstract
	    //    operation (defined in 12.1.1) with arguments options, "date", and "date".
	        options = ToDateTimeOptions(options, 'date', 'date'),

	    // 6. Let dateTimeFormat be the result of creating a new object as if by the
	    //    expression new Intl.DateTimeFormat(locales, options) where
	    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.
	        dateTimeFormat = new DateTimeFormatConstructor(locales, options);

	    // 7. Return the result of calling the FormatDateTime abstract operation (defined
	    //    in 12.3.2) with arguments dateTimeFormat and x.
	    return FormatDateTime(dateTimeFormat, x);
	};

	/**
	 * When the toLocaleTimeString method is called with optional arguments locales and
	 * options, the following steps are taken:
	 */
	/* 13.3.3 */ls.Date.toLocaleTimeString = function () {
	    // Satisfy test 13.3.0_1
	    if (Object.prototype.toString.call(this) !== '[object Date]')
	        throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleTimeString()');

	    var
	    // 1. Let x be this time value (as defined in ES5, 15.9.5).
	        x = +this;

	    // 2. If x is NaN, then return "Invalid Date".
	    if (isNaN(x))
	        return 'Invalid Date';

	    var
	    // 3. If locales is not provided, then let locales be undefined.
	        locales = arguments[0],

	    // 4. If options is not provided, then let options be undefined.
	        options = arguments[1],

	    // 5. Let options be the result of calling the ToDateTimeOptions abstract
	    //    operation (defined in 12.1.1) with arguments options, "time", and "time".
	        options = ToDateTimeOptions(options, 'time', 'time'),

	    // 6. Let dateTimeFormat be the result of creating a new object as if by the
	    //    expression new Intl.DateTimeFormat(locales, options) where
	    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.
	        dateTimeFormat = new DateTimeFormatConstructor(locales, options);

	    // 7. Return the result of calling the FormatDateTime abstract operation (defined
	    //    in 12.3.2) with arguments dateTimeFormat and x.
	    return FormatDateTime(dateTimeFormat, x);
	};

	defineProperty(Intl, '__applyLocaleSensitivePrototypes', {
	    writable: true,
	    configurable: true,
	    value: function () {
	        defineProperty(Number.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Number.toLocaleString });
	        // Need this here for IE 8, to avoid the _DontEnum_ bug
	        defineProperty(Date.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Date.toLocaleString });

	        for (var k in ls.Date) {
	            if (hop.call(ls.Date, k))
	                defineProperty(Date.prototype, k, { writable: true, configurable: true, value: ls.Date[k] });
	        }
	    }
	});

	/**
	 * Can't really ship a single script with data for hundreds of locales, so we provide
	 * this __addLocaleData method as a means for the developer to add the data on an
	 * as-needed basis
	 */
	defineProperty(Intl, '__addLocaleData', {
	    value: function (data) {
	        if (!IsStructurallyValidLanguageTag(data.locale))
	            throw new Error("Object passed doesn't identify itself with a valid language tag");

	        addLocaleData(data, data.locale);
	    }
	});

	function addLocaleData (data, tag) {
	    // Both NumberFormat and DateTimeFormat require number data, so throw if it isn't present
	    if (!data.number)
	        throw new Error("Object passed doesn't contain locale data for Intl.NumberFormat");

	    var locale,
	        locales = [ tag ],
	        parts   = tag.split('-');

	    // Create fallbacks for locale data with scripts, e.g. Latn, Hans, Vaii, etc
	    if (parts.length > 2 && parts[1].length === 4)
	        arrPush.call(locales, parts[0] + '-' + parts[2]);

	    while (locale = arrShift.call(locales)) {
	        // Add to NumberFormat internal properties as per 11.2.3
	        arrPush.call(internals.NumberFormat['[[availableLocales]]'], locale);
	        internals.NumberFormat['[[localeData]]'][locale] = data.number;

	        // ...and DateTimeFormat internal properties as per 12.2.3
	        if (data.date) {
	            data.date.nu = data.number.nu;
	            arrPush.call(internals.DateTimeFormat['[[availableLocales]]'], locale);
	            internals.DateTimeFormat['[[localeData]]'][locale] = data.date;
	        }
	    }

	    // If this is the first set of locale data added, make it the default
	    if (defaultLocale === undefined)
	        defaultLocale = tag;

	    // 11.3 (the NumberFormat prototype object is an Intl.NumberFormat instance)
	    if (!numberFormatProtoInitialised) {
	        InitializeNumberFormat(Intl.NumberFormat.prototype);
	        numberFormatProtoInitialised = true;
	    }

	    // 11.3 (the NumberFormat prototype object is an Intl.NumberFormat instance)
	    if (data.date && !dateTimeFormatProtoInitialised) {
	        InitializeDateTimeFormat(Intl.DateTimeFormat.prototype);
	        dateTimeFormatProtoInitialised = true;
	    }
	}

	// Helper functions
	// ================

	/**
	 * A function to deal with the inaccuracy of calculating log10 in pre-ES6
	 * JavaScript environments. Math.log(num) / Math.LN10 was responsible for
	 * causing issue #62.
	 */
	function log10Floor (n) {
	    // ES6 provides the more accurate Math.log10
	    if (typeof Math.log10 === 'function')
	        return Math.floor(Math.log10(n));

	    var x = Math.round(Math.log(n) * Math.LOG10E);
	    return x - (Number('1e' + x) > n);
	}

	/**
	 * A merge of the Intl.{Constructor}.supportedLocalesOf functions
	 * To make life easier, the function should be bound to the constructor's internal
	 * properties object.
	 */
	function supportedLocalesOf(locales) {
	    /*jshint validthis:true */

	    // Bound functions only have the `this` value altered if being used as a constructor,
	    // this lets us imitate a native function that has no constructor
	    if (!hop.call(this, '[[availableLocales]]'))
	        throw new TypeError('supportedLocalesOf() is not a constructor');

	    var
	    // Create an object whose props can be used to restore the values of RegExp props
	        regexpState = createRegExpRestore(),

	    // 1. If options is not provided, then let options be undefined.
	        options = arguments[1],

	    // 2. Let availableLocales be the value of the [[availableLocales]] internal
	    //    property of the standard built-in object that is the initial value of
	    //    Intl.NumberFormat.

	        availableLocales = this['[[availableLocales]]'],

	    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList
	    //    abstract operation (defined in 9.2.1) with argument locales.
	        requestedLocales = CanonicalizeLocaleList(locales);

	    // Restore the RegExp properties
	    regexpState.exp.test(regexpState.input);

	    // 4. Return the result of calling the SupportedLocales abstract operation
	    //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,
	    //    and options.
	    return SupportedLocales(availableLocales, requestedLocales, options);
	}

	/**
	 * Returns a string for a date component, resolved using multiple inheritance as specified
	 * as specified in the Unicode Technical Standard 35.
	 */
	function resolveDateString(data, ca, component, width, key) {
	    // From http://www.unicode.org/reports/tr35/tr35.html#Multiple_Inheritance:
	    // 'In clearly specified instances, resources may inherit from within the same locale.
	    //  For example, ... the Buddhist calendar inherits from the Gregorian calendar.'
	    var obj = data[ca] && data[ca][component]
	                ? data[ca][component]
	                : data.gregory[component],

	        // "sideways" inheritance resolves strings when a key doesn't exist
	        alts = {
	            narrow: ['short', 'long'],
	            short:  ['long', 'narrow'],
	            long:   ['short', 'narrow']
	        },

	        //
	        resolved = hop.call(obj, width)
	                  ? obj[width]
	                  : hop.call(obj, alts[width][0])
	                      ? obj[alts[width][0]]
	                      : obj[alts[width][1]];

	    // `key` wouldn't be specified for components 'dayPeriods'
	    return key != null ? resolved[key] : resolved;
	}

	/**
	 * A map that doesn't contain Object in its prototype chain
	 */
	Record.prototype = objCreate(null);
	function Record (obj) {
	    // Copy only own properties over unless this object is already a Record instance
	    for (var k in obj) {
	        if (obj instanceof Record || hop.call(obj, k))
	            defineProperty(this, k, { value: obj[k], enumerable: true, writable: true, configurable: true });
	    }
	}

	/**
	 * An ordered list
	 */
	List.prototype = objCreate(null);
	function List() {
	    defineProperty(this, 'length', { writable:true, value: 0 });

	    if (arguments.length)
	        arrPush.apply(this, arrSlice.call(arguments));
	}

	/**
	 * Constructs a regular expression to restore tainted RegExp properties
	 */
	function createRegExpRestore () {
	    var esc = /[.?*+^$[\]\\(){}|-]/g,
	        lm  = RegExp.lastMatch || '',
	        ml  = RegExp.multiline ? 'm' : '',
	        ret = { input: RegExp.input },
	        reg = new List(),
	        has = false,
	        cap = {};

	    // Create a snapshot of all the 'captured' properties
	    for (var i = 1; i <= 9; i++)
	        has = (cap['$'+i] = RegExp['$'+i]) || has;

	    // Now we've snapshotted some properties, escape the lastMatch string
	    lm = lm.replace(esc, '\\$&');

	    // If any of the captured strings were non-empty, iterate over them all
	    if (has) {
	        for (var i = 1; i <= 9; i++) {
	            var m = cap['$'+i];

	            // If it's empty, add an empty capturing group
	            if (!m)
	                lm = '()' + lm;

	            // Else find the string in lm and escape & wrap it to capture it
	            else {
	                m = m.replace(esc, '\\$&');
	                lm = lm.replace(m, '(' + m + ')');
	            }

	            // Push it to the reg and chop lm to make sure further groups come after
	            arrPush.call(reg, lm.slice(0, lm.indexOf('(') + 1));
	            lm = lm.slice(lm.indexOf('(') + 1);
	        }
	    }

	    // Create the regular expression that will reconstruct the RegExp properties
	    ret.exp = new RegExp(arrJoin.call(reg, '') + lm, ml);

	    return ret;
	}

	/**
	 * Convert only a-z to uppercase as per section 6.1 of the spec
	 */
	function toLatinUpperCase (str) {
	    var i = str.length;

	    while (i--) {
	        var ch = str.charAt(i);

	        if (ch >= "a" && ch <= "z")
	            str = str.slice(0, i) + ch.toUpperCase() + str.slice(i+1);
	    }

	    return str;
	}

	/**
	 * Mimics ES5's abstract ToObject() function
	 */
	function toObject (arg) {
	    if (arg == null)
	        throw new TypeError('Cannot convert null or undefined to object');

	    return Object(arg);
	}

	/**
	 * Returns "internal" properties for an object
	 */
	function getInternalProperties (obj) {
	    if (hop.call(obj, '__getInternalProperties'))
	        return obj.__getInternalProperties(secret);
	    else
	        return objCreate(null);
	}

	exports["default"] = Intl;

	//# sourceMappingURL=core.js.map

/***/ },
/* 383 */
/***/ function(module, exports) {

	/* jshint esnext: true, laxbreak:true */

	/**
	* Defines regular expressions for various operations related to the BCP 47 syntax,
	* as defined at http://tools.ietf.org/html/bcp47#section-2.1
	*/

	"use strict";

	var
	    // extlang       = 3ALPHA              ; selected ISO 639 codes
	    //                 *2("-" 3ALPHA)      ; permanently reserved
	    extlang = '[a-z]{3}(?:-[a-z]{3}){0,2}',

	    // language      = 2*3ALPHA            ; shortest ISO 639 code
	    //                 ["-" extlang]       ; sometimes followed by
	    //                                     ; extended language subtags
	    //               / 4ALPHA              ; or reserved for future use
	    //               / 5*8ALPHA            ; or registered language subtag
	    language = '(?:[a-z]{2,3}(?:-' + extlang + ')?|[a-z]{4}|[a-z]{5,8})',

	    // script        = 4ALPHA              ; ISO 15924 code
	    script = '[a-z]{4}',

	    // region        = 2ALPHA              ; ISO 3166-1 code
	    //               / 3DIGIT              ; UN M.49 code
	    region = '(?:[a-z]{2}|\\d{3})',

	    // variant       = 5*8alphanum         ; registered variants
	    //               / (DIGIT 3alphanum)
	    variant = '(?:[a-z0-9]{5,8}|\\d[a-z0-9]{3})',

	    //                                     ; Single alphanumerics
	    //                                     ; "x" reserved for private use
	    // singleton     = DIGIT               ; 0 - 9
	    //               / %x41-57             ; A - W
	    //               / %x59-5A             ; Y - Z
	    //               / %x61-77             ; a - w
	    //               / %x79-7A             ; y - z
	    singleton = '[0-9a-wy-z]',

	    // extension     = singleton 1*("-" (2*8alphanum))
	    extension = singleton + '(?:-[a-z0-9]{2,8})+',

	    // privateuse    = "x" 1*("-" (1*8alphanum))
	    privateuse = 'x(?:-[a-z0-9]{1,8})+',

	    // irregular     = "en-GB-oed"         ; irregular tags do not match
	    //               / "i-ami"             ; the 'langtag' production and
	    //               / "i-bnn"             ; would not otherwise be
	    //               / "i-default"         ; considered 'well-formed'
	    //               / "i-enochian"        ; These tags are all valid,
	    //               / "i-hak"             ; but most are deprecated
	    //               / "i-klingon"         ; in favor of more modern
	    //               / "i-lux"             ; subtags or subtag
	    //               / "i-mingo"           ; combination
	    //               / "i-navajo"
	    //               / "i-pwn"
	    //               / "i-tao"
	    //               / "i-tay"
	    //               / "i-tsu"
	    //               / "sgn-BE-FR"
	    //               / "sgn-BE-NL"
	    //               / "sgn-CH-DE"
	    irregular = '(?:en-GB-oed'
	              + '|i-(?:ami|bnn|default|enochian|hak|klingon|lux|mingo|navajo|pwn|tao|tay|tsu)'
	              + '|sgn-(?:BE-FR|BE-NL|CH-DE))',

	    // regular       = "art-lojban"        ; these tags match the 'langtag'
	    //               / "cel-gaulish"       ; production, but their subtags
	    //               / "no-bok"            ; are not extended language
	    //               / "no-nyn"            ; or variant subtags: their meaning
	    //               / "zh-guoyu"          ; is defined by their registration
	    //               / "zh-hakka"          ; and all of these are deprecated
	    //               / "zh-min"            ; in favor of a more modern
	    //               / "zh-min-nan"        ; subtag or sequence of subtags
	    //               / "zh-xiang"
	    regular = '(?:art-lojban|cel-gaulish|no-bok|no-nyn'
	            + '|zh-(?:guoyu|hakka|min|min-nan|xiang))',

	    // grandfathered = irregular           ; non-redundant tags registered
	    //               / regular             ; during the RFC 3066 era
	    grandfathered = '(?:' + irregular + '|' + regular + ')',

	    // langtag       = language
	    //                 ["-" script]
	    //                 ["-" region]
	    //                 *("-" variant)
	    //                 *("-" extension)
	    //                 ["-" privateuse]
	    langtag = language + '(?:-' + script + ')?(?:-' + region + ')?(?:-'
	            + variant + ')*(?:-' + extension + ')*(?:-' + privateuse + ')?';

	var expBCP47Syntax = RegExp('^(?:'+langtag+'|'+privateuse+'|'+grandfathered+')$', 'i');

	var expVariantDupes = RegExp('^(?!x).*?-('+variant+')-(?:\\w{4,8}-(?!x-))*\\1\\b', 'i');

	var expSingletonDupes = RegExp('^(?!x).*?-('+singleton+')-(?:\\w+-(?!x-))*\\1\\b', 'i');

	var expExtSequences = RegExp('-'+extension, 'ig');
	exports.expBCP47Syntax = expBCP47Syntax, exports.expVariantDupes = expVariantDupes, exports.expSingletonDupes = expSingletonDupes, exports.expExtSequences = expExtSequences;

	//# sourceMappingURL=exp.js.map

/***/ },
/* 384 */
/***/ function(module, exports) {

	/* jslint esnext: true */

	// Match these datetime components in a CLDR pattern, except those in single quotes
	"use strict";
	exports.createDateTimeFormat = createDateTimeFormat, exports.createDateTimeFormats = createDateTimeFormats;
	var expDTComponents = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
	// trim patterns after transformations
	var expPatternTrimmer = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
	// Skip over patterns with these datetime components because we don't have data
	// to back them up:
	// timezone, weekday, amoung others
	var unwantedDTCs = /[rqQxXVOvZASjJgwWIQq]/;

	var dtKeys = ["weekday", "era", "year", "month", "day", "weekday", "quarter"];
	var tmKeys = ["hour", "minute", "second", "hour12", "timeZoneName"];

	function isDateFormatOnly(obj) {
	    for (var i = 0; i < tmKeys.length; i += 1) {
	        if (obj.hasOwnProperty(tmKeys[i])) {
	            return false;
	        }
	    }
	    return true;
	}

	function isTimeFormatOnly(obj) {
	    for (var i = 0; i < dtKeys.length; i += 1) {
	        if (obj.hasOwnProperty(dtKeys[i])) {
	            return false;
	        }
	    }
	    return true;
	}

	function joinDateAndTimeFormats(dateFormatObj, timeFormatObj) {
	    var o = {};
	    for (var i = 0; i < dtKeys.length; i += 1) {
	        if (dateFormatObj[dtKeys[i]]) {
	            o[dtKeys[i]] = dateFormatObj[dtKeys[i]];
	        }
	    }
	    for (var j = 0; j < tmKeys.length; j += 1) {
	        if (timeFormatObj[tmKeys[j]]) {
	            o[tmKeys[j]] = timeFormatObj[tmKeys[j]];
	        }
	    }
	    return o;
	}

	function computeFinalPatterns(formatObj) {
	    // From http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns:
	    //  'In patterns, two single quotes represents a literal single quote, either
	    //   inside or outside single quotes. Text within single quotes is not
	    //   interpreted in any way (except for two adjacent single quotes).'
	    formatObj.pattern12 = formatObj.extendedPattern.replace(/'([^']*)'/g, function ($0, literal) {
	        return literal ? literal : "'";
	    });

	    // pattern 12 is always the default. we can produce the 24 by removing {ampm}
	    formatObj.pattern = formatObj.pattern12.replace('{ampm}', '').replace(expPatternTrimmer, '');
	    return formatObj;
	}

	function createDateTimeFormat(skeleton, pattern) {
	    // we ignore certain patterns that are unsupported to avoid this expensive op.
	    if (unwantedDTCs.test(pattern))
	        return undefined;

	    var formatObj = {
	        originalPattern: pattern
	    };

	    // Replace the pattern string with the one required by the specification, whilst
	    // at the same time evaluating it for the subsets and formats
	    formatObj.extendedPattern = pattern.replace(expDTComponents, function ($0) {
	        // See which symbol we're dealing with
	        switch ($0.charAt(0)) {

	            // --- Era
	            case 'G':
	                return '{era}';

	            // --- Year
	            case 'y':
	            case 'Y':
	            case 'u':
	            case 'U':
	            case 'r':
	                return '{year}';

	            // --- Quarter (not supported in this polyfill)
	            case 'Q':
	            case 'q':
	                return '{quarter}';

	            // --- Month
	            case 'M':
	            case 'L':
	                return '{month}';

	            // --- Week (not supported in this polyfill)
	            case 'w':
	            case 'W':
	                return '{weekday}';

	            // --- Day
	            case 'd':
	            case 'D':
	            case 'F':
	            case 'g':
	                return '{day}';

	            // --- Week Day
	            case 'E':
	            case 'e':
	            case 'c':
	                return '{weekday}';

	            // --- Period
	            case 'a':
	            case 'b':
	            case 'B':
	                return '{ampm}';

	            // --- Hour
	            case 'h':
	            case 'H':
	            case 'k':
	            case 'K':
	                return '{hour}';

	            // --- Minute
	            case 'm':
	                return '{minute}';

	            // --- Second
	            case 's':
	            case 'S':
	            case 'A':
	                return '{second}';

	            // --- Timezone
	            case 'z':
	            case 'Z':
	            case 'O':
	            case 'v':
	            case 'V':
	            case 'X':
	            case 'x':
	                return '{timeZoneName}';

	        }
	    });

	    // Match the skeleton string with the one required by the specification
	    // this implementation is based on the Date Field Symbol Table:
	    // http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
	    // Note: we are adding extra data to the formatObject even though this polyfill
	    //       might not support it.
	    skeleton.replace(expDTComponents, function ($0) {
	        // See which symbol we're dealing with
	        switch ($0.charAt(0)) {

	            // --- Era
	            case 'G':
	                formatObj.era = [ 'short', 'short', 'short', 'long', 'narrow' ][$0.length-1];
	                break;

	            // --- Year
	            case 'y':
	            case 'Y':
	            case 'u':
	            case 'U':
	                formatObj.year = $0.length === 2 ? '2-digit' : 'numeric';
	                break;
	            // case 'r':
	                // r: 1..n - For the Gregorian calendar, the 'r' year is the same as the 'u' year.
	                // break;

	            // --- Quarter (not supported in this polyfill)
	            case 'Q':
	            case 'q':
	                formatObj.quarter = [ 'numeric', '2-digit', 'short', 'long', 'narrow' ][$0.length-1];
	                break;

	            // --- Month
	            case 'M':
	            case 'L':
	                formatObj.month = [ 'numeric', '2-digit', 'short', 'long', 'narrow' ][$0.length-1];
	                break;

	            // --- Week (not supported in this polyfill)
	            case 'w':
	                // week of the year
	                formatObj.week = $0.length === 2 ? '2-digit' : 'numeric';
	                break;
	            case 'W':
	                // week of the month
	                formatObj.week = 'numeric';
	                break;

	            // --- Day
	            case 'd':
	                // day of the month
	                formatObj.day = $0.length === 2 ? '2-digit' : 'numeric';
	                break;
	            case 'D':
	                // day of the year
	                formatObj.day = 'numeric';
	                break;
	            case 'F':
	                // day of the week
	                formatObj.day = 'numeric';
	                break;
	            // case 'g':
	                // 1..n: Modified Julian day
	                // break;

	            // --- Week Day
	            case 'E':
	                // day of the week
	                formatObj.weekday = [ 'short', 'short', 'short', 'long', 'narrow', 'short' ][$0.length-1];
	                break;
	            case 'e':
	                // local day of the week
	                formatObj.weekday = [ 'numeric', '2-digit', 'short', 'long', 'narrow', 'short' ][$0.length-1];
	                break;
	            case 'c':
	                // stand alone local day of the week
	                formatObj.weekday = [ 'numeric', undefined, 'short', 'long', 'narrow', 'short' ][$0.length-1];
	                break;

	            // --- Period
	            case 'a': // AM, PM
	            case 'b': // am, pm, noon, midnight
	            case 'B': // flexible day periods
	                formatObj.hour12 = true;
	                break;

	            // --- Hour
	            case 'H':
	            case 'k':
	                formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';
	                break;
	            case 'h':
	            case 'K':
	                formatObj.hour12 = true; // 12-hour-cycle time formats (using h or K)
	                formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';
	                break;

	            // --- Minute
	            case 'm':
	                formatObj.minute = $0.length === 2 ? '2-digit' : 'numeric';
	                break;

	            // --- Second
	            case 's':
	                formatObj.second = $0.length === 2 ? '2-digit' : 'numeric';
	                break;
	            // case 'S': // 1..n: factional seconds
	            // case 'A': // 1..n: miliseconds in day

	            // --- Timezone
	            case 'z': // 1..3, 4: specific non-location format
	            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
	            case 'O': // 1, 4: miliseconds in day short, long
	            case 'v': // 1, 4: generic non-location format
	            case 'V': // 1, 2, 3, 4: time zone ID or city
	            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
	            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
	                // this polyfill only supports much, for now, we are just doing something dummy
	                formatObj.timeZoneName = $0.length < 4 ? 'short' : 'long';
	                break;

	        }
	    });

	    return computeFinalPatterns(formatObj);
	}

	function createDateTimeFormats(formats) {
	    var availableFormats = formats.availableFormats;
	    var timeFormats = formats.timeFormats;
	    var dateFormats = formats.dateFormats;
	    var result = [];
	    var skeleton, pattern, computed, i, j;
	    var timeRelatedFormats = [];
	    var dateRelatedFormats = [];

	    // Map available (custom) formats into a pattern for createDateTimeFormats
	    for (skeleton in availableFormats) {
	        if (availableFormats.hasOwnProperty(skeleton)) {
	            pattern = availableFormats[skeleton];
	            computed = createDateTimeFormat(skeleton, pattern);
	            if (computed) {
	                result.push(computed);
	                // in some cases, the format is only displaying date specific props
	                // or time specific props, in which case we need to also produce the
	                // combined formats.
	                if (isDateFormatOnly(computed)) {
	                    dateRelatedFormats.push(computed);
	                } else if (isTimeFormatOnly(computed)) {
	                    timeRelatedFormats.push(computed);
	                }
	            }
	        }
	    }

	    // Map time formats into a pattern for createDateTimeFormats
	    for (skeleton in timeFormats) {
	        if (timeFormats.hasOwnProperty(skeleton)) {
	            pattern = timeFormats[skeleton];
	            computed = createDateTimeFormat(skeleton, pattern);
	            if (computed) {
	                result.push(computed);
	                timeRelatedFormats.push(computed);
	            }
	        }
	    }

	    // Map date formats into a pattern for createDateTimeFormats
	    for (skeleton in dateFormats) {
	        if (dateFormats.hasOwnProperty(skeleton)) {
	            pattern = dateFormats[skeleton];
	            computed = createDateTimeFormat(skeleton, pattern);
	            if (computed) {
	                result.push(computed);
	                dateRelatedFormats.push(computed);
	            }
	        }
	    }

	    // combine custom time and custom date formats when they are orthogonals to complete the
	    // formats supported by CLDR.
	    // This Algo is based on section "Missing Skeleton Fields" from:
	    // http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
	    for (i = 0; i < timeRelatedFormats.length; i += 1) {
	        for (j = 0; j < dateRelatedFormats.length; j += 1) {
	            if (dateRelatedFormats[j].month === 'long') {
	                pattern = dateRelatedFormats[j].weekday ? formats.full : formats.long;
	            } else if (dateRelatedFormats[j].month === 'short') {
	                pattern = formats.medium;
	            } else {
	                pattern = formats.short;
	            }
	            computed = joinDateAndTimeFormats(dateRelatedFormats[j], timeRelatedFormats[i]);
	            computed.originalPattern = pattern;
	            computed.extendedPattern = pattern
	                .replace('{0}', timeRelatedFormats[i].extendedPattern)
	                .replace('{1}', dateRelatedFormats[j].extendedPattern)
	                .replace(/^[,\s]+|[,\s]+$/gi, '');
	            result.push(computeFinalPatterns(computed));
	        }
	    }

	    return result;
	}

	//# sourceMappingURL=cldr.js.map

/***/ },
/* 385 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 386 */
/***/ function(module, exports) {

	IntlPolyfill.__addLocaleData({locale:"en-US",date:{ca:["gregory","buddhist","chinese","coptic","dangi","ethioaa","ethiopic","generic","hebrew","indian","islamic","islamicc","japanese","persian","roc"],hourNo0:true,hour12:true,formats:{short:"{1}, {0}",medium:"{1}, {0}",full:"{1} 'at' {0}",long:"{1} 'at' {0}",availableFormats:{"d":"d","E":"ccc",Ed:"d E",Ehm:"E h:mm a",EHm:"E HH:mm",Ehms:"E h:mm:ss a",EHms:"E HH:mm:ss",Gy:"y G",GyMMM:"MMM y G",GyMMMd:"MMM d, y G",GyMMMEd:"E, MMM d, y G","h":"h a","H":"HH",hm:"h:mm a",Hm:"HH:mm",hms:"h:mm:ss a",Hms:"HH:mm:ss",hmsv:"h:mm:ss a v",Hmsv:"HH:mm:ss v",hmv:"h:mm a v",Hmv:"HH:mm v","M":"L",Md:"M/d",MEd:"E, M/d",MMM:"LLL",MMMd:"MMM d",MMMEd:"E, MMM d",MMMMd:"MMMM d",ms:"mm:ss","y":"y",yM:"M/y",yMd:"M/d/y",yMEd:"E, M/d/y",yMMM:"MMM y",yMMMd:"MMM d, y",yMMMEd:"E, MMM d, y",yMMMM:"MMMM y",yQQQ:"QQQ y",yQQQQ:"QQQQ y"},dateFormats:{yMMMMEEEEd:"EEEE, MMMM d, y",yMMMMd:"MMMM d, y",yMMMd:"MMM d, y",yMd:"M/d/yy"},timeFormats:{hmmsszzzz:"h:mm:ss a zzzz",hmsz:"h:mm:ss a z",hms:"h:mm:ss a",hm:"h:mm a"}},calendars:{buddhist:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["BE"],short:["BE"],long:["BE"]},dayPeriods:{am:"AM",pm:"PM"}},chinese:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},coptic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"],long:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},dangi:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mo1","Mo2","Mo3","Mo4","Mo5","Mo6","Mo7","Mo8","Mo9","Mo10","Mo11","Mo12"],long:["Month1","Month2","Month3","Month4","Month5","Month6","Month7","Month8","Month9","Month10","Month11","Month12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},dayPeriods:{am:"AM",pm:"PM"}},ethiopic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},ethioaa:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0"],short:["ERA0"],long:["ERA0"]},dayPeriods:{am:"AM",pm:"PM"}},generic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"],long:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},gregory:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["B","A","BCE","CE"],short:["BC","AD","BCE","CE"],long:["Before Christ","Anno Domini","Before Common Era","Common Era"]},dayPeriods:{am:"AM",pm:"PM"}},hebrew:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13","7"],short:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"],long:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AM"],short:["AM"],long:["AM"]},dayPeriods:{am:"AM",pm:"PM"}},indian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"],long:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Saka"],short:["Saka"],long:["Saka"]},dayPeriods:{am:"AM",pm:"PM"}},islamic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},islamicc:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},japanese:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","M","T","S","H"],short:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"],long:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"]},dayPeriods:{am:"AM",pm:"PM"}},persian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"],long:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["AP"],short:["AP"],long:["AP"]},dayPeriods:{am:"AM",pm:"PM"}},roc:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],long:["January","February","March","April","May","June","July","August","September","October","November","December"]},days:{narrow:["S","M","T","W","T","F","S"],short:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],long:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},eras:{narrow:["Before R.O.C.","Minguo"],short:["Before R.O.C.","Minguo"],long:["Before R.O.C.","Minguo"]},dayPeriods:{am:"AM",pm:"PM"}}}},number:{nu:["latn"],patterns:{decimal:{positivePattern:"{number}",negativePattern:"-{number}"},currency:{positivePattern:"{currency}{number}",negativePattern:"-{currency}{number}"},percent:{positivePattern:"{number}%",negativePattern:"-{number}%"}},symbols:{latn:{decimal:".",group:",",nan:"NaN",percent:"%",infinity:"∞"}},currencies:{AUD:"A$",BRL:"R$",CAD:"CA$",CNY:"CN¥",EUR:"€",GBP:"£",HKD:"HK$",ILS:"₪",INR:"₹",JPY:"¥",KRW:"₩",MXN:"MX$",NZD:"NZ$",TWD:"NT$",USD:"$",VND:"₫",XAF:"FCFA",XCD:"EC$",XOF:"CFA",XPF:"CFPF"}}});

/***/ },
/* 387 */
/***/ function(module, exports) {

	IntlPolyfill.__addLocaleData({locale:"pt-BR",date:{ca:["gregory","buddhist","chinese","coptic","dangi","ethioaa","ethiopic","generic","hebrew","indian","islamic","islamicc","japanese","persian","roc"],hourNo0:true,hour12:false,formats:{short:"{1} {0}",medium:"{1} {0}",full:"{1} {0}",long:"{1} {0}",availableFormats:{"d":"d","E":"ccc",Ed:"E, d",Ehm:"E, h:mm a",EHm:"E, HH:mm",Ehms:"E, h:mm:ss a",EHms:"E, HH:mm:ss",Gy:"y G",GyMMM:"MMM 'de' y G",GyMMMd:"d 'de' MMM 'de' y G",GyMMMEd:"E, d 'de' MMM 'de' y G","h":"h a","H":"HH",hm:"h:mm a",Hm:"HH:mm",hms:"h:mm:ss a",Hms:"HH:mm:ss",hmsv:"h:mm:ss a v",Hmsv:"HH:mm:ss v",hmv:"h:mm a v",Hmv:"HH:mm v","M":"L",Md:"d/M",MEd:"E, dd/MM",MMdd:"dd/MM",MMM:"LLL",MMMd:"d 'de' MMM",MMMEd:"E, d 'de' MMM",MMMMd:"d 'de' MMMM",MMMMEd:"E, d 'de' MMMM",ms:"mm:ss","y":"y",yM:"MM/y",yMd:"dd/MM/y",yMEd:"E, dd/MM/y",yMM:"MM/y",yMMM:"MMM 'de' y",yMMMd:"d 'de' MMM 'de' y",yMMMEd:"E, d 'de' MMM 'de' y",yMMMM:"MMMM 'de' y",yMMMMd:"d 'de' MMMM 'de' y",yMMMMEd:"E, d 'de' MMMM 'de' y",yQQQ:"y QQQ",yQQQQ:"y QQQQ"},dateFormats:{yMMMMEEEEd:"EEEE, d 'de' MMMM 'de' y",yMMMMd:"d 'de' MMMM 'de' y",yMMMd:"d 'de' MMM 'de' y",yMd:"dd/MM/yy"},timeFormats:{hmmsszzzz:"HH:mm:ss zzzz",hmsz:"HH:mm:ss z",hms:"HH:mm:ss",hm:"HH:mm"}},calendars:{buddhist:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],long:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["BE"],short:["BE"],long:["BE"]},dayPeriods:{am:"AM",pm:"PM"}},chinese:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mês 1","Mês 2","Mês 3","Mês 4","Mês 5","Mês 6","Mês 7","Mês 8","Mês 9","Mês 10","Mês 11","Mês 12"],long:["Mês 1","Mês 2","Mês 3","Mês 4","Mês 5","Mês 6","Mês 7","Mês 8","Mês 9","Mês 10","Mês 11","Mês 12"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},dayPeriods:{am:"AM",pm:"PM"}},coptic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"],long:["Tout","Baba","Hator","Kiahk","Toba","Amshir","Baramhat","Baramouda","Bashans","Paona","Epep","Mesra","Nasie"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},dangi:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Mês 1","Mês 2","Mês 3","Mês 4","Mês 5","Mês 6","Mês 7","Mês 8","Mês 9","Mês 10","Mês 11","Mês 12"],long:["Mês 1","Mês 2","Mês 3","Mês 4","Mês 5","Mês 6","Mês 7","Mês 8","Mês 9","Mês 10","Mês 11","Mês 12"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},dayPeriods:{am:"AM",pm:"PM"}},ethiopic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},ethioaa:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13"],short:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"],long:["Meskerem","Tekemt","Hedar","Tahsas","Ter","Yekatit","Megabit","Miazia","Genbot","Sene","Hamle","Nehasse","Pagumen"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["ERA0"],short:["ERA0"],long:["ERA0"]},dayPeriods:{am:"AM",pm:"PM"}},generic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"],long:["M01","M02","M03","M04","M05","M06","M07","M08","M09","M10","M11","M12"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["ERA0","ERA1"],short:["ERA0","ERA1"],long:["ERA0","ERA1"]},dayPeriods:{am:"AM",pm:"PM"}},gregory:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],long:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["a.C.","d.C.","AEC","EC"],short:["a.C.","d.C.","AEC","EC"],long:["antes de Cristo","depois de Cristo","antes da Era Comum","Era Comum"]},dayPeriods:{am:"AM",pm:"PM"}},hebrew:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12","13","7"],short:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"],long:["Tishri","Heshvan","Kislev","Tevet","Shevat","Adar I","Adar","Nisan","Iyar","Sivan","Tamuz","Av","Elul","Adar II"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["AM"],short:["AM"],long:["AM"]},dayPeriods:{am:"AM",pm:"PM"}},indian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"],long:["Chaitra","Vaisakha","Jyaistha","Asadha","Sravana","Bhadra","Asvina","Kartika","Agrahayana","Pausa","Magha","Phalguna"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["Saka"],short:["Saka"],long:["Saka"]},dayPeriods:{am:"AM",pm:"PM"}},islamic:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},islamicc:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Muh.","Saf.","Rab. I","Rab. II","Jum. I","Jum. II","Raj.","Sha.","Ram.","Shaw.","Dhuʻl-Q.","Dhuʻl-H."],long:["Muharram","Safar","Rabiʻ I","Rabiʻ II","Jumada I","Jumada II","Rajab","Shaʻban","Ramadan","Shawwal","Dhuʻl-Qiʻdah","Dhuʻl-Hijjah"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["AH"],short:["AH"],long:["AH"]},dayPeriods:{am:"AM",pm:"PM"}},japanese:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],long:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","M","T","S","H"],short:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"],long:["Taika (645–650)","Hakuchi (650–671)","Hakuhō (672–686)","Shuchō (686–701)","Taihō (701–704)","Keiun (704–708)","Wadō (708–715)","Reiki (715–717)","Yōrō (717–724)","Jinki (724–729)","Tenpyō (729–749)","Tenpyō-kampō (749-749)","Tenpyō-shōhō (749-757)","Tenpyō-hōji (757-765)","Tenpyō-jingo (765-767)","Jingo-keiun (767-770)","Hōki (770–780)","Ten-ō (781-782)","Enryaku (782–806)","Daidō (806–810)","Kōnin (810–824)","Tenchō (824–834)","Jōwa (834–848)","Kajō (848–851)","Ninju (851–854)","Saikō (854–857)","Ten-an (857-859)","Jōgan (859–877)","Gangyō (877–885)","Ninna (885–889)","Kanpyō (889–898)","Shōtai (898–901)","Engi (901–923)","Enchō (923–931)","Jōhei (931–938)","Tengyō (938–947)","Tenryaku (947–957)","Tentoku (957–961)","Ōwa (961–964)","Kōhō (964–968)","Anna (968–970)","Tenroku (970–973)","Ten’en (973–976)","Jōgen (976–978)","Tengen (978–983)","Eikan (983–985)","Kanna (985–987)","Eien (987–989)","Eiso (989–990)","Shōryaku (990–995)","Chōtoku (995–999)","Chōhō (999–1004)","Kankō (1004–1012)","Chōwa (1012–1017)","Kannin (1017–1021)","Jian (1021–1024)","Manju (1024–1028)","Chōgen (1028–1037)","Chōryaku (1037–1040)","Chōkyū (1040–1044)","Kantoku (1044–1046)","Eishō (1046–1053)","Tengi (1053–1058)","Kōhei (1058–1065)","Jiryaku (1065–1069)","Enkyū (1069–1074)","Shōho (1074–1077)","Shōryaku (1077–1081)","Eihō (1081–1084)","Ōtoku (1084–1087)","Kanji (1087–1094)","Kahō (1094–1096)","Eichō (1096–1097)","Jōtoku (1097–1099)","Kōwa (1099–1104)","Chōji (1104–1106)","Kashō (1106–1108)","Tennin (1108–1110)","Ten-ei (1110-1113)","Eikyū (1113–1118)","Gen’ei (1118–1120)","Hōan (1120–1124)","Tenji (1124–1126)","Daiji (1126–1131)","Tenshō (1131–1132)","Chōshō (1132–1135)","Hōen (1135–1141)","Eiji (1141–1142)","Kōji (1142–1144)","Ten’yō (1144–1145)","Kyūan (1145–1151)","Ninpei (1151–1154)","Kyūju (1154–1156)","Hōgen (1156–1159)","Heiji (1159–1160)","Eiryaku (1160–1161)","Ōho (1161–1163)","Chōkan (1163–1165)","Eiman (1165–1166)","Nin’an (1166–1169)","Kaō (1169–1171)","Shōan (1171–1175)","Angen (1175–1177)","Jishō (1177–1181)","Yōwa (1181–1182)","Juei (1182–1184)","Genryaku (1184–1185)","Bunji (1185–1190)","Kenkyū (1190–1199)","Shōji (1199–1201)","Kennin (1201–1204)","Genkyū (1204–1206)","Ken’ei (1206–1207)","Jōgen (1207–1211)","Kenryaku (1211–1213)","Kenpō (1213–1219)","Jōkyū (1219–1222)","Jōō (1222–1224)","Gennin (1224–1225)","Karoku (1225–1227)","Antei (1227–1229)","Kanki (1229–1232)","Jōei (1232–1233)","Tenpuku (1233–1234)","Bunryaku (1234–1235)","Katei (1235–1238)","Ryakunin (1238–1239)","En’ō (1239–1240)","Ninji (1240–1243)","Kangen (1243–1247)","Hōji (1247–1249)","Kenchō (1249–1256)","Kōgen (1256–1257)","Shōka (1257–1259)","Shōgen (1259–1260)","Bun’ō (1260–1261)","Kōchō (1261–1264)","Bun’ei (1264–1275)","Kenji (1275–1278)","Kōan (1278–1288)","Shōō (1288–1293)","Einin (1293–1299)","Shōan (1299–1302)","Kengen (1302–1303)","Kagen (1303–1306)","Tokuji (1306–1308)","Enkyō (1308–1311)","Ōchō (1311–1312)","Shōwa (1312–1317)","Bunpō (1317–1319)","Genō (1319–1321)","Genkō (1321–1324)","Shōchū (1324–1326)","Karyaku (1326–1329)","Gentoku (1329–1331)","Genkō (1331–1334)","Kenmu (1334–1336)","Engen (1336–1340)","Kōkoku (1340–1346)","Shōhei (1346–1370)","Kentoku (1370–1372)","Bunchū (1372–1375)","Tenju (1375–1379)","Kōryaku (1379–1381)","Kōwa (1381–1384)","Genchū (1384–1392)","Meitoku (1384–1387)","Kakei (1387–1389)","Kōō (1389–1390)","Meitoku (1390–1394)","Ōei (1394–1428)","Shōchō (1428–1429)","Eikyō (1429–1441)","Kakitsu (1441–1444)","Bun’an (1444–1449)","Hōtoku (1449–1452)","Kyōtoku (1452–1455)","Kōshō (1455–1457)","Chōroku (1457–1460)","Kanshō (1460–1466)","Bunshō (1466–1467)","Ōnin (1467–1469)","Bunmei (1469–1487)","Chōkyō (1487–1489)","Entoku (1489–1492)","Meiō (1492–1501)","Bunki (1501–1504)","Eishō (1504–1521)","Taiei (1521–1528)","Kyōroku (1528–1532)","Tenbun (1532–1555)","Kōji (1555–1558)","Eiroku (1558–1570)","Genki (1570–1573)","Tenshō (1573–1592)","Bunroku (1592–1596)","Keichō (1596–1615)","Genna (1615–1624)","Kan’ei (1624–1644)","Shōho (1644–1648)","Keian (1648–1652)","Jōō (1652–1655)","Meireki (1655–1658)","Manji (1658–1661)","Kanbun (1661–1673)","Enpō (1673–1681)","Tenna (1681–1684)","Jōkyō (1684–1688)","Genroku (1688–1704)","Hōei (1704–1711)","Shōtoku (1711–1716)","Kyōhō (1716–1736)","Genbun (1736–1741)","Kanpō (1741–1744)","Enkyō (1744–1748)","Kan’en (1748–1751)","Hōreki (1751–1764)","Meiwa (1764–1772)","An’ei (1772–1781)","Tenmei (1781–1789)","Kansei (1789–1801)","Kyōwa (1801–1804)","Bunka (1804–1818)","Bunsei (1818–1830)","Tenpō (1830–1844)","Kōka (1844–1848)","Kaei (1848–1854)","Ansei (1854–1860)","Man’en (1860–1861)","Bunkyū (1861–1864)","Genji (1864–1865)","Keiō (1865–1868)","Meiji","Taishō","Shōwa","Heisei"]},dayPeriods:{am:"AM",pm:"PM"}},persian:{months:{narrow:["1","2","3","4","5","6","7","8","9","10","11","12"],short:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"],long:["Farvardin","Ordibehesht","Khordad","Tir","Mordad","Shahrivar","Mehr","Aban","Azar","Dey","Bahman","Esfand"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["AP"],short:["AP"],long:["AP"]},dayPeriods:{am:"AM",pm:"PM"}},roc:{months:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],short:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],long:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},days:{narrow:["D","S","T","Q","Q","S","S"],short:["dom","seg","ter","qua","qui","sex","sáb"],long:["domingo","segunda-feira","terça-feira","quarta-feira","quinta-feira","sexta-feira","sábado"]},eras:{narrow:["Antes de R.O.C.","R.O.C."],short:["Antes de R.O.C.","R.O.C."],long:["Antes de R.O.C.","R.O.C."]},dayPeriods:{am:"AM",pm:"PM"}}}},number:{nu:["latn"],patterns:{decimal:{positivePattern:"{number}",negativePattern:"-{number}"},currency:{positivePattern:"{currency}{number}",negativePattern:"-{currency}{number}"},percent:{positivePattern:"{number}%",negativePattern:"-{number}%"}},symbols:{latn:{decimal:",",group:".",nan:"NaN",percent:"%",infinity:"∞"}},currencies:{AUD:"AU$",BRL:"R$",CAD:"CA$",CNY:"CN¥",EUR:"€",GBP:"£",HKD:"HK$",ILS:"₪",INR:"₹",JPY:"JP¥",KRW:"₩",MXN:"MX$",NZD:"NZ$",PTE:"Esc.",THB:"฿",TWD:"NT$",USD:"US$",VND:"₫",XAF:"FCFA",XCD:"EC$",XOF:"CFA",XPF:"CFPF"}}});

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(333);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Legend = __webpack_require__(389);

	var _Legend2 = _interopRequireDefault(_Legend);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	var _KeyboardAccelerators = __webpack_require__(367);

	var _KeyboardAccelerators2 = _interopRequireDefault(_KeyboardAccelerators);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = "chart";

	var DEFAULT_WIDTH = 384;
	var DEFAULT_HEIGHT = 192;
	var XAXIS_HEIGHT = 24;
	var YAXIS_WIDTH = 12;
	var BAR_PADDING = 2;
	var MIN_LABEL_WIDTH = 48;
	var SPARKLINE_STEP_WIDTH = 6;
	var SPARKLINE_BAR_PADDING = 1;
	var POINT_RADIUS = 2;

	var Chart = function (_Component) {
	  _inherits(Chart, _Component);

	  function Chart(props) {
	    _classCallCheck(this, Chart);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Chart).call(this, props));

	    _this._onRequestForNextLegend = _this._onRequestForNextLegend.bind(_this);
	    _this._onRequestForPreviousLegend = _this._onRequestForPreviousLegend.bind(_this);
	    _this._onMouseOver = _this._onMouseOver.bind(_this);
	    _this._onMouseOut = _this._onMouseOut.bind(_this);
	    _this._onMouseLeave = _this._onMouseLeave.bind(_this);
	    _this._onResize = _this._onResize.bind(_this);
	    _this._layout = _this._layout.bind(_this);

	    _this.state = _this._stateFromProps(props, DEFAULT_WIDTH, DEFAULT_HEIGHT);
	    return _this;
	  }

	  _createClass(Chart, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      window.addEventListener('resize', this._onResize);
	      this._onResize();

	      //only add listerners if graph is interactive
	      if (this.props.legend) {
	        this._keyboardHandlers = {
	          left: this._onRequestForPreviousLegend,
	          up: this._onRequestForPreviousLegend,
	          right: this._onRequestForNextLegend,
	          down: this._onRequestForNextLegend
	        };
	        _KeyboardAccelerators2.default.startListeningToKeyboard(this, this._keyboardHandlers);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(newProps) {
	      var state = this._stateFromProps(newProps, this.state.width, this.state.height);
	      this.setState(state);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._layout();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this._resizeTimer);
	      window.removeEventListener('resize', this._onResize);

	      if (this.props.legend) {
	        _KeyboardAccelerators2.default.stopListeningToKeyboard(this, this._keyboardHandlers);
	      }
	    }
	  }, {
	    key: '_onRequestForNextLegend',
	    value: function _onRequestForNextLegend(e) {
	      if (document.activeElement === this.refs.chart) {
	        e.preventDefault();

	        var totalBandCount = _reactDom2.default.findDOMNode(this.refs.front).childNodes.length;

	        if (this.state.activeXIndex - 1 < 0) {
	          this._onMouseOver(totalBandCount - 1);
	        } else {
	          this._onMouseOver(this.state.activeXIndex - 1);
	        }
	      }
	      return false;
	    }
	  }, {
	    key: '_onRequestForPreviousLegend',
	    value: function _onRequestForPreviousLegend(e) {
	      if (document.activeElement === this.refs.chart) {
	        e.preventDefault();

	        var totalBandCount = _reactDom2.default.findDOMNode(this.refs.front).childNodes.length;

	        if (this.state.activeXIndex + 1 >= totalBandCount) {
	          this._onMouseOver(0);
	        } else {
	          this._onMouseOver(this.state.activeXIndex + 1);
	        }
	      }
	      return false;
	    }
	  }, {
	    key: '_onMouseOver',
	    value: function _onMouseOver(xIndex) {
	      this.setState({ activeXIndex: xIndex, hideLegend: false });
	    }
	  }, {
	    key: '_onMouseOut',
	    value: function _onMouseOut() {
	      this.setState({ activeXIndex: this.state.defaultXIndex, hideLegend: false });
	    }
	  }, {
	    key: '_onMouseLeave',
	    value: function _onMouseLeave() {
	      var hideLegend = false;
	      if (this.props.legend && this.props.legend.hoverOnly) {
	        hideLegend = true;
	      }
	      this.setState({ activeXIndex: this.state.defaultXIndex, hideLegend: hideLegend });
	    }
	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      // debounce
	      clearTimeout(this._resizeTimer);
	      this._resizeTimer = setTimeout(this._layout, 50);
	    }

	    // Performs some initial calculations to make subsequent calculations easier.

	  }, {
	    key: '_bounds',
	    value: function _bounds(series, xAxisArg, width, height) {
	      // normalize xAxis
	      var xAxis = void 0;
	      if (xAxisArg) {
	        if (xAxisArg.data) {
	          xAxis = xAxisArg;
	        } else {
	          xAxis = {
	            data: xAxisArg,
	            placement: 'top'
	          };
	        }
	      } else {
	        xAxis = { data: [] };
	      }

	      // analyze series data
	      var minX = null;
	      var maxX = null;
	      var minY = null;
	      var maxY = null;

	      series.forEach(function (item) {
	        item.values.forEach(function (value, xIndex) {
	          var x = value[0];
	          var y = value[1];

	          if (null === minX) {
	            minX = x;
	            maxX = x;
	            minY = y;
	            maxY = y;
	          } else {
	            minX = Math.min(minX, x);
	            maxX = Math.max(maxX, x);
	            minY = Math.min(minY, y);
	            maxY = Math.max(maxY, y);
	          }
	          if (xIndex >= xAxis.data.length) {
	            xAxis.data.push({ value: x, label: '' });
	          }
	        });
	      });

	      if (null === minX) {
	        minX = 0;
	        maxX = 1;
	        minY = 0;
	        maxY = 100;
	      }

	      if ('bar' === this.props.type) {
	        xAxis.data.forEach(function (obj, xIndex) {
	          var sumY = 0;
	          series.forEach(function (item) {
	            sumY += item.values[xIndex][1];
	          });
	          maxY = Math.max(maxY, sumY);
	        });
	      }

	      if (this.props.threshold) {
	        minY = Math.min(minY, this.props.threshold);
	        maxY = Math.max(maxY, this.props.threshold);
	      }
	      if (this.props.thresholds) {
	        this.props.thresholds.forEach(function (obj) {
	          maxY = Math.max(maxY, obj.value);
	        });
	      }
	      if (this.props.hasOwnProperty('min')) {
	        minY = this.props.min;
	      }
	      if (this.props.hasOwnProperty('max')) {
	        maxY = this.props.max;
	      }
	      var spanX = maxX - minX;
	      var spanY = maxY - minY;

	      if (this.props.sparkline) {
	        width = spanX * (SPARKLINE_STEP_WIDTH + SPARKLINE_BAR_PADDING);
	      }

	      var graphWidth = width;
	      var graphHeight = height;
	      if (this.props.thresholds) {
	        graphWidth -= YAXIS_WIDTH;
	      }
	      if (xAxis.placement) {
	        graphHeight -= XAXIS_HEIGHT;
	      }
	      var graphTop = 'top' === xAxis.placement ? XAXIS_HEIGHT : 0;
	      // graphBottom is the bottom graph Y value
	      var graphBottom = 'bottom' === xAxis.placement ? height - XAXIS_HEIGHT : height;

	      var graphLeft = 0;
	      var graphRight = graphWidth;
	      if (this.props.points) {
	        graphLeft += POINT_RADIUS + 2;
	        graphRight -= POINT_RADIUS + 2;
	      }

	      var scaleX = graphWidth / spanX;
	      var xStepWidth = Math.round(graphWidth / (xAxis.data.length - 1));
	      if ('bar' === this.props.type) {
	        // allow room for bar width for last bar
	        scaleX = graphWidth / (spanX + spanX / (xAxis.data.length - 1));
	        xStepWidth = Math.round(graphWidth / xAxis.data.length);
	      }
	      var scaleY = graphHeight / spanY;
	      var barPadding = Math.max(BAR_PADDING, Math.round(xStepWidth / 8));
	      if (this.props.sparkline) {
	        xStepWidth = SPARKLINE_STEP_WIDTH;
	        barPadding = SPARKLINE_BAR_PADDING;
	      }

	      var result = {
	        minX: minX,
	        maxX: maxX,
	        minY: minY,
	        maxY: maxY,
	        spanX: spanX,
	        spanY: spanY,
	        scaleX: scaleX,
	        scaleY: scaleY,
	        graphWidth: graphWidth,
	        graphHeight: graphHeight,
	        graphTop: graphTop,
	        graphBottom: graphBottom,
	        graphLeft: graphLeft,
	        graphRight: graphRight,
	        xStepWidth: xStepWidth,
	        barPadding: barPadding,
	        xAxis: xAxis
	      };

	      return result;
	    }

	    // Aligns the legend with the current position of the cursor, if any.

	  }, {
	    key: '_alignLegend',
	    value: function _alignLegend() {
	      if (this.state.activeXIndex >= 0 && this.refs.cursor) {
	        var bounds = this.state.bounds;
	        var cursorElement = this.refs.cursor;
	        var cursorRect = cursorElement.getBoundingClientRect();
	        var element = this.refs.chart;
	        var rect = element.getBoundingClientRect();
	        var legendElement = _reactDom2.default.findDOMNode(this.refs.legend);
	        var legendRect = legendElement.getBoundingClientRect();

	        var left = cursorRect.left - rect.left - legendRect.width - 1;
	        // if the legend would be outside the graphic, orient it to the right.
	        if (left < 0) {
	          left += legendRect.width + 2;
	        }

	        legendElement.style.left = '' + left + 'px ';
	        legendElement.style.top = '' + bounds.graphTop + 'px ';

	        var display = 'inline-block';
	        if (this.state.hideLegend && 'after' !== this.props.legend.position) {
	          display = 'none';
	        }
	        legendElement.style.display = display;
	        cursorElement.style.display = display;
	      }
	    }

	    // Adjusts the legend position and set the width, height, and
	    // redo the bounds calculations.
	    // Called whenever the browser resizes or new properties arrive.

	  }, {
	    key: '_layout',
	    value: function _layout() {
	      if (this.props.legend && 'below' !== this.props.legend.position) {
	        this._alignLegend();
	      }
	      var element = this.refs.chart;
	      var rect = element.getBoundingClientRect();
	      if (rect.width !== this.state.width || rect.height !== this.state.height) {
	        var bounds = this._bounds(this.props.series, this.props.xAxis, rect.width, rect.height);
	        var width = rect.width;
	        if (this.props.sparkline) {
	          width = bounds.graphWidth;
	        }
	        this.setState({
	          width: width,
	          height: rect.height,
	          bounds: bounds
	        });
	      }
	    }

	    // Generates state based on the provided props.

	  }, {
	    key: '_stateFromProps',
	    value: function _stateFromProps(props, width, height) {
	      var bounds = this._bounds(props.series, props.xAxis, width, height);
	      var defaultXIndex = -1;
	      if (props.series && props.series.length > 0) {
	        defaultXIndex = 0;
	      }
	      if (props.hasOwnProperty('important')) {
	        defaultXIndex = props.important;
	      }
	      var activeXIndex = defaultXIndex;
	      if (this.state && this.state.activeXIndex >= 0) {
	        activeXIndex = this.state.activeXIndex;
	      }
	      var hideLegend = this.props.legend && this.props.legend.hoverOnly || false;
	      if (this.state && this.state.hideLegend) {
	        hideLegend = this.state.hideLegend;
	      }
	      // normalize size
	      var size = props.size || (props.small ? 'small' : props.large ? 'large' : null);
	      return {
	        bounds: bounds,
	        defaultXIndex: defaultXIndex,
	        activeXIndex: activeXIndex,
	        hideLegend: hideLegend,
	        width: width,
	        height: height,
	        size: size
	      };
	    }

	    // Translates X value to X coordinate.

	  }, {
	    key: '_translateX',
	    value: function _translateX(x) {
	      var bounds = this.state.bounds;
	      return Math.max(bounds.graphLeft, Math.min(bounds.graphRight, Math.round((x - bounds.minX) * bounds.scaleX)));
	    }

	    // Translates Y value to Y coordinate.

	  }, {
	    key: '_translateY',
	    value: function _translateY(y) {
	      var bounds = this.state.bounds;
	      // leave room for line width since strokes are aligned to the center
	      return Math.max(1, bounds.graphBottom - Math.max(1, this._translateHeight(y)));
	    }

	    // Translates Y value to graph height.

	  }, {
	    key: '_translateHeight',
	    value: function _translateHeight(y) {
	      var bounds = this.state.bounds;
	      return Math.round((y - bounds.minY) * bounds.scaleY);
	    }

	    // Translates X and Y values to X and Y coordinates.

	  }, {
	    key: '_coordinates',
	    value: function _coordinates(point) {
	      return [this._translateX(point[0]), this._translateY(point[1])];
	    }

	    // Uses the provided colorIndex or provides one based on the seriesIndex.

	  }, {
	    key: '_itemColorIndex',
	    value: function _itemColorIndex(item, seriesIndex) {
	      return item.colorIndex || 'graph-' + (seriesIndex + 1);
	    }

	    // Determines what the appropriate control coordinates are on
	    // either side of the coordinate at the specified index.
	    // This calculation is a simplified smoothing function that
	    // just looks at whether the line through this coordinate is
	    // ascending, descending or not. Peaks, valleys, and flats are
	    // treated the same.

	  }, {
	    key: '_controlCoordinates',
	    value: function _controlCoordinates(coordinates, index) {
	      var current = coordinates[index];
	      // Use previous and next coordinates when available, otherwise use
	      // the current coordinate for them.
	      var previous = current;
	      if (index > 0) {
	        previous = coordinates[index - 1];
	      }
	      var next = current;
	      if (index < coordinates.length - 1) {
	        next = coordinates[index + 1];
	      }

	      // Put the control X coordinates midway between the coordinates.
	      var deltaX = (current[0] - previous[0]) / 2;
	      var deltaY = undefined;

	      // Start with a flat slope. This works for peaks, valleys, and flats.
	      var first = [current[0] - deltaX, current[1]];
	      var second = [current[0] + deltaX, current[1]];

	      if (previous[1] < current[1] && current[1] < next[1]) {
	        // Ascending, use the minimum positive slope.
	        deltaY = Math.min((current[1] - previous[1]) / 2, (next[1] - current[1]) / 2);
	        first[1] = current[1] - deltaY;
	        second[1] = current[1] + deltaY;
	      } else if (previous[1] > current[1] && current[1] > next[1]) {
	        // Descending, use the minimum negative slope.
	        deltaY = Math.min((previous[1] - current[1]) / 2, (current[1] - next[1]) / 2);
	        first[1] = current[1] + deltaY;
	        second[1] = current[1] - deltaY;
	      }
	      return [first, second];
	    }

	    // Converts the series data into paths for line or area types.

	  }, {
	    key: '_renderLinesOrAreas',
	    value: function _renderLinesOrAreas() {
	      var bounds = this.state.bounds;
	      var values = this.props.series.map(function (item, seriesIndex) {

	        // Get all coordinates up front so they are available
	        // if we are drawing a smooth chart.
	        var coordinates = item.values.map(function (value) {
	          return this._coordinates(value);
	        }, this);

	        var colorIndex = this._itemColorIndex(item, seriesIndex);
	        var commands = null;
	        var controlCoordinates = null;
	        var previousControlCoordinates = null;
	        var points = [];

	        // Build the commands for this set of coordinates.
	        coordinates.forEach(function (coordinate, index) {
	          if (this.props.smooth) {
	            controlCoordinates = this._controlCoordinates(coordinates, index);
	          }
	          if (0 === index) {
	            commands = "M" + coordinate.join(',');
	          } else {
	            if (this.props.smooth) {
	              // Use the previous right control coordinate and the current
	              // left control coordinate. We do this because we calculate
	              // the left and right sides for a particular index together,
	              // so the path is smooth but the SVG C command needs the
	              // right one from the previous index and the left one from
	              // the current index.
	              commands += " C" + previousControlCoordinates[1].join(',') + " " + controlCoordinates[0].join(',') + " " + coordinate.join(',');
	            } else {
	              commands += " L" + coordinate.join(',');
	            }
	          }

	          if (this.props.points && !this.props.sparkline) {
	            var x = Math.max(POINT_RADIUS + 1, Math.min(bounds.graphWidth - (POINT_RADIUS + 1), coordinate[0]));
	            points.push(_react2.default.createElement('circle', { key: index,
	              className: CLASS_ROOT + "__values-point color-index-" + colorIndex,
	              cx: x, cy: coordinate[1], r: POINT_RADIUS }));
	          }

	          previousControlCoordinates = controlCoordinates;
	        }, this);

	        var linePath = undefined;
	        if ('line' === this.props.type || this.props.points) {
	          var classes = [CLASS_ROOT + "__values-line", "color-index-" + colorIndex];
	          linePath = _react2.default.createElement('path', { fill: 'none', className: classes.join(' '), d: commands });
	        }

	        var areaPath = void 0;
	        if ('area' === this.props.type) {
	          // For area charts, close the path by drawing down to the bottom
	          // and across to the bottom of where we started.
	          var close = 'L' + coordinates[coordinates.length - 1][0] + ',' + bounds.graphBottom + 'L' + coordinates[0][0] + ',' + bounds.graphBottom + 'Z';
	          var areaCommands = commands + close;
	          var _classes = [CLASS_ROOT + "__values-area", "color-index-" + colorIndex];

	          areaPath = _react2.default.createElement('path', { stroke: 'none', className: _classes.join(' '), d: areaCommands });
	        }

	        return _react2.default.createElement(
	          'g',
	          { key: 'line_group_' + seriesIndex },
	          areaPath,
	          linePath,
	          points
	        );
	      }, this);

	      return values;
	    }

	    // Converts the series data into rects for bar types.

	  }, {
	    key: '_renderBars',
	    value: function _renderBars() {
	      var bounds = this.state.bounds;

	      var values = bounds.xAxis.data.map(function (obj, xIndex) {
	        var baseY = bounds.minY;
	        var stepBars = this.props.series.map(function (item, seriesIndex) {

	          var colorIndex = item.colorIndex || 'graph-' + (seriesIndex + 1);
	          var value = item.values[xIndex];
	          var stepBarHeight = this._translateHeight(value[1]);
	          var stepBarBase = this._translateHeight(baseY);
	          baseY += value[1];

	          var classes = [CLASS_ROOT + "__values-bar", "color-index-" + colorIndex];
	          if (!this.props.legend || xIndex === this.state.activeXIndex) {
	            classes.push(CLASS_ROOT + "__values-bar--active");
	          }

	          if ('bottom' === bounds.xAxis.placement) {
	            stepBarBase += XAXIS_HEIGHT;
	          }

	          return _react2.default.createElement('rect', { key: 'bar_rect_' + item.label || seriesIndex,
	            className: classes.join(' '),
	            x: this._translateX(value[0]) + bounds.barPadding,
	            y: this.state.height - (stepBarHeight + stepBarBase),
	            width: bounds.xStepWidth - 2 * bounds.barPadding,
	            height: stepBarHeight });
	        }, this);

	        return _react2.default.createElement(
	          'g',
	          { key: 'bar_' + xIndex },
	          stepBars
	        );
	      }, this);

	      return values;
	    }

	    // Converts the threshold value into a line.

	  }, {
	    key: '_renderThreshold',
	    value: function _renderThreshold() {
	      var y = this._translateY(this.props.threshold);
	      var commands = 'M0,' + y + 'L' + this.state.width + ',' + y;
	      return _react2.default.createElement(
	        'g',
	        { className: CLASS_ROOT + "__threshold", role: 'presentation' },
	        _react2.default.createElement('path', { fill: 'none', d: commands })
	      );
	    }
	  }, {
	    key: '_labelPosition',
	    value: function _labelPosition(value, bounds) {
	      var x = this._translateX(value);
	      var startX = x;
	      var anchor = void 0;
	      if ('line' === this.props.type || 'area' === this.props.type) {
	        // Place the text in the middle for line and area type charts.
	        anchor = 'middle';
	        startX = x - MIN_LABEL_WIDTH / 2;
	      }
	      if (x <= 0) {
	        // This is the first data point, align the text to the left edge.
	        x = 0;
	        startX = x;
	        anchor = 'start';
	      }
	      if (x >= bounds.graphWidth - MIN_LABEL_WIDTH) {
	        // This is the last data point, align the text to the right edge.
	        x = bounds.graphWidth;
	        startX = x - MIN_LABEL_WIDTH;
	        anchor = 'end';
	      } else if ('bar' === this.props.type) {
	        x += bounds.barPadding;
	        startX = x;
	      }
	      return { x: x, anchor: anchor, startX: startX, endX: startX + MIN_LABEL_WIDTH };
	    }
	  }, {
	    key: '_labelOverlaps',
	    value: function _labelOverlaps(pos1, pos2) {
	      return pos1 && pos2 && pos1.endX > pos2.startX && pos1.startX < pos2.endX;
	    }

	    // Converts the xAxis labels into texts.

	  }, {
	    key: '_renderXAxis',
	    value: function _renderXAxis() {
	      var bounds = this.state.bounds;
	      var labelY = void 0;
	      if ('bottom' === bounds.xAxis.placement) {
	        labelY = this.state.height - Math.round(XAXIS_HEIGHT * 0.3);
	      } else {
	        labelY = Math.round(XAXIS_HEIGHT * 0.6);
	      }
	      var priorPosition = null;
	      var activePosition = null;
	      if (this.state.activeXIndex >= 0 && bounds.xAxis.data.length > this.state.activeXIndex) {
	        activePosition = this._labelPosition(bounds.xAxis.data[this.state.activeXIndex].value, bounds);
	      }
	      var lastPosition = null;
	      if (bounds.xAxis.data.length > 0) {
	        lastPosition = this._labelPosition(bounds.xAxis.data[bounds.xAxis.data.length - 1].value, bounds);
	      }

	      var labels = bounds.xAxis.data.map(function (obj, xIndex) {
	        var classes = [CLASS_ROOT + "__xaxis-index"];
	        if (xIndex === this.state.activeXIndex) {
	          classes.push(CLASS_ROOT + "__xaxis-index--active");
	        }
	        var position = this._labelPosition(obj.value, bounds);

	        // Ensure we don't overlap labels. But, make sure we show the first and
	        // last ones.
	        if (this._labelOverlaps(position, activePosition) || xIndex !== 0 && xIndex !== bounds.xAxis.data.length - 1 && (this._labelOverlaps(position, priorPosition) || this._labelOverlaps(position, lastPosition))) {
	          classes.push(CLASS_ROOT + "__xaxis-index--eclipse");
	        } else {
	          priorPosition = position;
	        }

	        return _react2.default.createElement(
	          'g',
	          { key: 'x_axis_' + xIndex, className: classes.join(' ') },
	          _react2.default.createElement(
	            'text',
	            { x: position.x, y: labelY, role: 'presentation',
	              textAnchor: position.anchor, fontSize: 16 },
	            obj.label
	          )
	        );
	      }, this);

	      return _react2.default.createElement(
	        'g',
	        { ref: 'xAxis', className: CLASS_ROOT + "__xaxis" },
	        labels
	      );
	    }

	    // Vertical bars for thresholds.

	  }, {
	    key: '_renderYAxis',
	    value: function _renderYAxis() {
	      var bounds = this.state.bounds;
	      var start = bounds.minY;
	      var end = void 0;
	      var width = Math.max(4, YAXIS_WIDTH / 2);

	      var bars = this.props.thresholds.map(function (item, index) {
	        var classes = [CLASS_ROOT + "__bar"];
	        classes.push("color-index-" + (item.colorIndex || 'graph-' + (index + 1)));
	        if (index < this.props.thresholds.length - 1) {
	          end = this.props.thresholds[index + 1].value;
	        } else {
	          end = bounds.maxY;
	        }
	        var height = this._translateHeight(end - start);
	        var y = this._translateY(end);
	        start = end;

	        return _react2.default.createElement('rect', { key: 'y_rect_' + index,
	          className: classes.join(' '),
	          x: this.state.width - width,
	          y: y,
	          width: width,
	          height: height });
	      }, this);

	      return _react2.default.createElement(
	        'g',
	        { ref: 'yAxis', className: CLASS_ROOT + "__yaxis" },
	        bars
	      );
	    }
	  }, {
	    key: '_activeSeriesAsString',
	    value: function _activeSeriesAsString() {
	      var total = 0;
	      var seriesText = this._getActiveSeries().map(function (currentSeries) {
	        total += currentSeries.value;

	        var stringify = [currentSeries.label];

	        if (currentSeries.value !== undefined) {
	          stringify.push(': ' + currentSeries.value);

	          if (currentSeries.units) {
	            stringify.push(' ' + currentSeries.units);
	          }
	        }

	        return stringify.join('');
	      }).join('; ');

	      var totalText = '';
	      if (this.props.legend.total) {
	        var totalMessage = _Intl2.default.getMessage(this.context.intl, 'Total');
	        totalText = totalMessage + ': ' + total + this.props.units || '';
	        seriesText += ', ' + totalText;
	      }

	      return seriesText;
	    }

	    // Create vertical rects for each X data point.
	    // These are used to track the mouse hover.

	  }, {
	    key: '_renderXBands',
	    value: function _renderXBands(layer) {
	      var className = CLASS_ROOT + "__" + layer;
	      var bounds = this.state.bounds;

	      var bands = bounds.xAxis.data.map(function (obj, xIndex) {
	        var classes = [className + "-xband"];
	        if (xIndex === this.state.activeXIndex) {
	          classes.push(className + "-xband--active");
	        }

	        // For bar charts, the band is left aligned with the bars.
	        var x = this._translateX(obj.value);
	        if ('line' === this.props.type || 'area' === this.props.type) {
	          // For line and area charts, the band is centered.
	          x -= bounds.xStepWidth / 2;
	        }

	        var onMouseOver = void 0;
	        var onMouseOut = void 0;
	        if ('front' === layer) {
	          onMouseOver = this._onMouseOver.bind(this, xIndex);
	          onMouseOut = this._onMouseOut.bind(this, xIndex);
	        }

	        var xBandId = this.props.a11yTitleId + '_x_band_' + xIndex;
	        var xBandTitleId = this.props.a11yTitleId + '_x_band_title_' + xIndex;

	        var seriesText = this._activeSeriesAsString();

	        return _react2.default.createElement(
	          'g',
	          { key: xBandId, id: xBandId, className: classes.join(' '),
	            onMouseOver: onMouseOver, onMouseOut: onMouseOut, role: 'tab',
	            'aria-labelledby': xBandTitleId },
	          _react2.default.createElement(
	            'title',
	            { id: xBandTitleId },
	            obj.label + ' ' + seriesText
	          ),
	          _react2.default.createElement('rect', { role: 'presentation', className: className + "-xband-background",
	            x: x, y: 0, width: bounds.xStepWidth, height: this.state.height })
	        );
	      }, this);

	      return _react2.default.createElement(
	        'g',
	        { ref: layer, className: className },
	        bands
	      );
	    }

	    // Converts the active X index to a line.

	  }, {
	    key: '_renderCursor',
	    value: function _renderCursor() {
	      var bounds = this.state.bounds;
	      var value = this.props.series[0].values[this.state.activeXIndex];
	      var coordinates = this._coordinates(value);
	      if ('bar' === this.props.type) {
	        coordinates[0] += this.state.bounds.barPadding;
	      }
	      // Offset it just a little if it is at an edge.
	      var x = Math.max(1, Math.min(coordinates[0], this.state.bounds.graphWidth - 1));
	      var line = _react2.default.createElement('line', { fill: 'none', x1: x, y1: bounds.graphTop, x2: x, y2: bounds.graphBottom });

	      var points = void 0;
	      if (this.props.points) {
	        // for area and line charts, include a dot at the intersection
	        if ('line' === this.props.type || 'area' === this.props.type) {
	          points = this.props.series.map(function (item, seriesIndex) {
	            value = item.values[this.state.activeXIndex];
	            coordinates = this._coordinates(value);
	            var colorIndex = this._itemColorIndex(item, seriesIndex);
	            return _react2.default.createElement('circle', { key: seriesIndex,
	              className: CLASS_ROOT + "__cursor-point color-index-" + colorIndex,
	              cx: x, cy: coordinates[1], r: Math.round(POINT_RADIUS * 1.2) });
	          }, this);
	        }
	      }

	      return _react2.default.createElement(
	        'g',
	        { ref: 'cursor', role: 'presentation', className: CLASS_ROOT + "__cursor" },
	        line,
	        points
	      );
	    }
	  }, {
	    key: '_getActiveSeries',
	    value: function _getActiveSeries(addColorIndex) {
	      return this.props.series.map(function (item) {
	        var datum = {
	          value: item.values[this.state.activeXIndex][1],
	          units: item.units || this.props.units
	        };
	        // only show label and swatch if we have more than one series
	        if (this.props.series.length > 1) {
	          datum.label = item.label;
	          if (addColorIndex) {
	            datum.colorIndex = item.colorIndex;
	          }
	        }
	        return datum;
	      }, this);
	    }

	    // Builds a Legend appropriate for the currently active X index.

	  }, {
	    key: '_renderLegend',
	    value: function _renderLegend() {
	      var activeSeries = this._getActiveSeries(true);
	      var classes = [CLASS_ROOT + "__legend", CLASS_ROOT + "__legend--" + (this.props.legend.position || 'overlay')];

	      return _react2.default.createElement(_Legend2.default, { ref: 'legend', className: classes.join(' '),
	        series: activeSeries,
	        total: this.props.legend.total,
	        units: this.props.units });
	    }
	  }, {
	    key: '_renderA11YTitle',
	    value: function _renderA11YTitle() {
	      var a11yTitle = this.props.a11yTitle;
	      if (!this.props.a11yTitle) {
	        var chartLabel = _Intl2.default.getMessage(this.context.intl, 'Chart');
	        var typeLabel = _Intl2.default.getMessage(this.context.intl, this.props.type);
	        a11yTitle = typeLabel + ' ' + chartLabel;
	      }

	      return a11yTitle;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var classes = [CLASS_ROOT];
	      classes.push(CLASS_ROOT + "--" + this.props.type);
	      if (this.state.size) {
	        classes.push(CLASS_ROOT + "--" + this.state.size);
	      }
	      if (this.props.sparkline) {
	        classes.push(CLASS_ROOT + "--sparkline");
	      }

	      var values = [];
	      if ('line' === this.props.type || 'area' === this.props.type) {
	        values = this._renderLinesOrAreas();
	      } else if ('bar' === this.props.type) {
	        values = this._renderBars();
	      }

	      if (values.length === 0) {
	        classes.push(CLASS_ROOT + "--loading");
	        var valueClasses = [CLASS_ROOT + "__values"];
	        valueClasses.push(CLASS_ROOT + "__values--loading");
	        valueClasses.push("color-index-loading");
	        var commands = "M0," + this.state.height / 2 + " L" + this.state.width + "," + this.state.height / 2;
	        values.push(_react2.default.createElement(
	          'g',
	          { key: 'loading' },
	          _react2.default.createElement('path', { stroke: 'none', className: valueClasses.join(' '), d: commands })
	        ));
	      }

	      var threshold = null;
	      if (this.props.threshold) {
	        threshold = this._renderThreshold();
	      }

	      var cursor = null;
	      var legend = null;
	      if (this.props.legend && this.state.activeXIndex >= 0 && this.props.series[0].values.length > 0) {
	        cursor = this._renderCursor();
	        legend = this._renderLegend();
	      }

	      var xAxis = null;
	      if (this.props.xAxis) {
	        xAxis = this._renderXAxis();
	      }

	      var yAxis = null;
	      if (this.props.thresholds) {
	        yAxis = this._renderYAxis();
	      }

	      var frontBands = void 0;
	      var activeDescendant = void 0;
	      var role = 'img';
	      if (this.props.legend) {
	        frontBands = this._renderXBands('front');
	        activeDescendant = this.props.a11yTitleId + '_x_band_' + this.state.activeXIndex;
	        role = 'tablist';
	      }

	      var a11yTitle = this._renderA11YTitle();
	      var a11yTitleNode = void 0;
	      if (a11yTitle) {
	        a11yTitleNode = _react2.default.createElement(
	          'title',
	          { id: this.props.a11yTitleId },
	          a11yTitle
	        );
	      }

	      var a11yDescNode = void 0;
	      if (this.props.a11yDesc) {
	        a11yDescNode = _react2.default.createElement(
	          'desc',
	          { id: this.props.a11yDescId },
	          this.props.a11yDesc
	        );
	      }

	      var onMouseLeave = this._onMouseLeave.bind(this);

	      return _react2.default.createElement(
	        'div',
	        { className: classes.join(' ') },
	        _react2.default.createElement(
	          'svg',
	          { ref: 'chart', className: CLASS_ROOT + "__graphic",
	            viewBox: "0 0 " + this.state.width + " " + this.state.height,
	            preserveAspectRatio: 'none', role: role, tabIndex: '0',
	            onMouseLeave: onMouseLeave,
	            'aria-activedescendant': activeDescendant,
	            'aria-labelledby': this.props.a11yTitleId + ' ' + this.props.a11yDescId },
	          a11yTitleNode,
	          a11yDescNode,
	          xAxis,
	          yAxis,
	          _react2.default.createElement(
	            'g',
	            { className: CLASS_ROOT + "__values" },
	            values
	          ),
	          frontBands,
	          threshold,
	          cursor
	        ),
	        legend
	      );
	    }
	  }]);

	  return Chart;
	}(_react.Component);

	exports.default = Chart;


	Chart.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  a11yTitleId: _react.PropTypes.string,
	  a11yDescId: _react.PropTypes.string,
	  a11yDesc: _react.PropTypes.string,
	  important: _react.PropTypes.number,
	  large: _react.PropTypes.bool,
	  legend: _react.PropTypes.shape({
	    position: _react.PropTypes.oneOf(['overlay', 'after']),
	    total: _react.PropTypes.bool
	  }),
	  max: _react.PropTypes.number,
	  min: _react.PropTypes.number,
	  points: _react.PropTypes.bool,
	  series: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    label: _react.PropTypes.string,
	    values: _react.PropTypes.arrayOf(_react.PropTypes.arrayOf(_react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object // Date
	    ]))).isRequired,
	    units: _react.PropTypes.string,
	    colorIndex: _react.PropTypes.string
	  })).isRequired,
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large']),
	  small: _react.PropTypes.bool,
	  smooth: _react.PropTypes.bool,
	  sparkline: _react.PropTypes.bool,
	  threshold: _react.PropTypes.number,
	  thresholds: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    label: _react.PropTypes.string,
	    value: _react.PropTypes.number.isRequired,
	    colorIndex: _react.PropTypes.string
	  })),
	  type: _react.PropTypes.oneOf(['line', 'bar', 'area']),
	  units: _react.PropTypes.string,
	  xAxis: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape({
	    value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object // Date
	    ]).isRequired,
	    label: _react.PropTypes.string.isRequired
	  })), _react.PropTypes.shape({
	    placement: _react.PropTypes.oneOf(['top', 'bottom']),
	    data: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	      value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object // Date
	      ]).isRequired,
	      label: _react.PropTypes.string.isRequired
	    }).isRequired)
	  })])
	};

	Chart.contextTypes = {
	  intl: _react.PropTypes.object
	};

	Chart.defaultProps = {
	  a11yTitleId: 'chart-title',
	  a11yDescId: 'chart-desc',
	  min: 0,
	  type: 'line'
	};
	module.exports = exports['default'];


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _FormattedMessage = __webpack_require__(342);

	var _FormattedMessage2 = _interopRequireDefault(_FormattedMessage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = "legend";

	var Legend = function (_Component) {
	  _inherits(Legend, _Component);

	  function Legend(props) {
	    _classCallCheck(this, Legend);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Legend).call(this, props));

	    _this._onActive = _this._onActive.bind(_this);

	    _this.state = { activeIndex: _this.props.activeIndex };
	    return _this;
	  }

	  _createClass(Legend, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(newProps) {
	      this.setState({ activeIndex: newProps.activeIndex });
	    }
	  }, {
	    key: '_onActive',
	    value: function _onActive(index) {
	      this.setState({ activeIndex: index });
	      if (this.props.onActive) {
	        this.props.onActive(index);
	      }
	    }
	  }, {
	    key: '_itemColorIndex',
	    value: function _itemColorIndex(item, index) {
	      return item.colorIndex || 'graph-' + (index + 1);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var classes = [CLASS_ROOT];
	      if (this.props.series.length === 1) {
	        classes.push(CLASS_ROOT + "--single");
	      }
	      if (this.props.className) {
	        classes.push(this.props.className);
	      }

	      var totalValue = 0;
	      var items = this.props.series.map(function (item, index) {
	        var legendClasses = [CLASS_ROOT + "__item"];
	        if (index === this.state.activeIndex) {
	          legendClasses.push(CLASS_ROOT + "__item--active");
	        }
	        if (item.onClick) {
	          legendClasses.push(CLASS_ROOT + "__item--clickable");
	        }
	        var colorIndex = this._itemColorIndex(item, index);
	        totalValue += item.value;

	        var valueClasses = [CLASS_ROOT + "__item-value"];
	        if (1 === this.props.series.length) {
	          valueClasses.push("large-number-font");
	        }

	        var swatch;
	        if (item.hasOwnProperty('colorIndex')) {
	          swatch = _react2.default.createElement(
	            'svg',
	            { className: CLASS_ROOT + "__item-swatch color-index-" + colorIndex,
	              viewBox: '0 0 12 12' },
	            _react2.default.createElement('path', { className: item.className, d: 'M 5 0 l 0 12' })
	          );
	        }

	        var label;
	        if (item.hasOwnProperty('label')) {
	          label = _react2.default.createElement(
	            'span',
	            { className: CLASS_ROOT + "__item-label" },
	            item.label
	          );
	        }

	        var value;
	        if (item.hasOwnProperty('value')) {
	          value = _react2.default.createElement(
	            'span',
	            { className: valueClasses.join(' ') },
	            item.value,
	            _react2.default.createElement(
	              'span',
	              { className: CLASS_ROOT + "__item-units" },
	              item.units || this.props.units
	            )
	          );
	        }

	        return _react2.default.createElement(
	          'li',
	          { key: item.label || index, className: legendClasses.join(' '),
	            onClick: item.onClick,
	            onMouseOver: this._onActive.bind(this, index),
	            onMouseOut: this._onActive.bind(this, null) },
	          swatch,
	          label,
	          value
	        );
	      }, this);

	      // build legend from bottom to top, to align with Meter bar stacking
	      items.reverse();

	      var total = null;
	      if (this.props.total && this.props.series.length > 1) {
	        total = _react2.default.createElement(
	          'li',
	          { className: CLASS_ROOT + "__total" },
	          _react2.default.createElement(
	            'span',
	            { className: CLASS_ROOT + "__total-label" },
	            _react2.default.createElement(_FormattedMessage2.default, { id: 'Total', defaultMessage: 'Total' })
	          ),
	          _react2.default.createElement(
	            'span',
	            { className: CLASS_ROOT + "__total-value" },
	            totalValue,
	            _react2.default.createElement(
	              'span',
	              { className: CLASS_ROOT + "__total-units" },
	              this.props.units
	            )
	          )
	        );
	      }

	      return _react2.default.createElement(
	        'ol',
	        { className: classes.join(' '), role: 'presentation' },
	        items.reverse(),
	        total
	      );
	    }
	  }]);

	  return Legend;
	}(_react.Component);

	exports.default = Legend;


	Legend.propTypes = {
	  activeIndex: _react.PropTypes.number,
	  onActive: _react.PropTypes.func,
	  series: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    label: _react.PropTypes.string,
	    value: _react.PropTypes.number,
	    units: _react.PropTypes.string,
	    colorIndex: _react.PropTypes.oneOfType([_react.PropTypes.number, // 1-6
	    _react.PropTypes.string // status
	    ]),
	    onClick: _react.PropTypes.func
	  })).isRequired,
	  total: _react.PropTypes.bool,
	  units: _react.PropTypes.string,
	  value: _react.PropTypes.number
	};
	module.exports = exports['default'];

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(333);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Legend = __webpack_require__(389);

	var _Legend2 = _interopRequireDefault(_Legend);

	var _Bar = __webpack_require__(391);

	var _Bar2 = _interopRequireDefault(_Bar);

	var _Spiral = __webpack_require__(394);

	var _Spiral2 = _interopRequireDefault(_Spiral);

	var _Circle = __webpack_require__(395);

	var _Circle2 = _interopRequireDefault(_Circle);

	var _Arc = __webpack_require__(396);

	var _Arc2 = _interopRequireDefault(_Arc);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = "meter";

	var TYPE_COMPONENT = {
	  'bar': _Bar2.default,
	  'circle': _Circle2.default,
	  'arc': _Arc2.default,
	  'spiral': _Spiral2.default
	};

	var Meter = function (_Component) {
	  _inherits(Meter, _Component);

	  function Meter(props) {
	    _classCallCheck(this, Meter);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Meter).call(this));

	    _this._initialTimeout = _this._initialTimeout.bind(_this);
	    _this._layout = _this._layout.bind(_this);
	    _this._onResize = _this._onResize.bind(_this);
	    _this._onActivate = _this._onActivate.bind(_this);

	    _this.state = _this._stateFromProps(props);
	    if (_this.state.placeLegend) {
	      _this.state.legendPlacement = 'bottom';
	    }
	    _this.state.initial = true;
	    return _this;
	  }

	  _createClass(Meter, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._initialTimer = setTimeout(this._initialTimeout, 10);
	      window.addEventListener('resize', this._onResize);
	      this._onResize();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var state = this._stateFromProps(nextProps);
	      this.setState(state);
	      this._onResize();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this._initialTimer);
	      clearTimeout(this._resizeTimer);
	      window.removeEventListener('resize', this._onResize);
	    }
	  }, {
	    key: '_initialTimeout',
	    value: function _initialTimeout() {
	      this.setState({
	        initial: false,
	        activeIndex: this.state.importantIndex
	      });
	      clearTimeout(this._initialTimer);
	    }
	  }, {
	    key: '_onActivate',
	    value: function _onActivate(index) {
	      if (index === null) {
	        index = this.state.importantIndex;
	      }
	      this.setState({ initial: false, activeIndex: index });
	    }
	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      // debounce
	      clearTimeout(this._resizeTimer);
	      this._resizeTimer = setTimeout(this._layout, 50);
	    }
	  }, {
	    key: '_layout',
	    value: function _layout() {
	      if (this.state.placeLegend) {
	        // legendPlacement based on available window orientation
	        var ratio = window.innerWidth / window.innerHeight;
	        if (ratio < 0.8) {
	          this.setState({ legendPlacement: 'bottom' });
	        } else if (ratio > 1.2) {
	          this.setState({ legendPlacement: 'right' });
	        }
	      }

	      if ('right' === this.state.legendPlacement) {
	        if (this.refs.legend) {
	          var graphicHeight = this.refs.activeGraphic.offsetHeight;
	          var legendHeight = _reactDom2.default.findDOMNode(this.refs.legend).offsetHeight;
	          this.setState({ tallLegend: legendHeight > graphicHeight });
	        }
	      }
	    }
	  }, {
	    key: '_normalizeSeries',
	    value: function _normalizeSeries(props, min, max, thresholds) {
	      var series = [];
	      if (props.series) {
	        series = props.series;
	      } else if (props.value || props.value === 0) {
	        series = [{ value: props.value, important: true }];
	      }

	      // set color index
	      if (series.length === 1 && props.thresholds) {
	        (function () {
	          var item = series[0];
	          if (!item.colorIndex) {
	            (function () {
	              // see which threshold color index to use
	              var cumulative = 0;
	              thresholds.some(function (threshold) {
	                cumulative += threshold.value;
	                if (item.value < cumulative) {
	                  item.colorIndex = threshold.colorIndex || 'graph-1';
	                  return true;
	                }
	                return false;
	              });
	            })();
	          }
	        })();
	      } else {
	        series.forEach(function (item, index) {
	          if (!item.colorIndex) {
	            item.colorIndex = 'graph-' + (index + 1);
	          }
	        });
	      }

	      return series;
	    }
	  }, {
	    key: '_normalizeThresholds',
	    value: function _normalizeThresholds(props, min, max) {
	      var thresholds = [];
	      if (props.thresholds) {
	        // Convert thresholds from absolute values to cummulative,
	        // so we can re-use the series drawing code.
	        var priorValue = min.value;
	        thresholds.push({ hidden: true });
	        for (var i = 0; i < props.thresholds.length; i += 1) {
	          var threshold = props.thresholds[i];
	          // The value for the prior threshold ends at the beginning of this
	          // threshold. Series drawing code expects the end value.
	          thresholds[i].value = threshold.value - priorValue;
	          thresholds.push({
	            label: threshold.label,
	            colorIndex: threshold.colorIndex,
	            ariaLabel: threshold.value + ' ' + (props.units || '') + ' ' + (threshold.label || '')
	          });
	          priorValue = threshold.value;
	          if (i === props.thresholds.length - 1) {
	            thresholds[thresholds.length - 1].value = max.value - priorValue;
	          }
	        }
	      } else if (props.threshold) {
	        // let remaining = max.value - props.threshold;
	        thresholds = [{ value: props.threshold, hidden: true }, {
	          value: max.value - props.threshold,
	          colorIndex: 'critical',
	          ariaLabel: props.threshold + ' ' + (props.units || '')
	        }];
	      }
	      return thresholds;
	    }
	  }, {
	    key: '_importantIndex',
	    value: function _importantIndex(props, series) {
	      var result = null;
	      if (series.length === 1) {
	        result = 0;
	      }
	      if (props.hasOwnProperty('important')) {
	        result = props.important;
	      }
	      series.some(function (data, index) {
	        if (data.important) {
	          result = index;
	          return true;
	        }
	        return false;
	      });
	      return result;
	    }

	    // Normalize min or max to an object.

	  }, {
	    key: '_terminal',
	    value: function _terminal(terminal) {
	      if (typeof terminal === 'number') {
	        terminal = { value: terminal };
	      }
	      return terminal;
	    }
	  }, {
	    key: '_seriesTotal',
	    value: function _seriesTotal(series) {
	      var total = 0;
	      series.some(function (item) {
	        total += item.value;
	      });
	      return total;
	    }
	  }, {
	    key: '_seriesMax',
	    value: function _seriesMax(series) {
	      var max = 0;
	      series.some(function (item) {
	        max = Math.max(max, item.value);
	      });
	      return max;
	    }

	    // Generates state based on the provided props.

	  }, {
	    key: '_stateFromProps',
	    value: function _stateFromProps(props) {
	      var total = void 0;
	      if (props.series && props.series.length > 1) {
	        total = this._seriesTotal(props.series);
	      } else if (props.max && props.max.value) {
	        total = props.max.value;
	      } else {
	        total = 100;
	      }
	      var seriesMax = void 0;
	      if (props.series && 'spiral' === props.type) {
	        seriesMax = this._seriesMax(props.series);
	      }
	      // Normalize min and max
	      var min = this._terminal(props.min || 0);
	      // Max could be provided in props or come from the total of
	      // a multi-value series.
	      var max = this._terminal(props.max || seriesMax || total);
	      // Normalize simple threshold prop to an array, if needed.
	      var thresholds = this._normalizeThresholds(props, min, max);
	      // Normalize simple value prop to a series, if needed.
	      var series = this._normalizeSeries(props, min, max, thresholds);
	      // Determine important index.
	      var importantIndex = this._importantIndex(props, series);

	      var state = {
	        importantIndex: importantIndex,
	        activeIndex: importantIndex,
	        series: series,
	        thresholds: thresholds,
	        min: min,
	        max: max,
	        total: total
	      };

	      // legend
	      state.placeLegend = !(props.legend && props.legend.placement);
	      if (!state.placeLegend) {
	        state.legendPlacement = props.legend.placement;
	      }

	      return state;
	    }
	  }, {
	    key: '_getActiveFields',
	    value: function _getActiveFields() {
	      var fields = void 0;
	      if (null === this.state.activeIndex) {
	        fields = {
	          value: this.state.total,
	          label: _Intl2.default.getMessage(this.context.intl, 'Total')
	        };
	      } else {
	        var active = this.state.series[this.state.activeIndex];
	        if (!active) {
	          active = this.state.series[0];
	        }
	        fields = {
	          value: active.value,
	          label: active.label,
	          onClick: active.onClick
	        };
	      }
	      return fields;
	    }
	  }, {
	    key: '_renderActiveValue',
	    value: function _renderActiveValue() {
	      var fields = this._getActiveFields();
	      var classes = [CLASS_ROOT + '__value'];
	      if (fields.onClick) {
	        classes.push(CLASS_ROOT + '__value--active');
	      }
	      var units = void 0;
	      if (this.props.units) {
	        units = _react2.default.createElement(
	          'span',
	          { className: CLASS_ROOT + '__value-units large-number-font' },
	          this.props.units
	        );
	      }

	      return _react2.default.createElement(
	        'div',
	        { 'aria-hidden': 'true', role: 'presentation',
	          className: classes.join(' '), onClick: fields.onClick },
	        _react2.default.createElement(
	          'span',
	          {
	            className: CLASS_ROOT + '__value-value large-number-font' },
	          fields.value,
	          units
	        ),
	        _react2.default.createElement(
	          'span',
	          { className: CLASS_ROOT + '__value-label' },
	          fields.label
	        )
	      );
	    }
	  }, {
	    key: '_renderMinMax',
	    value: function _renderMinMax(classes) {
	      var minLabel = void 0;
	      if (this.state.min.label) {
	        minLabel = _react2.default.createElement(
	          'div',
	          { className: CLASS_ROOT + '__minmax-min' },
	          this.state.min.label
	        );
	      }
	      var maxLabel = void 0;
	      if (this.state.max.label) {
	        maxLabel = _react2.default.createElement(
	          'div',
	          { className: CLASS_ROOT + '__minmax-max' },
	          this.state.max.label
	        );
	      }
	      var minMax = void 0;
	      if (minLabel || maxLabel) {
	        minMax = _react2.default.createElement(
	          'div',
	          { className: CLASS_ROOT + '__minmax-container' },
	          _react2.default.createElement(
	            'div',
	            { className: CLASS_ROOT + '__minmax' },
	            minLabel,
	            maxLabel
	          )
	        );
	        classes.push(CLASS_ROOT + '--minmax');
	      }
	      return minMax;
	    }
	  }, {
	    key: '_renderLegend',
	    value: function _renderLegend() {
	      var total = _typeof(this.props.legend) === 'object' && this.props.legend.total;
	      return _react2.default.createElement(_Legend2.default, { ref: 'legend', className: CLASS_ROOT + '__legend',
	        series: this.state.series,
	        units: this.props.units,
	        total: total,
	        activeIndex: this.state.activeIndex,
	        onActive: this._onActivate });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var classes = [CLASS_ROOT];
	      classes.push(CLASS_ROOT + '--' + this.props.type);
	      if (this.props.vertical) {
	        classes.push(CLASS_ROOT + '--vertical');
	      }
	      if (this.props.stacked) {
	        classes.push(CLASS_ROOT + '--stacked');
	      }
	      if (this.props.size) {
	        classes.push(CLASS_ROOT + '--' + this.props.size);
	      }
	      if (this.state.series.length === 0) {
	        classes.push(CLASS_ROOT + '--loading');
	      } else if (this.state.series.length === 1) {
	        classes.push(CLASS_ROOT + '--single');
	      } else {
	        classes.push(CLASS_ROOT + '--count-' + this.state.series.length);
	      }
	      if (this.state.activeIndex !== null) {
	        classes.push(CLASS_ROOT + '--active');
	      }
	      if (this.state.tallLegend) {
	        classes.push(CLASS_ROOT + '--tall-legend');
	      }
	      if (this.props.className) {
	        classes.push(this.props.className);
	      }

	      var minMax = this._renderMinMax(classes);
	      var activeValue = this._renderActiveValue();
	      var legend = void 0;
	      var a11yRole = void 0;

	      if (this.props.legend || this.props.series) {
	        a11yRole = 'tablist';

	        if (this.props.legend) {
	          if ('inline' !== this.props.legend.placement) {
	            legend = this._renderLegend();
	          } else {
	            // Hide value (displaying total), if legend is inline
	            // and total is set to false
	            if (!this.props.legend.total) {
	              activeValue = null;
	            }
	          }
	          classes.push(CLASS_ROOT + '--legend-' + this.state.legendPlacement);
	          if (this.props.legend.align) {
	            classes.push(CLASS_ROOT + '--legend-align-' + this.props.legend.align);
	          }
	        }
	      }

	      var GraphicComponent = TYPE_COMPONENT[this.props.type];
	      var graphic = _react2.default.createElement(GraphicComponent, {
	        a11yTitle: this.props.a11yTitle,
	        a11yTitleId: this.props.a11yTitleId,
	        a11yDesc: this.props.a11yDesc,
	        a11yDescId: this.props.a11yDescId,
	        a11yRole: a11yRole,
	        activeIndex: this.state.activeIndex,
	        min: this.state.min, max: this.state.max,
	        legend: this.props.legend,
	        onActivate: this._onActivate,
	        series: this.state.series,
	        stacked: this.props.stacked,
	        thresholds: this.state.thresholds,
	        total: this.state.total,
	        units: this.props.units,
	        vertical: this.props.vertical });

	      var graphicContainer = void 0;
	      if (this.state.total > 0) {
	        graphicContainer = _react2.default.createElement(
	          'div',
	          { className: CLASS_ROOT + '__graphic-container' },
	          graphic,
	          minMax
	        );
	      }

	      return _react2.default.createElement(
	        'div',
	        { className: classes.join(' ') },
	        _react2.default.createElement(
	          'div',
	          { ref: 'activeGraphic', className: CLASS_ROOT + '__value-container' },
	          graphicContainer,
	          activeValue
	        ),
	        legend
	      );
	    }
	  }]);

	  return Meter;
	}(_react.Component);

	exports.default = Meter;


	Meter.propTypes = {
	  a11yTitle: _react.PropTypes.string,
	  a11yTitleId: _react.PropTypes.string,
	  a11yDescId: _react.PropTypes.string,
	  a11yDesc: _react.PropTypes.string,
	  important: _react.PropTypes.number,
	  legend: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.shape({
	    align: _react.PropTypes.oneOf(['start', 'center', 'end']),
	    placement: _react.PropTypes.oneOf(['right', 'bottom', 'inline']),
	    total: _react.PropTypes.bool
	  })]),
	  max: _react.PropTypes.oneOfType([_react.PropTypes.shape({
	    value: _react.PropTypes.number.isRequired,
	    label: _react.PropTypes.string
	  }), _react.PropTypes.number]),
	  min: _react.PropTypes.oneOfType([_react.PropTypes.shape({
	    value: _react.PropTypes.number.isRequired,
	    label: _react.PropTypes.string
	  }), _react.PropTypes.number]),
	  size: _react.PropTypes.oneOf(['small', 'medium', 'large']),
	  series: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    label: _react.PropTypes.string,
	    value: _react.PropTypes.number.isRequired,
	    colorIndex: _react.PropTypes.string,
	    important: _react.PropTypes.bool,
	    onClick: _react.PropTypes.func
	  })),
	  stacked: _react.PropTypes.bool,
	  threshold: _react.PropTypes.number,
	  thresholds: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    label: _react.PropTypes.string,
	    value: _react.PropTypes.number.isRequired,
	    colorIndex: _react.PropTypes.string
	  })),
	  type: _react.PropTypes.oneOf(['bar', 'arc', 'circle', 'spiral']),
	  units: _react.PropTypes.string,
	  value: _react.PropTypes.number,
	  vertical: _react.PropTypes.bool
	};

	Meter.defaultProps = {
	  a11yTitleId: 'meter-title',
	  a11yDescId: 'meter-desc',
	  type: 'bar'
	};

	Meter.contextTypes = {
	  intl: _react.PropTypes.object
	};
	module.exports = exports['default'];

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(392);

	var _Graphic2 = __webpack_require__(393);

	var _Graphic3 = _interopRequireDefault(_Graphic2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var BAR_LENGTH = _utils.baseDimension;
	var BAR_THICKNESS = _utils.baseUnit;
	var MID_BAR_THICKNESS = BAR_THICKNESS / 2;

	var Bar = function (_Graphic) {
	  _inherits(Bar, _Graphic);

	  function Bar(props) {
	    _classCallCheck(this, Bar);

	    //needed in Graphic.js to fix minification issues

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Bar).call(this, props));

	    _this.displayName = 'Bar';
	    return _this;
	  }

	  _createClass(Bar, [{
	    key: '_viewBoxDimensions',
	    value: function _viewBoxDimensions(props) {
	      var viewBoxHeight = void 0;
	      var viewBoxWidth = void 0;
	      if (props.vertical) {
	        if (props.stacked) {
	          viewBoxWidth = BAR_THICKNESS;
	        } else {
	          viewBoxWidth = BAR_THICKNESS * Math.max(1, props.series.length);
	        }
	        viewBoxHeight = BAR_LENGTH;
	      } else {
	        viewBoxWidth = BAR_LENGTH;
	        if (props.stacked) {
	          viewBoxHeight = BAR_THICKNESS;
	        } else {
	          viewBoxHeight = BAR_THICKNESS * Math.max(1, props.series.length);
	          if (props.legend && 'inline' === props.legend.placement) {
	            viewBoxHeight *= 2;
	          }
	        }
	      }
	      return [viewBoxWidth, viewBoxHeight];
	    }
	  }, {
	    key: '_stateFromProps',
	    value: function _stateFromProps(props) {
	      var viewBoxDimensions = this._viewBoxDimensions(props);

	      var state = {
	        scale: BAR_LENGTH / (props.max.value - props.min.value),
	        viewBoxWidth: viewBoxDimensions[0],
	        viewBoxHeight: viewBoxDimensions[1]
	      };

	      return state;
	    }
	  }, {
	    key: '_translateBarWidth',
	    value: function _translateBarWidth(value) {
	      return Math.ceil(this.state.scale * value);
	    }
	  }, {
	    key: '_sliceCommands',
	    value: function _sliceCommands(trackIndex, item, startValue) {
	      var value = item.value - this.props.min.value;
	      var start = this._translateBarWidth(startValue);
	      var distance = Math.max(item.value > 0 ? MID_BAR_THICKNESS : 0, this._translateBarWidth(value));
	      var commands = void 0;
	      if (this.props.legend && 'inline' === this.props.legend.placement) {
	        trackIndex *= 2;
	      }
	      var spot = trackIndex * BAR_THICKNESS + MID_BAR_THICKNESS;
	      if (this.props.legend && 'inline' === this.props.legend.placement) {
	        spot += MID_BAR_THICKNESS;
	      }
	      if (this.props.vertical) {
	        commands = "M" + spot + "," + (BAR_LENGTH - start) + " L" + spot + "," + (BAR_LENGTH - (start + distance));
	      } else {
	        commands = "M" + start + "," + spot + " L" + (start + distance) + "," + spot;
	      }
	      return commands;
	    }
	  }, {
	    key: '_renderInlineLegend',
	    value: function _renderInlineLegend() {
	      var result = void 0;
	      if (this.props.legend && 'inline' === this.props.legend.placement) {
	        result = this.props.series.map(function (item, index) {
	          var spot = index * BAR_THICKNESS * 2 + MID_BAR_THICKNESS;

	          var label;
	          if (item.hasOwnProperty('label')) {
	            label = _react2.default.createElement(
	              'text',
	              { key: 'label', x: '0', y: spot, role: 'presentation',
	                textAnchor: 'start', fontSize: 16 },
	              item.label
	            );
	          }

	          var value;
	          if (item.hasOwnProperty('value')) {
	            var text = item.value;
	            if (item.units || this.props.units) {
	              text += ' ' + (item.units || this.props.units);
	            }
	            var x = this._translateBarWidth(this.props.max.value);
	            value = _react2.default.createElement(
	              'text',
	              { key: 'value', x: x, y: spot, role: 'presentation',
	                textAnchor: 'end', fontSize: 16 },
	              text
	            );
	          }

	          return [label, value];
	        }, this);
	      }
	      return result;
	    }
	  }]);

	  return Bar;
	}(_Graphic3.default);

	//needed in Graphic.js to fix minification issues


	exports.default = Bar;
	Bar.displayName = 'Bar';
	module.exports = exports['default'];

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
	  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
	  return {
	    x: centerX + radius * Math.cos(angleInRadians),
	    y: centerY + radius * Math.sin(angleInRadians)
	  };
	}

	exports.default = {

	  baseUnit: 24,
	  baseDimension: 192, // 24 * 8

	  classRoot: 'meter',

	  propTypes: {
	    activeIndex: _react.PropTypes.number,
	    a11yDesc: _react.PropTypes.string,
	    a11yDescId: _react.PropTypes.string,
	    a11yTitle: _react.PropTypes.string,
	    a11yTitleId: _react.PropTypes.string,
	    max: _react.PropTypes.shape({
	      value: _react.PropTypes.number,
	      label: _react.PropTypes.string
	    }).isRequired,
	    min: _react.PropTypes.shape({
	      value: _react.PropTypes.number,
	      label: _react.PropTypes.string
	    }).isRequired,
	    onActivate: _react.PropTypes.func.isRequired,
	    // size: PropTypes.oneOf(['small', 'medium', 'large']).isRequired,
	    series: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	      label: _react.PropTypes.string,
	      value: _react.PropTypes.number.isRequired,
	      colorIndex: _react.PropTypes.string,
	      important: _react.PropTypes.bool,
	      onClick: _react.PropTypes.func
	    })).isRequired,
	    total: _react.PropTypes.number.isRequired,
	    units: _react.PropTypes.string
	  },

	  polarToCartesian: polarToCartesian,

	  arcCommands: function arcCommands(centerX, centerY, radius, startAngle, endAngle) {
	    // handle that we can't draw a complete circle
	    if (endAngle - startAngle >= 360) {
	      endAngle = startAngle + 359.99;
	    }
	    var start = polarToCartesian(centerX, centerY, radius, endAngle);
	    var end = polarToCartesian(centerX, centerY, radius, startAngle);
	    var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
	    var d = ["M", start.x, start.y, "A", radius, radius, 0, arcSweep, 0, end.x, end.y].join(" ");
	    return d;
	  },

	  translateEndAngle: function translateEndAngle(startAngle, anglePer, value) {
	    return Math.min(360, Math.max(0, startAngle + anglePer * value));
	  },

	  buildPath: function buildPath(itemIndex, commands, classes, onActivate, onClick, a11yDescId, a11yTitle, activeMeterSlice) {
	    if (onActivate) {
	      var onOver = onActivate.bind(null, itemIndex);
	      var onOut = onActivate.bind(null, null);

	      var a11yRoles = {};
	      var titleComponent = void 0;
	      var activeSlice = void 0;
	      if (a11yTitle && a11yDescId) {
	        activeSlice = activeMeterSlice;
	        var pathTitleId = 'title_' + a11yDescId;
	        a11yRoles['aria-labelledby'] = pathTitleId;
	        a11yRoles.id = a11yDescId;
	        a11yRoles.role = 'tab';
	        titleComponent = _react2.default.createElement(
	          'title',
	          { id: pathTitleId },
	          a11yTitle
	        );
	      }

	      return _react2.default.createElement(
	        'g',
	        _extends({ key: itemIndex, ref: a11yDescId }, a11yRoles),
	        titleComponent,
	        _react2.default.createElement('path', { ref: activeSlice, className: classes.join(' '), d: commands,
	          onFocus: onOver, onBlur: onOut, 'data-index': itemIndex,
	          onMouseOver: onOver, onMouseOut: onOut,
	          onClick: onClick })
	      );
	    } else {
	      return _react2.default.createElement('path', { key: itemIndex, className: classes.join(' '), d: commands });
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(333);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _utils = __webpack_require__(392);

	var _Intl = __webpack_require__(368);

	var _Intl2 = _interopRequireDefault(_Intl);

	var _KeyboardAccelerators = __webpack_require__(367);

	var _KeyboardAccelerators2 = _interopRequireDefault(_KeyboardAccelerators);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = _utils.classRoot;

	var Graphic = function (_Component) {
	  _inherits(Graphic, _Component);

	  function Graphic(props) {
	    _classCallCheck(this, Graphic);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Graphic).call(this));

	    _this.state = _this._stateFromProps(props);

	    _this._onEnter = _this._onEnter.bind(_this);
	    _this._onRequestForNextLegend = _this._onRequestForNextLegend.bind(_this);
	    _this._onRequestForPreviousLegend = _this._onRequestForPreviousLegend.bind(_this);
	    return _this;
	  }

	  _createClass(Graphic, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._keyboardHandlers = {
	        left: this._onRequestForPreviousLegend,
	        up: this._onRequestForPreviousLegend,
	        right: this._onRequestForNextLegend,
	        down: this._onRequestForNextLegend,
	        enter: this._onEnter,
	        space: this._onEnter
	      };
	      _KeyboardAccelerators2.default.startListeningToKeyboard(this, this._keyboardHandlers);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(newProps) {
	      var state = this._stateFromProps(newProps);
	      this.setState(state);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _KeyboardAccelerators2.default.stopListeningToKeyboard(this, this._keyboardHandlers);
	    }

	    // override

	  }, {
	    key: '_stateFromProps',
	    value: function _stateFromProps(props) {
	      return {};
	    }

	    // override

	  }, {
	    key: '_sliceCommands',
	    value: function _sliceCommands(trackIndex, item, startValue) {
	      return "";
	    }
	  }, {
	    key: '_renderSlice',
	    value: function _renderSlice(trackIndex, item, itemIndex, startValue, threshold) {
	      var path = void 0;
	      if (!item.hidden) {
	        var classes = [CLASS_ROOT + '__slice'];
	        var activeMeterSlice = void 0;
	        if (itemIndex === this.props.activeIndex) {
	          activeMeterSlice = 'activeMeterSlice';
	          classes.push(CLASS_ROOT + '__slice--active');
	        }

	        if (item.onClick) {
	          classes.push(CLASS_ROOT + "__slice--clickable");
	        }

	        classes.push('color-index-' + item.colorIndex);

	        var commands = this._sliceCommands(trackIndex, item, startValue);

	        if (threshold) {
	          path = (0, _utils.buildPath)(itemIndex, commands, classes, this.props.onActivate, item.onClick);
	        } else {
	          var a11yDescId = this.props.a11yDescId + '_' + itemIndex;
	          var a11yTitle = item.value + ' ' + (item.label || this.props.units || '');

	          path = (0, _utils.buildPath)(itemIndex, commands, classes, this.props.onActivate, item.onClick, a11yDescId, a11yTitle, activeMeterSlice);
	        }
	      }

	      return path;
	    }
	  }, {
	    key: '_renderSlices',
	    value: function _renderSlices(series, trackIndex, threshold) {
	      var startValue = this.props.min.value;

	      var paths = series.map(function (item, itemIndex) {
	        var path = this._renderSlice(trackIndex, item, itemIndex, startValue, threshold);
	        startValue += item.value;
	        return path;
	      }, this);

	      return paths;
	    }
	  }, {
	    key: '_loadingCommands',
	    value: function _loadingCommands() {
	      return this._sliceCommands(0, this.props.max, this.props.min.value);
	    }
	  }, {
	    key: '_onRequestForPreviousLegend',
	    value: function _onRequestForPreviousLegend(e) {
	      if (document.activeElement === this.refs.meter) {
	        e.preventDefault();
	        var totalValueCount = _reactDom2.default.findDOMNode(this.refs.meterValues).childNodes.length;

	        if (this.props.activeIndex - 1 < 0) {
	          this.props.onActivate(totalValueCount - 1);
	        } else {
	          this.props.onActivate(this.props.activeIndex - 1);
	        }
	      }
	      return false;
	    }
	  }, {
	    key: '_onRequestForNextLegend',
	    value: function _onRequestForNextLegend(e) {
	      if (document.activeElement === this.refs.meter) {
	        e.preventDefault();
	        var totalValueCount = _reactDom2.default.findDOMNode(this.refs.meterValues).childNodes.length;

	        if (this.props.activeIndex + 1 >= totalValueCount) {
	          this.props.onActivate(0);
	        } else {
	          this.props.onActivate(this.props.activeIndex + 1);
	        }
	      }
	      return false;
	    }
	  }, {
	    key: '_onEnter',
	    value: function _onEnter(event) {
	      if (document.activeElement === this.refs.meter) {
	        if (this.refs.activeMeterSlice) {
	          var index = this.refs.activeMeterSlice.getAttribute('data-index');

	          //trigger click on active meter slice
	          if (this.props.series[index].onClick) {
	            this.props.series[index].onClick();
	          }
	        }
	      }
	    }
	  }, {
	    key: '_renderLoading',
	    value: function _renderLoading() {
	      var classes = [CLASS_ROOT + '__slice'];
	      classes.push(CLASS_ROOT + '__slice--loading');
	      classes.push("color-index-loading");
	      var commands = this._loadingCommands();
	      return [_react2.default.createElement('path', { key: 'loading', className: classes.join(' '), d: commands })];
	    }
	  }, {
	    key: '_renderValues',
	    value: function _renderValues() {
	      var _this2 = this;

	      var values = void 0;
	      if (this.props.stacked) {
	        values = this._renderSlices(this.props.series, 0);
	      } else {
	        values = this.props.series.map(function (item, index) {
	          return _this2._renderSlice(index, item, index, _this2.props.min.value);
	        });
	      }
	      if (values.length === 0) {
	        values = this._renderLoading();
	      }
	      return _react2.default.createElement(
	        'g',
	        { ref: 'meterValues', className: CLASS_ROOT + '__values' },
	        values
	      );
	    }
	  }, {
	    key: '_renderTracks',
	    value: function _renderTracks() {
	      var _this3 = this;

	      var trackValue = { value: this.props.max.value, colorIndex: 'unset' };
	      var tracks = void 0;
	      if (this.props.stacked) {
	        tracks = this._renderSlice(0, trackValue, 0, this.props.min.value, true);
	      } else {
	        tracks = this.props.series.map(function (item, index) {
	          return _this3._renderSlice(index, trackValue, index, _this3.props.min.value, true);
	        });
	      }
	      return _react2.default.createElement(
	        'g',
	        { className: CLASS_ROOT + '__tracks' },
	        tracks
	      );
	    }
	  }, {
	    key: '_renderThresholds',
	    value: function _renderThresholds() {
	      var result = void 0;
	      var thresholds = this._renderSlices(this.props.thresholds, -0.4, true);
	      if (thresholds.length > 0) {
	        result = _react2.default.createElement(
	          'g',
	          { className: CLASS_ROOT + '__thresholds' },
	          thresholds
	        );
	      }
	      return result;
	    }
	  }, {
	    key: '_renderTotal',
	    value: function _renderTotal() {
	      return this.props.series.map(function (s) {
	        return s.value;
	      }).reduce(function (prev, curr) {
	        return prev + curr;
	      }, 0);
	    }
	  }, {
	    key: '_renderTopLayer',
	    value: function _renderTopLayer() {
	      return null;
	    }
	  }, {
	    key: '_renderInlineLegend',
	    value: function _renderInlineLegend() {
	      return null;
	    }
	  }, {
	    key: '_renderA11YTitle',
	    value: function _renderA11YTitle() {
	      var a11yTitle = this.props.a11yTitle;
	      if (!a11yTitle) {
	        var graphicTitle = _Intl2.default.getMessage(this.context.intl, this.displayName);
	        var meterTitle = _Intl2.default.getMessage(this.context.intl, 'Meter');

	        a11yTitle = graphicTitle + ' ' + meterTitle;
	      }

	      return a11yTitle;
	    }
	  }, {
	    key: '_renderA11YDesc',
	    value: function _renderA11YDesc() {
	      var _this4 = this;

	      var a11yDesc = this.props.a11yDesc;
	      var units = this.props.units || '';
	      if (!a11yDesc) {
	        var valueLabel = _Intl2.default.getMessage(this.context.intl, 'Value');
	        a11yDesc = ', ' + valueLabel + ': ' + this._renderTotal() + ' ' + units;

	        if (this.props.min) {
	          var minLabel = _Intl2.default.getMessage(this.context.intl, 'Min');
	          a11yDesc += ', ' + minLabel + ': ' + this.props.min.value + ' ' + units;
	        }

	        if (this.props.max) {
	          var maxLabel = _Intl2.default.getMessage(this.context.intl, 'Max');
	          a11yDesc += ', ' + maxLabel + ': ' + this.props.max.value + ' ' + units;
	        }

	        if (this.props.thresholds) {
	          (function () {
	            var thresholdLabel = _Intl2.default.getMessage(_this4.context.intl, 'Threshold');
	            _this4.props.thresholds.forEach(function (threshold) {
	              if (threshold.ariaLabel) {
	                a11yDesc += ', ' + thresholdLabel + ': ' + threshold.ariaLabel;
	              }
	            });
	          })();
	        }
	      }

	      return a11yDesc;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var classes = [CLASS_ROOT];
	      if (this.props.className) {
	        classes.push(this.props.className);
	      }

	      var tracks = this._renderTracks();
	      var values = this._renderValues();
	      var thresholds = this._renderThresholds();
	      var topLayer = this._renderTopLayer();
	      var inlineLegend = this._renderInlineLegend();

	      var a11yTitle = this._renderA11YTitle();
	      var a11yDesc = this._renderA11YDesc();

	      var activeDescendant = this.props.a11yDescId + '_' + (this.props.activeIndex || 0);

	      return _react2.default.createElement(
	        'svg',
	        { ref: 'meter', className: CLASS_ROOT + '__graphic',
	          tabIndex: '0', role: this.props.a11yRole,
	          width: this.state.viewBoxWidth,
	          height: this.state.viewBoxHeight,
	          viewBox: "0 0 " + this.state.viewBoxWidth + " " + this.state.viewBoxHeight,
	          preserveAspectRatio: 'xMidYMid meet',
	          'aria-activedescendant': activeDescendant,
	          'aria-labelledby': this.props.a11yTitleId + ' ' + this.props.a11yDescId },
	        _react2.default.createElement(
	          'title',
	          { id: this.props.a11yTitleId },
	          a11yTitle
	        ),
	        _react2.default.createElement(
	          'desc',
	          { id: this.props.a11yDescId },
	          a11yDesc
	        ),
	        tracks,
	        thresholds,
	        values,
	        inlineLegend,
	        topLayer
	      );
	    }
	  }]);

	  return Graphic;
	}(_react.Component);

	exports.default = Graphic;


	Graphic.propTypes = _extends({
	  a11yRole: _react.PropTypes.string,
	  stacked: _react.PropTypes.bool,
	  thresholds: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    label: _react.PropTypes.string,
	    value: _react.PropTypes.number.isRequired,
	    colorIndex: _react.PropTypes.string
	  })).isRequired,
	  vertical: _react.PropTypes.bool
	}, _utils.propTypes);

	Graphic.contextTypes = {
	  intl: _react.PropTypes.object
	};

	Graphic.defaultProps = {
	  a11yRole: 'img'
	};
	module.exports = exports['default'];


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(392);

	var _Graphic2 = __webpack_require__(393);

	var _Graphic3 = _interopRequireDefault(_Graphic2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = _utils.classRoot;

	var SPIRAL_WIDTH = _utils.baseDimension;
	var SPIRAL_RADIUS = _utils.baseDimension / 2 - _utils.baseUnit / 2;
	var RING_THICKNESS = _utils.baseUnit;
	// Allow for active value content next to a spiral meter
	var SPIRAL_TEXT_PADDING = _utils.baseUnit * 2;

	var Spiral = function (_Graphic) {
	  _inherits(Spiral, _Graphic);

	  function Spiral(props) {
	    _classCallCheck(this, Spiral);

	    //needed in Graphic.js to fix minification issues

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Spiral).call(this, props));

	    _this.displayName = 'Spiral';
	    return _this;
	  }

	  _createClass(Spiral, [{
	    key: '_stateFromProps',
	    value: function _stateFromProps(props) {
	      var viewBoxHeight = Math.max(SPIRAL_WIDTH, RING_THICKNESS * (props.series.length + 1) * 2);
	      var viewBoxWidth = viewBoxHeight + 2 * SPIRAL_TEXT_PADDING;

	      var state = {
	        startAngle: 0,
	        anglePer: 270.0 / props.max.value,
	        angleOffset: 180,
	        // The last spiral ends out near but not quite at the edge of the view box.
	        startRadius: Math.max(SPIRAL_RADIUS, RING_THICKNESS * (props.series.length + 0.5)) - Math.max(0, props.series.length - 1) * RING_THICKNESS,
	        viewBoxWidth: viewBoxWidth,
	        viewBoxHeight: viewBoxHeight
	      };

	      return state;
	    }
	  }, {
	    key: '_sliceCommands',
	    value: function _sliceCommands(trackIndex, item, startValue) {
	      var startAngle = (0, _utils.translateEndAngle)(this.state.startAngle, this.state.anglePer, startValue);
	      var endAngle = (0, _utils.translateEndAngle)(startAngle, this.state.anglePer, item.value);
	      var radius = Math.min(SPIRAL_RADIUS, this.state.startRadius + trackIndex * RING_THICKNESS);
	      return (0, _utils.arcCommands)(SPIRAL_WIDTH / 2, SPIRAL_WIDTH / 2, radius, startAngle + this.state.angleOffset, endAngle + this.state.angleOffset);
	    }
	  }, {
	    key: '_renderThresholds',
	    value: function _renderThresholds() {
	      return null;
	    }
	  }, {
	    key: '_renderTopLayer',
	    value: function _renderTopLayer() {
	      var x = SPIRAL_RADIUS + RING_THICKNESS;
	      var y = SPIRAL_RADIUS + RING_THICKNESS * 2.2;
	      var labels = this.props.series.map(function (item, index) {
	        var classes = [CLASS_ROOT + "__label"];
	        if (index === this.props.activeIndex) {
	          classes.push(CLASS_ROOT + "__label--active");
	        }

	        var textX = x;
	        var textY = y;

	        y += RING_THICKNESS;

	        return _react2.default.createElement(
	          'text',
	          { key: item.label || index, x: textX, y: textY,
	            textAnchor: 'start', fontSize: 16,
	            className: classes.join(' '),
	            onMouseOver: this.props.onActivate.bind(null, index),
	            onMouseOut: this.props.onActivate.bind(null, null),
	            onClick: item.onClick },
	          item.label
	        );
	      }, this);

	      return _react2.default.createElement(
	        'g',
	        { className: CLASS_ROOT + "__labels" },
	        labels
	      );
	    }
	  }]);

	  return Spiral;
	}(_Graphic3.default);

	exports.default = Spiral;


	Spiral.defaultProps = {
	  thresholds: []
	};

	//needed in Graphic.js to fix minification issues
	Spiral.displayName = 'Spiral';
	module.exports = exports['default'];

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _utils = __webpack_require__(392);

	var _Graphic2 = __webpack_require__(393);

	var _Graphic3 = _interopRequireDefault(_Graphic2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CIRCLE_WIDTH = _utils.baseDimension;
	var CIRCLE_RADIUS = _utils.baseDimension / 2 - _utils.baseUnit / 2;
	var RING_THICKNESS = _utils.baseUnit;

	var Circle = function (_Graphic) {
	  _inherits(Circle, _Graphic);

	  function Circle(props) {
	    _classCallCheck(this, Circle);

	    //needed in Graphic.js to fix minification issues

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Circle).call(this, props));

	    _this.displayName = 'Circle';
	    return _this;
	  }

	  _createClass(Circle, [{
	    key: '_stateFromProps',
	    value: function _stateFromProps(props) {
	      if (!props.stacked && (props.series.length - 1) * RING_THICKNESS > CIRCLE_RADIUS) {
	        console.warn("You cannot have more than " + Math.round(CIRCLE_RADIUS / RING_THICKNESS) + " data values in a circle Meter");
	      }

	      var state = {
	        startAngle: 0,
	        anglePer: !props.max ? 0 : 360 / (props.max.value - props.min.value),
	        angleOffset: 180,
	        viewBoxWidth: CIRCLE_WIDTH,
	        viewBoxHeight: CIRCLE_WIDTH
	      };

	      return state;
	    }
	  }, {
	    key: '_sliceCommands',
	    value: function _sliceCommands(trackIndex, item, startValue) {
	      var startAngle = (0, _utils.translateEndAngle)(this.state.startAngle, this.state.anglePer, startValue);
	      var endAngle = Math.max(startAngle + (item.value > 0 ? RING_THICKNESS / 2 : 0), (0, _utils.translateEndAngle)(startAngle, this.state.anglePer, item.value));
	      var radius = Math.max(1, CIRCLE_RADIUS - trackIndex * RING_THICKNESS);
	      return (0, _utils.arcCommands)(CIRCLE_WIDTH / 2, CIRCLE_WIDTH / 2, radius, startAngle + this.state.angleOffset, endAngle + this.state.angleOffset);
	    }
	  }]);

	  return Circle;
	}(_Graphic3.default);

	//needed in Graphic.js to fix minification issues


	exports.default = Circle;
	Circle.displayName = 'Circle';
	module.exports = exports['default'];

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(177);

	var _react2 = _interopRequireDefault(_react);

	var _utils = __webpack_require__(392);

	var _Graphic2 = __webpack_require__(393);

	var _Graphic3 = _interopRequireDefault(_Graphic2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

	var CLASS_ROOT = _utils.classRoot;

	var ARC_WIDTH = _utils.baseDimension;
	var ARC_HEIGHT = Math.round(_utils.baseDimension * 0.75);
	var ARC_RADIUS = _utils.baseDimension / 2 - _utils.baseUnit / 2;
	var INDICATOR_HUB_RADIUS = _utils.baseUnit / 4;
	var RING_THICKNESS = _utils.baseUnit;

	function singleIndicatorCommands(centerX, centerY, radius, startAngle, endAngle, length) {
	  var point = (0, _utils.polarToCartesian)(centerX, centerY, radius - (length - INDICATOR_HUB_RADIUS), endAngle - 1);
	  var start = (0, _utils.polarToCartesian)(centerX, centerY, radius, endAngle - 1);
	  var d = ["M", centerX, centerY - INDICATOR_HUB_RADIUS, "A", INDICATOR_HUB_RADIUS, INDICATOR_HUB_RADIUS, 0, 1, 1, centerX, centerY + INDICATOR_HUB_RADIUS, "A", INDICATOR_HUB_RADIUS, INDICATOR_HUB_RADIUS, 0, 1, 1, centerX, centerY - INDICATOR_HUB_RADIUS, "M", point.x, point.y, "L", start.x, start.y].join(" ");
	  return d;
	}

	var Arc = function (_Graphic) {
	  _inherits(Arc, _Graphic);

	  function Arc(props) {
	    _classCallCheck(this, Arc);

	    //needed in Graphic.js to fix minification issues

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Arc).call(this, props));

	    _this.displayName = 'Arc';
	    return _this;
	  }

	  _createClass(Arc, [{
	    key: '_viewBoxDimensions',
	    value: function _viewBoxDimensions(props) {
	      var viewBoxWidth;
	      var viewBoxHeight;
	      if (props.vertical) {
	        viewBoxWidth = ARC_HEIGHT;
	        viewBoxHeight = ARC_WIDTH;
	      } else {
	        viewBoxWidth = ARC_WIDTH;
	        viewBoxHeight = ARC_HEIGHT;
	      }
	      return [viewBoxWidth, viewBoxHeight];
	    }
	  }, {
	    key: '_stateFromProps',
	    value: function _stateFromProps(props) {
	      var viewBoxDimensions = this._viewBoxDimensions(props);

	      var state = {
	        startAngle: 60,
	        anglePer: !props.max ? 0 : 240.0 / (props.max.value - props.min.value),
	        angleOffset: 180,
	        viewBoxWidth: viewBoxDimensions[0],
	        viewBoxHeight: viewBoxDimensions[1]
	      };
	      if (props.vertical) {
	        state.angleOffset = 90;
	      } else {
	        state.angleOffset = 180;
	      }

	      return state;
	    }
	  }, {
	    key: '_sliceCommands',
	    value: function _sliceCommands(trackIndex, item, startValue) {
	      var startAngle = (0, _utils.translateEndAngle)(this.state.startAngle, this.state.anglePer, startValue);
	      var endAngle = Math.max(startAngle + (item.value > 0 ? RING_THICKNESS / 2 : 0), (0, _utils.translateEndAngle)(startAngle, this.state.anglePer, item.value));
	      var radius = Math.max(1, ARC_RADIUS - trackIndex * RING_THICKNESS);
	      return (0, _utils.arcCommands)(ARC_WIDTH / 2, ARC_WIDTH / 2, radius, startAngle + this.state.angleOffset, endAngle + this.state.angleOffset);
	    }
	  }, {
	    key: '_renderTopLayer',
	    value: function _renderTopLayer() {
	      var indicator;
	      if (this.props.series.length === 1) {
	        var item = this.props.series[0];
	        var startAngle = this.state.startAngle;
	        var endAngle = (0, _utils.translateEndAngle)(startAngle, this.state.anglePer, item.value);
	        var length = ARC_RADIUS;
	        var x = ARC_WIDTH / 2;
	        var y = ARC_WIDTH / 2;
	        var indicatorCommands = singleIndicatorCommands(x, y, ARC_RADIUS, startAngle + this.state.angleOffset, endAngle + this.state.angleOffset, length);
	        indicator = _react2.default.createElement('path', { fill: 'none',
	          className: CLASS_ROOT + "__slice-indicator color-index-" + item.colorIndex,
	          d: indicatorCommands });
	      }

	      return indicator;
	    }
	  }]);

	  return Arc;
	}(_Graphic3.default);

	exports.default = Arc;
	module.exports = exports['default'];

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*global Slick:true*/

	// Third Party Libraries
	var $ = __webpack_require__(62);

	// Initialise Storage

	var storage = new _storage2.default();

	var api = __webpack_require__(120);
	var core = __webpack_require__(121);
	var convert = __webpack_require__(145);
	var MD5 = __webpack_require__(146);
	var moment = __webpack_require__(66);

	// History Chart
	/*
	var historyChart,
	  historyChartData = [],
	  historyChartCursor;
	*/

	var openHistoryCallback = function openHistoryCallback() {};

	function openHistory() {
	  $(document).trigger('LiveHelp.HistoryOpened');

	  if (!storage.isSet('historyColumns')) {
	    storage.set('historyColumns', [{ id: 'history', name: 'Chat History', field: 'Username', headerCssClass: 'username-column-header', width: 550, formatter: renderHistoryCell, sortable: true, resizable: true }, { id: 'date', name: 'Date', field: 'Date', width: 150, formatter: Slick.Formatters.Date, sortable: true, resizable: true }]);
	  }

	  $('.visitors-grid .slick-viewport').addClass('no-scroll');
	  $('.statistics.container, .responses.slider, .accounts.slider, .settings.container, .chat-stack').hide();
	  var history = $('.history.container').show();
	  /*
	  if (historyChartData.length > 0) {
	    showHistoryChart();
	  }
	  */
	  openHistoryCallback(history);
	  initHistoryGridEvents();
	  initHistoryGrid();

	  closeHistory();
	}

	/*
	function showHistoryChart() {

	  if ($('#history-chart').length) {

	    // Validate Chart Data
	    var empty = false;
	    if (historyChartData.length === 0) {
	      for (var i = 7; i > 0; i--) {
	        var date = new Date(),
	          chats = Math.floor(Math.random() * (20 - 5 + 1)) + 5;

	        date.setDate(date.getDate() - i);
	        historyChartData.push({
	          date: date,
	          chats: chats
	        });
	      }
	      empty = true;
	    }

	    // Serial Chart
	    historyChart = new AmCharts.AmSerialChart();
	    //historyChart.pathToImages = '../amcharts/images/';
	    historyChart.dataProvider = historyChartData;
	    historyChart.categoryField = 'date';
	    historyChart.balloon.bulletSize = 5;

	    // Chart Events
	    historyChart.addListener('dataUpdated', historyChartDataUpdated);

	    // Catgory Axis
	    var categoryAxis = historyChart.categoryAxis;
	    categoryAxis.parseDates = true;
	    categoryAxis.minPeriod = 'DD';
	    categoryAxis.axisAlpha = 0;
	    categoryAxis.dashLength = 0;
	    categoryAxis.boldPeriodBeginning = false;
	    categoryAxis.position = 'top';
	    categoryAxis.axisColor = '#dadada';
	    categoryAxis.labelsEnabled = false;
	    categoryAxis.gridAlpha = 0;

	    // Balloon
	    var balloon = historyChart.balloon;
	    balloon.adjustBorderColor = true;
	    balloon.color = '#999999';
	    balloon.cornerRadius = 5;
	    balloon.borderAlpha = 1;
	    balloon.borderColor = '#999999';
	    balloon.borderThickness = 1;
	    balloon.fillColor = '#999999';
	    balloon.fillAlpha = 0.8;
	    balloon.color = '#f3f3f3';
	    balloon.showBullet = true;
	    balloon.fontSize = core.options.historyBalloonFontSize;
	    balloon.textShadowColor = '#666';

	    // Value Axis
	    var valueAxis = new AmCharts.ValueAxis();
	    valueAxis.axisAlpha = 0;
	    valueAxis.dashLength = 0;
	    valueAxis.labelsEnabled = false;
	    valueAxis.minimum = 0;
	    valueAxis.gridAlpha = 0.1;
	    historyChart.addValueAxis(valueAxis);

	    // Graph
	    var graph = new AmCharts.AmGraph();
	    graph.type = 'line';
	    graph.valueField = 'chats';
	    graph.bullet = 'round';
	    graph.bulletColor = '#ffffff';
	    graph.bulletBorderColor = '#999999';
	    graph.bulletBorderThickness = 2;
	    graph.bulletSize = 6;
	    graph.fillColors = '#999999';
	    graph.fillAlphas = 0.2;
	    graph.lineThickness = 2;
	    graph.lineColor = '#999999';
	    graph.balloonText = '[[category]]: [[value]] chats';
	    historyChart.addGraph(graph);

	    // Cursor
	    historyChartCursor = new AmCharts.ChartCursor();
	    historyChartCursor.cursorPosition = 'mouse';
	    historyChartCursor.pan = false;
	    historyChartCursor.zoomable = false;
	    historyChartCursor.categoryBalloonEnabled = false;
	    historyChartCursor.cursorAlpha = 0;
	    historyChartCursor.categoryBalloonDateFormat = 'EEE DD MMM YYYY';

	    historyChart.addChartCursor(historyChartCursor);
	    historyChart.fontFamily = 'Segoe UI';
	    historyChart.fontSize = 14;
	    historyChart.color = '#666';

	    // Output Chart
	    historyChart.write('history-chart');

	    // History Empty
	    if (empty) {
	      $('#history-empty').fadeIn();
	    }

	  }

	}

	// History Data Updated Event
	function historyChartDataUpdated() {
	  $('#history-chart').fadeTo(1000, 1.0);
	}
	*/

	function openHistoryRoute(data) {
	  var chat = data.Session !== undefined ? parseInt(data.Session, 10) : data;
	  if (chat > 0) {
	    var route = 'history/' + chat;
	    storage.set('route', route);
	    core.router.setRoute(route);

	    openHistoryChat(data);

	    $(document).trigger('LiveHelp.RouteChanged');
	  }
	}

	function openHistoryChat(data) {
	  var history = $('#history-chat');
	  var chat = data.Session !== undefined ? parseInt(data.Session, 10) : data;
	  var active = data.Active !== undefined ? parseInt(data.Active, 10) : false;
	  var post = { 'Data': chat + ',0,0,0' };

	  // Show Chat
	  if (chat > 0) {

	    history.data('id', chat);
	    history.find('.messages').html('');
	    history.removeClass('narrow');

	    var historyemail = data.Email !== undefined ? data.Email : false;
	    if (historyemail && (historyemail.indexOf('<') > -1 || historyemail.indexOf('>') > -1)) {
	      historyemail = $(data.Email).text();
	      history.find('.name').text(data.Username + ' - ' + historyemail);
	    }

	    // Blocked Chat
	    var dialog = history.find('.dialog');
	    if (active && active === -3) {
	      dialog.show().animate({ bottom: '1px' }, 250);
	    } else {
	      dialog.animate({ bottom: '-145px' }, 250, function () {
	        $(this).hide();
	      });
	    }

	    // Chat AJAX
	    api.apiRequest({
	      url: api.apiEndpoint.chats,
	      data: post,
	      success: function success(data) {
	        // Messages JSON
	        if (data.MultipleMessages !== undefined && data.MultipleMessages.Messages !== undefined) {

	          var messages = data.MultipleMessages.Messages[0];
	          var html = '';
	          var pos = 'left';
	          var path = window.location.pathname;
	          var defaultimage = core.server.length > 0 ? core.protocol + core.server + core.defaultUserImage : encodeURIComponent(window.location.protocol + '//' + window.location.host + path.replace(path.substring(path.indexOf(core.directoryPath + 'admin/')), core.directoryPath + 'images/UserSmall.png'));
	          var size = window.devicePixelRatio > 1 ? 192 : 96;

	          if (parseInt(messages.ID, 10) === chat && messages.Message.length > 0) {

	            // Visitor Details
	            if (messages.Visitor > 0) {
	              history.addClass('narrow');
	              $(document).trigger('LiveHelp.InitialiseVisitor', messages.Visitor);
	            }

	            $.each(messages.Message, function (key, value) {
	              var status = parseInt(value.Status, 10);
	              var message = value.Content;
	              var date = new moment(value.Datetime, 'YYYY-MM-DD HH:mm:ss').toDate();
	              var time = date.getHours() + ':' + core.zeroFill(date.getMinutes(), 2);

	              if (status > 0) {
	                message = $('<div>').text(message).html();
	              }

	              // Image
	              if (status === 3) {
	                var regEx = /(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[A-Z0-9+&@#\/%=~_|](\.jpg|.jpeg|\.gif|\.png)/im;
	                var match = regEx.exec(message);
	                if (match !== null) {
	                  message = '<img src="' + match[0] + '" />';
	                }
	              } else {
	                message = message.replace(/(?!.*(?:\.jpe?g|\.gif|\.png)$)((?:(?:http(?:s?))|(?:ftp)):\/\/[^\s|<|>|'|"]*)/img, '<a href="$1" target="_blank">$1</a>');
	                message = message.replace(/^(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[A-Z0-9+&@#\/%=~_|](\.jpg|.jpeg|\.gif|\.png)$/img, '<img src="$&"/>');
	              }

	              if (core.settings.Smilies !== 0) {
	                message = core.htmlSmilies(message);
	              }

	              var username = value.Username;
	              var email = value.Email;
	              var photo = '';
	              var from = '';

	              if (status === 1) {
	                $.each(core.accounts, function (key, account) {
	                  if (account.Username === username) {
	                    username = account.Firstname;
	                    return;
	                  }
	                });
	              }
	              username = username.length > 0 ? 'from ' + core.capitaliseFirstLetter(username) : '';

	              pos = status > 0 ? 'right' : 'left';
	              if (status >= 0) {

	                var account = false;
	                if (status > 0) {
	                  $.each(core.accounts, function (key, account) {
	                    var id = parseInt(account.ID, 10);
	                    if (value.Username === account.Username) {
	                      if (value.Image !== undefined && value.Image.indexOf('http') > -1) {
	                        email = false;
	                      } else {
	                        email = account.Email;
	                      }
	                      from = id;
	                      return false;
	                    }
	                  });
	                }

	                var image = false;
	                if (core.options.messages.photo) {
	                  var css = '';
	                  if (status > 0) {
	                    image = core.operatorImage(from, email, false, size);
	                  }
	                  if (account !== false && account.Image !== undefined && (account.Image.indexOf('https://') > -1 || account.Image.indexOf('data:image/png;base64,') > -1)) {
	                    image = account.Image;
	                  } else if (status === 0) {
	                    email = historyemail;
	                    image = 'https://secure.gravatar.com/avatar/' + MD5(email).toString() + '?s=' + size + '&r=g&d=' + defaultimage;
	                    css = ' guest';
	                  }
	                  photo = '<div class="avatar' + css + '" style="background-image:url(\'' + image + '\'); background-size: 32px auto"></div>';
	                }

	                if (core.options.messages.from) {
	                  from = '<div class="from">' + username + ' at ' + time + '</div>';
	                }

	                //html += '<blockquote class="message ' + pos + '">' + photo + '<div class="content">' + message + '</div>' + from + '</blockquote>';
	                //html += '<div class="flex ' + pos + image + '">'
	                image = photo.length > 0 ? ' image' : '';
	                html += '<div class="flex ' + pos + image + '">' + photo + '<blockquote class="message ' + pos + '"><div class="content">' + message + '</div>' + from + '</blockquote></div>';
	              } else if (status === -2) {
	                html += '<div class="visitor alert"><img src="' + defaultimage + '" style="width: 20px; height: 20px"/>' + core.capitaliseFirstLetter(message) + '</div>';
	              } else if (status === -3) {
	                var rating = parseInt(message.substring(message.length - 1), 10);
	                var stars = '';

	                for (var i = 1; i <= 5; i++) {
	                  if (rating >= i) {
	                    stars += '<div class="sprite RatingHighlight"></div>';
	                  } else {
	                    stars += '<div class="sprite Rating"></div>';
	                  }
	                }

	                message = message.substring(0, message.length - 2);
	                switch (rating) {
	                  case 5:
	                    rating = 'Excellent';
	                    break;
	                  case 4:
	                    rating = 'Very Good';
	                    break;
	                  case 3:
	                    rating = 'Good';
	                    break;
	                  case 2:
	                    rating = 'Poor';
	                    break;
	                  case 1:
	                    rating = 'Very Poor';
	                    break;
	                }

	                html += '<div style="margin-left:20px">' + message + '<span>' + stars + '<span style="margin-left:10px">' + rating + '</span></span></div>';
	              }
	            });
	            $(html).appendTo('#history-chat .messages');
	          }
	        }
	      }
	    });

	    history.show();
	  }
	}

	function closeHistory() {
	  if (core.historyGrid) {
	    core.historyGrid.setSelectedRows([]);
	    core.historyGrid.resetActiveCell();
	  }
	  $('#history-chat').hide();
	}

	var historyColumns;
	var historyDataView;
	var historyOptions = {
	  rowHeight: 220,
	  enableCellNavigation: true,
	  enableColumnReorder: false,
	  multiColumnSort: true,
	  multiSelect: false
	};
	var historySearch = '';

	function updateHistoryFilter() {
	  historyDataView.setFilterArgs({
	    searchString: historySearch
	  });
	  historyDataView.refresh();
	}

	function initHistoryGridEvents() {

	  if (!core.historyGrid) {

	    var groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();
	    historyDataView = new Slick.Data.DataView({
	      groupItemMetadataProvider: groupItemMetadataProvider
	    });

	    // Persist Columns
	    if (core.historyGrid) {
	      historyColumns = core.historyGrid.getColumns();
	    } else {
	      historyColumns = storage.get('historyColumns');

	      // Configure Column Formatters
	      historyColumns[0].formatter = renderHistoryCell;
	      historyColumns[1].formatter = Slick.Formatters.Date;
	    }

	    core.historyGrid = new Slick.Grid('.history-grid', historyDataView, historyColumns, historyOptions);
	    core.historyGrid.registerPlugin(groupItemMetadataProvider);
	    core.historyGrid.setSelectionModel(new Slick.RowSelectionModel());

	    core.historyGrid.onColumnsResized.subscribe(function () {
	      storage.set('historyColumns', core.historyGrid.getColumns());
	    });

	    core.historyGrid.onSelectedRowsChanged.subscribe(function () {
	      var rows = core.historyGrid.getSelectedRows();
	      var chat = historyDataView.getItem(rows);

	      if (chat !== undefined) {
	        openHistoryRoute(chat);
	      }
	    });

	    core.historyGrid.onSort.subscribe(function (e, args) {
	      var cols = args.sortCols;
	      historyDataView.sort(function (dataRow1, dataRow2) {
	        for (var i = 0, l = cols.length; i < l; i++) {
	          var field = cols[i].sortCol.field;
	          var sign = cols[i].sortAsc ? 1 : -1;
	          var value1 = dataRow1[field];
	          var value2 = dataRow2[field];
	          var result = (value1 == value2 ? 0 : value1 > value2 ? 1 : -1) * sign;
	          if (result !== 0) {
	            return result;
	          }
	        }
	        return 0;
	      });
	      core.historyGrid.invalidate();
	      core.historyGrid.render();
	    });

	    historyDataView.onRowCountChanged.subscribe(function () {
	      core.historyGrid.updateRowCount();
	      core.historyGrid.render();
	    });

	    historyDataView.onRowsChanged.subscribe(function (e, args) {
	      core.historyGrid.invalidateRows(args.rows);
	      core.historyGrid.render();
	    });
	  }
	}

	function renderHistoryCell(row, cell, value, columnDef, dataContext) {

	  var browser = 'Chrome';
	  var image = '';
	  var location = dataContext.Country;

	  value = dataContext.UserAgent;
	  if (value.indexOf('MSIE') !== -1 || value.indexOf('Trident/') !== -1) {
	    browser = 'InternetExplorer';
	  } else if (value.indexOf('Chrome') !== -1) {
	    browser = 'Chrome';
	  } else if (value.indexOf('Safari') !== -1) {
	    browser = 'Safari';
	  } else if (value.indexOf('Opera') !== -1) {
	    browser = 'Opera';
	  } else if (value.indexOf('Firefox') !== -1) {
	    browser = 'Firefox';
	  }
	  dataContext.Username = core.ucwords(dataContext.Username.toLowerCase());
	  dataContext.UserAgent = './images/' + browser + '.png';

	  if (dataContext.State !== null && dataContext.State.length > 0) {
	    if (dataContext.City !== null && dataContext.City.length > 0) {
	      location = dataContext.City + ', ' + dataContext.State + ', ' + dataContext.Country;
	    } else {
	      location = dataContext.State + ', ' + dataContext.Country;
	    }
	  } else {
	    if (dataContext.City !== null && dataContext.City.length > 0) {
	      location = dataContext.City + ', ' + dataContext.Country;
	    }
	  }
	  image = '<span class="' + convert.countryIcon(dataContext.Country) + '" style="float:left; margin: 3px 5px 3px 0; display:inline-block"></span>';
	  dataContext.Location = image + location;

	  // Rating
	  var rating = parseInt(dataContext.Rating, 10);
	  var ratingText = 'No Rating';
	  var ratingHtml = '';

	  switch (rating) {
	    case 1:
	      ratingText = 'Very Poor';
	      break;
	    case 2:
	      ratingText = 'Poor';
	      break;
	    case 3:
	      ratingText = 'Good';
	      break;
	    case 4:
	      ratingText = 'Very Good';
	      break;
	    case 5:
	      ratingText = 'Excellent';
	      break;
	  }

	  for (var i = 1; i <= 5; i++) {
	    var css = '';
	    var disabled = '';

	    if (rating >= i) {
	      css = 'Highlight';
	    }
	    if (rating === 0) {
	      disabled = ' disabled';
	    }
	    ratingHtml += '<div class="sprite Rating' + css + disabled + '"></div>';
	  }
	  ratingHtml += '<span class="rating text">' + ratingText + '</span>';

	  if (dataContext.Department.length === 0) {
	    dataContext.Department = 'Unavailable';
	  }

	  if (dataContext.Email.length > 0) {
	    if (dataContext.Email.indexOf('mailto:') === -1 && dataContext.Email.length > 0) {
	      var email = core.escapeHtml(dataContext.Email);
	      dataContext.Email = '<a href="mailto:' + email + '">' + email + '</a>';
	    }
	  } else {
	    dataContext.Email = 'Unavailable';
	  }
	  if (dataContext.CurrentPage.indexOf('href') === -1 && dataContext.CurrentPage.length > 0) {
	    var page = core.escapeHtml(dataContext.CurrentPage);
	    dataContext.CurrentPage = '<a href="' + page + '" target="_blank">' + page + '</a>';
	  }

	  var referrer = dataContext.Referrer;
	  var regEx = /^http[s]{0,1}:\/\/(?:[^.]+[\\.])*google(?:(?:.[a-z]{2,3}){1,2})[\/](?:search|url|imgres|aclk)(?:\?|.*&)q=([^&]*)/i;
	  var keywords = regEx.exec(referrer);

	  if (keywords !== null) {
	    if (keywords[1].length > 0) {
	      referrer = 'Google Search (Keywords: ' + keywords[1] + ')';
	    } else {
	      referrer = 'Google Search';
	    }
	  }
	  dataContext.Referrer = referrer;

	  var html = '<div class="cell-inner"> \
	  <div class="cell-left"> \
	    <img src="' + dataContext.UserAgent + '"/> \
	  </div> \
	  <div class="cell-main"> \
	    <h2 style="text-transform: none">' + dataContext.Username + '</h2> \
	    <span>' + dataContext.Operator + '</span><br/> \
	    <span>' + dataContext.Department + '</span><br/> \
	    <span>' + dataContext.Hostname + '</span><br/> \
	    <span>' + dataContext.Email + '</span><br/> \
	    <span>' + dataContext.Referrer + '</span><br/> \
	    <span>' + dataContext.CurrentPage + '</span><br/> \
	    <span>' + dataContext.Location + '</span><br/> \
	    <span>' + ratingHtml + '</span><br/> \
	  </div> \
	</div>';

	  return html;
	}

	function initHistoryGrid(date) {

	  // History Grid
	  var history;
	  var title = $('.history.container .menu .title .text');

	  if (date === undefined) {
	    // Selected Date
	    date = storage.get('history-date');

	    // Selected Date
	    var calendar = $('.history.container #calendar');
	    calendar.find('td').removeClass('selected-date');
	    calendar.find('td[id="' + date + '"]').addClass('selected-date');
	  }

	  date = date.length > 0 ? new moment(date, 'YYYY-MM-DD HH:mm:ss') : new moment();
	  title.text(date.format('dddd, MMMM D YYYY'));
	  date = date.year() + '-' + core.zeroFill(date.month() + 1, 2) + '-' + core.zeroFill(date.date(), 2);

	  function historyFilter(item, args) {
	    var search = args.searchString.toLowerCase();
	    if (search !== '' && item.Username.toLowerCase().indexOf(search) == -1 && item.Email.toLowerCase().indexOf(search) == -1 && item.Department.toLowerCase().indexOf(search) == -1 && item.Operator.toLowerCase().indexOf(search) == -1 && item.Hostname.toLowerCase().indexOf(search) == -1) {
	      return false;
	    }

	    return true;
	  }

	  if (core.config.session.length > 0) {

	    // Web Service / Data
	    var post = { 'StartDate': date, 'EndDate': date, 'Timezone': core.getUTCOffset(), 'Transcripts': 1, 'ID': 0 };

	    // Initialise Grid
	    initHistoryGridEvents();

	    // History AJAX / Grid
	    api.apiRequest({
	      url: api.apiEndpoint.history,
	      data: post,
	      success: function success(data) {
	        // Chat History JSON
	        if (data.ChatHistory !== undefined) {

	          history = [];
	          $.each(data.ChatHistory, function (key, value) {
	            history.push(value.Visitor);
	          });
	          history = history.reverse();

	          historyDataView.beginUpdate();
	          historyDataView.setItems(history, 'Session');
	          historyDataView.setFilterArgs({
	            searchString: historySearch
	          });
	          historyDataView.setFilter(historyFilter);
	          historyDataView.endUpdate();

	          var chats = '';
	          var length = history.length;

	          if (length > 1) {
	            chats = ' - ' + history.length + ' chats';
	          } else if (length > 0) {
	            chats = ' - ' + history.length + ' chat';
	          }

	          if (length > 0) {
	            $('.history-empty').hide();
	            $('.history-grid').show();
	          } else {
	            //$('.history-grid').hide();
	            $('.history-empty, .history-grid').show();
	          }
	          $('.username-column-header .slick-column-name').text('Chat History' + chats);
	        }
	      }
	    });
	  }
	}

	$(document).on('LiveHelp.OpenHistory', function () {
	  openHistory();
	});

	$(document).on('LiveHelp.OpenHome, LiveHelp.CloseHistory', function () {
	  closeHistory();
	});

	$(document).on('LiveHelp.OpenHistoryRoute', function (event, chat) {
	  openHistoryRoute(chat);
	});

	$(document).on('LiveHelp.ShowHistoryChart', function () {
	  //showHistoryChart();
	});

	// Document Ready
	$(document).ready(function () {

	  // History Calendar
	  $('#calendar').ical();

	  $('#calendar').on('click', 'td', function () {
	    var date = $(this).attr('id');
	    var selected = $(this);

	    if (date !== undefined && date.length > 0 && /^\d{4}-\d{2}-\d{2}$/i.test(date)) {
	      // Save Selected Date
	      storage.set('history-date', date);

	      // Selected Date
	      selected.closest('table').find('td').removeClass('selected-date');
	      selected.addClass('selected-date');

	      // Update History
	      initHistoryGrid(date);
	    }
	  });

	  // Resize Grids
	  $(window).resize(function () {
	    if (core.historyGrid) {
	      core.historyGrid.resizeCanvas();
	    }
	  });

	  $('.history.container .search #search').keyup(function (e) {
	    if (e.which == 27) {
	      $(this).val('');
	    }
	    historySearch = $(this).val();
	    updateHistoryFilter();
	  });

	  $('.history.container .search.button').click(function () {
	    historySearch = $('.history.container .search #search').val();
	    updateHistoryFilter();
	  });

	  $('.history .menu .title').on('click', function (event) {
	    $('.history .side').toggle();
	    event.stopPropagation();
	  });

	  $(document).click(function (event) {
	    if (!$(event.target).closest('.history .side').length && !$(event.target).is('.month-buttons, .year-buttons')) {
	      var calendar = $('.history .side');
	      if (calendar.is(':visible')) {
	        calendar.hide();
	      }
	    }
	  });

	  // Chat History
	  var history = $('#history-chat');
	  history.find('.btn.unblock').click(function () {
	    var chat = history.data('id');
	    var dialog = history.find('.dialog');

	    core.unblockChat(chat, dialog);
	  });
	});

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var api = __webpack_require__(120);
	var core = __webpack_require__(121);
	var validate = __webpack_require__(399);

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var _ = __webpack_require__(63);

	var responses = {};

	var openResponsesCallback = function openResponsesCallback(responses, opened) {
	  // Reload Responses
	  loadResponses();

	  // Open Responses
	  responses.css('z-index', 300);
	  responses.css({ width: 'calc(100% - 300px)', opacity: 1 });

	  // Callback
	  if (opened) {
	    opened();
	  }
	};

	function openResponses(opened) {
	  // Open Responses
	  var responses = $('#responses');
	  $('.visitors-grid .slick-viewport').addClass('no-scroll');
	  $('.chat-stack, .history.container, .statistics.container, .accounts.slider, .settings.container').hide();
	  responses.show();
	  openResponsesCallback(responses, opened);
	}

	function closeResponses() {
	  var responses = $('#responses');

	  responses.find('.search input').val('');
	  filterResponses();

	  responses.animate({ width: 0, opacity: 0 }, 250, function () {
	    responses.hide();
	  });
	  core.switchPreviousMenu();
	}

	function filterResponses() {
	  var keyword = '';
	  var keywords = [];
	  var success = [];
	  var failure = [];
	  var types = ['Text', 'Hyperlink', 'Image', 'PUSH', 'JavaScript'];
	  var section = $('#responses');
	  var popover = $('.responses.popover');
	  var parent;

	  if (section.find('#search').is(':visible')) {
	    parent = section;
	  } else if (popover.find('#search').is(':visible')) {
	    parent = popover;
	  }

	  if (parent) {
	    keyword = parent.find('#search').val();
	    keywords = keyword !== undefined && keyword.length > 0 ? keyword.split(' ') : '';
	    if (keywords.length > 0) {
	      $.each(responses, function (type, value) {
	        if ($.inArray(type, types) > -1) {
	          $.each(value, function (key, response) {
	            var id = parseInt(response.ID, 10);
	            var found = false;
	            var tags = response.Tags.join(' ');

	            $.each(keywords, function (key, word) {
	              if (response.Name.toLowerCase().indexOf(word) > -1 || response.Category.toLowerCase().indexOf(word) > -1 || response.Content.toLowerCase().indexOf(word) > -1 || tags.toLowerCase().indexOf(word) > -1) {
	                found = true;
	                return false;
	              }
	            });

	            if (found) {
	              success.push(id);
	            } else {
	              failure.push(id);
	            }
	          });
	        }
	      });
	    }
	  }

	  if (!responses.length) {
	    success.push(failure);
	  }

	  if (parent) {
	    var elements = parent.find('.response');
	    if (success.length === 0 && failure.length === 0) {
	      elements.show();
	    } else {
	      $.each(success, function (key, value) {
	        if (value > 0) {
	          elements.filter('[data-id=' + value + ']').show();
	        }
	      });

	      $.each(failure, function (key, value) {
	        if (value > 0) {
	          elements.filter('[data-id=' + value + ']').hide();
	        }
	      });
	    }
	  }
	}

	function updateResponses(responses) {

	  if ($('#responses').length) {
	    var element = $('#responses .scroll #response-list');
	    var types = ['Text', 'Hyperlink', 'Image', 'PUSH', 'JavaScript', 'Other'];
	    var sections = {};

	    element.html('');

	    $(document).trigger('LiveHelp.ResponsesUpdated', responses);

	    if (responses.Text !== undefined && responses.Text.length > 0 || responses.Hyperlink !== undefined && responses.Hyperlink.length > 0 || responses.Image !== undefined && responses.Image.length > 0 || responses.PUSH !== undefined && responses.PUSH.length > 0) {

	      // Hide Empty
	      $('.responses .empty').hide();

	      $.each(responses, function (type, value) {
	        if ($.inArray(type, types) > -1) {
	          var origtype = type === 'PUSH' || type === 'Hyperlink' ? '<span style="position: absolute; right: 40px">' + type + '</span>' : '';
	          type = type.toLowerCase();
	          $('<div class="' + type + '" />').appendTo(element);
	          if (sections[type] === undefined) {
	            sections[type] = $('#response-list .' + type);
	          }
	          var menu = $('.chat-list .options.dropdown-menu .' + type);
	          if (value.length > 0 && menu.find('ul').length === 0) {
	            menu.addClass('dropdown-submenu');
	            $('<ul class="dropdown-menu"></ul>').appendTo(menu);
	          }
	          menu = menu.find('.dropdown-menu');

	          // Custom Responses
	          if (value.length > 0 && value[0].Custom !== undefined) {
	            value = value[0].Custom;
	          }

	          if (value.length > 0) {
	            $.each(value, function (key, response) {
	              if (key == 'Description') {
	                var optionsmenu = $('.chat-list .options.dropdown-menu');
	                var parent = optionsmenu.find('.other.menuitem');

	                parent.find('> a').text(response);
	                parent.show();
	                optionsmenu.find('.other.divider').show();
	              } else {
	                var id = parseInt(response.ID, 10);
	                var tag = '';
	                var css = 'display: none';
	                var content = response.Content;
	                var submenu = $('<li class="responseitem submenu"><a href="#">' + response.Name + '</a></li>');

	                submenu.data('response', response);
	                if (response.Category && response.Category.length > 0) {
	                  var menus = menu.find('li.' + type + '.category a');
	                  var exists = false;

	                  $.each(menus, function (key, value) {
	                    var category = $(value);
	                    if (category.text() === response.Category) {
	                      exists = category;
	                      return;
	                    }
	                  });
	                  if (!exists) {
	                    var category = $('<li class="' + type + ' category dropdown-submenu"><a href="#">' + response.Category + '</a><ul class="dropdown-menu"></ul></li>');
	                    submenu.appendTo(category.find('.dropdown-menu'));
	                    category.appendTo(menu);
	                  } else {
	                    submenu.appendTo(exists.parent().find('ul.dropdown-menu'));
	                  }
	                } else {
	                  submenu.appendTo(menu);
	                }

	                if (response.Tags !== undefined) {
	                  if (response.Tags.length > 0) {
	                    $(document).trigger('LiveHelp.UpdateTags', response);
	                    css = 'display: inline-block';
	                    tag = response.Tags.join(', ');
	                  } else {
	                    css = 'display: none';
	                  }
	                }

	                content = content.replace(/^(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[A-Z0-9+&@#\/%=~_|](\.jpg|.jpeg|\.gif|\.png)$/img, '<img src="$&" style="max-width: 300px"/>');

	                var html = $('<div class="response" data-id="' + id + '" data-type="' + type + '"><div class="label"><span class="title">' + response.Name + origtype + '</span></div><div class="content">' + content + '</div><div class="tags"><span class="tag-icon" style="' + css + '"></span><span class="tag">' + tag + '</span></div></div>');
	                html.attr('data-content', response.Content);
	                html.appendTo(sections[type]);
	              }
	            });
	          }
	        }
	      });
	    } else {
	      clearResponses();
	    }
	  }
	}

	function clearResponses() {
	  $('#responses .scroll #response-list .response').remove();
	  $(document).trigger('LiveHelp.ClearResponses');
	}

	function loadResponses() {
	  if (core.config.session.length > 0) {
	    // Responses AJAX
	    api.apiRequest({
	      url: api.apiEndpoint.responses,
	      success: function success(data) {
	        // Responses JSON
	        if (data !== undefined && data.Responses !== undefined) {
	          responses = data.Responses;
	          updateResponses(responses);

	          $('.chat-stack .search.button').popover({
	            container: '#chat-stack',
	            viewport: { selector: '#chat-stack', padding: 10 },
	            content: responsesPopoverContent(),
	            html: true,
	            placement: 'top',
	            trigger: 'manual',
	            template: '<div class="popover responses" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div><input id="search" type="text" placeholder="Search Pre-typed Responses"/></div>'
	          });
	        } else {
	          clearResponses();
	        }
	      },
	      error: function error() {
	        clearResponses();
	      }
	    });
	  }
	}

	function hideResponsesPopover() {
	  var button = $('.chat-stack .search.button');
	  button.removeClass('active').popover('hide');
	}

	function responsesPopoverContent() {
	  return $('#response-list').html();
	}

	function updateResponsesPopover() {
	  var html = responsesPopoverContent();
	  $('.responses.popover .popover-content').html(html);
	}

	var closeAddResponseCallback = function closeAddResponseCallback(responses) {
	  responses.find('.search, #response-list').fadeIn(250, function () {
	    $('#response-list .response').show();
	  });
	};

	$(document).on('LiveHelp.UpdateResponsesPopover', function () {
	  updateResponsesPopover();
	});

	$(document).on('LiveHelp.OpenResponses', function () {
	  openResponses();
	});

	$(document).on('LiveHelp.CloseResponses', function () {
	  closeResponses();
	});

	$(document).on('LiveHelp.SignInCompleted', function () {
	  // Pre-typed Responses
	  loadResponses();
	});

	// Document Ready
	$(document).ready(function () {

	  // Pre-typed Responses
	  loadResponses();

	  $('#responses .close').click(function () {
	    closeResponses();
	  });

	  $('#response-list').on('click', '.response', function () {

	    // Response
	    var response = $(this);
	    var id = response.data('id');
	    var types = ['Text', 'Hyperlink', 'Image', 'PUSH', 'JavaScript'];

	    response = [];
	    $.each(responses, function (type, section) {
	      if ($.inArray(type, types) > -1) {
	        $.each(section, function (key, value) {
	          if (parseInt(value.ID, 10) === id) {
	            response = value;
	            return false;
	          }
	        });
	      }
	    });

	    $('#ResponseID').val(response.ID);
	    $('#ResponseName').val(response.Name);
	    $('#ResponseCategory').val(response.Category);

	    // Type
	    var selector = 'Text';
	    switch (response.Type) {
	      case 2:
	        selector = 'Hyperlink';
	        break;
	      case 3:
	        selector = 'Image';
	        break;
	      case 4:
	        selector = 'PUSH';
	        break;
	      case 5:
	        selector = 'JavaScript';
	        break;
	    }
	    $('#ResponseType' + selector).attr('checked', 'checked');

	    if (selector === 'Text') {
	      $('#ResponseContent').val(response.Content);
	      $('#add-response .URL').hide();
	      $('#add-response .Content').show();
	    } else {
	      $('#ResponseURL').val(response.Content);
	      $('#add-response .Content').hide();
	      $('#add-response .URL').val(response.Content).show();
	    }

	    // Add Tags
	    $('.add-response.tags').html('');
	    addTags(response.Tags);

	    showResponse();
	  });

	  // Responses Section and Popover
	  var responsesParent = $('#responses');
	  var debouncedFilterResponses = _.debounce(filterResponses, 250);

	  $(document).on('keydown', '#responses #search, .responses.popover #search', debouncedFilterResponses);
	  $(document).on('click', '#responses .search.button, .responses.popover .search.button', filterResponses);

	  // Responses Events
	  $('.chat-stack #message').on('focus', hideResponsesPopover);
	  $(document).on('click', '.menu, .chat', hideResponsesPopover);

	  $('.chat-stack .search.button').on('click', function () {
	    if (!$('.responses.popover').length) {
	      $(this).addClass('active').popover('show');
	      updateResponsesPopover();
	      $('.responses.popover #search').focus();
	    } else {
	      $(this).removeClass('active').popover('hide');
	    }
	  });

	  function showResponse() {
	    $('.responses .empty').hide();
	    responsesParent.find('.back, .back-background, #add-response').fadeIn();
	    responsesParent.find('.header').text('Add Response');

	    responsesParent.find('.search, #response-list, .button-toolbar.add').hide();
	    responsesParent.find('.button-toolbar.save').fadeIn().animate({ bottom: '15px' }, 250, 'easeInOutBack');
	  }

	  // Add Response
	  responsesParent.find('.add-small.button, .button-toolbar .add-button').click(function () {
	    clearResponse();
	    showResponse();
	  });

	  function clearResponse() {
	    // Clear
	    responsesParent.find('#ResponseID, #ResponseName, #ResponseCategory, #ResponseURL, #ResponseContent, #ResponseTags').val('');
	    responsesParent.find('#ResponseTypeText').attr('checked', 'checked');
	    responsesParent.find('.add-response.tags').html('');

	    // Reset Content / URL / Hide Errors
	    responsesParent.find('.URL, .InputError').hide();
	    responsesParent.find('.Content').show();
	  }

	  responsesParent.find('.cancel.button').click(function () {
	    // Clear
	    clearResponse();

	    // Close
	    closeAddResponse();
	  });

	  // Response Delete Button
	  var confirm = responsesParent.find('.confirm-delete.dialog');
	  responsesParent.find('.delete-button').click(function () {
	    confirm.find('.progressring img').css({ opacity: 0 });
	    confirm.find('.buttons').show();
	    confirm.find('.title').text('Confirm Response Delete');
	    confirm.find('.description').text('Are you sure that you wish to delete this response?');
	    confirm.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	  });

	  // Confirm Delete Response Button
	  confirm.find('.delete').click(function () {
	    // Show Progress
	    confirm.find('.buttons').fadeOut();
	    confirm.find('.progressring img').css({ opacity: 0.5 });

	    // Delete Response
	    deleteResponse();
	  });

	  // Confirm Cancel Button
	  confirm.find('.cancel').click(function () {
	    confirm.animate({ bottom: '-90px' }, 250, 'easeInOutBack');
	  });

	  // Validate Required Fields
	  responsesParent.find('#ResponseName').on('keydown keyup change blur', function () {
	    var id = $(this).attr('id');
	    validate.field($(this), '#' + id + 'Error');
	  });

	  // Text / JavaScript
	  responsesParent.find('#ResponseTypeText, #ResponseTypeJavaScript').on('click', function () {
	    if ($(this).is(':checked')) {
	      responsesParent.find('.URL').hide();
	      responsesParent.find('.Content').show();
	    }
	  });

	  // Hyperlink / Image / PUSH
	  responsesParent.find('#ResponseTypeHyperlink, #ResponseTypeImage, #ResponseTypePUSH').on('click', function () {
	    if ($(this).is(':checked')) {
	      responsesParent.find('.Content').hide();
	      responsesParent.find('.URL').show();
	    }
	  });

	  function validateResponseURL(url) {
	    if (responsesParent.find('#ResponseTypeHyperlink, #ResponseTypePUSH, #ResponseTypeImage').is(':checked')) {
	      if (/^(?:\b(https?|file):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$])$/i.test(url)) {
	        // Successful match
	        responsesParent.find('#ResponseURLError').removeClass('CrossSmall').addClass('TickSmall').fadeIn(250);
	      } else {
	        responsesParent.find('#ResponseURLError').removeClass('TickSmall').addClass('CrossSmall').fadeIn(250);
	      }
	    }
	  }

	  // Validate Content / URL
	  responsesParent.find('#ResponseContent, #ResponseURL').on('keydown keyup change blur', function () {
	    var type = responsesParent.find('.checkbox input:checked').data('type');
	    var url = responsesParent.find('#ResponseURL');
	    var content = responsesParent.find('#ResponseContent');

	    // Validate Content / URL
	    if (type === 'Text' || type === 'JavaScript') {
	      // Validate Content
	      validate.field(content, '#ResponseContentError');
	    } else {
	      // TODO Validate URL / Image / Link
	      // TODO Show Image Preview
	      validateResponseURL(url.val());
	    }
	  });

	  function deleteResponse() {
	    var id = responsesParent.find('#ResponseID');

	    function deleteCompleted(data) {
	      // Update Responses
	      if (data !== undefined && data.Responses !== undefined) {
	        updateResponses(data.Responses);
	      }

	      // Clear
	      clearResponse();

	      // Close
	      closeAddResponse();

	      // Hide Progress
	      $('#responses .confirm-delete.dialog').show().animate({ bottom: -90 }, 250, 'easeInOutBack');
	    }

	    // Save Response
	    if (responsesParent.find('.CrossSmall').length === 0) {

	      var response = { ID: id.val() };

	      // Save Response
	      api.apiRequest({
	        url: api.apiEndpoint.responses,
	        data: response,
	        success: function success(data) {
	          deleteCompleted(data);
	        }
	      });
	    }
	  }

	  function saveResponse() {
	    var id = responsesParent.find('#ResponseID');
	    var name = responsesParent.find('#ResponseName');
	    var category = responsesParent.find('#ResponseCategory');
	    var type = responsesParent.find('.checkbox input:checked').data('type');
	    var url = responsesParent.find('#ResponseURL');
	    var content = responsesParent.find('#ResponseContent');

	    // Validate Name
	    validate.field(name, '#ResponseNameError');

	    // Validate Content / URL
	    if (type === 'Text' || type === 'JavaScript') {
	      // Validate Content
	      validate.field(content, '#ResponseContentError');
	      content = content.val();
	    } else {
	      validateResponseURL(url.val());
	      content = url.val();
	    }

	    function saveCompleted(data) {
	      // Update Responses
	      if (data !== undefined && data.Responses !== undefined) {
	        responses = data.Responses;
	        updateResponses(data.Responses);
	      }

	      // Clear and Close
	      clearResponse();
	      closeAddResponse();
	    }

	    // Save Response
	    if (responsesParent.find('.CrossSmall').length === 0) {

	      // Response Type
	      switch (type) {
	        case 'Text':
	          type = 1;
	          break;
	        case 'Hyperlink':
	          type = 2;
	          break;
	        case 'Image':
	          type = 3;
	          break;
	        case 'PUSH':
	          type = 4;
	          break;
	        case 'JavaScript':
	          type = 5;
	          break;
	      }

	      // Tags
	      var tags = [];
	      var tag = '';

	      $.each(responsesParent.find('.add-response .tag'), function (key, value) {
	        tag = $(value).text();
	        if (tag.length > 0 && $.inArray(value, tags) === -1) {
	          tags.push(tag.toLowerCase());
	        }
	      });
	      tags = tags.join(';');

	      var response = {
	        ID: id.val(),
	        Name: name.val(),
	        Category: category.val(),
	        Content: content,
	        Type: type,
	        Tags: tags
	      };

	      // Save Response
	      api.apiRequest({
	        url: api.apiEndpoint.responses,
	        data: response,
	        success: function success(data) {
	          saveCompleted(data);
	        }
	      });
	    }
	  }

	  responsesParent.find('.save.button').click(function () {
	    saveResponse();
	  });

	  function addTags(tags) {
	    if (tags !== undefined && tags.length > 0) {
	      $.each(tags, function (key, tag) {
	        responsesParent.find('.add-response.tags').append('<span class="tag"><span class="tag-icon"></span>' + tag.trim() + '<span class="delete sprite DeleteTag" title="Delete"></span></span>');
	      });
	    }
	  }

	  responsesParent.find('.add-tag').click(function () {
	    var field = responsesParent.find('#ResponseTags');
	    var tags = field.val().split(' ');

	    // Add Tags
	    addTags(tags);

	    // Clear Tags Field
	    field.val('');
	  });

	  // Response Tags
	  $('#responses').on({ 'mouseenter': function mouseenter() {
	      $(this).find('.delete').css({ opacity: 0.3 });
	    },
	    'mouseleave': function mouseleave() {
	      $(this).find('.delete').css({ opacity: 0.1 });
	    }
	  }, '.add-response.tags .tag');

	  $('#responses').on('click', '.tag .delete', function () {
	    $(this).closest('.add-response.tags .tag').remove();
	  });

	  function closeAddResponse() {
	    responsesParent = $('#responses');
	    responsesParent.find('#add-response').fadeOut();
	    responsesParent.find('.header').text('Pre-typed Response');
	    responsesParent.find('.back, .back-background').fadeOut();

	    var save = responsesParent.find('.button-toolbar.save');
	    var height = save.height();

	    save.hide().css('bottom', -height + 'px');
	    closeAddResponseCallback(responsesParent);

	    if (!responsesParent.find('#responses .scroll #response-list .response').length) {
	      $('.responses .empty').show();
	    }
	  }

	  // Close Add Response
	  responsesParent.find('.back').click(function () {
	    closeAddResponse();
	  });

	  function sendCommand(id, type, name, content) {
	    var post = { 'ID': id };

	    type = type !== undefined ? type : '';
	    name = name !== undefined ? name : '';
	    content = content !== undefined ? content : '';
	    $.extend(post, { 'Type': type, 'Name': name, 'Content': content, 'Staff': '0' });

	    api.apiRequest({
	      url: api.apiEndpoint.send,
	      data: post
	    });

	    return false;
	  }

	  function toggleTaggedResponses() {
	    var tag = $(this);
	    var id = tag.data('message');
	    var menu = $('.responses-menu[data-message=' + id + ']');
	    var height = 300;
	    var opacity = 1;
	    var tagtext = tag.find('.text').text();

	    if (menu.length === 0) {
	      menu = tag.parent();
	    }

	    if (menu.height() > 0) {
	      height = 0;
	      opacity = 0;
	    } else {
	      var count = 0;
	      menu.find('.responses-text, .responses-hyperlink, .responses-image, .responses-push, .responses-javascript').html('').hide();
	      menu.find('.responses.heading').hide();
	      $.each(responses, function (key, response) {
	        if (key === 'Text') {
	          count = 0;
	          $.each(response, function (key, text) {
	            $.each(text.Tags, function (key, tag) {
	              tag = tag.toLowerCase();
	              if (tag === tagtext.toLowerCase()) {
	                var html = $('<div class="response" data-type="text"></div>');
	                html.attr('data-content', text.Content);
	                html.text(text.Name);
	                menu.find('.tag-text').text(tag);
	                html.appendTo(menu.find('.responses-text'));
	                count++;
	              }
	            });
	          });
	          if (count > 0) {
	            menu.find('.responses.text.heading, .responses-text').show();
	          }
	        } else if (key === 'Hyperlink') {
	          count = 0;
	          $.each(response, function (key, text) {
	            $.each(text.Tags, function (key, tag) {
	              tag = tag.toLowerCase();
	              if (tag === tagtext.toLowerCase()) {
	                var html = $('<div class="response" data-type="hyperlink"></div>');
	                html.attr('data-content', text.Content);
	                html.text(text.Name);
	                menu.find('.tag-text').text(tag);
	                html.appendTo(menu.find('.responses-hyperlink'));
	                count++;
	              }
	            });
	          });
	          if (count > 0) {
	            menu.find('.responses.hyperlink.heading, .responses-hyperlink').show();
	          }
	        } else if (key === 'Image') {
	          count = 0;
	          $.each(response, function (key, text) {
	            $.each(text.Tags, function (key, tag) {
	              tag = tag.toLowerCase();
	              if (tag === tagtext.toLowerCase()) {
	                var html = $('<div class="response" data-type="image"></div>');
	                html.text(text.Content);
	                menu.find('.tag-text').text(tag);
	                html.appendTo(menu.find('.responses-image'));
	                count++;
	              }
	            });
	          });
	          if (count > 0) {
	            menu.find('.responses.image.heading, .responses-image').show();
	          }
	        } else if (key === 'PUSH') {
	          count = 0;
	          $.each(response, function (key, text) {
	            $.each(text.Tags, function (key, tag) {
	              tag = tag.toLowerCase();
	              if (tag === tagtext.toLowerCase()) {
	                var html = $('<div class="response" data-type="push></div>');
	                html.text(text.Content);
	                menu.find('.tag-text').text(tag);
	                html.appendTo(menu.find('.responses-push'));
	                count++;
	              }
	            });
	          });
	          if (count > 0) {
	            menu.find('.responses.push.heading, .responses-push').show();
	          }
	        } else if (key === 'JavaScript') {
	          count = 0;
	          $.each(response, function (key, text) {
	            $.each(text.Tags, function (key, tag) {
	              tag = tag.toLowerCase();
	              if (tag === tagtext.toLowerCase()) {
	                var html = $('<div class="response" data-type="javascript"></div>');
	                html.text(text.Content);
	                menu.find('.tag-text').text(tag);
	                html.appendTo(menu.find('.responses-javascript'));
	                count++;
	              }
	            });
	          });
	          if (count > 0) {
	            menu.find('.responses.javascript.heading, .responses-javascript').show();
	          }
	        }
	      });
	      height = '100%';
	    }
	    menu.animate({ height: height, opacity: opacity }, 100, 'easeOutBack', function () {
	      $(this).toggle();
	    });
	  }

	  $('.chat-stack').on('click', '.popover-content .response, .responses-menu .response', function () {
	    var content = false;
	    var element = $(this);
	    if (element.length) {
	      content = element.data('content');
	    }

	    if (content) {
	      var title = element.find('.title').clone().children().remove().end().text();
	      var selected = $('.chat-list').find('.visitor.selected');
	      var id = selected.length ? selected.data('id') : -1;
	      var type = element.data('type').toUpperCase();
	      var stack = $('.chat-stack');
	      var button = $('.chat-stack .search.button');

	      if ((type === 'PUSH' || type === 'JAVASCRIPT' || type === 'IMAGE') && id > 0) {
	        sendCommand(id, type, title, content);
	        stack.find('.search.button').popover('hide');
	      } else {
	        button.popover('hide').removeClass('active');
	        stack.find('#message').val(content).focus();
	      }
	    }
	  });

	  $('.chat-stack').on('click', '.responses-menu .response', function () {
	    var content = $(this).data('content');
	    $('.chat-stack textarea').val(content);
	  });

	  $(document).on('click', '.messages .tag, .responses-menu > .close', toggleTaggedResponses);
	});

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Third Party Libraries
	var $ = __webpack_require__(62);

	// Initialise Storage

	var storage = new _storage2.default();

	exports.field = function (obj, id) {
	  var value = obj instanceof $ ? obj.val() : $(obj).val();
	  if ($.trim(value) === '') {
	    $(id).removeClass('TickSmall').addClass('CrossSmall').fadeIn(250);
	    return false;
	  } else {
	    $(id).removeClass('CrossSmall').addClass('TickSmall').fadeIn(250);
	    return true;
	  }
	};

	exports.username = function (obj, id) {
	  var value = obj instanceof $ ? obj.val() : $(obj).val();
	  var accounts = storage.get('accounts');
	  var exists = false;
	  var accountID = $('#AccountID').val();

	  accountID = accountID.length > 0 ? parseInt(accountID, 10) : 0;

	  $.each(accounts, function (index, account) {
	    account.ID = parseInt(account.ID, 10);
	    if (account.Username === value && accountID === 0 || account.Username === value && accountID > 0 && accountID !== account.ID) {
	      exists = true;
	    }
	  });

	  if ($.trim(value) === '' || exists) {
	    var element = $(id);
	    if (exists) {
	      element.attr('title', 'Username Already In Use');
	    } else {
	      element.attr('title', 'Username Required');
	    }
	    element.removeClass('TickSmall').addClass('CrossSmall').fadeIn(250);
	    return false;
	  } else {
	    $(id).removeClass('CrossSmall').addClass('TickSmall').fadeIn(250);
	    return true;
	  }
	};

	exports.email = function (obj, id, department) {
	  var value = obj instanceof $ ? obj.val() : $(obj).val();
	  var accounts = storage.get('accounts');
	  var exists = false;
	  var valid = false;
	  var accountID = $('#AccountID').val();

	  if (/^[\-!#$%&'*+\\.\/0-9=?A-Z\^_`a-z{|}~]+@[\-!#$%&'*+\\\/0-9=?A-Z\^_`a-z{|}~]+\.[\-!#$%&'*+\\.\/0-9=?A-Z\^_`a-z{|}~]+$/i.test(value)) {
	    valid = true;
	  } else {
	    valid = false;
	  }

	  if (!department) {
	    accountID = accountID.length > 0 ? parseInt(accountID, 10) : 0;

	    $.each(accounts, function (index, account) {
	      account.ID = parseInt(account.ID, 10);
	      if (account.Email === value && accountID === 0 || account.Email === value && accountID > 0 && accountID !== account.ID) {
	        exists = true;
	      }
	    });
	  }

	  if (valid !== false && (department || !department && !exists)) {
	    var element = $(id);
	    if (!department && !exists) {
	      element.attr('title', 'Email Already In Use');
	    } else {
	      element.attr('title', 'Email Required');
	    }
	    element.removeClass('CrossSmall').addClass('TickSmall').fadeIn(250);
	    return true;
	  } else {
	    $(id).removeClass('TickSmall').addClass('CrossSmall').fadeIn(250);
	    return false;
	  }
	};

	exports.password = function (obj, password, id) {
	  var value = obj instanceof $ ? obj.val() : $(obj).val();
	  if ($.trim(value) === '' || value !== password) {
	    $(id).removeClass('TickSmall').addClass('CrossSmall').fadeIn(250);
	    return false;
	  } else {
	    $(id).removeClass('CrossSmall').addClass('TickSmall').fadeIn(250);
	    return true;
	  }
	};

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*global Slick:true*/

	var moment = __webpack_require__(66);
	var api = __webpack_require__(120);
	var core = __webpack_require__(121);
	var convert = __webpack_require__(145);
	var validate = __webpack_require__(399);

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var _ = __webpack_require__(63);

	// Initialise Storage

	var storage = new _storage2.default();

	var openAccountsCallback = function openAccountsCallback() {};

	function showAccounts() {
	  var account = $('#account-details');
	  var toolbars = account.find('.account.button-toolbar.save, .account.button-toolbar.edit');
	  var add = account.find('.account.button-toolbar.add');
	  var confirm = account.find('.confirm-delete.dialog');
	  var upload = account.find('#account-upload');
	  var departments = $('.departments.dialog');
	  var height = toolbars.height();

	  account.removeClass('edit add');
	  account.find('.header.account').hide();
	  account.find('.header:not(.account)').text('Add / Edit Accounts').show();
	  account.find('.scroll').fadeOut();
	  account.find('#account-image, .upload, #account-dropzone').fadeOut();
	  account.find('.back, .back-background').fadeOut();
	  account.find('.details').css('bottom', 0);

	  upload.hide().find('.image').css({ 'background': 'none', 'opacity': 0.5, 'width': '100px', 'height': '100px', 'padding': '20px' });
	  upload.css({ 'border': '2px dashed #CCC', 'border-radius': '100px', 'background': '#fafafa' });

	  toolbars.fadeOut().css('bottom', -height + 'px');

	  departments.hide().animate({ bottom: -departments.height() }, 250, 'easeInOutBack');

	  var twofactor = $('.twofactor-dialog');
	  if (twofactor.length > 0 && parseInt(twofactor.css('bottom'), 10) >= 0) {
	    twofactor.animate({ bottom: -twofactor.height() }, 250, 'easeInOutBack');
	  }

	  // Access Level
	  if (core.config.operator.access >= 2) {
	    add.fadeOut();
	  } else {
	    add.fadeIn().animate({ bottom: '15px' }, 250, 'easeInOutBack');
	  }

	  confirm.animate({ bottom: '-90px' }, 250, 'easeInOutBack');
	  $('.accounts-grid').fadeIn();
	  $('.accounts-grid .slick-viewport').scrollTop(accountsScrollTop);

	  $('#account-details .details .btn-group').hide();

	  if (account.filter(':visible').length > 0) {
	    storage.set('account', null);
	    initAccountsGrid(true);
	  }
	}

	function openAccounts() {
	  // Open Account
	  var account = $('#account-details');
	  var add = account.find('.account.button-toolbar.add');

	  // Access Level
	  if (core.config.operator.access >= 2) {
	    add.hide();
	  }

	  // Hide Visitors Grid Scrollbar
	  $('.visitors-grid .slick-viewport').addClass('no-scroll');

	  openAccountsCallback();

	  closeAccountDetails();
	  account.show();
	  account.css('z-index', 300);
	  account.css({ width: 'calc(100% - 300px)', opacity: 1 });

	  account = storage.get('account');
	  if (account !== null) {
	    var storedAccounts = storage.get('accounts');
	    $.each(storedAccounts, function (index, value) {
	      if (account.ID === value.ID) {
	        account = value;
	      }
	    });
	    showAccount(account);
	    return;
	  }
	  initAccountsGrid(true);
	}

	var closeAccountCallback = function closeAccountCallback(account) {
	  account.animate({ width: 0, opacity: 0 }, 250, function () {
	    account.hide();
	  });
	};

	function closeAccount() {
	  var account = $('#account-details');

	  closeAccountCallback(account);
	  core.switchPreviousMenu();
	}

	$('#account-details .close').click(function () {
	  // Close Edit Details
	  if ($('#account-details.edit').length) {
	    closeAccountDetails();
	  }
	  closeAccount();
	});

	function showAccountsGrid(accounts, override) {
	  var storedAccounts = storage.get('accounts');
	  var storedLastUpdated = lastUpdatedAccount(storedAccounts);

	  override = override !== undefined ? override : false;
	  storeAccounts(accounts);
	  $(document).trigger('LiveHelp.AccountsUpdated', [accounts]);

	  var newAccount = false;
	  $.each(storedAccounts, function (key, account) {
	    var storedID = parseInt(account.ID, 10);
	    var exists = false;

	    $.each(accounts, function (key, value) {
	      var ID = parseInt(value.ID, 10);
	      if (storedID === ID) {
	        exists = true;
	      }
	    });

	    if (!exists) {
	      newAccount = true;
	    }
	  });

	  var lastUpdated = lastUpdatedAccount(accounts);
	  if (lastUpdated > storedLastUpdated || newAccount || storedAccounts.length != accounts.length) {
	    updateAccountsGrid(accounts, override);
	  } else {
	    updateAccountsGrid(accounts, true);
	    $(document).trigger('LiveHelp.AccountsCompleted');
	  }
	}

	// Accounts Grid
	var accountsGrid;
	var accountsDataView;
	var accounts;
	var accountsColumns = [{ id: 'account', name: '', field: 'Username', formatter: renderAccountCell, sortable: true }];
	var accountsOptions = {
	  rowHeight: 80,
	  enableCellNavigation: true,
	  enableColumnReorder: false,
	  forceFitColumns: true,
	  multiColumnSort: true,
	  multiSelect: false
	};

	function renderAccountCell(row, cell, value, columnDef, dataContext) {
	  var data = dataContext;
	  var status = parseInt(data.Status, 10);

	  if (!isNaN(status)) {
	    switch (status) {
	      case 0:
	        status = 'Offline';
	        break;
	      case 1:
	        status = 'Online';
	        break;
	      case 2:
	        status = 'Be Right Back';
	        break;
	      case 3:
	        status = 'Away';
	        break;
	    }
	    data.Status = status;
	  }

	  data.Mobile = 'none';
	  if (data.Devices.length > 0) {
	    data.Mobile = 'inline-block';
	  }

	  var disabled = data.Disabled !== 'none' && data.Disabled !== '0' ? true : false;
	  if (disabled && data.Devices.length === 0) {
	    data.Disabled = 'inline-block; background:url(\'images/Lock.png\') no-repeat; ';
	  } else {
	    data.Disabled = 'none';
	  }

	  var size = window.devicePixelRatio > 1 ? 600 : 300;
	  var image = core.operatorImage(data.ID, data.Email, data.Image, size);

	  var html = '<div class="cell-inner" data-id="' + data.ID + '"> \
	  <div class="cell-left"> \
	    <div class="image" style="background: url(' + image + ') no-repeat; background-size: 60px auto; width: 60px; height: 60px"></div> \
	  </div> \
	  <div class="cell-main"> \
	    <div class="cell-heading name">' + data.Firstname + ' ' + data.Lastname + '</div> \
	    <span class="cell-details department">' + data.Department + '</span> \
	    <span class="cell-details status">' + data.Status + '</span> \
	    <span class="disabled" title="Account Disabled" style="width:22px; height:22px; display:inline-block; position:absolute; bottom:10px; right:30px; opacity:0.3; display:' + data.Disabled + '"></span> \
	    <span class="sprite Smartphone" title="Logged in with Mobile App" style="position:absolute; bottom:10px; right:25px; opacity:0.5; display:' + data.Mobile + '"></span> \
	  </div> \
	</div>';

	  return html;
	}

	function initAccountsGridEvents() {

	  if (accountsGrid === undefined) {

	    var groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();
	    accountsDataView = new Slick.Data.DataView({
	      groupItemMetadataProvider: groupItemMetadataProvider
	    });

	    accountsGrid = new Slick.Grid('.accounts-grid', accountsDataView, accountsColumns, accountsOptions);
	    accountsGrid.registerPlugin(groupItemMetadataProvider);
	    accountsGrid.setSelectionModel(new Slick.RowSelectionModel());

	    accountsGrid.onSelectedRowsChanged.subscribe(function () {
	      var rows = accountsGrid.getSelectedRows();
	      var account = accountsDataView.getItem(rows);

	      if (account !== undefined) {

	        var storedAccounts = storage.get('accounts');
	        $.each(storedAccounts, function (key, value) {
	          if (parseInt(account.ID, 10) === parseInt(value.ID, 10)) {
	            account = value;
	          }
	        });

	        showAccount(account);
	        accountsGrid.setSelectedRows([]);
	        accountsGrid.resetActiveCell();
	      }
	    });

	    accountsGrid.onSort.subscribe(function (e, args) {
	      var cols = args.sortCols;
	      accountsDataView.sort(function (dataRow1, dataRow2) {
	        for (var i = 0, l = cols.length; i < l; i++) {
	          var field = cols[i].sortCol.field;
	          var sign = cols[i].sortAsc ? 1 : -1;
	          var value1 = dataRow1[field];
	          var value2 = dataRow2[field];
	          var result = (value1 == value2 ? 0 : value1 > value2 ? 1 : -1) * sign;
	          if (result !== 0) {
	            return result;
	          }
	        }
	        return 0;
	      });
	      accountsGrid.invalidate();
	      accountsGrid.render();
	    });

	    accountsDataView.onRowCountChanged.subscribe(function () {
	      accountsGrid.updateRowCount();
	      accountsGrid.render();
	    });

	    accountsDataView.onRowsChanged.subscribe(function (e, args) {
	      accountsGrid.invalidateRows(args.rows);
	      accountsGrid.render();
	    });
	  }
	}

	function updateAccountsGrid(accounts, override) {
	  override = override !== undefined ? override : false;

	  // Initialise Grid
	  initAccountsGridEvents();

	  function displayAccountsGrid() {

	    $('#account-details .details').css('background', 'none');

	    // Refresh Data View
	    accountsDataView.beginUpdate();
	    accountsDataView.setItems(accounts, 'ID');
	    accountsDataView.endUpdate();
	  }

	  // Preload Images
	  var loaded = [];
	  if (override) {
	    displayAccountsGrid();
	    $(document).trigger('LiveHelp.AccountsCompleted');
	  } else if (loaded.length != accounts.length) {
	    var size = window.devicePixelRatio > 1 ? 600 : 300;
	    $.each(accounts, function (key, account) {
	      if (account.Image === undefined) {
	        account.Image = core.operatorImage(account.ID, account.Email, false, size);
	        $('<img />').load(function () {
	          loaded.push(account.ID);
	          if (loaded.length == accounts.length) {
	            displayAccountsGrid();
	            $(document).trigger('LiveHelp.AccountsOpenLoaded');
	          }
	        }).attr('src', account.Image);
	      } else {
	        override = true;
	      }
	    });

	    if (override) {
	      displayAccountsGrid();
	      $(document).trigger('LiveHelp.AccountsOpenLoaded');
	    }
	  } else {
	    $(document).trigger('LiveHelp.AccountsCompleted');
	  }
	}

	function initAccountsGrid(showGrid, callback, _error) {

	  if (core.config.session.length > 0) {

	    // Web Service URL / Data
	    var storedAccounts = storage.get('accounts');
	    var storedLastUpdated = lastUpdatedAccount(storedAccounts);
	    var cached = storedLastUpdated.toString('yyyy-MM-dd HH:mm:ss');
	    var post = { 'Cached': cached };

	    if (storedAccounts.length > 0 && $('#account-details').css('display') != 'none' && !accountsLoaded) {
	      if (showGrid !== undefined && showGrid === true) {
	        updateAccountsGrid(storedAccounts, true);
	        accountsLoaded = true;
	      }
	    } else {
	      var rows = $('.accounts-grid .cell-inner');
	      $.each(rows, function (key, row) {
	        var id = $(row).data('id');
	        row = $(row);

	        if (accounts) {
	          $.each(accounts, function (key, account) {
	            var status = 'Offline';
	            if (id === parseInt(account.ID, 10)) {
	              // Status Mode
	              switch (parseInt(account.Status, 10)) {
	                case 1:
	                  status = 'Online';
	                  break;
	                case 2:
	                  status = 'Be Right Back';
	                  break;
	                case 3:
	                  status = 'Away';
	                  break;
	              }
	              row.find('.cell-details.name').text(account.Firstname + ' ' + account.Lastname);
	              row.find('.cell-details.department').text(account.Department);
	              row.find('.cell-details.status').text(status);
	              return;
	            }
	          });
	        }
	      });
	    }

	    $(document).trigger('LiveHelp.AccountsOpened');

	    // Accounts AJAX / Grid
	    api.apiRequest({
	      url: api.apiEndpoint.operators,
	      data: post,
	      timeout: 180000,
	      success: function success(data) {
	        // Accounts JSON
	        if (data.Operators !== undefined && data.Operators.Operator !== undefined) {
	          accounts = data.Operators.Operator;

	          storeAccounts(accounts);
	          $(document).trigger('LiveHelp.AccountsUpdated', [accounts]);

	          if (callback) {
	            callback();
	          }

	          if (showGrid !== undefined && showGrid === true) {
	            showAccountsGrid(accounts);
	          } else {
	            $(document).trigger('LiveHelp.AccountsCompleted');
	          }
	        }
	      },
	      error: function error(xhr, textStatus, thrownError) {
	        if (_error) {
	          _error(xhr, textStatus, thrownError);
	        }
	      }
	    });
	  }
	}

	function closeAccountDetails() {
	  var account = $('#account-details');
	  var save = account.find('.account.button-toolbar.save');
	  var edit = account.find('.account.button-toolbar.edit');
	  var heading = account.find('.header:not(.account)').text();
	  var height = save.height();
	  var id = parseInt(account.find('.details #AccountID').val(), 10);

	  if (id.length > 0) {
	    var exists = _.find(unsavedImages, function (value) {
	      return value.id === id;
	    });
	    if (exists !== undefined) {
	      resetAccountImage(exists);
	    }
	  }

	  account.removeClass('edit add');
	  if (heading === 'Add Account' || edit.filter(':visible').length > 0) {
	    showAccounts();
	    return;
	  }

	  account.find('.tagsinput .tag').addClass('disabled');
	  account.find('.tagsinput-add-container').hide();
	  account.find('.LiveHelpInput, .password').hide();
	  account.find('.value, .account.button-toolbar.edit, .label.twofactor').fadeIn();
	  save.hide().css('bottom', -height + 'px');
	  edit.fadeIn().animate({ bottom: '15px' }, 250, 'easeInOutBack');
	}

	var accountSavingCallback = function accountSavingCallback() {
	  // Show Progress
	  var dialog = $('.account.dialog');
	  dialog.css('height', '90px');
	  dialog.find('.progressring').show();
	  dialog.find('.title').text('Saving Account');
	  dialog.find('.description').text('One moment while your account is saved.');
	  dialog.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	};

	var accountSaveErrorCallback = function accountSaveErrorCallback(error) {
	  // Account Error
	  var dialog = $('.account.dialog');
	  var title = 'Error Saving Account';
	  var description = 'An error occurred while saving your account.  Please contact technical support.';

	  if (error !== false) {
	    title = error.title;
	    description = error.description;
	  }

	  dialog.css('height', '120px');
	  dialog.find('.progressring').hide();
	  dialog.find('.title').text(title);
	  dialog.find('.description').text(description);

	  // Hide Progress
	  dialog.delay(2000).animate({ bottom: -dialog.height() }, 250, 'easeInOutBack');
	};

	function saveAccount() {

	  var storedAccounts = storage.get('accounts');
	  var storedLastUpdated = lastUpdatedAccount(storedAccounts);
	  var disabled = $('#AccountStatusEnable').is(':checked') ? 0 : -1;
	  var account = {
	    ID: $('#AccountID').val(),
	    User: $('#AccountUsername').val(),
	    Firstname: $('#AccountFirstname').val(),
	    Lastname: $('#AccountLastname').val(),
	    Email: $('#AccountEmail').val(),
	    Department: $('#AccountDepartment').val(),
	    Privilege: $('#AccountAccessLevel').val(),
	    NewPassword: $('#AccountPassword').val(),
	    Disabled: disabled,
	    Cached: new moment(storedLastUpdated.toString(), 'YYYY-MM-DD HH:mm:ss').toDate()
	  };

	  // Save Account Validation
	  validateAccount(false);
	  if ($('#account-details').find('.InputError.CrossSmall').length > 0) {
	    return;
	  }

	  // Show Progress
	  accountSavingCallback();

	  function saveCompleted(data, updatedImage) {
	    if (data.Operators !== null && data.Operators !== undefined && data.Operators.Operator !== undefined) {

	      var account = false;
	      if (!updatedImage) {
	        accounts = data.Operators.Operator;
	        account = _.find(accounts, function (value) {
	          return core.config.operator.id === parseInt(value.ID, 10);
	        });
	        storeAccounts(accounts);
	      } else {
	        var saved = _.find(data.Operators.Operator, function (value) {
	          return core.config.operator.id === parseInt(value.ID, 10);
	        });
	        account = _.find(accounts, function (value) {
	          return core.config.operator.id === parseInt(value.ID, 10);
	        });
	        if (account !== undefined && saved !== undefined) {
	          saved.Image = account.Image;
	        }
	        accounts = data.Operators.Operator;
	        storeAccounts(accounts);
	      }

	      $(document).trigger('LiveHelp.AccountsUpdated', [accounts]);

	      var newAccount = false;
	      $.each(storedAccounts, function (key, account) {
	        var storedID = parseInt(account.ID, 10);
	        var exists = false;

	        $.each(accounts, function (key, value) {
	          var ID = parseInt(value.ID, 10);
	          if (storedID === ID) {
	            exists = true;
	          }
	        });

	        if (!exists) {
	          newAccount = true;
	        }
	      });

	      if (!updatedImage) {
	        var lastUpdated = lastUpdatedAccount(accounts);
	        if (lastUpdated > storedLastUpdated || newAccount) {
	          updateAccountsGrid(accounts, true);
	        } else if (accountsGrid !== undefined) {
	          updateAccountsGrid(accounts, true);
	          accountsGrid.invalidate();
	          $(document).trigger('LiveHelp.AccountsCompleted');
	        }
	      }

	      // Show Updated Account
	      if (account !== false) {
	        $.each(accounts, function (index, value) {
	          if (value.ID === account.ID) {
	            // Show Account
	            showAccount(value);

	            // Update Operator Image and Name
	            var image = core.operatorGravatar(value.Image, value.Email);
	            core.config.operator.image = image;
	            $(document).trigger('LiveHelp.UpdateOperatorImage');
	            $('.operator .name').text(value.Firstname + ' ' + value.Lastname);
	            return false;
	          }
	        });
	      }
	      closeAccountDetails();

	      $(document).trigger('LiveHelp.AccountSaveCompleted');

	      // Hide Progress
	      var dialog = $('.account.dialog');
	      dialog.animate({ bottom: -dialog.height() }, 250, 'easeInOutBack', function () {
	        $(this).hide();
	      });
	    } else {
	      // Account Error
	      var error = data.error !== undefined ? data.error : false;
	      accountSaveErrorCallback(error);
	    }
	  }

	  // Save Account
	  if (accountFiles !== undefined) {

	    // Remove Unsaved
	    unsavedImages = _.reject(unsavedImages, function (value) {
	      return value.id === parseInt(account.ID, 10);
	    });

	    // Save Account / Image Upload
	    $('#account-upload').fileupload('send', {
	      headers: { 'Authentication': 'Token signature="' + core.config.session + '", version="5"', 'Accept': 'application/json' },
	      formData: account,
	      files: accountFiles
	    }).success(function (data) {
	      // Account Saved
	      saveCompleted(data, true);
	    }).error(function () {
	      // TODO Account Error
	      //var error = (data.error !== undefined) ? data.error : false;
	      //accountSaveErrorCallback(error);
	    });
	    accountFiles = undefined;
	  } else {
	    // Save Account
	    api.apiRequest({
	      url: api.apiEndpoint.operators,
	      data: account,
	      success: function success(data) {
	        saveCompleted(data, false);
	      }
	    });
	  }
	}

	function showAddAccount() {
	  $('.accounts-grid').fadeOut();

	  var account = $('#account-details');
	  var save = account.find('.account.button-toolbar.save');
	  var height = save.height();
	  var toolbars = account.find('.account.button-toolbar.edit, .account.button-toolbar.add');

	  $('#account-details').addClass('add');
	  account.find('.header').text('Add Account');
	  account.find('.back, .back-background').fadeIn();
	  account.find('.details').css('bottom', '25px');
	  account.find('.value, .label.devices').hide();
	  account.find('input, select, .password').val('').fadeIn();
	  account.find('.scroll, .account.button-toolbar.save, .LiveHelpInput, #account-upload, .upload, #account-dropzone').fadeIn();
	  account.find('#AccountStatusEnable').prop('checked', 'checked');
	  account.find('.InputError').removeClass('TickSmall CrossSmall');

	  toolbars.css('bottom', -height + 'px').hide();
	  save.fadeIn().animate({ bottom: '15px' }, 250, 'easeInOutBack');

	  $(document).trigger('LiveHelp.ShowAccountLoaded');
	}

	function validateAccount(password) {
	  var account = $('#account-details .scroll');
	  var required = account.find('input, select, .password').filter(':not(#AccountUsername, #AccountEmail, #AccountPasswordConfirm)');

	  if (!password) {
	    required = account.find('input, select').filter(':not(#AccountUsername, #AccountEmail, #AccountPasswordConfirm, #AccountPassword)');
	  }

	  // Validate Required Fields
	  $.each(required, function (key, value) {
	    var id = $(value).attr('id');
	    validate.field($(value), '#' + id + 'Error');
	  });

	  // Validate Username
	  var element = $('#AccountUsername');
	  var id = element.attr('id');

	  validate.username(element, '#' + id + 'Error');

	  // Validate Email
	  element = $('#AccountEmail');
	  id = element.attr('id');
	  validate.email(element, '#' + id + 'Error', false);

	  // Validate Password
	  var passwordfield = $('#AccountPassword');
	  var confirmpassword = $('#AccountPasswordConfirm');

	  if (!password) {
	    if (passwordfield.val().length === 0 && confirmpassword.val().length === 0) {
	      return;
	    }
	  }
	  id = confirmpassword.attr('id');
	  validate.password(confirmpassword, passwordfield.val(), '#' + id + 'Error');
	}

	var unsavedImages = [];

	function updateOperatorImage() {
	  var image = core.config.operator.image;
	  var photo = $('.operator .photo');

	  if (image) {
	    if (image.indexOf('data:image/png;base64,') !== -1) {
	      photo.css({ 'background': 'url(' + core.config.operator.image + ') no-repeat' });
	    } else if (image.indexOf('https://') > -1) {
	      image.replace('&d=' + core.address + 'images/User.png', '&d=404');
	      $('<img/>').one('error', function () {
	        photo.css({ 'background': 'url(./images/Placeholder.png) no-repeat' });
	      }).one('load', function () {
	        var image = $(this).attr('src');
	        photo.css({ 'background': 'url(' + image + ') no-repeat' });
	      }).attr('src', image);
	    }
	  }
	}

	exports.updateAccountImage = function (id, image, dropped) {

	  var exists = _.find(unsavedImages, function (value) {
	    return value.id === id;
	  });
	  var upload = $('#account-upload');
	  var profile = upload.find('.image');

	  if (dropped && exists === undefined) {
	    var background = profile.css('background-image');
	    var unsavedImage = background.match(/\b(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/ig);

	    if (unsavedImage !== null && unsavedImage.length > 0) {
	      unsavedImage = unsavedImage[0];
	      unsavedImages.push({ id: id, image: unsavedImage });
	    }
	  }

	  var stored = _.find(accounts, function (value) {
	    return id === parseInt(value.ID, 10);
	  });
	  if (stored !== undefined) {
	    stored.Image = image;
	    storeAccounts(accounts);
	  }

	  profile.css({
	    'background': 'url(' + image + ') no-repeat',
	    'opacity': 1.0,
	    'width': '100px',
	    'height': '100px',
	    'padding': 0,
	    'background-size': '100px 100px'
	  });

	  upload.css({ 'border': 'none', 'border-radius': 0, 'background': 'transparent' }).fadeIn();
	  $('.upload').hide();

	  if (dropped) {
	    var online = $('.operators.list .visitor[data-id=' + id + '] .image');
	    if (online.length > 0) {
	      online.css({ 'background': 'url(' + image + ') no-repeat', 'background-size': '40px 40px' });
	    }

	    var account = $('.accounts-grid .slick-row .cell-inner[data-id=' + id + '] .image');
	    if (account.length > 0) {
	      account.css({ 'background': 'url(' + image + ') no-repeat', 'background-size': '60px 60px' });
	    }

	    if (core.config.operator.id === id) {
	      updateOperatorImage(image);
	    }
	  }
	};

	function resetAccountImage(unsaved) {
	  var online = $('.operators.list .visitor[data-id=' + unsaved.id + '] .image');
	  var image = unsaved.image;

	  var stored = _.find(accounts, function (value) {
	    return unsaved.id === parseInt(value.ID, 10);
	  });
	  if (stored !== undefined) {
	    stored.Image = image;
	    storeAccounts(accounts);
	  }

	  $('#account-upload .image').css({ 'background': 'url(' + image + ') no-repeat', 'background-size': '100px 100px' });

	  if (online.length > 0) {
	    online.css({ 'background': 'url(' + image + ') no-repeat', 'background-size': '40px 40px' });
	  }

	  var account = $('.accounts-grid .slick-row .cell-inner[data-id=' + unsaved.id + '] .image');
	  if (account.length > 0) {
	    account.css({ 'background': 'url(' + image + ') no-repeat', 'background-size': '60px 60px' });
	  }

	  if (core.config.operator.id === unsaved.id) {
	    updateOperatorImage(image);
	  }
	}

	var accountFiles;
	var accountAddingCallback = function accountAddingCallback() {
	  // Show Progress
	  var dialog = $('.account.dialog');
	  dialog.css('height', '90px');
	  dialog.find('.progressring').show();
	  dialog.find('.title').text('Adding Account');
	  dialog.find('.description').text('One moment while you account is created.');
	  dialog.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	};
	var accountAddErrorCallback = function accountAddErrorCallback() {
	  // Account Error
	  var dialog = $('.account.dialog');
	  dialog.css('height', '120px');
	  dialog.find('.progressring').hide();
	  dialog.find('.title').text('Error Adding Account');
	  dialog.find('.description').text('An error occurred while adding your account.  Please contact technical support.');
	};

	function addAccount() {

	  var account = $('#account-details');
	  var disabled = account.find('#AccountStatusEnable').is(':checked') ? 0 : -1;
	  var post = {
	    User: account.find('#AccountUsername').val(),
	    Firstname: account.find('#AccountFirstname').val(),
	    Lastname: account.find('#AccountLastname').val(),
	    Email: account.find('#AccountEmail').val(),
	    Department: account.find('#AccountDepartment').val(),
	    NewPassword: account.find('#AccountPassword').val(),
	    Privilege: account.find('#AccountAccessLevel').val(),
	    Disabled: disabled
	  };

	  // Add Account Validation
	  validateAccount(true);
	  if (account.find('.InputError.CrossSmall').length > 0) {
	    return;
	  }

	  // Adding Account
	  accountAddingCallback();

	  function accountAdded(data) {
	    if (data.Operators !== undefined && data.Operators.Operator !== undefined) {
	      // Operators
	      var operators = data.Operators.Operator;
	      showAccountsGrid(operators);
	      showAccounts();

	      // Update Image
	      var id = 0;
	      var image = false;
	      var email = '';

	      $.each(operators, function (key, value) {
	        if (value.Username === post.User) {
	          id = parseInt(value.ID, 10);
	          email = value.Email;
	          image = value.Image;
	          return false;
	        }
	      });

	      if (id > 0) {
	        $('#account-details .cell-inner[data-id="' + id + '"] img').attr('src', core.operatorImage(id, email, image, 60));
	      }
	    } else {
	      // Add Account Error
	      accountAddErrorCallback();
	    }

	    $(document).trigger('LiveHelp.AccountAddCompleted');

	    // Hide Progress
	    var dialog = $('.account.dialog');
	    dialog.animate({ bottom: -dialog.height() }, 250, 'easeInOutBack', function () {
	      $(this).hide();
	    });
	  }

	  // Add Account without Image Upload
	  if (accountFiles !== undefined) {
	    // Add Account / Image Upload
	    $('#account-upload').fileupload('send', {
	      headers: { 'Authentication': 'Token signature="' + core.config.session + '", version="5"', 'Accept': 'application/json' },
	      formData: post,
	      files: accountFiles
	    }).success(function (data) {
	      // Account Added
	      accountAdded(data);
	    }).error(function () {
	      // Account Error
	      accountAddErrorCallback();
	    });
	    accountFiles = undefined;
	  } else {
	    // Add Account
	    api.apiRequest({
	      url: api.apiEndpoint.operators,
	      data: post,
	      success: function success(data) {
	        // Account Added
	        accountAdded(data);
	      },
	      error: function error() {
	        // Account Error
	        accountAddErrorCallback();
	      }
	    });
	  }
	}

	function accountDeleted(data) {
	  if (data.Operators !== null && data.Operators !== undefined && data.Operators.Operator !== undefined) {

	    // Account Deleted
	    var operators = data.Operators.Operator;
	    showAccountsGrid(operators, true);
	    showAccounts();

	    // Hide Progress
	    var dialog = $('#account-details .confirm-delete.dialog');
	    dialog.delay(2000).hide().animate({ bottom: -90 }, 250, 'easeInOutBack');
	  } else {
	    // Account Error
	    accountDeletedErrorCallback();
	  }
	}

	var accountDeletedCallback = function accountDeletedCallback(data) {
	  // Account Deleted
	  accountDeleted(data);
	  $(document).trigger('LiveHelp.AccountDeleted');
	};
	var accountDeletedErrorCallback = function accountDeletedErrorCallback() {
	  // Account Error
	  var dialog = $('#account-details .confirm-delete.dialog');
	  dialog.find('.progressring').hide();
	  dialog.find('.title').text('Error Deleting Account');
	  dialog.find('.description').text('An error occurred while deleting your account.  Please contact technical support.');

	  // Hide Progress
	  dialog.delay(2000).hide().animate({ bottom: -90 }, 250, 'easeInOutBack');
	};

	var deleteAccountClickedCallback = function deleteAccountClickedCallback() {
	  var confirm = $('#account-details .confirm-delete.dialog');
	  confirm.find('.progressring').hide();
	  confirm.find('.buttons').show();
	  confirm.find('.title').text('Confirm Account Delete');
	  confirm.find('.description').text('Are you sure that you wish to delete this account?');
	  confirm.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	};

	var deleteAccountConfirmClickedCallback = function deleteAccountConfirmClickedCallback() {
	  // Show Progress
	  var confirm = $('#account-details .confirm-delete.dialog');
	  confirm.find('.buttons').fadeOut();
	  confirm.find('.progressring').show();
	  confirm.find('.progressring img').css({ opacity: 0.5 });

	  // Delete Account
	  deleteAccount();
	};

	function deleteAccount() {
	  var account = { ID: $('#AccountID').val() };

	  // Delete Account
	  api.apiRequest({
	    url: api.apiEndpoint.operators,
	    data: account,
	    success: accountDeletedCallback,
	    error: accountDeletedErrorCallback
	  });
	}

	function refreshAccounts(status) {
	  switch (status) {
	    case 'Online':
	      status = 1;
	      break;
	    case 'BRB':
	      status = 2;
	      break;
	    case 'Away':
	      status = 3;
	      break;
	    default:
	      status = 0;
	      break;
	  }
	  $.each(accounts, function (key, account) {
	    if (core.config.operator.id === parseInt(account.ID, 10)) {
	      account.Status = status;
	    }
	  });
	}

	var accountsScrollTop = 0;

	function showAccount(data) {
	  // Save Scroll
	  var viewport = $('.accounts-grid .slick-viewport');
	  if (viewport.is(':visible')) {
	    accountsScrollTop = viewport.scrollTop();
	  }
	  $('.accounts-grid').fadeOut();

	  // Load Departments
	  updateDepartment(false, false, false);

	  $(document).trigger('LiveHelp.AccountLoaded', data);

	  // Status Button
	  var button = $('#account-details .details .btn-group');
	  var status = 'Offline';

	  // Access Level
	  if (core.config.operator.access >= 2) {
	    button.hide();
	  } else {
	    button.css('display', 'inline-block');
	  }

	  data.status = parseInt(data.Status, 10);
	  switch (data.status) {
	    case 1:
	      status = 'Online';
	      break;
	    case 2:
	      status = 'Be Right Back';
	      break;
	    case 3:
	      status = 'Away';
	      break;
	  }
	  button.find('.status').text(status);
	  if (data.status !== 1) {
	    button.find('.btn').addClass('disabled');
	  } else {
	    button.find('.btn').removeClass('disabled');
	  }
	  button.find('.dropdown-menu.statusmode li a').on('click', function () {

	    // Show Dialog
	    var dialog = $('.account.dialog');
	    dialog.css('height', '90px');
	    dialog.find('.progressring').show();
	    dialog.find('.title').text('Updating Operator Status Mode');
	    dialog.find('.description').text('One moment while the operator status mode is updated.');
	    dialog.show().animate({ bottom: 0 }, 250, 'easeInOutBack');

	    // Update Status
	    var id = $('#account-details .details #AccountID').val();
	    var status = $(this).attr('class');

	    core.updateUsers(status, id, function () {
	      // Accounts
	      refreshAccounts(status);

	      // Update Button
	      status = status === 'BRB' ? 'Be Right Back' : status;
	      $('#account-details .dropdown-toggle .status').text(status);

	      // Hide Progress
	      dialog.delay(1000).animate({ bottom: -90 }, 250, 'easeInOutBack');
	    });
	  });

	  storage.set('account', data);

	  // Update Account Details
	  var account = $('#account-details');
	  account.find('.details').css('background', 'none');
	  account.find('.header').hide();
	  account.find('.header.account').text(data.Firstname + ' ' + data.Lastname).show();
	  account.find('.back, .back-background').fadeIn();

	  var size = window.devicePixelRatio > 1 ? 600 : 300;
	  var image = core.operatorImage(data.ID, data.Email, data.Image, size);
	  if (data.Image !== undefined && (data.Image.indexOf('https://') > -1 || data.Image.indexOf('data:image/png;base64,') > -1)) {
	    image = data.Image;
	  }

	  var accounts = __webpack_require__(400);
	  accounts.updateAccountImage(data.ID, image, false);

	  account.find('#AccountID').val(data.ID);
	  account.find('.username.value').text(data.Username);
	  account.find('#AccountUsername').val(data.Username);
	  account.find('.firstname.value').text(data.Firstname);
	  account.find('#AccountFirstname').val(data.Firstname);
	  account.find('.lastname.value').text(data.Lastname);
	  account.find('#AccountLastname').val(data.Lastname);
	  account.find('.email.value').text(data.Email);
	  account.find('#AccountEmail').val(data.Email);

	  var department = account.find('.department.value .tagsinput');
	  var departments = data.Department.split(';');

	  department.find('.tag').remove();
	  $.each(departments, function (key, value) {
	    if (value.length > 0) {
	      value = $.trim(value);
	      var tag = '<span class="tag disabled" data-department="' + value + '"><span>' + value + '</span><a class="tagsinput-remove-link"></a></span>';
	      $(tag).prependTo(department);
	    }
	  });

	  if (department.find('.tag').length > 0) {
	    account.find('.department.value .none').hide();
	    department.show();
	  } else {
	    department.hide();
	    account.find('.department.value .none').show();
	  }

	  account.find('#AccountDepartment').val(data.Department);
	  account.find('.tagsinput .tagsinput-add-container').hide();

	  var access = parseInt(data.Privilege, 10);
	  account.find('#AccountAccessLevel').val(access < 0 ? 0 : access);

	  access = convert.accessLevel(data.Privilege);
	  account.find('.accesslevel.value').text(access);

	  var disabled = parseInt(data.Disabled, 10);
	  var accountstatus = 'Disabled';

	  var enable = account.find('#AccountStatusEnable');
	  var disable = account.find('#AccountStatusDisable');

	  if (disabled === 0) {
	    disable.prop('checked', '');
	    enable.prop('checked', 'checked');
	    accountstatus = 'Enabled';
	  } else {
	    enable.prop('checked', '');
	    disable.prop('checked', 'checked');
	    accountstatus = 'Disabled';
	  }
	  account.find('.accountstatus.value').text(accountstatus);

	  // Devices
	  var html = '';
	  if (data.Devices !== undefined) {
	    $.each(data.Devices, function (key, value) {
	      html += '<div class="device value">' + value.Device + ' - ' + value.OS + '</div>';
	    });
	  }

	  if (html.length > 0) {
	    account.find('.devices.value').html(html);
	    account.find('.devices.label').show();
	  } else {
	    account.find('.devices.value').html('');
	    account.find('.devices.label').hide();
	  }

	  account.find('.details').css('bottom', '25px');
	  account.find('.value').show();

	  // Two Factor Authentication
	  var twofactor = account.find('.twofactor.label, .twofactor.value');
	  if (data.TwoFactor !== undefined && twofactor.length > 0) {

	    status = 'Disabled', button = 'Enable';
	    if (data.TwoFactor !== false) {
	      status = 'Enabled';
	      button = 'Disable';
	    }
	    account.find('.twofactor.value .status').text(status);
	    account.find('.twofactor.value .btn').text(button);

	    account.find('.twofactor.label').css('display', 'inline');
	    account.find('.twofactor.value').show();
	  } else {
	    twofactor.hide();
	  }

	  account.find('.LiveHelpInput, .password, .account.button-toolbar.save').hide();
	  account.find('.scroll').fadeIn();

	  if (parseInt(data.ID, 10) === core.config.operator.id || core.config.operator.access < 2) {
	    var edit = account.find('.account.button-toolbar.edit');
	    var height = edit.height();
	    var toolbars = account.find('.account.button-toolbar.add, .account.button-toolbar.save');

	    toolbars.css('bottom', -height + 'px').hide();
	    edit.fadeIn().animate({ bottom: '15px' }, 250, 'easeInOutBack');
	  }
	}

	function updateDepartment(data, complete, autoOpen) {
	  var dialog = $('#account-details .departments.dialog');
	  var element = dialog.find('.departments.list');
	  var post = {};

	  if (data !== undefined && data !== false) {
	    post = { 'Data': $.toJSON(data) };
	  }

	  if (element.find('.department').length > 0 && parseInt(dialog.css('bottom'), 10) < 0 && autoOpen === undefined) {
	    dialog.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	  }

	  // Department HTTP Request
	  api.apiRequest({
	    url: api.apiEndpoint.departments,
	    data: post,
	    success: function success(data) {
	      // Settings JSON
	      if (data !== undefined) {
	        element.find('.department').remove();
	        $.each(data, function (key, department) {
	          $('<div class="department item" data-id="' + department.id + '" data-status="' + department.hidden + '"><div class="name">' + department.name + '</div><div class="edit button sprite Edit" title="Edit Department"></div><div class="email">' + department.email + '</div></div>').appendTo(element);
	        });
	      }
	      if (complete) {
	        complete();
	      }
	    }
	  });
	}

	var accountsLoaded = false;

	function lastUpdatedAccount(accounts) {
	  var lastUpdated = new Date(false);
	  if (accounts.length) {
	    $.each(accounts, function (key, value) {
	      var updated = new moment(value.Updated, 'YYYY-MM-DD HH:mm:ss').toDate();
	      if (!lastUpdated || updated > lastUpdated) {
	        lastUpdated = updated;
	      }
	    });
	  }
	  return lastUpdated;
	}

	function storeAccounts(accounts) {

	  if (accounts.length > 0) {

	    var existing = storage.get('accounts');
	    var newaccounts = [];
	    var image = false;
	    var exists = false;

	    $.each(accounts, function (key, value) {
	      image = false;
	      if (existing.length) {
	        exists = _.find(existing, function (account) {
	          return account.ID === value.ID && new moment(value.Updated, 'YYYY-MM-DD HH:mm:ss').toDate() >= new moment(account.Updated, 'YYYY-MM-DD HH:mm:ss').toDate();
	        });
	        if (exists !== undefined) {
	          image = exists.Image;
	        }
	      } else if (value.Image && value.Image.length) {
	        image = value.Image;
	      }

	      if (image) {
	        if (image.indexOf('https://') === -1 && image.indexOf('data:image/png;base64,') === -1) {
	          image = 'data:image/png;base64,' + image;
	        }
	        value.Image = image;
	      }
	      newaccounts.push(value);
	    });

	    storage.set('accounts', newaccounts);
	  }
	}

	$(document).on('LiveHelp.OpenAccounts', function () {
	  openAccounts();
	});

	$(document).on('LiveHelp.RefreshAccounts', function (event, status) {
	  refreshAccounts(status);
	});

	$(document).on('LiveHelp.SettingsInitialised', function () {
	  // Accounts
	  initAccountsGrid(false, function () {}, function (xhr, textStatus, thrownError) {
	    core.signInError(xhr, textStatus, thrownError);
	  });
	});

	$(document).on('LiveHelp.UpdateOperatorImage', function () {
	  updateOperatorImage();
	});

	// Document Ready
	$(document).ready(function () {

	  // Accounts Back Button
	  $('#account-details .back').click(function () {
	    // Close Edit Details
	    if ($('#account-details.edit').length) {
	      closeAccountDetails();
	    }
	    showAccounts();
	  });

	  // Drag / Drop Events
	  $(document).bind('dragover', function (e) {
	    var targets = $('#account-dropzone, #account-upload');
	    var dropZone = $('#account-upload');
	    var timeout = window.dropZoneTimeout;

	    if (!timeout) {
	      dropZone.addClass('in');
	    } else {
	      clearTimeout(timeout);
	    }
	    if ($.inArray(e.target, targets) > -1) {
	      dropZone.addClass('hover');
	    } else {
	      dropZone.removeClass('hover');
	    }
	    window.dropZoneTimeout = setTimeout(function () {
	      window.dropZoneTimeout = null;
	      dropZone.removeClass('in hover');
	    }, 100);
	  });

	  // Ignore Default Drag / Drop
	  function ignoreDrag(e) {
	    if (e.preventDefault) {
	      e.preventDefault();
	    }
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	    if (e.dataTransfer !== undefined) {
	      var allowed = $('#account-details.add, #account-details.edit').length;
	      if (allowed) {
	        e.dataTransfer.dropEffect = 'copy';
	      } else {
	        e.dataTransfer.dropEffect = 'none';
	      }
	    }
	    return false;
	  }

	  // Drag Over Event
	  $(document).bind('drop dragover', function (e) {
	    ignoreDrag(e.originalEvent);
	  });

	  // Account Image Drop Event
	  $(document).bind('drop', function (e) {
	    ignoreDrag(e.originalEvent);

	    var allowed = $('#account-details.add, #account-details.edit').length;
	    if (allowed) {
	      var dt = e.originalEvent.dataTransfer;
	      if (dt.files.length > 0) {
	        var file = dt.files[0];
	        var reader = new FileReader();

	        reader.onload = function (e) {
	          var id = $('#account-details .details #AccountID').val();
	          if (id.length > 0) {
	            id = parseInt(id, 10);
	          } else {
	            id = -1;
	          }
	          var accounts = __webpack_require__(400);
	          accounts.updateAccountImage(id, e.target.result, true);
	        };
	        accountFiles = file;
	        reader.readAsDataURL(file);
	      }
	    }
	  });

	  // Resize Grid
	  $(window).resize(function () {
	    if (accountsGrid !== undefined) {
	      accountsGrid.resizeCanvas();
	    }
	  });

	  $(document).on('LiveHelp.ShowAccounts', function () {
	    closeAccount();
	  });

	  $(document).on('LiveHelp.CloseAccount', function () {
	    closeAccount();
	  });

	  $(document).on('LiveHelp.AccountsUpdated', function (event, accounts) {
	    var operators = $('.operators.list .visitor');
	    $.each(operators, function (key, value) {
	      var operator = $(value);
	      var id = operator.data('id');

	      $.each(accounts, function (key, account) {
	        if (parseInt(account.ID, 10) == id) {
	          operator.find('.name').text(account.Firstname);
	          operator.find('.department').text(account.Department);

	          var access = convert.accessLevel(account.Privilege);
	          operator.find('.accesslevel').text(access);
	        }
	      });
	    });
	  });

	  // Account Upload
	  $('#account-upload').fileupload({
	    url: core.server.length > 0 ? core.protocol + core.server + core.directoryPath + api.apiPath + api.apiEndpoint.operators : core.directoryPath + api.apiPath + api.apiEndpoint.operators,
	    headers: { 'Authentication': 'Token signature="' + core.config.session + '", version="5"', 'Accept': 'application/json' },
	    dataType: 'json',
	    singleFileUploads: true,
	    dropZone: $('#account-dropzone'),
	    submit: function submit() {
	      return false;
	    }
	  });

	  $('.slider.accounts #account-upload input[type=file]').hover(function () {
	    $(this).parent().find('.edit').addClass('hover');
	  }, function () {
	    $(this).parent().find('.edit').removeClass('hover');
	  });

	  $('#account-upload input[type=file]').on('change', function (e) {
	    accountFiles = e.target.files;
	    var that = this;
	    if (that.files && that.files[0]) {
	      var reader = new FileReader();
	      reader.onload = function (e) {
	        var id = $('#account-details .details #AccountID').val();
	        if (id.length > 0) {
	          id = parseInt(id, 10);
	        } else {
	          id = -1;
	        }
	        var accounts = __webpack_require__(400);
	        accounts.updateAccountImage(id, e.target.result, true);
	      };
	      reader.readAsDataURL(that.files[0]);
	    }
	  });

	  // Account Edit Button
	  var account = $('#account-details');
	  account.find('.edit-button').click(function () {
	    var account = $('#account-details');
	    var edit = account.find('.account.button-toolbar.edit');
	    var height = account.find('.account.button-toolbar.edit').height();

	    edit.hide().css('bottom', -height + 'px');
	    account.addClass('edit');
	    account.find('.value, .label.devices, .label.twofactor, .value.department .none').hide();
	    account.find('.LiveHelpInput, .password').fadeIn();
	    account.find('.tagsinput .tag').removeClass('disabled');
	    account.find('#AccountDepartment').parent().hide();
	    account.find('.tagsinput .tagsinput-add-container').css('display', 'inline-block');
	    account.find('.value.department, .tagsinput').show();
	    account.find('.account.button-toolbar.save').fadeIn().animate({ bottom: '15px' }, 250, 'easeInOutBack');
	    account.find('.InputError').removeClass('TickSmall CrossSmall');
	  });

	  // Departments
	  var dialog = account.find('.departments.dialog');

	  account.on('click', '.tagsinput-add', function () {
	    updateDepartment(false, function () {
	      dialog.animate({ bottom: 0 }, 250, 'easeInOutBack');
	    });
	  });

	  account.on('click', '.tagsinput-remove-link', function () {
	    var tag = $(this).parent();
	    if (tag.is('.tag:not(.disabled)')) {
	      tag.remove();

	      var tags = $('#account-details .department.value .tagsinput .tag').map(function () {
	        return $(this).data('department');
	      }).get();
	      if (tags.length > 0) {
	        $('#account-details #AccountDepartment').val(tags.join('; '));
	      }
	    }
	  });

	  dialog.on('click', '.save-button', function () {
	    var status = dialog.find('#DepartmentPublic').is(':checked') ? 0 : 1;
	    var id = parseInt(dialog.find('#DepartmentID').val(), 10);
	    var name = dialog.find('#DepartmentName');
	    var email = dialog.find('#DepartmentEmail');
	    var data = {
	      name: name.val(),
	      email: email.val(),
	      status: status
	    };

	    // Validation
	    if (validate.field(name, '#DepartmentNameError') === false || validate.email(email, '#DepartmentEmailError', true) === false) {
	      return;
	    }

	    if (!isNaN(id)) {
	      $.extend(data, { id: id });
	    }

	    updateDepartment(data, function () {
	      closeEditDepartment();
	    });
	  });

	  dialog.on('click', '.delete-button', function () {
	    var id = dialog.find('#DepartmentID').val();
	    var data = { id: parseInt(id, 10) };
	    var department = $('.departments.dialog .department.item[data-id=' + id + '] .name').text();

	    updateDepartment(data, function () {

	      // Update Accounts Grid
	      $.each(accounts, function (key, account) {
	        var departments = account.Department.split('; ');
	        departments = _.reject(departments, function (value) {
	          return $.trim(value) === department;
	        });
	        account.Department = departments.join('; ');
	        accountsGrid.invalidate();
	      });

	      closeEditDepartment();
	    });
	  });

	  dialog.on('click', '.department .edit.button', function (e) {
	    var item = $(this).parent();
	    if (item.is('.department.item')) {
	      dialog.find('.title').text('Edit Department');
	      dialog.find('.description').text('Complete the details below to modify the department.');
	      dialog.find('#DepartmentID').val(item.data('id'));
	      dialog.find('#DepartmentName').val(item.find('.name').text());
	      dialog.find('#DepartmentEmail').val(item.find('.email').text());
	      if (item.data('status') === false) {
	        dialog.find('#DepartmentHidden').prop('checked', '');
	        dialog.find('#DepartmentPublic').prop('checked', 'checked');
	      } else {
	        dialog.find('#DepartmentPublic').prop('checked', '');
	        dialog.find('#DepartmentHidden').prop('checked', 'checked');
	      }

	      dialog.find('.scroll, .add.button').hide();
	      dialog.find('.department.edit, .LiveHelpInput').show();
	      dialog.find('.button-toolbar.departments').removeClass('add save').addClass('edit');
	      dialog.find('.save.button, .delete.button, .cancel.button').css({ 'display': 'inline-block', 'position': 'relative' });
	      dialog.show().animate({ height: dialog.height() - 100 }, 250, 'easeInOutBack');
	    }
	    e.stopPropagation();
	  });

	  dialog.on('click', '.add-button', function () {
	    dialog.find('.title').text('Add Department');
	    dialog.find('.description').text('Complete the details below to add a new department.');
	    dialog.find('#DepartmentID').val('');
	    dialog.find('#DepartmentName').val('');
	    dialog.find('#DepartmentEmail').val('');
	    dialog.find('#DepartmentPublic').prop('checked', 'checked');

	    dialog.find('.scroll, .add.button, .delete.button').hide();
	    dialog.find('.department.edit, .LiveHelpInput').show();
	    dialog.find('.button-toolbar.departments').removeClass('save edit').addClass('add');
	    dialog.find('.save.button').css('display', 'inline-block');
	    dialog.show().animate({ height: dialog.height() - 100 }, 250, 'easeInOutBack');
	  });

	  dialog.on('click', '.department.item', function () {
	    var department = $(this).find('.name').text();
	    var existingtags = $('#account-details .department.value .tagsinput');
	    var tags = existingtags.find('.tagsinput-add-container');

	    if (existingtags.find('.tag[data-department="' + department + '"]').length === 0) {
	      var tag = '<span class="tag" data-department="' + department + '"><span>' + department + '</span><a class="tagsinput-remove-link"></a></span>';
	      $(tag).insertBefore(tags);
	    }

	    tags = existingtags.find('.tag').map(function () {
	      return $(this).data('department');
	    }).get();
	    if (tags.length > 0) {
	      $('#account-details #AccountDepartment').val(tags.join('; '));
	    }

	    dialog.show().animate({ bottom: -dialog.height() }, 250, 'easeInOutBack');
	  });

	  function closeEditDepartment() {
	    dialog.find('.title').text('Select a department');
	    dialog.find('.description').text('Select a department to assign the department to the current operator.');

	    if (dialog.find('.edit.department.form').is(':visible')) {
	      dialog.find('.department.edit, .save.button, .delete.button').hide();
	      dialog.find('.scroll').show();
	      dialog.find('.button-toolbar.departments').removeClass('save edit').addClass('add');
	      dialog.find('.add.button').css('display', 'inline-block');
	      dialog.animate({ height: dialog.height() + 100 }, 250, 'easeInOutBack');
	    } else {
	      dialog.show().animate({ bottom: -dialog.height() }, 250, 'easeInOutBack');
	    }
	  }

	  // Departments Dialog Cancel
	  dialog.on('click', '.cancel-button', function () {
	    closeEditDepartment();
	  });

	  // Account Cancel Button
	  account.find('.edit.account.button-toolbar .cancel-button.account, .save.account.button-toolbar .cancel-button.account').click(closeAccountDetails);

	  // Account Add Button
	  account.find('.add-button.account').click(function () {
	    showAddAccount();
	  });

	  // Account Save Button
	  account.find('.save-button.account').click(function () {
	    var header = $('#account-details .header').text();
	    if (header === 'Add Account') {
	      addAccount();
	    } else {
	      saveAccount();
	    }
	  });

	  // Validate Required Fields
	  account.find('input, select, .password').filter(':not(#AccountUsername, #AccountEmail, #ConfirmPassword)').on('keydown keyup change blur', function () {
	    var id = $(this).attr('id');
	    validate.field($(this), '#' + id + 'Error');
	  });

	  // Validate Username
	  account.find('#AccountUsername').on('keydown keyup change blur', function () {
	    var id = $(this).attr('id');
	    validate.username($(this), '#' + id + 'Error');
	  });

	  // Validate Email
	  account.find('#AccountEmail').on('keydown keyup change blur', function () {
	    var id = $(this).attr('id');
	    validate.email($(this), '#' + id + 'Error', false);
	  });

	  // Validate Password
	  account.find('#AccountPasswordConfirm').on('keydown keyup change blur', function () {
	    var id = $(this).attr('id');
	    validate.password($(this), $('#AccountPassword').val(), '#' + id + 'Error');
	  });

	  // Account Delete Button
	  var confirm = account.find('.confirm-delete.dialog');
	  account.find('.button-toolbar.account .delete-button').click(function () {
	    deleteAccountClickedCallback();
	  });

	  // Confirm Delete Account Button
	  confirm.find('.delete').click(function () {
	    deleteAccountConfirmClickedCallback();
	  });

	  // Confirm Cancel Button
	  confirm.find('.cancel').click(function () {
	    confirm.animate({ bottom: '-90px' }, 250, 'easeInOutBack');
	  });
	});

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Third Party Libraries
	var $ = __webpack_require__(62);
	var _ = __webpack_require__(63);

	// Initialise Storage

	var storage = new _storage2.default();

	var api = __webpack_require__(120);
	var core = __webpack_require__(121);

	var settingsMenuClickedCallback = function settingsMenuClickedCallback(id) {
	  var save = $('.settings.dropdown .save.button');
	  if (id === 'htmlcode') {
	    save.fadeOut();
	  } else {
	    save.fadeIn();
	  }
	};

	function loadSettings(data) {

	  // Settings
	  core.settings = data;
	  storage.set('settings', core.settings);

	  // General Settings
	  $('#siteaddress').val(data.SiteAddress);
	  $('#livehelpname').val(data.Name);
	  if (data.VisitorTracking !== 0) {
	    $('#visitortracking-enable, .visitortracking.checkbox').prop('checked', true).change();
	  } else {
	    $('#visitortracking-disable, .visitortracking.checkbox').prop('checked', false).change();
	  }
	  if (data.Departments !== 0) {
	    $('#departments-enable, .departments.checkbox').prop('checked', true).change();
	  } else {
	    $('#departments-disable, .departments.checkbox').prop('checked', false).change();
	  }
	  $('#welcomenote').val(data.WelcomeMessage);
	  $('#language').empty();
	  $('#supportaddress').val(data.SupportAddress);

	  var languages = data.Language.Available.split(', ');
	  var locales = [{ code: 'af', name: 'Afrikaans' }, { code: 'ar', name: 'Arabic' }, { code: 'be', name: 'Belarusian' }, { code: 'bg', name: 'Bulgarian' }, { code: 'ca', name: 'Catalan' }, { code: 'zh', name: 'Chinese' }, { code: 'cs', name: 'Czech' }, { code: 'da', name: 'Danish' }, { code: 'de', name: 'German' }, { code: 'el', name: 'Greek' }, { code: 'en', name: 'English' }, { code: 'es', name: 'Spanish' }, { code: 'et', name: 'Estonian' }, { code: 'eu', name: 'Basque' }, { code: 'fa', name: 'Farsi' }, { code: 'fi', name: 'Finnish' }, { code: 'fo', name: 'Faroese' }, { code: 'fr', name: 'French' }, { code: 'ga', name: 'Irish' }, { code: 'gd', name: 'Gaelic' }, { code: 'gl', name: 'Galician' }, { code: 'hr', name: 'Croatian' }, { code: 'hu', name: 'Hungarian' }, { code: 'id', name: 'Indonesian' }, { code: 'is', name: 'Icelandic' }, { code: 'it', name: 'Italian' }, { code: 'he', name: 'Hebrew' }, { code: 'hi', name: 'Hindi' }, { code: 'ja', name: 'Japanese' }, { code: 'ko', name: 'Korean' }, { code: 'lt', name: 'Lithuanian' }, { code: 'lv', name: 'Latvian' }, { code: 'mk', name: 'Macedonian (FYROM)' }, { code: 'mt', name: 'Maltese' }, { code: 'nl', name: 'Dutch' }, { code: 'no', name: 'Norwegian' }, { code: 'pl', name: 'Polish' }, { code: 'pt', name: 'Portuguese' }, { code: 'rm', name: 'Rhaeto-Romanic' }, { code: 'ro', name: 'Romanian' }, { code: 'ru', name: 'Russian' }, { code: 'sb', name: 'Sorbian' }, { code: 'sk', name: 'Slovak' }, { code: 'sl', name: 'Slovenian' }, { code: 'sr', name: 'Serbian' }, { code: 'sq', name: 'Albanian' }, { code: 'sv', name: 'Swedish' }, { code: 'sx', name: 'Sutu' }, { code: 'sz', name: 'Sami (Lappish)' }, { code: 'th', name: 'Thai' }, { code: 'tn', name: 'Tswana' }, { code: 'tr', name: 'Turkish' }, { code: 'ts', name: 'Tsonga' }, { code: 'uk', name: 'Ukrainian' }, { code: 'ur', name: 'Urdu' }, { code: 've', name: 'Venda' }, { code: 'vi', name: 'Vietnamese' }, { code: 'xh', name: 'Xhosa' }, { code: 'ji', name: 'Yiddish' }, { code: 'zu', name: 'Zulu' }];

	  $.each(languages, function (key, language) {
	    var locale = '';
	    $.each(locales, function (index, value) {
	      if (language == value.code) {
	        locale = value.name;
	        return false;
	      }
	    });
	    $('<option value="' + language + '">' + locale + '</option>').appendTo('#language');
	  });
	  $('#language').val(data.Language.Locale);
	  updateLanguage(data.Language.Locale);

	  // Appearance Settings
	  var templates = $('#template');
	  templates.find('option').remove();
	  $.each(data.Templates, function (key, value) {
	    templates.append('<option value="' + value.value + '">' + value.name + '</option>');
	  });
	  templates.val(data.Template);

	  if (data.Smilies !== 0) {
	    $('#smilies-enable, .smilies.checkbox').prop('checked', true).change();
	    enableSmilies();
	  } else {
	    $('#smilies-disable, .smilies.checkbox').prop('checked', false).change();
	    disableSmilies();
	  }

	  $('.settings .layout .option').removeClass('selected');
	  if (data.Sidebar !== 0) {
	    $('.settings .layout .docked').addClass('selected');
	  } else {
	    $('.settings .layout .tab').addClass('selected');
	  }

	  $('.settings .button-images .button-example').removeClass('selected');
	  if (data.ChatButtonImage) {
	    $('.settings .button-images .button-example[data-type="' + data.ChatButtonImage + '"]').addClass('selected');
	  }

	  $('#backgroundcolor').val(data.BackgroundColor);
	  $('#generalfont').val(data.Font.Type);
	  $('#generalfontsize').val(data.Font.Size);
	  $('#generalfontcolor').val(data.Font.Color);
	  $('#generalfontlinkcolor').val(data.Font.LinkColor);
	  $('#guestchatfont').val(data.ChatFont.Type);
	  $('#guestchatfontsize').val(data.ChatFont.Size);
	  $('#sentcolor').val(data.ChatFont.SentColor);
	  $('#receivedcolor').val(data.ChatFont.ReceivedColor);
	  $('#chatwindowsize').val(data.ChatWindowSize.Width + ' x ' + data.ChatWindowSize.Height);

	  $('#backgroundcolor, #sentcolor, #receivedcolor, #generalfontcolor, #generalfontlinkcolor').minicolors();

	  if (data.Theme) {
	    var themes = ['default', 'green', 'turquoise', 'blue', 'purple', 'pink', 'orange'];
	    var settings = $('.settings .settings-appearance');
	    if ($.inArray(data.Theme, themes) > -1) {
	      settings.find('.themes .' + data.Theme).addClass('selected');
	      settings.find('.button-example.selected').addClass(data.Theme);
	    }
	  }

	  // HTML5 Alerts / Safari / WebKit
	  if (window.webkitNotifications || 'Notification' in window) {
	    $('#html5-notifications-enable, .html5-notifications.checkbox').attr('checked', 'checked');
	    if (storage.get('html5-notifications')) {
	      core.checkHTML5NotificationsPermission();
	    } else {
	      $('#html5-notifications-enable, .html5-notifications.checkbox').prop('checked', false).change();
	    }
	  } else {
	    $('#html5-notifications-enable, .html5-notifications.checkbox').prop('checked', false).change();
	    $('.html5-notifications input').attr('disabled', 'disabled');
	    storage.set('html5-notifications', false);
	  }

	  // Images
	  $('#logo').val(data.Logo);
	  $('#initiatechatlogo').val(data.InitiateChat.Logo);

	  if (data.Feedback) {
	    $('#feedbacklogo').val(data.Feedback.Logo);
	  }

	  $('#campaignimage').val(data.Campaign.Image);
	  $('#campaignlink').val(data.Campaign.Link);
	  $('#onlineimage').val(data.OnlineLogo);
	  $('#offlineimage').val(data.OfflineLogo);

	  if (data.BeRightBackLogo !== false) {
	    $('#berightbackimage').val(data.BeRightBackLogo);
	  } else {
	    $('#berightbackimage, .berightbackimage').hide();
	  }

	  if (data.AwayLogo !== false) {
	    $('#awayimage').val(data.AwayLogo);
	  } else {
	    $('#awayimage, .awayimage').hide();
	  }

	  // HTML Code
	  $('#htmlcodestep1').val(data.Code.Head);
	  $('#htmlcodestep2').val(data.Code.Image);

	  // Email
	  $('#emailaddress').val(data.Email);
	  $('#offlineurlredirection').val(data.OfflineEmail.Redirect);
	  if (data.OfflineEmail.Enabled !== 0) {
	    $('#email-enable, .email.checkbox').prop('checked', true).change();
	  } else {
	    $('#email-disable, .email.checkbox').prop('checked', false).change();
	  }

	  // Initiate Chat
	  $('#autoinitiatechat-enable').change(function () {
	    if ($(this).is(':checked')) {
	      $('.autoinitiate-pageviews').fadeIn();
	    }
	  });
	  $('#autoinitiatechat-disable').change(function () {
	    if ($(this).is(':checked')) {
	      $('.autoinitiate-pageviews').fadeOut();
	    }
	  });
	  if (data.InitiateChat.Auto > 0) {
	    $('#autoinitiatechat-enable, .autoinitiatechat.checkbox').prop('checked', true).change();
	    $('#autoinitiatechat-pages').val(data.InitiateChat.Auto);
	    $('.autoinitiate-pageviews').fadeIn();
	  } else {
	    $('#autoinitiatechat-disable, .autoinitiatechat.checkbox').prop('checked', false).change();
	    $('#autoinitiatechat-pages').val(data.InitiateChat.Auto);
	    $('.autoinitiate-pageviews').hide();
	  }

	  $('#initiatechatdelay').val(data.InitiateChat.Delay).change();
	  if (core.settings.Version.Server < 5.2) {
	    $('.initiatechatdelay').hide();
	  }

	  $('#verticalalignment').val(data.InitiateChat.Vertical);
	  $('#horizontalalignment').val(data.InitiateChat.Horizontal);

	  // Privacy
	  var guestdetails = $('.guestemailaddress, .guestquestion, .guestlogindetailsrequired');
	  if (data.LoginDetails.Enabled !== 0) {
	    $('#guestlogindetails-enable, .guestlogindetails.checkbox').prop('checked', true).change();
	    guestdetails.show();
	  } else {
	    $('#guestlogindetails-disable, .guestlogindetails.checkbox').prop('checked', false).change();
	    guestdetails.hide();
	  }

	  if (data.LoginDetails.Required !== 0) {
	    $('#guestlogindetailsrequired-enable, .guestlogindetailsrequired.checkbox').prop('checked', true).change();
	    guestdetails.show();
	  }

	  $('#guestlogindetails-enable, #guestlogindetails-disable').change(function () {
	    var guestdetails = $('.guestemailaddress, .guestquestion, .guestlogindetailsrequired');
	    if ($('#guestlogindetails-enable').is(':checked')) {
	      guestdetails.show();
	    } else {
	      guestdetails.hide();
	    }
	  });

	  if (data.LoginDetails.Email !== 0) {
	    $('#guestemailaddress-enable, .guestemailaddress.checkbox').prop('checked', true).change();
	  } else {
	    $('#guestemailaddress-disable, .guestlogindetails.checkbox').prop('checked', false).change();
	  }
	  if (data.LoginDetails.Question !== 0) {
	    $('#guestquestion-enable, .guestquestion.checkbox').prop('checked', true).change();
	  } else {
	    $('#guestquestion-disable, .guestquestion.checkbox').prop('checked', false).change();
	  }
	  if (data.SecurityCode !== 0) {
	    $('#securitycode-enable, .securitycode.checkbox').prop('checked', true).change();
	  } else {
	    $('#securitycode-disable, .securitycode.checkbox').prop('checked', false).change();
	  }
	  $('#telephone').val(data.Telephone);
	  $('#address').val(data.Address);

	  // Version
	  if (data.Version !== undefined) {
	    var version = data.Version.Server;
	    if (version >= 4.1) {
	      $('.visitors-list.button, .visitors-map.button').css('display', 'inline-block');
	    }
	  }

	  $(document).trigger('LiveHelp.SettingsLoaded', core.settings);
	}

	function processLanguage(data) {
	  core.locale = data;

	  $(document).trigger('LiveHelp.LocaleUpdated');

	  var elements = $('[data-lang-key]');
	  $.each(elements, function (key, element) {
	    element = $(element), key = element.attr('data-lang-key');

	    element.text(data[key]);
	  });

	  storage.set('locale', core.locale);
	}

	var updateLanguage = function updateLanguage(language) {

	  $.ajax({ url: core.address + 'locale/' + language + '/admin.json',
	    type: 'GET',
	    success: function success(data) {
	      // Process Language Pack
	      if (data !== undefined) {
	        processLanguage(data);
	      }
	    },
	    dataType: 'json'
	  });
	};

	function enableSmilies() {
	  $('.smilies.button').show();
	}

	function disableSmilies() {
	  $('.smilies.button').hide();
	}

	function requestHTML5NotificationsPermission() {
	  if (window.webkitNotifications || 'Notification' in window) {
	    if (window.webkitNotifications) {
	      window.webkitNotifications.requestPermission(core.checkHTML5NotificationsPermission);
	    } else if ('Notification' in window) {
	      Notification.requestPermission(function (permission) {
	        if (!('permission' in Notification)) {
	          Notification.permission = permission;
	        }
	        core.checkHTML5NotificationsPermission();
	      });
	    } else {
	      storage.set('html5-notifications', false);
	    }
	  } else {
	    $('.html5-notifications input').attr('disabled', 'disabled');
	    storage.set('html5-notifications', false);
	  }
	}

	function openSettings(section) {
	  var settings = $('.settings.dropdown');
	  var menu = settings.find('.settingsmenu');
	  var toolbar = settings.find('.button-toolbar');

	  $('.visitors-grid .slick-viewport').addClass('no-scroll');
	  $('.accounts.slider, .responses.slider, .chat-stack, .section.settings-integrations').hide();
	  menu.show();

	  $(document).trigger('LiveHelp.CloseHistory');

	  if (section !== undefined && section.length > 0) {
	    menu.find('div').removeClass('selectedLava');
	    menu.find('#' + section).addClass('selectedLava');
	    openSettingsMenu(section);
	  } else {
	    settings.find('.section').hide();
	    menu.find('#general').click();
	    settings.find('.section.settings-general').show();
	  }
	  toolbar.animate({ bottom: '15px' }, 250, 'easeInOutBack');

	  if (settings.is(':hidden')) {

	    // Access Level
	    var menus = $('.settingsmenu > div:not(#htmlcode, #alerts, .backLava)');
	    if (core.config.operator.access >= 2) {
	      menus.remove();
	      if (section === undefined) {
	        menu.find('#alerts').click();
	      }
	    }

	    $(document).trigger('LiveHelp.SettingsOpened');
	    $('.settings.container').show();

	    settings.show();
	    settings.find('#general').mouseover();

	    // Settings Menu
	    if (menu.find('.backLava').length === 0) {
	      menu.lavaLamp({ target: 'div', container: 'div', speed: 250, includeMargins: true, easing: 'easeOutBack', fx: 'easeOutBack' });
	    }

	    // Settings AJAX / Grid
	    api.apiRequest({
	      url: api.apiEndpoint.settings,
	      success: function success(data) {
	        // Settings JSON
	        if (data.Settings !== undefined) {
	          loadSettings(data.Settings);
	        }
	      }
	    });

	    // HTML5 Notifications
	    $('#html5-notifications-enable, #html5-notifications-disable').change(function () {
	      if ($('#html5-notifications-enable').is(':checked')) {
	        requestHTML5NotificationsPermission();
	      } else {
	        $(this).attr('disabled', 'disabled');
	        storage.set('html5-notifications', false);
	      }
	    });
	  }
	}

	function openSettingsMenu(menu) {
	  switch (menu) {
	    case 'htmlcode':
	      $(document).trigger('LiveHelp.SettingsHTMLCodeClick');

	      // Settings HTML Code Copy
	      if (core.zclip) {
	        $('.copy.step1, .copy.step2').off('copy afterCopy');
	        $('.copy.step1').on('copy', function (e) {
	          e.clipboardData.clearData();
	          e.clipboardData.setData('text/plain', $('textarea#htmlcodestep1').val());
	          e.preventDefault();
	        }).on('afterCopy', function () {
	          $('textarea#htmlcodestep1').pulse({ backgroundColor: ['#dbf3f8', '#ffffff'] }, 500, 2);
	        });
	        $('.copy.step2').on('copy', function (e) {
	          e.clipboardData.clearData();
	          e.clipboardData.setData('text/plain', $('textarea#htmlcodestep2').val());
	          e.preventDefault();
	        }).on('afterCopy', function () {
	          $('textarea#htmlcodestep2').pulse({ backgroundColor: ['#dbf3f8', '#ffffff'] }, 500, 2);
	        });
	      }
	      break;
	    case 'integrations':
	      $('.settingsmenu').hide();
	      break;
	  }

	  // Open Menu
	  var section = $('.settings-' + menu);
	  var sections = section.parent().find('.section');

	  settingsMenuClickedCallback(menu);

	  section.show();
	  $.each(sections, function (key, value) {
	    var element = $(value);
	    if (element.attr('class').indexOf('settings-' + menu) == -1) {
	      element.hide();
	    }
	  });
	}

	var saveSettingsCallback = function saveSettingsCallback() {
	  // Show Progress
	  var dialog = $('.settings.dialog');
	  dialog.find('.progressring').show();
	  dialog.find('.title').text('Saving Settings');
	  dialog.find('.description').text('One moment while your settings are saved.');
	  dialog.show().animate({ bottom: 0 }, 250, 'easeInOutBack');
	};

	var saveSettingsCompletedCallback = function saveSettingsCompletedCallback() {
	  // Settings Saved
	  window.setTimeout(function () {
	    var dialog = $('.settings.dialog');
	    dialog.find('.progressring').hide();
	    dialog.find('.title').text('Settings Saved Successfully');
	    dialog.find('.description').text('Your settings were saved successfully.');

	    // Hide Progress
	    dialog.delay(1000).show().animate({ bottom: -90 }, 250, 'easeInOutBack');
	  }, 500);
	};

	var saveSettingsErrorCallback = function saveSettingsErrorCallback() {
	  // Settings Error
	  var dialog = $('.settings.dialog');
	  dialog.find('.progressring').hide();
	  dialog.find('.title').text('Error Saving Settings');
	  dialog.find('.description').text('An error occurred while saving the settings.  Please contact technical support.');

	  // Hide Progress
	  dialog.delay(3000).show().animate({ bottom: -90 }, 250, 'easeInOutBack');
	};

	var overrideSettingsCallback = function overrideSettingsCallback(settings) {
	  return settings;
	};

	function saveSettings() {

	  // Access Level
	  if (core.config.operator.access >= 2) {
	    return;
	  }

	  var smilies = $('#settings #smilies-enable').is(':checked') ? -1 : 0;
	  var visitortracking = $('#settings #visitortracking-enable').is(':checked') ? -1 : 0;
	  var departments = $('#settings #departments-enable').is(':checked') ? -1 : 0;
	  var offlineemail = $('#settings #email-enable').is(':checked') ? -1 : 0;
	  var loginemail = $('#settings #guestemailaddress-enable').is(':checked') ? -1 : 0;
	  var loginquestion = $('#settings #guestquestion-enable').is(':checked') ? -1 : 0;
	  var initiatechatauto = $('#settings #autoinitiatechat-disable:checked').length > 0 ? -1 : $('#settings #autoinitiatechat-pages').val();
	  var securitycode = $('#settings #securitycode-enable').is(':checked') ? -1 : 0;
	  var logindetails = $('#settings #guestlogindetails-enable').is(':checked') ? -1 : 0;
	  var loginrequired = $('#settings #guestlogindetailsrequired-enable').is(':checked') ? -1 : 0;
	  var chatwindowsize = $('#settings select#chatwindowsize').val();
	  var windowsize = { width: parseInt(chatwindowsize.substring(0, chatwindowsize.indexOf(' x ')), 10), height: parseInt(chatwindowsize.substring(chatwindowsize.indexOf(' x ') + 3), 10) };
	  var sidebar = $('#settings .layout .docked').is('.selected') ? -1 : 0;

	  // Button Image
	  var buttonimage = $('#button-images .button-example.selected').attr('data-type');
	  if (buttonimage === 'custom') {
	    var image = $('#settings #chatbuttonimage').val();
	    if (image.indexOf('http://') > -1 || image.indexOf('https://') > -1) {
	      buttonimage = image;
	    }
	  }

	  var settings = {
	    URL: $('#settings #siteaddress').val(),
	    Email: $('#settings #emailaddress').val(),
	    Name: $('#settings #livehelpname').val(),
	    Logo: $('#settings #logo').val(),
	    InitiateChatLogo: $('#settings #initiatechatlogo').val(),
	    Introduction: $('#settings #welcomenote').val(),
	    Smilies: smilies,
	    Font: $('#settings #generalfont').val(),
	    FontSize: $('#settings #generalfontsize').val(),
	    FontColor: $('#settings #generalfontcolor').val(),
	    ChatFont: $('#settings #guestchatfont').val(),
	    SentFontColor: $('#settings #sentcolor').val(),
	    ReceivedFontColor: $('#settings #receivedcolor').val(),
	    LinkColor: $('#settings #generalfontlinkcolor').val(),
	    BackgroundColor: $('#settings #backgroundcolor').val(),
	    ChatFontSize: $('#settings #guestchatfontsize').val(),
	    OfflineLogo: $('#settings #offlineimage').val(),
	    OnlineLogo: $('#settings #onlineimage').val(),
	    OfflineEmailLogo: $('#settings #offlineimage').val(),
	    BeRightBackLogo: $('#settings #berightbackimage').val(),
	    AwayLogo: $('#settings #awayimage').val(),
	    LoginDetails: logindetails,
	    LoginEmail: loginemail,
	    LoginQuestion: loginquestion,
	    OfflineEmail: offlineemail,
	    OfflineEmailRedirect: $('#settings #offlineurlredirection').val(),
	    SecurityCode: securitycode,
	    Departments: departments,
	    VisitorTracking: visitortracking,
	    Locale: $('#settings #language').val(),
	    InitiateChatVertical: $('#settings #verticalalignment').val(),
	    InitiateChatHorizontal: $('#settings #horizontalalignment').val(),
	    InitiateChatAuto: initiatechatauto,
	    InitiateChatDelay: $('#settings #initiatechatdelay').val(),
	    ChatUsername: -1,
	    CampaignImage: $('#settings #campaignimage').val(),
	    CampaignLink: $('#settings #campaignlink').val(),
	    IP2Country: -1,
	    ChatWindowWidth: windowsize.width,
	    ChatWindowHeight: windowsize.height,
	    RequireGuestDetails: loginrequired,
	    Template: $('#settings #template').val(),
	    Telephone: $('#settings #telephone').val(),
	    Address: $('#settings #address').val(),
	    Sidebar: sidebar,
	    SupportAddress: $('#settings #supportaddress').val(),
	    FeedbackLogo: $('#settings #feedbacklogo').val(),
	    Theme: $('#themes .theme.selected').attr('data-type'),
	    ChatButtonImage: buttonimage
	  };

	  // Save Settings
	  saveSettingsCallback();

	  // Override Settings Callback
	  settings = overrideSettingsCallback(settings);

	  // Settings AJAX / Grid
	  api.apiRequest({
	    url: api.apiEndpoint.settings,
	    data: settings,
	    success: function success(data) {
	      // Settings JSON
	      if (data.Settings !== undefined) {
	        loadSettings(data.Settings);
	        saveSettingsCompletedCallback();
	      } else {
	        saveSettingsErrorCallback();
	      }
	    },
	    error: function error() {
	      saveSettingsErrorCallback();
	    }
	  });
	}

	function closeSettings() {
	  $('.miniColors-selector').hide();
	  $('.settings.dropdown').animate({ height: 0, opacity: 0 }, 250, 'easeInOutBack', function () {
	    $(this).hide();
	    $('.settings.container').hide();
	    $(this).find('.button-toolbar').animate({ bottom: '-90px' }, 250, 'easeInOutBack');
	  });
	  core.switchPreviousMenu();
	}

	$(document).on('LiveHelp.OpenSettings', function (event, section) {
	  // Open Settings
	  openSettings(section);
	});

	$(document).on('LiveHelp.SettingsInitialised', function (event, settings) {
	  // Load Settings
	  loadSettings(settings);
	});

	// Document Ready
	$(document).ready(function () {

	  // Settings Events
	  $('.settings.dropdown .close, .settings.dropdown .cancel').click(function () {
	    closeSettings();
	    return false;
	  });

	  $(document).on('LiveHelp.CloseSettings', function () {
	    closeSettings();
	  });

	  // Change Settings to Switches
	  $('.settings.dropdown .checkbox.toggle').each(function (key, value) {
	    var element = $(value);
	    var css = element.attr('class').replace(/checkbox|toggle/g, '').trim();
	    var disabled = element.is('.disabled') ? ' disabled="disabled"' : '';
	    var toggle = $('<label class="switch"><input type="checkbox" class="checkbox ' + css + ' ios-switch"' + disabled + '/><div><div></div></div></label>').appendTo(element);
	    var checkbox = toggle.find('.checkbox');

	    checkbox.on('change', function () {
	      var enable = element.find('.radios .enable');
	      var disable = element.find('.radios .disable');

	      if ($(this).is(':checked')) {
	        enable.prop('checked', true).change();
	      } else {
	        disable.prop('checked', true).change();
	      }
	    });
	  });

	  // Save Settings
	  $('.settings.dropdown .save').on('click', function (e) {
	    saveSettings();
	    e.stopPropagation();
	  });

	  $('.settingsmenu div').on('click', function () {
	    var id = $(this).attr('id');
	    var route = 'settings/' + id;

	    storage.set('route', route);
	    core.router.setRoute(route);

	    $(document).trigger('LiveHelp.RouteChanged');
	  });

	  // Chat Layout
	  $('.settings .layout .option').on('click', function () {
	    $('.settings .layout .option.selected').removeClass('selected');
	    $(this).addClass('selected');
	  });

	  // Chat Theme
	  $('.settings .theme .option').on('click', function () {
	    $('.settings .theme .option.selected').removeClass('selected');
	    $(this).addClass('selected');

	    var settings = $('.settings .settings-appearance');
	    var themes = ['default', 'green', 'turquoise', 'blue', 'purple', 'pink', 'orange'];
	    var theme = $(this).attr('data-type');
	    if ($.inArray(theme, themes) > -1) {
	      var remove = _.reject(themes, function (obj) {
	        return obj === theme;
	      });
	      settings.find('.button-example').removeClass(remove.join(' ')).addClass(theme);
	    }
	  });

	  // Chat Button Images
	  $('.button-images .button-example').on('click', function () {
	    var themes = ['default', 'green', 'turquoise', 'blue', 'purple', 'pink', 'orange'];
	    var theme = $('.settings .theme .option.selected').attr('data-type');
	    if ($.inArray(theme, themes) > -1) {
	      $('.button-images .button-example.selected').removeClass('selected');
	      $(this).addClass('selected ' + theme);
	    }
	  });

	  // Custom Chat Button Image
	  $('.settings #chatbuttonimage').on('change', function () {
	    var image = $(this).val();
	    var example = $('.button-images .button-example.custom');

	    var extension = image.substr(-4);
	    var extensions = ['.png', '.svg', '.jpg', '.gif'];
	    if ((image.substr(0, 7).indexOf('http://') > -1 || image.substr(0, 8).indexOf('https://') > -1) && $.inArray(extension, extensions) > -1) {
	      $('<img />').load(function () {
	        // Show Example
	        $('.button-images .button-example.selected').removeClass('selected');
	        example.css('background-image', 'url("' + image + '")');
	        example.addClass('selected image');
	      }).attr('src', image);
	    } else {
	      example.removeClass('selected image');
	      $('.button-images .button-example.chatstack').addClass('selected');
	    }
	  });

	  // Initiate Chat Delay
	  var updateInitiateDelay = function updateInitiateDelay() {
	    var value = $(this).val();
	    var immediately = $('.initiatechatdelay .immediately');
	    var seconds = $('.initiatechatdelay .seconds');

	    if (value > 0) {
	      $('.initiatechatdelay-value').text(value);
	      immediately.hide();
	      seconds.show();
	    } else {
	      seconds.hide();
	      immediately.show();
	    }
	  };

	  var delay = $('#initiatechatdelay');
	  delay.on('change', updateInitiateDelay);
	  delay.on('mousemove', _.debounce(updateInitiateDelay, 10));
	});

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _storage = __webpack_require__(56);

	var _storage2 = _interopRequireDefault(_storage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*global Slick:true d3:true*/

	// Third Party Libraries
	var $ = __webpack_require__(62);

	// Initialise Storage

	var storage = new _storage2.default();

	var api = __webpack_require__(120);
	var core = __webpack_require__(121);
	var convert = __webpack_require__(145);
	var moment = __webpack_require__(66);
	var MD5 = __webpack_require__(146);

	var visitorsGrid;
	var visitorsDataView;
	var visitorsTimer = true;
	var visitorsTimestamp = false;
	var visitorsTimeout = false;
	var visitorsGridOptions = {
	  rowHeight: 45,
	  enableCellNavigation: true,
	  enableColumnReorder: true,
	  multiColumnSort: true,
	  multiSelect: false
	};
	var visitorOpen = -1;

	function openVisitor(data) {
	  var id = parseInt(data.ID, 10);
	  var operator = data.Status !== undefined && data.Status !== 0 ? true : false;
	  if (visitorOpen !== id && !operator) {
	    var visitor = $('#visitor-details');
	    var current = visitor.find('.details').data('visitor');
	    var visit = current !== undefined && current !== false ? parseInt(current.ID, 10) : -1;

	    // Update Details
	    if (data.title === undefined && visit !== parseInt(data.ID, 10)) {
	      visitorOpen = id;

	      // Visitor Trigger
	      $(document).trigger('LiveHelp.OpenVisitorIntegration', data);

	      // Visitor Details
	      visitor.find('.details').data('visitor', data);

	      var size = window.devicePixelRatio > 1 ? 192 : 96;
	      var image = 'https://secure.gravatar.com/avatar/' + MD5(data.Email).toString() + '?s=' + size + '&r=g&d=404';
	      var avatar = visitor.find('.avatar');

	      $('<img/>').one('error', function () {
	        avatar.attr('src', './images/Placeholder.png');
	      }).one('load', function () {
	        var image = $(this).attr('src');
	        avatar.attr('src', image);
	      }).attr('src', image);

	      visitor.find('.image').addClass('show');

	      var name = data.Hostname;
	      if (data.Username) {
	        name = data.Username;
	      }
	      visitor.find('.name').text(name);

	      var useragent = visitor.find('#useragent-image');
	      var section = visitor.find('.section.useragent');

	      if (data.UserAgent !== undefined) {
	        visitor.find('#useragent').text(data.UserAgent);
	        image = convert.browserIcon(data.UserAgent, false).image;
	        if (useragent.length === 0) {
	          $('<img id="useragent-image" src="' + image + '"/>').prependTo(visitor.find('.useragent.value'));
	        } else {
	          useragent.attr('src', image);
	        }
	        section.show();
	      } else {
	        section.hide();
	      }

	      var session = parseInt(data.Session, 10);
	      if (session > 0) {
	        var chat = $('.chat-stack .chat[data-id="' + session + '"][data-operator=false]');
	        if (chat !== false) {
	          var rating = chat.attr('data-rating');
	          section = $('#visitor-details .section.rating');
	          if (rating) {
	            section.find('.rating[data-rating="' + rating + '"]').addClass('selected');
	            section.show();
	          } else {
	            section.hide();
	          }
	        }
	      }

	      section = visitor.find('.section.resolution');
	      if (data.Resolution !== undefined) {
	        visitor.find('#resolution').text(data.Resolution);
	        section.show();
	      } else {
	        section.hide();
	      }

	      section = visitor.find('.section.location');
	      if (data.Country !== undefined) {
	        var country = section.find('.country');
	        section.find('#country-image').removeAttr('class').addClass(convert.countryIcon(data.Country));
	        section.find('#country').text(convert.country(data));
	        section.show();
	      } else {
	        address1.addClass('hidden');
	        section.hide();
	      }

	      section = visitor.find('.section.address');
	      var address1 = section.find('.address1');
	      var address2 = section.find('.address2');
	      var city = section.find('.city');
	      var state = section.find('.state');
	      var postcode = section.find('.postcode');
	      var country = section.find('.country');
	      if (data.Address !== undefined) {
	        var address = data.Address;
	        if (address.Address1) {
	          address1.text(address.Address1).removeClass('hidden');
	        }
	        if (address.Address2) {
	          address2.text(address.Address2).removeClass('hidden');
	        }
	        if (address.City) {
	          city.text(address.City).removeClass('hidden');
	        }
	        if (address.State) {
	          state.text(address.State).removeClass('hidden');
	        }
	        if (address.Postcode) {
	          postcode.text(address.Postcode).removeClass('hidden');
	        }
	        if (address.Country) {
	          country.text(address.Country).removeClass('hidden');
	        }
	        section.removeClass('hidden');
	      } else {
	        section.addClass('hidden');
	      }

	      section = visitor.find('.section.ipaddress');
	      if (data.Hostname) {
	        visitor.find('.ipaddress.value').text(data.Hostname);
	        section.removeClass('hidden');
	      } else {
	        section.addClass('hidden');
	      }

	      section = visitor.find('.section.email');
	      if (data.Email) {
	        visitor.find('#email').text(data.Email);
	        section.removeClass('hidden');
	      } else {
	        section.addClass('hidden');
	      }

	      // Custom Sections
	      if (data.Groups !== undefined) {
	        var groups = data.Groups;
	        groups.forEach(function (group, index) {
	          if (group.Sections !== undefined) {
	            var grouphtml = $('<div class="group custom"></div>');
	            if (grouphtml.name) {
	              grouphtml.addClass(group.name);
	            }
	            group.Sections.forEach(function (section, index) {
	              var emailsection = visitor.find('.section.email');
	              var exists = visitor.find('.section.custom.' + section.ID);
	              var itemhtml = '';
	              if (section.Items !== undefined && !exists.length) {
	                var items = section.Items;
	                var heading = false;
	                items.forEach(function (item, index) {
	                  if (item.Label) {
	                    heading = true;
	                  }
	                  itemhtml += '<div class="label hidden"></div>\
	                    <div class="value custom">\
	                      <span>' + item.Value + '</span>\
	                    </div>';
	                });
	                if (!heading) {
	                  itemhtml = '<div class="label">' + section.Name + '</div>' + itemhtml;
	                }

	                var sectionhtml = '<div class="section custom ' + section.ID + '">\
	                  <div class="icon hidden">\
	                    <i class="fa fa-envelope"></i>\
	                  </div>\
	                  ' + itemhtml + '\
	                </div>';
	                if (section.Position) {
	                  grouphtml.find('.section.' + section.Position).last().append(sectionhtml);
	                } else {
	                  grouphtml.append(sectionhtml);
	                }
	              } else if (exists.length) {
	                exists.removeClass('hidden');
	              }
	            });

	            if (group.Position) {
	              visitor.find('.scroll .group.' + group.Position).last().after(grouphtml);
	            } else {
	              vistor.find('.scroll .group').last().after(grouphtml);
	            }
	          } else {
	            visitor.find('.section.custom').addClass('hidden');
	          }
	        });
	      } else {
	        visitor.find('.scroll .group.custom').remove();
	      }

	      section = visitor.find('.section.referrer');
	      if (data.Referrer !== undefined) {
	        if (data.Referrer != 'Direct Visit / Bookmark') {
	          visitor.find('#referrer .direct').hide();
	          visitor.find('#referrer a').text(convert.referrer(data.Referrer)).attr('href', data.Referrer).show();
	        } else {
	          visitor.find('#referrer a').hide();
	          visitor.find('#referrer .direct').show();
	        }
	        section.show();
	      } else {
	        section.hide();
	      }

	      section = visitor.find('.section.currentpage');
	      if (data.CurrentPage !== undefined) {
	        visitor.find('#currentpage a').text(data.CurrentPage).attr('href', data.CurrentPage);
	        section.show();
	      } else {
	        section.hide();
	      }

	      visitor.find('#chatstatus').text(data.ChatStatus);

	      section = visitor.find('.section.operator');
	      if (data.Operator !== undefined) {
	        visitor.find('#operator').text(data.Operator);
	        section.removeClass('hidden');
	      } else {
	        section.addClass('hidden');
	      }

	      section = visitor.find('.section.department');
	      if (data.Department !== undefined) {
	        visitor.find('#department').text(data.Department);
	        section.removeClass('hidden');
	      } else {
	        section.addClass('hidden');
	      }

	      section = visitor.find('.section.pagehistory');
	      if (data.PagePath !== undefined) {
	        visitor.find('#pagehistory').text(data.PagePath);
	        section.show();
	      } else {
	        section.hide();
	      }

	      var initiate = visitor.find('.btn.initiate');
	      if (data.Active.length > 0) {
	        initiate.addClass('disabled');
	      } else {
	        initiate.removeClass('disabled');
	      }

	      var company = visitor.find('.company');
	      if (data.Company && data.Company.length > 0) {
	        company.text(data.Company);
	        company.removeClass('hidden');
	      } else {
	        company.addClass('hidden');
	      }

	      initiate.popover({
	        container: '#visitor-details',
	        viewport: { selector: '#visitor-details', padding: 10 },
	        title: 'Send Custom Initiate Chat',
	        html: true,
	        placement: 'left',
	        trigger: 'manual',
	        template: '<div class="popover initiate" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div><textarea id="custominitiate" type="text" placeholder="Type your custom initiate chat message and press Enter to send"></textarea></div>'
	      });

	      if (visitor.width() === 0 || visitor.css('display') === 'none') {
	        visitor.show();
	        visitor.addClass('opened');
	        $('.visitors-grid, .chat-stack').addClass('selected');
	      }
	    }
	  }
	}

	function initVisitorsGrid() {

	  if (visitorsGrid === undefined && $('.visitors-grid').length) {
	    var groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();

	    visitorsDataView = new Slick.Data.DataView({
	      groupItemMetadataProvider: groupItemMetadataProvider
	    });

	    // Persist Columns
	    if (visitorsGrid !== undefined) {
	      core.visitorsColumns = visitorsGrid.getColumns();
	    } else {
	      var savedColumns = storage.get('visitorsColumns');
	      $.each(savedColumns, function (key, savedColumn) {
	        $.each(core.visitorsColumns, function (key, visitorColumn) {
	          if (savedColumn.id === visitorColumn.id) {
	            visitorColumn.width = savedColumn.width;
	            return false;
	          }
	        });
	      });
	    }

	    visitorsGrid = new Slick.Grid('.visitors-grid', visitorsDataView, core.visitorsColumns, visitorsGridOptions);
	    visitorsGrid.registerPlugin(groupItemMetadataProvider);
	    visitorsGrid.setSelectionModel(new Slick.RowSelectionModel());

	    visitorsGrid.onColumnsResized.subscribe(function () {
	      var savedColumns = [];
	      $.each(visitorsGrid.getColumns(), function (key, value) {
	        savedColumns.push({ id: value.id, width: value.width });
	      });
	      storage.set('visitorsColumns', savedColumns);
	    });

	    visitorsGrid.onClick.subscribe(function (e, args) {
	      var visitor = visitorsDataView.getItem(args.row);
	      if (visitor !== undefined) {
	        core.selectedVisitor = visitor;
	        openVisitor(visitor);
	      }
	    });

	    visitorsGrid.onSort.subscribe(function (e, args) {
	      var cols = args.sortCols;
	      visitorsDataView.sort(function (dataRow1, dataRow2) {
	        for (var i = 0, l = cols.length; i < l; i++) {
	          var field = cols[i].sortCol.field;
	          var sign = cols[i].sortAsc ? 1 : -1;
	          var value1 = dataRow1[field];
	          var value2 = dataRow2[field];
	          var result = (value1 == value2 ? 0 : value1 > value2 ? 1 : -1) * sign;
	          if (result !== 0) {
	            return result;
	          }
	        }
	        return 0;
	      });
	      visitorsGrid.invalidate();
	      visitorsGrid.render();
	    });

	    visitorsDataView.onRowCountChanged.subscribe(function (e, args) {
	      visitorsGrid.updateRowCount();
	      visitorsGrid.render();

	      // Select Row
	      if (core.selectedVisitor) {
	        var selected = parseInt(core.selectedVisitor.ID, 10);

	        for (var i = 0; i < args.current; i++) {
	          var id = parseInt(visitorsDataView.mapRowsToIds([i])[0], 10);
	          if (selected === id) {
	            visitorsGrid.setSelectedRows([i]);
	            openVisitor(core.selectedVisitor);
	          }
	        }
	      }
	    });

	    visitorsDataView.onRowsChanged.subscribe(function (e, args) {
	      visitorsGrid.invalidateRows(args.rows);
	      visitorsGrid.render();
	    });

	    visitorsDataView.groupBy(function (r) {
	      var status = 'Browsing';
	      if (r.UserAgent.indexOf('Chatstack') > -1) {
	        status = 'Customer';
	      } else if (r.Active < 0) {
	        status = 'Chat Ended';
	      } else if (r.Session > 0) {
	        status = 'Chatting';
	      }
	      return status;
	    }, function (g) {
	      var label = ' visitor';
	      if (g.count > 1) {
	        label = ' visitors';
	      }
	      return g.value + ' - ' + g.count + label;
	    }, function (a, b) {
	      return a.value - b.value;
	    });
	  }
	}

	function updateVisitorsGrid(action, request, total, complete, data) {

	  // Clear Timer
	  if (visitorsTimeout !== false) {
	    window.clearTimeout(visitorsTimeout);
	    visitorsTimeout = false;
	  }

	  if (core.config.session.length > 0) {

	    if (action === undefined) {
	      action = '';
	    }
	    if (request === undefined) {
	      request = '';
	    }
	    if (total === undefined || total.length === 0) {
	      total = 25;
	    }

	    // Web Service URL / Data
	    var post = { 'Action': action, 'Request': request, 'Record': 0, 'Total': total };

	    if (data && data.message) {
	      $.extend(post, { Message: data.message });
	    }

	    // Intialise Grid
	    initVisitorsGrid();

	    // Visitors AJAX / Grid
	    api.apiRequest({
	      url: api.apiEndpoint.visitors,
	      data: post,
	      success: function success(data) {
	        // Visitors JSON
	        if (data.Visitors !== null && data.Visitors !== undefined && data.Visitors.Visitor !== undefined) {

	          $(document).trigger('LiveHelp.VisitorsCompleted', { newVisitors: data.Visitors.Visitor, previousVisitors: core.visitors });

	          core.visitors = data.Visitors.Visitor;

	          // Refresh Data View
	          visitorRefreshDataView(core.visitors, data.Visitors.TotalVisitors);

	          // Complete Callback
	          if (complete) {
	            complete(core.visitors);
	          }
	        } else {
	          visitorRefreshDataView(null, 0);
	        }

	        if (visitorsTimer === true && core.websockets === false) {
	          visitorsTimeout = window.setTimeout(updateVisitorsGrid, 15000);
	        }
	      },
	      error: function error() {
	        if (visitorsTimer === true && core.websockets === false) {
	          visitorsTimeout = window.setTimeout(updateVisitorsGrid, 15000);
	        }
	      }
	    });
	  } else {
	    if (visitorsTimer === true && core.websockets === false) {
	      visitorsTimeout = window.setTimeout(updateVisitorsGrid, 15000);
	    }
	  }
	}

	function visitorRefreshDataView(visitors, total, complete) {

	  var details = $('#visitor-details .details');
	  var visitor = details.data('visitor');
	  var id = 0;

	  if (visitorsTimestamp === false) {
	    visitorsTimestamp = Math.round(new Date().getTime() / 1000);
	  }

	  if (visitors !== null && visitors !== undefined && $('.visitors-grid').length) {

	    // Update Visitor
	    if (visitor !== undefined && details.is(':visible')) {
	      id = parseInt(visitor.ID, 10);
	      $.each(visitors, function (key, value) {
	        if (parseInt(value.ID, 10) === id) {
	          details.find('#chatstatus').text(value.ChatStatus);
	          details.find('#currentpage a').text(value.CurrentPage).attr('href', value.CurrentPage);
	          details.find('#pagehistory').text(value.PagePath);
	          var initiate = details.find('.btn.initiate');
	          if (value.Active.length > 0) {
	            initiate.addClass('disabled');
	          } else {
	            initiate.removeClass('disabled');
	          }
	          return false;
	        }
	      });
	    }

	    // Update Visitor Times
	    $.each(visitors, function (key, visitor) {
	      var time = Math.round(new Date().getTime() / 1000) - visitorsTimestamp;
	      visitor.TimeOnPage = parseInt(visitor.TimeOnPage, 10) + time;
	      visitor.TimeOnSite = parseInt(visitor.TimeOnSite, 10) + time;
	    });
	    visitorsTimestamp = Math.round(new Date().getTime() / 1000);

	    /*
	    // Close Removed Visitor
	    if (visitorOpen > 0) {
	      var exists = _.find(visitors, function (elem) { return parseInt(elem.ID, 10) === visitorOpen; });
	      var chatting = _.find(core.chattingvisitors, function (elem) { return parseInt(elem.ID, 10) === visitorOpen; });
	       // TODO Select Previous Visitor
	      //closeVisitor();
	      if (exists === undefined && chatting === undefined) {
	        //
	      }
	    }
	    */

	    // Initialize DataView
	    visitorsDataView.beginUpdate();
	    visitorsDataView.setItems(visitors, 'ID');
	    var i;
	    for (i = 0; i < visitorsDataView.getGroups().length; i++) {
	      visitorsDataView.expandGroup(visitorsDataView.getGroups()[i].value);
	    }

	    for (i = 0; i < visitorsDataView.getItems().length; i++) {
	      var item = visitorsDataView.getItems()[i];
	      visitorsDataView.updateItem(item.ID, item);
	    }
	    visitorsDataView.endUpdate();
	    visitorsDataView.syncGridSelection(visitorsGrid, true);

	    if (visitorsDataView.getItems().length > 0 && !visitorsGrid.getSelectedRows().length) {
	      var grid = $('.visitors-grid');
	      var rows = grid.find('.slick-row:not(.slick-group)');
	      if (rows.length) {
	        rows.first().find('.slick-cell').first().click();
	      }
	    }

	    if ($('.worldmap').css('display') == 'none') {
	      if (visitors.length > 0) {
	        $('.visitors-empty').hide();
	        $('.visitors-grid, .visitors-menu').show();
	      } else {
	        $('.visitors-grid').hide();
	        $('.visitors-empty, .visitors-menu').show();
	      }
	    }

	    // Update Locations
	    updateLocations();
	  } else {

	    if ($('.worldmap').css('display') == 'none') {
	      $('.visitors-grid').hide();
	      $('.visitors-empty, .visitors-menu').show();
	    }
	  }

	  if (complete !== undefined) {
	    complete();
	  }
	}

	function closeVisitor() {
	  var visitor = $('#visitor-details');

	  visitor.find('.details').data('visitor', false);
	  visitorOpen = -1;

	  visitor.removeClass('opened');
	  $('.visitors-grid, .chat-stack').removeClass('selected');
	  visitor.hide();
	}

	(function () {

	  var updateTime = function updateTime() {

	    var visitors = $('.pending.list .visitor, .transferred.list .visitor');
	    $.each(visitors, function (key, visitor) {
	      visitor = $(visitor);
	      var datetime = moment(visitor.attr('data-datetime'));
	      var seconds = moment().diff(datetime, 'seconds') % 60;
	      var minutes = moment().diff(datetime, 'minutes');
	      var output = minutes > 0 ? minutes + 'm' : seconds + 's';

	      if (!isNaN(minutes) && !isNaN(seconds)) {
	        visitor.find('.time').text(output);
	      }
	    });

	    window.setTimeout(updateTime, 1000);
	  };
	  updateTime();
	})();

	// Visitors World Map
	var projection;
	var locations = {};

	function updateLocations() {
	  var positions = [];
	  var data;

	  if (core.visitors !== undefined && core.visitors.length) {

	    data = core.visitors.filter(function (visitor) {
	      if (visitor.Longitude !== null && visitor.Latitude !== null && visitor.Longitude !== undefined && visitor.Latitude !== undefined && visitor.Longitude > 0 && visitor.Latitude > 0) {
	        positions.push(projection([visitor.Longitude, visitor.Latitude]));
	        return true;
	      }
	      return false;
	    });

	    if ($.isEmptyObject(locations)) {
	      return;
	    }

	    var radius = 5;
	    var map = locations.selectAll('g.node').data(data).attr('id', function (visitor) {
	      return parseInt(visitor.ID, 10);
	    }).on('click', function (visitor) {
	      if (visitor !== undefined) {
	        $(document).trigger('LiveHelp.OpenVisitor', visitor);
	      }
	    });

	    locations.selectAll('circle.dot').data(data).attr('class', 'dot').attr('cx', function (d, i) {
	      return positions[i][0];
	    }).attr('cy', function (d, i) {
	      return positions[i][1];
	    }).attr('r', function () {
	      return Math.sqrt(radius);
	    }).attr('fill', 'rgba(0,187,204,0.5)');

	    locations.selectAll('circle.animate').data(data).attr('class', 'animate').attr('cx', function (d, i) {
	      return positions[i][0];
	    }).attr('cy', function (d, i) {
	      return positions[i][1];
	    }).attr('r', function () {
	      return Math.sqrt(radius);
	    }).attr('fill', 'rgba(0,187,204,1.0)').attr('opacity', 1.0);

	    var group = map.enter().append('svg:g');

	    group.data(data).attr('id', function (visitor) {
	      return parseInt(visitor.ID, 10);
	    }).attr('class', 'node').on('click', function (visitor) {
	      if (visitor !== undefined) {
	        $(document).trigger('LiveHelp.OpenVisitor', visitor);
	      }
	    });

	    group.append('svg:circle').attr('class', 'dot').attr('cx', function (d, i) {
	      return positions[i][0];
	    }).attr('cy', function (d, i) {
	      return positions[i][1];
	    }).attr('r', function () {
	      return Math.sqrt(radius);
	    }).attr('fill', 'rgba(0,187,204,0.5)');

	    group.append('svg:circle').attr('class', 'animate').attr('cx', function (d, i) {
	      return positions[i][0];
	    }).attr('cy', function (d, i) {
	      return positions[i][1];
	    }).attr('r', function () {
	      return Math.sqrt(radius);
	    }).attr('fill', 'rgba(0,187,204,1.0)').attr('opacity', 1.0);

	    map.exit().remove();
	  }
	}

	function drawWorldMap() {

	  var map = $('.worldmap');
	  map.empty();

	  projection = d3.geo.equirectangular().scale(map.width()).translate([map.width() / 2, map.height() / 2]);

	  var path = d3.geo.path().projection(projection);
	  var svg = d3.select('.worldmap').append('svg:svg');
	  var countries = svg.append('svg:g').attr('id', 'countries');

	  locations = svg.append('svg:g').attr('id', 'locations');

	  /* World Map Source: https://gist.github.com/2969317 */
	  d3.json('scripts/world.json', function (collection) {
	    if (collection !== null) {
	      countries.selectAll('path').data(collection.features).enter().append('svg:path').attr('d', path).attr('fill', 'rgba(227,227,227,1)').attr('stroke', 'rgba(177,175,181,1)').attr('stroke-width', 0.5);
	    }
	  });
	}

	exports.initWorldMap = function () {

	  // Draw Map
	  drawWorldMap();

	  var radius = 100;

	  setInterval(function () {
	    if ($('.worldmap').css('display') == 'block') {
	      locations.selectAll('circle.animate').attr('r', function () {
	        return Math.sqrt(5);
	      }).attr('opacity', 1.0).transition().duration(1000).delay(function (d, i) {
	        return i * 10;
	      }).attr('opacity', 0).attr('r', function () {
	        return Math.sqrt(radius);
	      }).each('end', function () {
	        d3.select(this).attr('opacity', 1.0).attr('r', 0);
	      });
	    }
	  }, 2000);
	};

	var debounceMap = function debounceMap(fn, timeout) {
	  var timeoutID = -1;
	  return function () {
	    if (timeoutID > -1) {
	      window.clearTimeout(timeoutID);
	    }
	    timeoutID = window.setTimeout(fn, timeout);
	  };
	};

	var debouncedWorldMap = debounceMap(function () {
	  drawWorldMap();
	  updateLocations();
	}, 125);

	function sendInitiateChat(message) {
	  var details = $('#visitor-details .details');
	  var visitor = details.data('visitor');
	  var button = $('#visitor-details .btn.initiate');
	  var id = parseInt(visitor.ID, 10);
	  var data = false;

	  if (message) {
	    data = { message: message };
	  }

	  // Sending
	  button.text('Sending').attr('disabled', 'disabled').popover('hide');

	  updateVisitorsGrid('Initiate', id, 25, function () {
	    // Reset Button
	    setTimeout(function () {
	      button.text('Initiate Chat').removeAttr('disabled');
	    }, 2000);

	    if (message) {
	      message = 'Sent custom initiate chat message "' + message + '"';
	    } else {
	      message = 'Sent standard initiate chat message';
	    }

	    $('.section.chatstatus .value').text(message);
	  }, data);
	}

	$(window).resize(debouncedWorldMap);

	$(document).on('LiveHelp.OpenVisitor', function (event, visitor) {
	  // Open Visitor
	  openVisitor(visitor);
	});

	$(document).on('LiveHelp.CloseVisitor', function () {
	  // Close Visitor
	  closeVisitor();
	});

	$(document).on('LiveHelp.SignInCompleted', function () {
	  // Update Visitors
	  updateVisitorsGrid();
	});

	$(document).on('LiveHelp.ClearVisitorsTimer', function () {
	  // Clear Timer
	  window.clearTimeout(visitorsTimer);
	});

	// Document Ready
	$(document).ready(function () {

	  // Visitor List
	  $('.visitors-list.button').click(function () {
	    $(this).addClass('selected');
	    $('.visitors-map.button').removeClass('selected');
	    $('.worldmap').hide();
	    if (core.visitors.length > 0) {
	      $('.visitors-grid').fadeIn();
	    } else {
	      $('.visitors-empty').fadeIn();
	    }
	  });

	  // Resize Grid
	  $(window).resize(function () {
	    if (visitorsGrid !== undefined) {
	      visitorsGrid.resizeCanvas();
	    }
	  });

	  // Visitors Map
	  $('.visitors-map.button').click(function () {
	    $(this).addClass('selected');
	    $('.visitors-list.button').removeClass('selected');
	    $('.visitors-empty, .visitors-grid').hide();

	    var parent = $('.worldmap');
	    $('.worldmap svg').attr('width', parent.width()).attr('height', parent.height());
	    $('.worldmap').fadeIn();
	  });

	  // Visitor Details / Initiate Chat
	  $('#visitor-details .btn.initiate').click(function (e) {
	    e.stopPropagation();

	    $(this).popover('toggle');

	    var initiate = $('#custominitiate');
	    if (initiate.is(':visible')) {
	      $('#custominitiate').focus();
	    }
	  });

	  // Custom Initiate Chat
	  $(document).on('keydown', '#custominitiate', 'return', function () {
	    var message = $(this).val();
	    if (message.length) {
	      sendInitiateChat(message);
	      $(this).val('');
	    } else {
	      sendInitiateChat();
	    }
	    return false;
	  });

	  $(document).on('blur', '#custominitiate', function () {
	    if ($('.initiate.popover').is(':visible')) {
	      $('#visitor-details .btn.initiate').popover('hide');
	    }
	  });
	});

/***/ }
/******/ ]);